
Domaci_Blbosti_Regulace_Jasu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000065c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007f4  080007fc  000107fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080007f4  080007f4  000107f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080007f8  080007f8  000107f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000107fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  080007fc  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000001c  080007fc  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000107fc  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000f11  00000000  00000000  0001082c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000456  00000000  00000000  0001173d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000d8  00000000  00000000  00011b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00011c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000079e  00000000  00000000  00011d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000004f2  00000000  00000000  0001249e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00012990  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000001e4  00000000  00000000  00012a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00012bf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080007dc 	.word	0x080007dc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080007dc 	.word	0x080007dc

080001d8 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

  /* TODO - Add your application code here */
GPIOConfigurePin(RGBLED_BLUE,ioPortOutputPushPull);
 80001de:	2200      	movs	r2, #0
 80001e0:	210d      	movs	r1, #13
 80001e2:	4842      	ldr	r0, [pc, #264]	; (80002ec <main+0x114>)
 80001e4:	f000 f8c2 	bl	800036c <GPIOConfigurePin>
GPIOConfigurePin(RGBLED_RED,ioPortOutputPushPull);
 80001e8:	2200      	movs	r2, #0
 80001ea:	210f      	movs	r1, #15
 80001ec:	483f      	ldr	r0, [pc, #252]	; (80002ec <main+0x114>)
 80001ee:	f000 f8bd 	bl	800036c <GPIOConfigurePin>
GPIOConfigurePin(BUTTON_LEFT,ioPortInputFloat);
 80001f2:	2203      	movs	r2, #3
 80001f4:	2105      	movs	r1, #5
 80001f6:	483d      	ldr	r0, [pc, #244]	; (80002ec <main+0x114>)
 80001f8:	f000 f8b8 	bl	800036c <GPIOConfigurePin>
GPIOConfigurePin(BUTTON_RIGHT,ioPortInputFloat);
 80001fc:	2203      	movs	r2, #3
 80001fe:	2104      	movs	r1, #4
 8000200:	483a      	ldr	r0, [pc, #232]	; (80002ec <main+0x114>)
 8000202:	f000 f8b3 	bl	800036c <GPIOConfigurePin>
  /* Infinite loop */
int32_t jas = 200;
 8000206:	23c8      	movs	r3, #200	; 0xc8
 8000208:	607b      	str	r3, [r7, #4]

  while (1)
  {
      if(!GPIORead(BUTTON_RIGHT))
 800020a:	2104      	movs	r1, #4
 800020c:	4837      	ldr	r0, [pc, #220]	; (80002ec <main+0x114>)
 800020e:	f000 fa2b 	bl	8000668 <GPIORead>
 8000212:	4603      	mov	r3, r0
 8000214:	f083 0301 	eor.w	r3, r3, #1
 8000218:	b2db      	uxtb	r3, r3
 800021a:	2b00      	cmp	r3, #0
 800021c:	d02d      	beq.n	800027a <main+0xa2>
      {
	      if(jas>2000) // vytvoøení nelineární regulace, èím menší jas je, tím delší èas potøebuji pøidávat abych ztlumil jas jetì více
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000224:	dd04      	ble.n	8000230 <main+0x58>
	      {
	    	  jas-=300;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800022c:	607b      	str	r3, [r7, #4]
 800022e:	e01a      	b.n	8000266 <main+0x8e>
	      }
	      else if(jas>600)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000236:	dd03      	ble.n	8000240 <main+0x68>
    	  {
    		jas-=100;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	3b64      	subs	r3, #100	; 0x64
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	e012      	b.n	8000266 <main+0x8e>
    	  }else
    	  {
    	  jas -= 20;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	3b14      	subs	r3, #20
 8000244:	607b      	str	r3, [r7, #4]
    	  }
    	  while(!GPIORead(BUTTON_RIGHT))
 8000246:	e00e      	b.n	8000266 <main+0x8e>
    	  {
    	      if(jas<1) // singnalizace maximánlího jasu pomocí rozsvícení èervené LED
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2b00      	cmp	r3, #0
 800024c:	dc0b      	bgt.n	8000266 <main+0x8e>
    	      {
    	    	  jas=0;
 800024e:	2300      	movs	r3, #0
 8000250:	607b      	str	r3, [r7, #4]
    	          GPIOWrite(RGBLED_RED,true);
 8000252:	2201      	movs	r2, #1
 8000254:	210f      	movs	r1, #15
 8000256:	4825      	ldr	r0, [pc, #148]	; (80002ec <main+0x114>)
 8000258:	f000 fa45 	bl	80006e6 <GPIOWrite>
    	    	  GPIOWrite(RGBLED_RED,false);
 800025c:	2200      	movs	r2, #0
 800025e:	210f      	movs	r1, #15
 8000260:	4822      	ldr	r0, [pc, #136]	; (80002ec <main+0x114>)
 8000262:	f000 fa40 	bl	80006e6 <GPIOWrite>
    	  while(!GPIORead(BUTTON_RIGHT))
 8000266:	2104      	movs	r1, #4
 8000268:	4820      	ldr	r0, [pc, #128]	; (80002ec <main+0x114>)
 800026a:	f000 f9fd 	bl	8000668 <GPIORead>
 800026e:	4603      	mov	r3, r0
 8000270:	f083 0301 	eor.w	r3, r3, #1
 8000274:	b2db      	uxtb	r3, r3
 8000276:	2b00      	cmp	r3, #0
 8000278:	d1e6      	bne.n	8000248 <main+0x70>
    	      }
    	  }
        }
      if(!GPIORead(BUTTON_LEFT))
 800027a:	2105      	movs	r1, #5
 800027c:	481b      	ldr	r0, [pc, #108]	; (80002ec <main+0x114>)
 800027e:	f000 f9f3 	bl	8000668 <GPIORead>
 8000282:	4603      	mov	r3, r0
 8000284:	f083 0301 	eor.w	r3, r3, #1
 8000288:	b2db      	uxtb	r3, r3
 800028a:	2b00      	cmp	r3, #0
 800028c:	d01e      	beq.n	80002cc <main+0xf4>
      {
          if(jas>2000)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000294:	dd04      	ble.n	80002a0 <main+0xc8>
          {
        	  jas += 300;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800029c:	607b      	str	r3, [r7, #4]
 800029e:	e00a      	b.n	80002b6 <main+0xde>
          }
    	  else if(jas>600)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80002a6:	dd03      	ble.n	80002b0 <main+0xd8>
    	  {
    		jas+=100;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	3364      	adds	r3, #100	; 0x64
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	e002      	b.n	80002b6 <main+0xde>
    	  }
    	  else
    	  {
    	  jas += 20;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	3314      	adds	r3, #20
 80002b4:	607b      	str	r3, [r7, #4]
    	  }
    	  while(!GPIORead(BUTTON_LEFT))
 80002b6:	bf00      	nop
 80002b8:	2105      	movs	r1, #5
 80002ba:	480c      	ldr	r0, [pc, #48]	; (80002ec <main+0x114>)
 80002bc:	f000 f9d4 	bl	8000668 <GPIORead>
 80002c0:	4603      	mov	r3, r0
 80002c2:	f083 0301 	eor.w	r3, r3, #1
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d1f5      	bne.n	80002b8 <main+0xe0>

    	  }

      }

      GPIOWrite(RGBLED_BLUE,true);
 80002cc:	2201      	movs	r2, #1
 80002ce:	210d      	movs	r1, #13
 80002d0:	4806      	ldr	r0, [pc, #24]	; (80002ec <main+0x114>)
 80002d2:	f000 fa08 	bl	80006e6 <GPIOWrite>
	  GPIOWrite(RGBLED_BLUE,false);
 80002d6:	2200      	movs	r2, #0
 80002d8:	210d      	movs	r1, #13
 80002da:	4804      	ldr	r0, [pc, #16]	; (80002ec <main+0x114>)
 80002dc:	f000 fa03 	bl	80006e6 <GPIOWrite>
      Sleep(jas);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 f804 	bl	80002f0 <Sleep>
      if(!GPIORead(BUTTON_RIGHT))
 80002e8:	e78f      	b.n	800020a <main+0x32>
 80002ea:	bf00      	nop
 80002ec:	40020400 	.word	0x40020400

080002f0 <Sleep>:
  GPIOC -> ODR &= (~(0xff)) ; // bitovou maskou 0000 0000 1111 1111 vynulujeme spodních 8 bitù
  GPIOC -> ODR |= (uint16_t)value; // bitovou masku mám ze vsupního argumentu, pomocí OR nastavím jednièky na mnou požadovaných bitech
  }

  void Sleep(uint32_t value)
  {
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	for(int i = 0;i<value;i++);
 80002f8:	2300      	movs	r3, #0
 80002fa:	60fb      	str	r3, [r7, #12]
 80002fc:	e002      	b.n	8000304 <Sleep+0x14>
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	3301      	adds	r3, #1
 8000302:	60fb      	str	r3, [r7, #12]
 8000304:	68fa      	ldr	r2, [r7, #12]
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	429a      	cmp	r2, r3
 800030a:	d3f8      	bcc.n	80002fe <Sleep+0xe>
  }
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000318:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000350 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800031c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800031e:	e003      	b.n	8000328 <LoopCopyDataInit>

08000320 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000322:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000324:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000326:	3104      	adds	r1, #4

08000328 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000328:	480b      	ldr	r0, [pc, #44]	; (8000358 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800032a:	4b0c      	ldr	r3, [pc, #48]	; (800035c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800032c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800032e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000330:	d3f6      	bcc.n	8000320 <CopyDataInit>
  ldr  r2, =_sbss
 8000332:	4a0b      	ldr	r2, [pc, #44]	; (8000360 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000334:	e002      	b.n	800033c <LoopFillZerobss>

08000336 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000336:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000338:	f842 3b04 	str.w	r3, [r2], #4

0800033c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800033e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000340:	d3f9      	bcc.n	8000336 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000342:	f000 f9f1 	bl	8000728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000346:	f000 fa25 	bl	8000794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800034a:	f7ff ff45 	bl	80001d8 <main>
  bx  lr    
 800034e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000350:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000354:	080007fc 	.word	0x080007fc
  ldr  r0, =_sdata
 8000358:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800035c:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000360:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000364:	2000001c 	.word	0x2000001c

08000368 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000368:	e7fe      	b.n	8000368 <ADC_IRQHandler>
	...

0800036c <GPIOConfigurePin>:
 *      Author: Lapunik
 */
#include "stm_core.h"

bool GPIOConfigurePin(GPIO_TypeDef *gpio,uint32_t bitNumber, ioPortMode mode) // konfigurace GPIO do pøedpøipravených stavù
{
 800036c:	b480      	push	{r7}
 800036e:	b087      	sub	sp, #28
 8000370:	af00      	add	r7, sp, #0
 8000372:	60f8      	str	r0, [r7, #12]
 8000374:	60b9      	str	r1, [r7, #8]
 8000376:	4613      	mov	r3, r2
 8000378:	71fb      	strb	r3, [r7, #7]

	uint32_t enableMask = 0;
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]
	uint32_t resetMask = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]

	switch((uint32_t)gpio) // je potøeba zapnout hodiny podle toho který gpio chceme vyuzivat => ulozime bity pro reset a pro zapnuti do masek a pote masku aplikujeme
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	4a99      	ldr	r2, [pc, #612]	; (80005ec <GPIOConfigurePin+0x280>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d01d      	beq.n	80003c6 <GPIOConfigurePin+0x5a>
 800038a:	4a98      	ldr	r2, [pc, #608]	; (80005ec <GPIOConfigurePin+0x280>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d806      	bhi.n	800039e <GPIOConfigurePin+0x32>
 8000390:	4a97      	ldr	r2, [pc, #604]	; (80005f0 <GPIOConfigurePin+0x284>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d00d      	beq.n	80003b2 <GPIOConfigurePin+0x46>
 8000396:	4a97      	ldr	r2, [pc, #604]	; (80005f4 <GPIOConfigurePin+0x288>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d00f      	beq.n	80003bc <GPIOConfigurePin+0x50>
 800039c:	e027      	b.n	80003ee <GPIOConfigurePin+0x82>
 800039e:	4a96      	ldr	r2, [pc, #600]	; (80005f8 <GPIOConfigurePin+0x28c>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d01a      	beq.n	80003da <GPIOConfigurePin+0x6e>
 80003a4:	4a95      	ldr	r2, [pc, #596]	; (80005fc <GPIOConfigurePin+0x290>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d01c      	beq.n	80003e4 <GPIOConfigurePin+0x78>
 80003aa:	4a95      	ldr	r2, [pc, #596]	; (8000600 <GPIOConfigurePin+0x294>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d00f      	beq.n	80003d0 <GPIOConfigurePin+0x64>
 80003b0:	e01d      	b.n	80003ee <GPIOConfigurePin+0x82>
	{
	case (uint32_t)GPIOA: // GPIOA je definovana konstanta ve formátu "ukazatel", proto msím pøetypovat na celoèíselnou hodnotu
        enableMask = RCC_AHB1ENR_GPIOAEN;
 80003b2:	2301      	movs	r3, #1
 80003b4:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOARST;
 80003b6:	2301      	movs	r3, #1
 80003b8:	613b      	str	r3, [r7, #16]
	break;
 80003ba:	e018      	b.n	80003ee <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOB:
        enableMask = RCC_AHB1ENR_GPIOBEN;
 80003bc:	2302      	movs	r3, #2
 80003be:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOBRST;
 80003c0:	2302      	movs	r3, #2
 80003c2:	613b      	str	r3, [r7, #16]
	break;
 80003c4:	e013      	b.n	80003ee <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOC:
        enableMask = RCC_AHB1ENR_GPIOCEN;
 80003c6:	2304      	movs	r3, #4
 80003c8:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOCRST;
 80003ca:	2304      	movs	r3, #4
 80003cc:	613b      	str	r3, [r7, #16]
	break;
 80003ce:	e00e      	b.n	80003ee <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOD:
        enableMask = RCC_AHB1ENR_GPIODEN;
 80003d0:	2308      	movs	r3, #8
 80003d2:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIODRST;
 80003d4:	2308      	movs	r3, #8
 80003d6:	613b      	str	r3, [r7, #16]
	break;
 80003d8:	e009      	b.n	80003ee <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOE:
        enableMask = RCC_AHB1ENR_GPIOEEN;
 80003da:	2310      	movs	r3, #16
 80003dc:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOERST;
 80003de:	2310      	movs	r3, #16
 80003e0:	613b      	str	r3, [r7, #16]
	break;
 80003e2:	e004      	b.n	80003ee <GPIOConfigurePin+0x82>
        enableMask = RCC_AHB1ENR_GPIOGEN;
        resetMask = RCC_AHB1RSTR_GPIOGRST;
	break;
#endif
	case (uint32_t)GPIOH:
        enableMask = RCC_AHB1ENR_GPIOHEN;
 80003e4:	2380      	movs	r3, #128	; 0x80
 80003e6:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOHRST;
 80003e8:	2380      	movs	r3, #128	; 0x80
 80003ea:	613b      	str	r3, [r7, #16]
	break;
 80003ec:	bf00      	nop

	}

	if((resetMask == 0)||(enableMask == 0)) // pokud se do masek neuložila žádná hodnota, ukonèi konfiguraci a vrat zpravu false o neúspìchu
 80003ee:	693b      	ldr	r3, [r7, #16]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d002      	beq.n	80003fa <GPIOConfigurePin+0x8e>
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d101      	bne.n	80003fe <GPIOConfigurePin+0x92>
	{
		return false;
 80003fa:	2300      	movs	r3, #0
 80003fc:	e12d      	b.n	800065a <GPIOConfigurePin+0x2ee>
	}
	else
	{
		  if(!(RCC -> AHB1ENR & enableMask)) // jestliže nejsou masky prázdné, použi je pro nastavení hodin
 80003fe:	4b81      	ldr	r3, [pc, #516]	; (8000604 <GPIOConfigurePin+0x298>)
 8000400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	4013      	ands	r3, r2
 8000406:	2b00      	cmp	r3, #0
 8000408:	d112      	bne.n	8000430 <GPIOConfigurePin+0xc4>
		  {
		    RCC->AHB1ENR |= enableMask;
 800040a:	497e      	ldr	r1, [pc, #504]	; (8000604 <GPIOConfigurePin+0x298>)
 800040c:	4b7d      	ldr	r3, [pc, #500]	; (8000604 <GPIOConfigurePin+0x298>)
 800040e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000410:	697b      	ldr	r3, [r7, #20]
 8000412:	4313      	orrs	r3, r2
 8000414:	630b      	str	r3, [r1, #48]	; 0x30
		    RCC->AHB1RSTR |= resetMask;
 8000416:	497b      	ldr	r1, [pc, #492]	; (8000604 <GPIOConfigurePin+0x298>)
 8000418:	4b7a      	ldr	r3, [pc, #488]	; (8000604 <GPIOConfigurePin+0x298>)
 800041a:	691a      	ldr	r2, [r3, #16]
 800041c:	693b      	ldr	r3, [r7, #16]
 800041e:	4313      	orrs	r3, r2
 8000420:	610b      	str	r3, [r1, #16]
		    RCC->AHB1RSTR &= ~resetMask;
 8000422:	4978      	ldr	r1, [pc, #480]	; (8000604 <GPIOConfigurePin+0x298>)
 8000424:	4b77      	ldr	r3, [pc, #476]	; (8000604 <GPIOConfigurePin+0x298>)
 8000426:	691a      	ldr	r2, [r3, #16]
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	43db      	mvns	r3, r3
 800042c:	4013      	ands	r3, r2
 800042e:	610b      	str	r3, [r1, #16]
		  }
	}

gpio -> MODER &= ~(0x03 << (bitNumber*2)); // vynulovani zdvojených bitu pøed nastavováním (kdyby nìkde byla kombinace 10 a já tam ORoval 01 tak vysledna kombinace je 11 misto 01)...u registru kde se nastavuje pouze jeden bit toho nehrozí
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	68ba      	ldr	r2, [r7, #8]
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	2103      	movs	r1, #3
 800043a:	fa01 f202 	lsl.w	r2, r1, r2
 800043e:	43d2      	mvns	r2, r2
 8000440:	401a      	ands	r2, r3
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	601a      	str	r2, [r3, #0]
gpio -> PUPDR &= ~(0x03 << (bitNumber*2));
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	68db      	ldr	r3, [r3, #12]
 800044a:	68ba      	ldr	r2, [r7, #8]
 800044c:	0052      	lsls	r2, r2, #1
 800044e:	2103      	movs	r1, #3
 8000450:	fa01 f202 	lsl.w	r2, r1, r2
 8000454:	43d2      	mvns	r2, r2
 8000456:	401a      	ands	r2, r3
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	60da      	str	r2, [r3, #12]
gpio -> OSPEEDR &= ~(0x03 << (bitNumber*2));
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	68ba      	ldr	r2, [r7, #8]
 8000462:	0052      	lsls	r2, r2, #1
 8000464:	2103      	movs	r1, #3
 8000466:	fa01 f202 	lsl.w	r2, r1, r2
 800046a:	43d2      	mvns	r2, r2
 800046c:	401a      	ands	r2, r3
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	609a      	str	r2, [r3, #8]


switch(mode)
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	2b07      	cmp	r3, #7
 8000476:	f200 80ef 	bhi.w	8000658 <GPIOConfigurePin+0x2ec>
 800047a:	a201      	add	r2, pc, #4	; (adr r2, 8000480 <GPIOConfigurePin+0x114>)
 800047c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000480:	080004a1 	.word	0x080004a1
 8000484:	080004f3 	.word	0x080004f3
 8000488:	08000543 	.word	0x08000543
 800048c:	08000559 	.word	0x08000559
 8000490:	0800056f 	.word	0x0800056f
 8000494:	08000585 	.word	0x08000585
 8000498:	0800059b 	.word	0x0800059b
 800049c:	08000609 	.word	0x08000609
{
case ioPortOutputPushPull:

	gpio->MODER |= 0x01<<(2*bitNumber); // output
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	68ba      	ldr	r2, [r7, #8]
 80004a6:	0052      	lsls	r2, r2, #1
 80004a8:	2101      	movs	r1, #1
 80004aa:	fa01 f202 	lsl.w	r2, r1, r2
 80004ae:	431a      	orrs	r2, r3
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	601a      	str	r2, [r3, #0]
	gpio->OTYPER &= ~(0x01<<bitNumber); // push-pull
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	2101      	movs	r1, #1
 80004ba:	68ba      	ldr	r2, [r7, #8]
 80004bc:	fa01 f202 	lsl.w	r2, r1, r2
 80004c0:	43d2      	mvns	r2, r2
 80004c2:	401a      	ands	r2, r3
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	68ba      	ldr	r2, [r7, #8]
 80004ce:	0052      	lsls	r2, r2, #1
 80004d0:	2103      	movs	r1, #3
 80004d2:	fa01 f202 	lsl.w	r2, r1, r2
 80004d6:	431a      	orrs	r2, r3
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	2103      	movs	r1, #3
 80004e2:	68ba      	ldr	r2, [r7, #8]
 80004e4:	fa01 f202 	lsl.w	r2, r1, r2
 80004e8:	43d2      	mvns	r2, r2
 80004ea:	401a      	ands	r2, r3
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	60da      	str	r2, [r3, #12]
    break;
 80004f0:	e0b2      	b.n	8000658 <GPIOConfigurePin+0x2ec>

case ioPortOutputOpenDrain:

	gpio->MODER |= 0x01<<(2*bitNumber); // output
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	68ba      	ldr	r2, [r7, #8]
 80004f8:	0052      	lsls	r2, r2, #1
 80004fa:	2101      	movs	r1, #1
 80004fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000500:	431a      	orrs	r2, r3
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	601a      	str	r2, [r3, #0]
	gpio->OTYPER |= (0x01<<bitNumber); // open drain
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	2101      	movs	r1, #1
 800050c:	68ba      	ldr	r2, [r7, #8]
 800050e:	fa01 f202 	lsl.w	r2, r1, r2
 8000512:	431a      	orrs	r2, r3
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	68ba      	ldr	r2, [r7, #8]
 800051e:	0052      	lsls	r2, r2, #1
 8000520:	2103      	movs	r1, #3
 8000522:	fa01 f202 	lsl.w	r2, r1, r2
 8000526:	431a      	orrs	r2, r3
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	2103      	movs	r1, #3
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	fa01 f202 	lsl.w	r2, r1, r2
 8000538:	43d2      	mvns	r2, r2
 800053a:	401a      	ands	r2, r3
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	60da      	str	r2, [r3, #12]
    break;
 8000540:	e08a      	b.n	8000658 <GPIOConfigurePin+0x2ec>

case ioPortAnalog:

	gpio->MODER |= 0x03<<(2*bitNumber); // analog
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	68ba      	ldr	r2, [r7, #8]
 8000548:	0052      	lsls	r2, r2, #1
 800054a:	2103      	movs	r1, #3
 800054c:	fa01 f202 	lsl.w	r2, r1, r2
 8000550:	431a      	orrs	r2, r3
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	601a      	str	r2, [r3, #0]
    break;
 8000556:	e07f      	b.n	8000658 <GPIOConfigurePin+0x2ec>

case ioPortInputFloat:

	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	2103      	movs	r1, #3
 800055e:	68ba      	ldr	r2, [r7, #8]
 8000560:	fa01 f202 	lsl.w	r2, r1, r2
 8000564:	43d2      	mvns	r2, r2
 8000566:	401a      	ands	r2, r3
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	60da      	str	r2, [r3, #12]
    break;
 800056c:	e074      	b.n	8000658 <GPIOConfigurePin+0x2ec>

case ioPortInputPullUp:

	gpio->PUPDR |= ~(0x01<<bitNumber); // pull up
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	68db      	ldr	r3, [r3, #12]
 8000572:	2101      	movs	r1, #1
 8000574:	68ba      	ldr	r2, [r7, #8]
 8000576:	fa01 f202 	lsl.w	r2, r1, r2
 800057a:	43d2      	mvns	r2, r2
 800057c:	431a      	orrs	r2, r3
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	60da      	str	r2, [r3, #12]
    break;
 8000582:	e069      	b.n	8000658 <GPIOConfigurePin+0x2ec>

case ioPortInputPullDown:

	gpio->PUPDR |= ~(0x02<<bitNumber); // pull down
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	2102      	movs	r1, #2
 800058a:	68ba      	ldr	r2, [r7, #8]
 800058c:	fa01 f202 	lsl.w	r2, r1, r2
 8000590:	43d2      	mvns	r2, r2
 8000592:	431a      	orrs	r2, r3
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	60da      	str	r2, [r3, #12]
    break;
 8000598:	e05e      	b.n	8000658 <GPIOConfigurePin+0x2ec>

case ioPortAlternatrPushPull:

	gpio->MODER |= 0x02<<(2*bitNumber); // alternate function
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	0052      	lsls	r2, r2, #1
 80005a2:	2102      	movs	r1, #2
 80005a4:	fa01 f202 	lsl.w	r2, r1, r2
 80005a8:	431a      	orrs	r2, r3
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	601a      	str	r2, [r3, #0]
	gpio->OTYPER &= ~(0x01<<bitNumber); // push pull
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	2101      	movs	r1, #1
 80005b4:	68ba      	ldr	r2, [r7, #8]
 80005b6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ba:	43d2      	mvns	r2, r2
 80005bc:	401a      	ands	r2, r3
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	68ba      	ldr	r2, [r7, #8]
 80005c8:	0052      	lsls	r2, r2, #1
 80005ca:	2103      	movs	r1, #3
 80005cc:	fa01 f202 	lsl.w	r2, r1, r2
 80005d0:	431a      	orrs	r2, r3
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	68db      	ldr	r3, [r3, #12]
 80005da:	2103      	movs	r1, #3
 80005dc:	68ba      	ldr	r2, [r7, #8]
 80005de:	fa01 f202 	lsl.w	r2, r1, r2
 80005e2:	43d2      	mvns	r2, r2
 80005e4:	401a      	ands	r2, r3
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	60da      	str	r2, [r3, #12]
    break;
 80005ea:	e035      	b.n	8000658 <GPIOConfigurePin+0x2ec>
 80005ec:	40020800 	.word	0x40020800
 80005f0:	40020000 	.word	0x40020000
 80005f4:	40020400 	.word	0x40020400
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40021c00 	.word	0x40021c00
 8000600:	40020c00 	.word	0x40020c00
 8000604:	40023800 	.word	0x40023800

case ioPortAlternatrOpenDrain:

	gpio->MODER |= 0x02<<(2*bitNumber); // alternate function
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	68ba      	ldr	r2, [r7, #8]
 800060e:	0052      	lsls	r2, r2, #1
 8000610:	2102      	movs	r1, #2
 8000612:	fa01 f202 	lsl.w	r2, r1, r2
 8000616:	431a      	orrs	r2, r3
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	601a      	str	r2, [r3, #0]
	gpio->OTYPER |= (0x01<<bitNumber); // open drain
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	2101      	movs	r1, #1
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	fa01 f202 	lsl.w	r2, r1, r2
 8000628:	431a      	orrs	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	0052      	lsls	r2, r2, #1
 8000636:	2103      	movs	r1, #3
 8000638:	fa01 f202 	lsl.w	r2, r1, r2
 800063c:	431a      	orrs	r2, r3
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	68db      	ldr	r3, [r3, #12]
 8000646:	2103      	movs	r1, #3
 8000648:	68ba      	ldr	r2, [r7, #8]
 800064a:	fa01 f202 	lsl.w	r2, r1, r2
 800064e:	43d2      	mvns	r2, r2
 8000650:	401a      	ands	r2, r3
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	60da      	str	r2, [r3, #12]
    break;
 8000656:	bf00      	nop


}
    return true;
 8000658:	2301      	movs	r3, #1
}
 800065a:	4618      	mov	r0, r3
 800065c:	371c      	adds	r7, #28
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <GPIORead>:
{
gpio -> ODR ^= (1<<bitNumber); // prostì jen zmìò hobnotu v ODR pro pøíslušný bit
}

bool GPIORead(GPIO_TypeDef *gpio, uint32_t bitNumber) // funkce pro zjištìní hodnoty na výstupu ODR pro bit na zadaném místì
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
	if((gpio -> MODER & (0x03<<(bitNumber*2))) == 0x00) // jestliže je pin nastaven jako vstup
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	683a      	ldr	r2, [r7, #0]
 8000678:	0052      	lsls	r2, r2, #1
 800067a:	2103      	movs	r1, #3
 800067c:	fa01 f202 	lsl.w	r2, r1, r2
 8000680:	4013      	ands	r3, r2
 8000682:	2b00      	cmp	r3, #0
 8000684:	d10c      	bne.n	80006a0 <GPIORead+0x38>
	{
		 return ((gpio -> IDR) & (1<<bitNumber)); // AND ODR s maskou vrátí 0 (false) pokud zkoumany bit je nula, a pokud neni nula a je to jakekoliv jine cislo, nezalezi na to jake, vrati (true)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	691b      	ldr	r3, [r3, #16]
 800068a:	2101      	movs	r1, #1
 800068c:	683a      	ldr	r2, [r7, #0]
 800068e:	fa01 f202 	lsl.w	r2, r1, r2
 8000692:	4013      	ands	r3, r2
 8000694:	2b00      	cmp	r3, #0
 8000696:	bf14      	ite	ne
 8000698:	2301      	movne	r3, #1
 800069a:	2300      	moveq	r3, #0
 800069c:	b2db      	uxtb	r3, r3
 800069e:	e01c      	b.n	80006da <GPIORead+0x72>

	}else if ((gpio -> MODER & (0x03<<(bitNumber*2))) == (0x01<<(bitNumber*2))) // pokud ne, tak je na prislusnem bitNumber kombinace 01
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	683a      	ldr	r2, [r7, #0]
 80006a6:	0052      	lsls	r2, r2, #1
 80006a8:	2103      	movs	r1, #3
 80006aa:	fa01 f202 	lsl.w	r2, r1, r2
 80006ae:	4013      	ands	r3, r2
 80006b0:	683a      	ldr	r2, [r7, #0]
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	2101      	movs	r1, #1
 80006b6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d10c      	bne.n	80006d8 <GPIORead+0x70>
	{
		 return ((gpio -> ODR) & (1<<bitNumber)); // AND ODR s maskou vrátí 0 (false) pokud zkoumany bit je nula, a pokud neni nula a je to jakekoliv jine cislo, nezalezi na to jake, vrati (true)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	2101      	movs	r1, #1
 80006c4:	683a      	ldr	r2, [r7, #0]
 80006c6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ca:	4013      	ands	r3, r2
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	bf14      	ite	ne
 80006d0:	2301      	movne	r3, #1
 80006d2:	2300      	moveq	r3, #0
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	e000      	b.n	80006da <GPIORead+0x72>
	}else
	{
		return false; // je potøeba dodìlat!!!!! pro analog a alternativvní funkce nebude fungovat!!!!!!!!
 80006d8:	2300      	movs	r3, #0
	}

}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <GPIOWrite>:

void GPIOWrite(GPIO_TypeDef *gpio, uint32_t bitNumber,bool state) // funkce pro zapsani hodnoty na výstupu ODR pro bit na zadaném místì
{ // BSRR je registr kter nastavi natvrdo hodnotu na registru ODR, máme celkem 16 výstupù, BSRR má 32 výstupù, s tím že pokud dám jednièku na nìkterý ze spodních 16, øíkám tím nastav jedna na konkrétní bit(0-16) a pokud dám jednièku na nìkterý z horních 16 bitù BSRR, tak vlastnì øíkám, nastav nulu na konkrétním bitu (0-16)
 80006e6:	b480      	push	{r7}
 80006e8:	b085      	sub	sp, #20
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	60f8      	str	r0, [r7, #12]
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	4613      	mov	r3, r2
 80006f2:	71fb      	strb	r3, [r7, #7]
 if(state) // pokud chci zapsat jednicku
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <GPIOWrite+0x24>
 {
	gpio -> BSRR = (0x01<<bitNumber); // zapis ji do spodni poloviny BSRR na místo (0-16)
 80006fa:	2201      	movs	r2, #1
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	461a      	mov	r2, r3
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	619a      	str	r2, [r3, #24]
 }else // pokud ne
 {
	 gpio -> BSRR = ((0x01<<bitNumber)<<16); // zapis ji do horni poloviny registru BSRR(17-31), což zajistí vynulování pøíslušného bitu
 }
}
 8000708:	e007      	b.n	800071a <GPIOWrite+0x34>
	 gpio -> BSRR = ((0x01<<bitNumber)<<16); // zapis ji do horni poloviny registru BSRR(17-31), což zajistí vynulování pøíslušného bitu
 800070a:	2201      	movs	r2, #1
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	041b      	lsls	r3, r3, #16
 8000714:	461a      	mov	r2, r3
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	619a      	str	r2, [r3, #24]
}
 800071a:	bf00      	nop
 800071c:	3714      	adds	r7, #20
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
	...

08000728 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800072c:	4a16      	ldr	r2, [pc, #88]	; (8000788 <SystemInit+0x60>)
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <SystemInit+0x60>)
 8000730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <SystemInit+0x64>)
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <SystemInit+0x64>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <SystemInit+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <SystemInit+0x64>)
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <SystemInit+0x64>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800075c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <SystemInit+0x64>)
 8000760:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <SystemInit+0x68>)
 8000762:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000764:	4a09      	ldr	r2, [pc, #36]	; (800078c <SystemInit+0x64>)
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <SystemInit+0x64>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <SystemInit+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <SystemInit+0x60>)
 8000778:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800077c:	609a      	str	r2, [r3, #8]
#endif
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	40023800 	.word	0x40023800
 8000790:	24003010 	.word	0x24003010

08000794 <__libc_init_array>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	4e0d      	ldr	r6, [pc, #52]	; (80007cc <__libc_init_array+0x38>)
 8000798:	4c0d      	ldr	r4, [pc, #52]	; (80007d0 <__libc_init_array+0x3c>)
 800079a:	1ba4      	subs	r4, r4, r6
 800079c:	10a4      	asrs	r4, r4, #2
 800079e:	2500      	movs	r5, #0
 80007a0:	42a5      	cmp	r5, r4
 80007a2:	d109      	bne.n	80007b8 <__libc_init_array+0x24>
 80007a4:	4e0b      	ldr	r6, [pc, #44]	; (80007d4 <__libc_init_array+0x40>)
 80007a6:	4c0c      	ldr	r4, [pc, #48]	; (80007d8 <__libc_init_array+0x44>)
 80007a8:	f000 f818 	bl	80007dc <_init>
 80007ac:	1ba4      	subs	r4, r4, r6
 80007ae:	10a4      	asrs	r4, r4, #2
 80007b0:	2500      	movs	r5, #0
 80007b2:	42a5      	cmp	r5, r4
 80007b4:	d105      	bne.n	80007c2 <__libc_init_array+0x2e>
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007bc:	4798      	blx	r3
 80007be:	3501      	adds	r5, #1
 80007c0:	e7ee      	b.n	80007a0 <__libc_init_array+0xc>
 80007c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007c6:	4798      	blx	r3
 80007c8:	3501      	adds	r5, #1
 80007ca:	e7f2      	b.n	80007b2 <__libc_init_array+0x1e>
 80007cc:	080007f4 	.word	0x080007f4
 80007d0:	080007f4 	.word	0x080007f4
 80007d4:	080007f4 	.word	0x080007f4
 80007d8:	080007f8 	.word	0x080007f8

080007dc <_init>:
 80007dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007de:	bf00      	nop
 80007e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007e2:	bc08      	pop	{r3}
 80007e4:	469e      	mov	lr, r3
 80007e6:	4770      	bx	lr

080007e8 <_fini>:
 80007e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ea:	bf00      	nop
 80007ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ee:	bc08      	pop	{r3}
 80007f0:	469e      	mov	lr, r3
 80007f2:	4770      	bx	lr

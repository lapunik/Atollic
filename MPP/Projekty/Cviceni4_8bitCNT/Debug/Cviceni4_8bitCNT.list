
Cviceni4_8bitCNT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000064c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007e4  080007ec  000107ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080007e4  080007e4  000107e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080007e8  080007e8  000107e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000107ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  080007ec  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000001c  080007ec  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000107ec  2**0
                  CONTENTS, READONLY
  9 .debug_info   000012b0  00000000  00000000  0001081c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000004a2  00000000  00000000  00011acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000e8  00000000  00000000  00011f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00012058  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000809  00000000  00000000  000120f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000568  00000000  00000000  00012901  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00012e69  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000022c  00000000  00000000  00012ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00013114  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080007cc 	.word	0x080007cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080007cc 	.word	0x080007cc

080001d8 <main>:
 **
 **===========================================================================
 */


int main(void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0

	Inicializace8LED();
 80001de:	f000 f86f 	bl	80002c0 <Inicializace8LED>

	GPIOConfigurePin(BUTTON_LEFT, ioPortInputFloat);
 80001e2:	2203      	movs	r2, #3
 80001e4:	2105      	movs	r1, #5
 80001e6:	4833      	ldr	r0, [pc, #204]	; (80002b4 <main+0xdc>)
 80001e8:	f000 f8d8 	bl	800039c <GPIOConfigurePin>
	GPIOConfigurePin(BUTTON_RIGHT, ioPortInputFloat);
 80001ec:	2203      	movs	r2, #3
 80001ee:	2104      	movs	r1, #4
 80001f0:	4830      	ldr	r0, [pc, #192]	; (80002b4 <main+0xdc>)
 80001f2:	f000 f8d3 	bl	800039c <GPIOConfigurePin>

	if (!(RCC->APB1ENR & RCC_APB1ENR_TIM3EN)) {
 80001f6:	4b30      	ldr	r3, [pc, #192]	; (80002b8 <main+0xe0>)
 80001f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001fa:	f003 0302 	and.w	r3, r3, #2
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d111      	bne.n	8000226 <main+0x4e>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000202:	4a2d      	ldr	r2, [pc, #180]	; (80002b8 <main+0xe0>)
 8000204:	4b2c      	ldr	r3, [pc, #176]	; (80002b8 <main+0xe0>)
 8000206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000208:	f043 0302 	orr.w	r3, r3, #2
 800020c:	6413      	str	r3, [r2, #64]	; 0x40
		RCC->APB1RSTR |= RCC_APB1RSTR_TIM3RST;
 800020e:	4a2a      	ldr	r2, [pc, #168]	; (80002b8 <main+0xe0>)
 8000210:	4b29      	ldr	r3, [pc, #164]	; (80002b8 <main+0xe0>)
 8000212:	6a1b      	ldr	r3, [r3, #32]
 8000214:	f043 0302 	orr.w	r3, r3, #2
 8000218:	6213      	str	r3, [r2, #32]
		RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM3RST;
 800021a:	4a27      	ldr	r2, [pc, #156]	; (80002b8 <main+0xe0>)
 800021c:	4b26      	ldr	r3, [pc, #152]	; (80002b8 <main+0xe0>)
 800021e:	6a1b      	ldr	r3, [r3, #32]
 8000220:	f023 0302 	bic.w	r3, r3, #2
 8000224:	6213      	str	r3, [r2, #32]
	}

	TIM3->CR1 = TIM_CR1_DIR; // DIR = 1 = dekrementace
 8000226:	4b25      	ldr	r3, [pc, #148]	; (80002bc <main+0xe4>)
 8000228:	2210      	movs	r2, #16
 800022a:	601a      	str	r2, [r3, #0]
	TIM3->CR2 = 0; //prostì jen reset
 800022c:	4b23      	ldr	r3, [pc, #140]	; (80002bc <main+0xe4>)
 800022e:	2200      	movs	r2, #0
 8000230:	605a      	str	r2, [r3, #4]
	TIM3->PSC = 65535; // max PSC
 8000232:	4b22      	ldr	r3, [pc, #136]	; (80002bc <main+0xe4>)
 8000234:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000238:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 255;
 800023a:	4b20      	ldr	r3, [pc, #128]	; (80002bc <main+0xe4>)
 800023c:	22ff      	movs	r2, #255	; 0xff
 800023e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CR1 |= TIM_CR1_CEN; // enable
 8000240:	4a1e      	ldr	r2, [pc, #120]	; (80002bc <main+0xe4>)
 8000242:	4b1e      	ldr	r3, [pc, #120]	; (80002bc <main+0xe4>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	6013      	str	r3, [r2, #0]

	bool dir = true;
 800024c:	2301      	movs	r3, #1
 800024e:	71fb      	strb	r3, [r7, #7]


	while (1)
	{

		if(!GPIORead(BUTTON_LEFT))
 8000250:	2105      	movs	r1, #5
 8000252:	4818      	ldr	r0, [pc, #96]	; (80002b4 <main+0xdc>)
 8000254:	f000 fa20 	bl	8000698 <GPIORead>
 8000258:	4603      	mov	r3, r0
 800025a:	f083 0301 	eor.w	r3, r3, #1
 800025e:	b2db      	uxtb	r3, r3
 8000260:	2b00      	cmp	r3, #0
 8000262:	d01e      	beq.n	80002a2 <main+0xca>
		{

			if(dir)
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d008      	beq.n	800027c <main+0xa4>
			{
				dir=false;
 800026a:	2300      	movs	r3, #0
 800026c:	71fb      	strb	r3, [r7, #7]
				TIM3->CR1 &= ~(0x01<<4);
 800026e:	4a13      	ldr	r2, [pc, #76]	; (80002bc <main+0xe4>)
 8000270:	4b12      	ldr	r3, [pc, #72]	; (80002bc <main+0xe4>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f023 0310 	bic.w	r3, r3, #16
 8000278:	6013      	str	r3, [r2, #0]
 800027a:	e007      	b.n	800028c <main+0xb4>
			}
			else
			{
				dir=true;
 800027c:	2301      	movs	r3, #1
 800027e:	71fb      	strb	r3, [r7, #7]
				TIM3->CR1 |= (0x01<<4);
 8000280:	4a0e      	ldr	r2, [pc, #56]	; (80002bc <main+0xe4>)
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <main+0xe4>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f043 0310 	orr.w	r3, r3, #16
 800028a:	6013      	str	r3, [r2, #0]
			}

		    while(!GPIORead(BUTTON_LEFT))
 800028c:	bf00      	nop
 800028e:	2105      	movs	r1, #5
 8000290:	4808      	ldr	r0, [pc, #32]	; (80002b4 <main+0xdc>)
 8000292:	f000 fa01 	bl	8000698 <GPIORead>
 8000296:	4603      	mov	r3, r0
 8000298:	f083 0301 	eor.w	r3, r3, #1
 800029c:	b2db      	uxtb	r3, r3
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d1f5      	bne.n	800028e <main+0xb6>
			}


		}

		uint32_t u = (TIM3->CNT);
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <main+0xe4>)
 80002a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a6:	603b      	str	r3, [r7, #0]
		Write8LED(u);
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 f831 	bl	8000314 <Write8LED>
	{
 80002b2:	e7cd      	b.n	8000250 <main+0x78>
 80002b4:	40020400 	.word	0x40020400
 80002b8:	40023800 	.word	0x40023800
 80002bc:	40000400 	.word	0x40000400

080002c0 <Inicializace8LED>:
 */

#include "mpp_shield.h"

  void Inicializace8LED()
  {
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  if(!(RCC ->AHB1ENR |= RCC_AHB1ENR_GPIOCEN))
 80002c4:	4a11      	ldr	r2, [pc, #68]	; (800030c <Inicializace8LED+0x4c>)
 80002c6:	4b11      	ldr	r3, [pc, #68]	; (800030c <Inicializace8LED+0x4c>)
 80002c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ca:	f043 0304 	orr.w	r3, r3, #4
 80002ce:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
    RCC->AHB1RSTR |= RCC_AHB1RSTR_GPIOCRST;
    RCC->AHB1RSTR &= ~RCC_AHB1RSTR_GPIOCRST;
  }

  GPIOC -> MODER &= (~0xffffffff); // nastavujeme pro dolnich 16 jednièek nulu(MODER má 32 bitù pro 16 portù), abychom mìli jistotu že tam není nìjaká jednièka nasatavená tam kde nechceme
 80002d0:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <Inicializace8LED+0x50>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <Inicializace8LED+0x50>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
  GPIOC -> MODER |= 0x5555; // až teï mùžeme nastavit pro každý z osmi dolnich dvojic bitù kombinace 010101..
 80002da:	4a0d      	ldr	r2, [pc, #52]	; (8000310 <Inicializace8LED+0x50>)
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <Inicializace8LED+0x50>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80002e4:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80002e8:	6013      	str	r3, [r2, #0]
  GPIOC -> OTYPER &= (~0xff); // dolnich 8 bitù potøebujeme mít jako nula (push pull), (má pouze 16bitù)
 80002ea:	4a09      	ldr	r2, [pc, #36]	; (8000310 <Inicializace8LED+0x50>)
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <Inicializace8LED+0x50>)
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80002f4:	6053      	str	r3, [r2, #4]
  GPIOC -> OSPEEDR |= 0xffffffff;  // zase má 32 bitù a my chceme spodnich 16 mit v jednickach (11 - hight speed)
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <Inicializace8LED+0x50>)
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	4b05      	ldr	r3, [pc, #20]	; (8000310 <Inicializace8LED+0x50>)
 80002fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000300:	609a      	str	r2, [r3, #8]
  // proc by tady mel byt return?
  }
 8000302:	bf00      	nop
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	40023800 	.word	0x40023800
 8000310:	40020800 	.word	0x40020800

08000314 <Write8LED>:

  void Write8LED(uint8_t value)
  {
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]
  GPIOC -> ODR &= (~(0xff)) ; // bitovou maskou 0000 0000 1111 1111 vynulujeme spodních 8 bitù
 800031e:	4a09      	ldr	r2, [pc, #36]	; (8000344 <Write8LED+0x30>)
 8000320:	4b08      	ldr	r3, [pc, #32]	; (8000344 <Write8LED+0x30>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000328:	6153      	str	r3, [r2, #20]
  GPIOC -> ODR |= (uint16_t)value; // bitovou masku mám ze vsupního argumentu, pomocí OR nastavím jednièky na mnou požadovaných bitech
 800032a:	4906      	ldr	r1, [pc, #24]	; (8000344 <Write8LED+0x30>)
 800032c:	4b05      	ldr	r3, [pc, #20]	; (8000344 <Write8LED+0x30>)
 800032e:	695a      	ldr	r2, [r3, #20]
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	4313      	orrs	r3, r2
 8000334:	614b      	str	r3, [r1, #20]
  return;
 8000336:	bf00      	nop
  }
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40020800 	.word	0x40020800

08000348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000380 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800034c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800034e:	e003      	b.n	8000358 <LoopCopyDataInit>

08000350 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000352:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000354:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000356:	3104      	adds	r1, #4

08000358 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000358:	480b      	ldr	r0, [pc, #44]	; (8000388 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800035a:	4b0c      	ldr	r3, [pc, #48]	; (800038c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800035c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800035e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000360:	d3f6      	bcc.n	8000350 <CopyDataInit>
  ldr  r2, =_sbss
 8000362:	4a0b      	ldr	r2, [pc, #44]	; (8000390 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000364:	e002      	b.n	800036c <LoopFillZerobss>

08000366 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000366:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000368:	f842 3b04 	str.w	r3, [r2], #4

0800036c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800036c:	4b09      	ldr	r3, [pc, #36]	; (8000394 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800036e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000370:	d3f9      	bcc.n	8000366 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000372:	f000 f9d1 	bl	8000718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000376:	f000 fa05 	bl	8000784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800037a:	f7ff ff2d 	bl	80001d8 <main>
  bx  lr    
 800037e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000380:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000384:	080007ec 	.word	0x080007ec
  ldr  r0, =_sdata
 8000388:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800038c:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000390:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000394:	2000001c 	.word	0x2000001c

08000398 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000398:	e7fe      	b.n	8000398 <ADC_IRQHandler>
	...

0800039c <GPIOConfigurePin>:
 *      Author: Lapunik
 */
#include "stm_core.h"

bool GPIOConfigurePin(GPIO_TypeDef *gpio,uint32_t bitNumber, ioPortMode mode) // konfigurace GPIO do pøedpøipravených stavù
{
 800039c:	b480      	push	{r7}
 800039e:	b087      	sub	sp, #28
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	4613      	mov	r3, r2
 80003a8:	71fb      	strb	r3, [r7, #7]

	uint32_t enableMask = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]
	uint32_t resetMask = 0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	613b      	str	r3, [r7, #16]

	switch((uint32_t)gpio) // je potøeba zapnout hodiny podle toho který gpio chceme vyuzivat => ulozime bity pro reset a pro zapnuti do masek a pote masku aplikujeme
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	4a99      	ldr	r2, [pc, #612]	; (800061c <GPIOConfigurePin+0x280>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d01d      	beq.n	80003f6 <GPIOConfigurePin+0x5a>
 80003ba:	4a98      	ldr	r2, [pc, #608]	; (800061c <GPIOConfigurePin+0x280>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d806      	bhi.n	80003ce <GPIOConfigurePin+0x32>
 80003c0:	4a97      	ldr	r2, [pc, #604]	; (8000620 <GPIOConfigurePin+0x284>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d00d      	beq.n	80003e2 <GPIOConfigurePin+0x46>
 80003c6:	4a97      	ldr	r2, [pc, #604]	; (8000624 <GPIOConfigurePin+0x288>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d00f      	beq.n	80003ec <GPIOConfigurePin+0x50>
 80003cc:	e027      	b.n	800041e <GPIOConfigurePin+0x82>
 80003ce:	4a96      	ldr	r2, [pc, #600]	; (8000628 <GPIOConfigurePin+0x28c>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d01a      	beq.n	800040a <GPIOConfigurePin+0x6e>
 80003d4:	4a95      	ldr	r2, [pc, #596]	; (800062c <GPIOConfigurePin+0x290>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d01c      	beq.n	8000414 <GPIOConfigurePin+0x78>
 80003da:	4a95      	ldr	r2, [pc, #596]	; (8000630 <GPIOConfigurePin+0x294>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d00f      	beq.n	8000400 <GPIOConfigurePin+0x64>
 80003e0:	e01d      	b.n	800041e <GPIOConfigurePin+0x82>
	{
	case (uint32_t)GPIOA: // GPIOA je definovana konstanta ve formátu "ukazatel", proto msím pøetypovat na celoèíselnou hodnotu
        enableMask = RCC_AHB1ENR_GPIOAEN;
 80003e2:	2301      	movs	r3, #1
 80003e4:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOARST;
 80003e6:	2301      	movs	r3, #1
 80003e8:	613b      	str	r3, [r7, #16]
	break;
 80003ea:	e018      	b.n	800041e <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOB:
        enableMask = RCC_AHB1ENR_GPIOBEN;
 80003ec:	2302      	movs	r3, #2
 80003ee:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOBRST;
 80003f0:	2302      	movs	r3, #2
 80003f2:	613b      	str	r3, [r7, #16]
	break;
 80003f4:	e013      	b.n	800041e <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOC:
        enableMask = RCC_AHB1ENR_GPIOCEN;
 80003f6:	2304      	movs	r3, #4
 80003f8:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOCRST;
 80003fa:	2304      	movs	r3, #4
 80003fc:	613b      	str	r3, [r7, #16]
	break;
 80003fe:	e00e      	b.n	800041e <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOD:
        enableMask = RCC_AHB1ENR_GPIODEN;
 8000400:	2308      	movs	r3, #8
 8000402:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIODRST;
 8000404:	2308      	movs	r3, #8
 8000406:	613b      	str	r3, [r7, #16]
	break;
 8000408:	e009      	b.n	800041e <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOE:
        enableMask = RCC_AHB1ENR_GPIOEEN;
 800040a:	2310      	movs	r3, #16
 800040c:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOERST;
 800040e:	2310      	movs	r3, #16
 8000410:	613b      	str	r3, [r7, #16]
	break;
 8000412:	e004      	b.n	800041e <GPIOConfigurePin+0x82>
        enableMask = RCC_AHB1ENR_GPIOGEN;
        resetMask = RCC_AHB1RSTR_GPIOGRST;
	break;
#endif
	case (uint32_t)GPIOH:
        enableMask = RCC_AHB1ENR_GPIOHEN;
 8000414:	2380      	movs	r3, #128	; 0x80
 8000416:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOHRST;
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	613b      	str	r3, [r7, #16]
	break;
 800041c:	bf00      	nop

	}

	if((resetMask == 0)||(enableMask == 0)) // pokud se do masek neuložila žádná hodnota, ukonèi konfiguraci a vrat zpravu false o neúspìchu
 800041e:	693b      	ldr	r3, [r7, #16]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d002      	beq.n	800042a <GPIOConfigurePin+0x8e>
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d101      	bne.n	800042e <GPIOConfigurePin+0x92>
	{
		return false;
 800042a:	2300      	movs	r3, #0
 800042c:	e12d      	b.n	800068a <GPIOConfigurePin+0x2ee>
	}
	else
	{
		  if(!(RCC -> AHB1ENR & enableMask)) // jestliže nejsou masky prázdné, použi je pro nastavení hodin
 800042e:	4b81      	ldr	r3, [pc, #516]	; (8000634 <GPIOConfigurePin+0x298>)
 8000430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000432:	697b      	ldr	r3, [r7, #20]
 8000434:	4013      	ands	r3, r2
 8000436:	2b00      	cmp	r3, #0
 8000438:	d112      	bne.n	8000460 <GPIOConfigurePin+0xc4>
		  {
		    RCC->AHB1ENR |= enableMask;
 800043a:	497e      	ldr	r1, [pc, #504]	; (8000634 <GPIOConfigurePin+0x298>)
 800043c:	4b7d      	ldr	r3, [pc, #500]	; (8000634 <GPIOConfigurePin+0x298>)
 800043e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	4313      	orrs	r3, r2
 8000444:	630b      	str	r3, [r1, #48]	; 0x30
		    RCC->AHB1RSTR |= resetMask;
 8000446:	497b      	ldr	r1, [pc, #492]	; (8000634 <GPIOConfigurePin+0x298>)
 8000448:	4b7a      	ldr	r3, [pc, #488]	; (8000634 <GPIOConfigurePin+0x298>)
 800044a:	691a      	ldr	r2, [r3, #16]
 800044c:	693b      	ldr	r3, [r7, #16]
 800044e:	4313      	orrs	r3, r2
 8000450:	610b      	str	r3, [r1, #16]
		    RCC->AHB1RSTR &= ~resetMask;
 8000452:	4978      	ldr	r1, [pc, #480]	; (8000634 <GPIOConfigurePin+0x298>)
 8000454:	4b77      	ldr	r3, [pc, #476]	; (8000634 <GPIOConfigurePin+0x298>)
 8000456:	691a      	ldr	r2, [r3, #16]
 8000458:	693b      	ldr	r3, [r7, #16]
 800045a:	43db      	mvns	r3, r3
 800045c:	4013      	ands	r3, r2
 800045e:	610b      	str	r3, [r1, #16]
		  }
	}

gpio -> MODER &= ~(0x03 << (bitNumber*2)); // vynulovani zdvojených bitu pøed nastavováním (kdyby nìkde byla kombinace 10 a já tam ORoval 01 tak vysledna kombinace je 11 misto 01)...u registru kde se nastavuje pouze jeden bit toho nehrozí
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	68ba      	ldr	r2, [r7, #8]
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	2103      	movs	r1, #3
 800046a:	fa01 f202 	lsl.w	r2, r1, r2
 800046e:	43d2      	mvns	r2, r2
 8000470:	401a      	ands	r2, r3
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	601a      	str	r2, [r3, #0]
gpio -> PUPDR &= ~(0x03 << (bitNumber*2));
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	68db      	ldr	r3, [r3, #12]
 800047a:	68ba      	ldr	r2, [r7, #8]
 800047c:	0052      	lsls	r2, r2, #1
 800047e:	2103      	movs	r1, #3
 8000480:	fa01 f202 	lsl.w	r2, r1, r2
 8000484:	43d2      	mvns	r2, r2
 8000486:	401a      	ands	r2, r3
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	60da      	str	r2, [r3, #12]
gpio -> OSPEEDR &= ~(0x03 << (bitNumber*2));
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	68ba      	ldr	r2, [r7, #8]
 8000492:	0052      	lsls	r2, r2, #1
 8000494:	2103      	movs	r1, #3
 8000496:	fa01 f202 	lsl.w	r2, r1, r2
 800049a:	43d2      	mvns	r2, r2
 800049c:	401a      	ands	r2, r3
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	609a      	str	r2, [r3, #8]


switch(mode)
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	2b07      	cmp	r3, #7
 80004a6:	f200 80ef 	bhi.w	8000688 <GPIOConfigurePin+0x2ec>
 80004aa:	a201      	add	r2, pc, #4	; (adr r2, 80004b0 <GPIOConfigurePin+0x114>)
 80004ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b0:	080004d1 	.word	0x080004d1
 80004b4:	08000523 	.word	0x08000523
 80004b8:	08000573 	.word	0x08000573
 80004bc:	08000589 	.word	0x08000589
 80004c0:	0800059f 	.word	0x0800059f
 80004c4:	080005b5 	.word	0x080005b5
 80004c8:	080005cb 	.word	0x080005cb
 80004cc:	08000639 	.word	0x08000639
{
case ioPortOutputPushPull:

	gpio->MODER |= 0x01<<(2*bitNumber); // output
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	68ba      	ldr	r2, [r7, #8]
 80004d6:	0052      	lsls	r2, r2, #1
 80004d8:	2101      	movs	r1, #1
 80004da:	fa01 f202 	lsl.w	r2, r1, r2
 80004de:	431a      	orrs	r2, r3
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	601a      	str	r2, [r3, #0]
	gpio->OTYPER &= ~(0x01<<bitNumber); // push-pull
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	2101      	movs	r1, #1
 80004ea:	68ba      	ldr	r2, [r7, #8]
 80004ec:	fa01 f202 	lsl.w	r2, r1, r2
 80004f0:	43d2      	mvns	r2, r2
 80004f2:	401a      	ands	r2, r3
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	68ba      	ldr	r2, [r7, #8]
 80004fe:	0052      	lsls	r2, r2, #1
 8000500:	2103      	movs	r1, #3
 8000502:	fa01 f202 	lsl.w	r2, r1, r2
 8000506:	431a      	orrs	r2, r3
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	2103      	movs	r1, #3
 8000512:	68ba      	ldr	r2, [r7, #8]
 8000514:	fa01 f202 	lsl.w	r2, r1, r2
 8000518:	43d2      	mvns	r2, r2
 800051a:	401a      	ands	r2, r3
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	60da      	str	r2, [r3, #12]
    break;
 8000520:	e0b2      	b.n	8000688 <GPIOConfigurePin+0x2ec>

case ioPortOutputOpenDrain:

	gpio->MODER |= 0x01<<(2*bitNumber); // output
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	68ba      	ldr	r2, [r7, #8]
 8000528:	0052      	lsls	r2, r2, #1
 800052a:	2101      	movs	r1, #1
 800052c:	fa01 f202 	lsl.w	r2, r1, r2
 8000530:	431a      	orrs	r2, r3
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	601a      	str	r2, [r3, #0]
	gpio->OTYPER |= (0x01<<bitNumber); // open drain
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	2101      	movs	r1, #1
 800053c:	68ba      	ldr	r2, [r7, #8]
 800053e:	fa01 f202 	lsl.w	r2, r1, r2
 8000542:	431a      	orrs	r2, r3
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	68ba      	ldr	r2, [r7, #8]
 800054e:	0052      	lsls	r2, r2, #1
 8000550:	2103      	movs	r1, #3
 8000552:	fa01 f202 	lsl.w	r2, r1, r2
 8000556:	431a      	orrs	r2, r3
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	2103      	movs	r1, #3
 8000562:	68ba      	ldr	r2, [r7, #8]
 8000564:	fa01 f202 	lsl.w	r2, r1, r2
 8000568:	43d2      	mvns	r2, r2
 800056a:	401a      	ands	r2, r3
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	60da      	str	r2, [r3, #12]
    break;
 8000570:	e08a      	b.n	8000688 <GPIOConfigurePin+0x2ec>

case ioPortAnalog:

	gpio->MODER |= 0x03<<(2*bitNumber); // analog
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	0052      	lsls	r2, r2, #1
 800057a:	2103      	movs	r1, #3
 800057c:	fa01 f202 	lsl.w	r2, r1, r2
 8000580:	431a      	orrs	r2, r3
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	601a      	str	r2, [r3, #0]
    break;
 8000586:	e07f      	b.n	8000688 <GPIOConfigurePin+0x2ec>

case ioPortInputFloat:

	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	2103      	movs	r1, #3
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	fa01 f202 	lsl.w	r2, r1, r2
 8000594:	43d2      	mvns	r2, r2
 8000596:	401a      	ands	r2, r3
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	60da      	str	r2, [r3, #12]
    break;
 800059c:	e074      	b.n	8000688 <GPIOConfigurePin+0x2ec>

case ioPortInputPullUp:

	gpio->PUPDR |= ~(0x01<<bitNumber); // pull up
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	2101      	movs	r1, #1
 80005a4:	68ba      	ldr	r2, [r7, #8]
 80005a6:	fa01 f202 	lsl.w	r2, r1, r2
 80005aa:	43d2      	mvns	r2, r2
 80005ac:	431a      	orrs	r2, r3
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	60da      	str	r2, [r3, #12]
    break;
 80005b2:	e069      	b.n	8000688 <GPIOConfigurePin+0x2ec>

case ioPortInputPullDown:

	gpio->PUPDR |= ~(0x02<<bitNumber); // pull down
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	2102      	movs	r1, #2
 80005ba:	68ba      	ldr	r2, [r7, #8]
 80005bc:	fa01 f202 	lsl.w	r2, r1, r2
 80005c0:	43d2      	mvns	r2, r2
 80005c2:	431a      	orrs	r2, r3
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	60da      	str	r2, [r3, #12]
    break;
 80005c8:	e05e      	b.n	8000688 <GPIOConfigurePin+0x2ec>

case ioPortAlternatrPushPull:

	gpio->MODER |= 0x02<<(2*bitNumber); // alternate function
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	68ba      	ldr	r2, [r7, #8]
 80005d0:	0052      	lsls	r2, r2, #1
 80005d2:	2102      	movs	r1, #2
 80005d4:	fa01 f202 	lsl.w	r2, r1, r2
 80005d8:	431a      	orrs	r2, r3
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	601a      	str	r2, [r3, #0]
	gpio->OTYPER &= ~(0x01<<bitNumber); // push pull
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	2101      	movs	r1, #1
 80005e4:	68ba      	ldr	r2, [r7, #8]
 80005e6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ea:	43d2      	mvns	r2, r2
 80005ec:	401a      	ands	r2, r3
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	0052      	lsls	r2, r2, #1
 80005fa:	2103      	movs	r1, #3
 80005fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000600:	431a      	orrs	r2, r3
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	2103      	movs	r1, #3
 800060c:	68ba      	ldr	r2, [r7, #8]
 800060e:	fa01 f202 	lsl.w	r2, r1, r2
 8000612:	43d2      	mvns	r2, r2
 8000614:	401a      	ands	r2, r3
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	60da      	str	r2, [r3, #12]
    break;
 800061a:	e035      	b.n	8000688 <GPIOConfigurePin+0x2ec>
 800061c:	40020800 	.word	0x40020800
 8000620:	40020000 	.word	0x40020000
 8000624:	40020400 	.word	0x40020400
 8000628:	40021000 	.word	0x40021000
 800062c:	40021c00 	.word	0x40021c00
 8000630:	40020c00 	.word	0x40020c00
 8000634:	40023800 	.word	0x40023800

case ioPortAlternatrOpenDrain:

	gpio->MODER |= 0x02<<(2*bitNumber); // alternate function
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	68ba      	ldr	r2, [r7, #8]
 800063e:	0052      	lsls	r2, r2, #1
 8000640:	2102      	movs	r1, #2
 8000642:	fa01 f202 	lsl.w	r2, r1, r2
 8000646:	431a      	orrs	r2, r3
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	601a      	str	r2, [r3, #0]
	gpio->OTYPER |= (0x01<<bitNumber); // open drain
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	2101      	movs	r1, #1
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	fa01 f202 	lsl.w	r2, r1, r2
 8000658:	431a      	orrs	r2, r3
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	689b      	ldr	r3, [r3, #8]
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	0052      	lsls	r2, r2, #1
 8000666:	2103      	movs	r1, #3
 8000668:	fa01 f202 	lsl.w	r2, r1, r2
 800066c:	431a      	orrs	r2, r3
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	2103      	movs	r1, #3
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	fa01 f202 	lsl.w	r2, r1, r2
 800067e:	43d2      	mvns	r2, r2
 8000680:	401a      	ands	r2, r3
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	60da      	str	r2, [r3, #12]
    break;
 8000686:	bf00      	nop


}
    return true;
 8000688:	2301      	movs	r3, #1
}
 800068a:	4618      	mov	r0, r3
 800068c:	371c      	adds	r7, #28
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop

08000698 <GPIORead>:
{
gpio -> ODR ^= (1<<bitNumber); // prostì jen zmìò hobnotu v ODR pro pøíslušný bit
}

bool GPIORead(GPIO_TypeDef *gpio, uint32_t bitNumber) // funkce pro zjištìní hodnoty na výstupu ODR pro bit na zadaném místì
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
	if((gpio -> MODER & (0x03<<(bitNumber*2))) == 0x00) // jestliže je pin nastaven jako vstup
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	0052      	lsls	r2, r2, #1
 80006aa:	2103      	movs	r1, #3
 80006ac:	fa01 f202 	lsl.w	r2, r1, r2
 80006b0:	4013      	ands	r3, r2
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d10c      	bne.n	80006d0 <GPIORead+0x38>
	{
		 return ((gpio -> IDR) & (1<<bitNumber)); // AND ODR s maskou vrátí 0 (false) pokud zkoumany bit je nula, a pokud neni nula a je to jakekoliv jine cislo, nezalezi na to jake, vrati (true)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	691b      	ldr	r3, [r3, #16]
 80006ba:	2101      	movs	r1, #1
 80006bc:	683a      	ldr	r2, [r7, #0]
 80006be:	fa01 f202 	lsl.w	r2, r1, r2
 80006c2:	4013      	ands	r3, r2
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	bf14      	ite	ne
 80006c8:	2301      	movne	r3, #1
 80006ca:	2300      	moveq	r3, #0
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	e01c      	b.n	800070a <GPIORead+0x72>

	}else if ((gpio -> MODER & (0x03<<(bitNumber*2))) == (0x01<<(bitNumber*2))) // pokud ne, tak je na prislusnem bitNumber kombinace 01
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	683a      	ldr	r2, [r7, #0]
 80006d6:	0052      	lsls	r2, r2, #1
 80006d8:	2103      	movs	r1, #3
 80006da:	fa01 f202 	lsl.w	r2, r1, r2
 80006de:	4013      	ands	r3, r2
 80006e0:	683a      	ldr	r2, [r7, #0]
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	2101      	movs	r1, #1
 80006e6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d10c      	bne.n	8000708 <GPIORead+0x70>
	{
		 return ((gpio -> ODR) & (1<<bitNumber)); // AND ODR s maskou vrátí 0 (false) pokud zkoumany bit je nula, a pokud neni nula a je to jakekoliv jine cislo, nezalezi na to jake, vrati (true)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	2101      	movs	r1, #1
 80006f4:	683a      	ldr	r2, [r7, #0]
 80006f6:	fa01 f202 	lsl.w	r2, r1, r2
 80006fa:	4013      	ands	r3, r2
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	bf14      	ite	ne
 8000700:	2301      	movne	r3, #1
 8000702:	2300      	moveq	r3, #0
 8000704:	b2db      	uxtb	r3, r3
 8000706:	e000      	b.n	800070a <GPIORead+0x72>
	}else
	{
		return false; // je potøeba dodìlat!!!!! pro analog a alternativvní funkce nebude fungovat!!!!!!!!
 8000708:	2300      	movs	r3, #0
	}

}
 800070a:	4618      	mov	r0, r3
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
	...

08000718 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800071c:	4a16      	ldr	r2, [pc, #88]	; (8000778 <SystemInit+0x60>)
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <SystemInit+0x60>)
 8000720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800072c:	4a13      	ldr	r2, [pc, #76]	; (800077c <SystemInit+0x64>)
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <SystemInit+0x64>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f043 0301 	orr.w	r3, r3, #1
 8000736:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <SystemInit+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800073e:	4a0f      	ldr	r2, [pc, #60]	; (800077c <SystemInit+0x64>)
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <SystemInit+0x64>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800074c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <SystemInit+0x64>)
 8000750:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <SystemInit+0x68>)
 8000752:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000754:	4a09      	ldr	r2, [pc, #36]	; (800077c <SystemInit+0x64>)
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <SystemInit+0x64>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800075e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <SystemInit+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <SystemInit+0x60>)
 8000768:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800076c:	609a      	str	r2, [r3, #8]
#endif
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00
 800077c:	40023800 	.word	0x40023800
 8000780:	24003010 	.word	0x24003010

08000784 <__libc_init_array>:
 8000784:	b570      	push	{r4, r5, r6, lr}
 8000786:	4e0d      	ldr	r6, [pc, #52]	; (80007bc <__libc_init_array+0x38>)
 8000788:	4c0d      	ldr	r4, [pc, #52]	; (80007c0 <__libc_init_array+0x3c>)
 800078a:	1ba4      	subs	r4, r4, r6
 800078c:	10a4      	asrs	r4, r4, #2
 800078e:	2500      	movs	r5, #0
 8000790:	42a5      	cmp	r5, r4
 8000792:	d109      	bne.n	80007a8 <__libc_init_array+0x24>
 8000794:	4e0b      	ldr	r6, [pc, #44]	; (80007c4 <__libc_init_array+0x40>)
 8000796:	4c0c      	ldr	r4, [pc, #48]	; (80007c8 <__libc_init_array+0x44>)
 8000798:	f000 f818 	bl	80007cc <_init>
 800079c:	1ba4      	subs	r4, r4, r6
 800079e:	10a4      	asrs	r4, r4, #2
 80007a0:	2500      	movs	r5, #0
 80007a2:	42a5      	cmp	r5, r4
 80007a4:	d105      	bne.n	80007b2 <__libc_init_array+0x2e>
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007ac:	4798      	blx	r3
 80007ae:	3501      	adds	r5, #1
 80007b0:	e7ee      	b.n	8000790 <__libc_init_array+0xc>
 80007b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007b6:	4798      	blx	r3
 80007b8:	3501      	adds	r5, #1
 80007ba:	e7f2      	b.n	80007a2 <__libc_init_array+0x1e>
 80007bc:	080007e4 	.word	0x080007e4
 80007c0:	080007e4 	.word	0x080007e4
 80007c4:	080007e4 	.word	0x080007e4
 80007c8:	080007e8 	.word	0x080007e8

080007cc <_init>:
 80007cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ce:	bf00      	nop
 80007d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007d2:	bc08      	pop	{r3}
 80007d4:	469e      	mov	lr, r3
 80007d6:	4770      	bx	lr

080007d8 <_fini>:
 80007d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007da:	bf00      	nop
 80007dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007de:	bc08      	pop	{r3}
 80007e0:	469e      	mov	lr, r3
 80007e2:	4770      	bx	lr

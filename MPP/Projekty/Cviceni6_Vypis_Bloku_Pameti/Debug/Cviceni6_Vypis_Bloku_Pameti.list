
Cviceni6_Vypis_Bloku_Pameti.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013bc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08001554  08001554  00011554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080015f4  080015f4  000115f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080015f8  080015f8  000115f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  20000000  080015fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000002c  20000064  08001660  00020064  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000090  08001660  00020090  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  9 .debug_info   00003da4  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000b27  00000000  00000000  00023e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000220  00000000  00000000  00024960  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00024b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000f77  00000000  00000000  00024d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000c6b  00000000  00000000  00025caf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002691a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000cbc  00000000  00000000  00026998  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000064 	.word	0x20000064
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800153c 	.word	0x0800153c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000068 	.word	0x20000068
 80001d4:	0800153c 	.word	0x0800153c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <VypisPamet>:
/* Private macro */
/* Private variables */
/* Private function prototypes */
/* Private functions */

void VypisPamet(unsigned char *UkazatelNaPamet) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]

	printf("\r\nStart \r\n");
 80001f0:	4815      	ldr	r0, [pc, #84]	; (8000248 <VypisPamet+0x60>)
 80001f2:	f000 fd9b 	bl	8000d2c <puts>
	for (int j = 0; j < 8; j++) {
 80001f6:	2300      	movs	r3, #0
 80001f8:	60fb      	str	r3, [r7, #12]
 80001fa:	e01a      	b.n	8000232 <VypisPamet+0x4a>
		for (int i = 0; i < 8; i++) {
 80001fc:	2300      	movs	r3, #0
 80001fe:	60bb      	str	r3, [r7, #8]
 8000200:	e00e      	b.n	8000220 <VypisPamet+0x38>
			printf("{%x} ", UkazatelNaPamet[i+(j*8)]);
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	00da      	lsls	r2, r3, #3
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	4413      	add	r3, r2
 800020a:	461a      	mov	r2, r3
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	4413      	add	r3, r2
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	4619      	mov	r1, r3
 8000214:	480d      	ldr	r0, [pc, #52]	; (800024c <VypisPamet+0x64>)
 8000216:	f000 fd3f 	bl	8000c98 <iprintf>
		for (int i = 0; i < 8; i++) {
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	3301      	adds	r3, #1
 800021e:	60bb      	str	r3, [r7, #8]
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	2b07      	cmp	r3, #7
 8000224:	dded      	ble.n	8000202 <VypisPamet+0x1a>
		}
		printf("\r\n ");
 8000226:	480a      	ldr	r0, [pc, #40]	; (8000250 <VypisPamet+0x68>)
 8000228:	f000 fd36 	bl	8000c98 <iprintf>
	for (int j = 0; j < 8; j++) {
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	3301      	adds	r3, #1
 8000230:	60fb      	str	r3, [r7, #12]
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	2b07      	cmp	r3, #7
 8000236:	dde1      	ble.n	80001fc <VypisPamet+0x14>
	}
	printf("End\r\n ");
 8000238:	4806      	ldr	r0, [pc, #24]	; (8000254 <VypisPamet+0x6c>)
 800023a:	f000 fd2d 	bl	8000c98 <iprintf>
}
 800023e:	bf00      	nop
 8000240:	3710      	adds	r7, #16
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	08001554 	.word	0x08001554
 800024c:	08001560 	.word	0x08001560
 8000250:	08001568 	.word	0x08001568
 8000254:	0800156c 	.word	0x0800156c

08000258 <main>:

int main(void) {
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0

	GPIOConfigurePin(BUZZER, ioPortOutputPushPull);
 800025e:	2200      	movs	r2, #0
 8000260:	2100      	movs	r1, #0
 8000262:	4816      	ldr	r0, [pc, #88]	; (80002bc <main+0x64>)
 8000264:	f000 f8e4 	bl	8000430 <GPIOConfigurePin>
	GPIOConfigurePin(BUTTON_LEFT, ioPortInputFloat);
 8000268:	2203      	movs	r2, #3
 800026a:	2105      	movs	r1, #5
 800026c:	4813      	ldr	r0, [pc, #76]	; (80002bc <main+0x64>)
 800026e:	f000 f8df 	bl	8000430 <GPIOConfigurePin>

	Usart2Initialization(38400);
 8000272:	f44f 4016 	mov.w	r0, #38400	; 0x9600
 8000276:	f000 f851 	bl	800031c <Usart2Initialization>

	puts("\nStart App\n");
 800027a:	4811      	ldr	r0, [pc, #68]	; (80002c0 <main+0x68>)
 800027c:	f000 fd56 	bl	8000d2c <puts>
	while (1) {


		unsigned char* pole;

		if (NULL == (pole = (unsigned char*)malloc(64))) { //allokuj pamet velikosti VELIKOST jako charový ukazatel.. protoze malloc vraci void.. od adresy "adresa"
 8000280:	2040      	movs	r0, #64	; 0x40
 8000282:	f000 fda3 	bl	8000dcc <malloc>
 8000286:	4603      	mov	r3, r0
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d105      	bne.n	800029c <main+0x44>
			printf("Neni pamet\n");
 8000290:	480c      	ldr	r0, [pc, #48]	; (80002c4 <main+0x6c>)
 8000292:	f000 fd4b 	bl	8000d2c <puts>
			return -1;
 8000296:	f04f 33ff 	mov.w	r3, #4294967295
 800029a:	e00b      	b.n	80002b4 <main+0x5c>
		}

		VypisPamet(pole);
 800029c:	6878      	ldr	r0, [r7, #4]
 800029e:	f7ff ffa3 	bl	80001e8 <VypisPamet>

	    while(GPIORead(BUTTON_LEFT))
 80002a2:	bf00      	nop
 80002a4:	2105      	movs	r1, #5
 80002a6:	4805      	ldr	r0, [pc, #20]	; (80002bc <main+0x64>)
 80002a8:	f000 fa7b 	bl	80007a2 <GPIORead>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d1f8      	bne.n	80002a4 <main+0x4c>
	while (1) {
 80002b2:	e7e5      	b.n	8000280 <main+0x28>
		{
		}

	}

}
 80002b4:	4618      	mov	r0, r3
 80002b6:	3708      	adds	r7, #8
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40020400 	.word	0x40020400
 80002c0:	08001574 	.word	0x08001574
 80002c4:	08001580 	.word	0x08001580

080002c8 <Usart2Send>:
 */

#include "nucleo_usart.h"

int Usart2Send(char c) //vstup znak ktery se ma odeslat, navratova hodnota int znak ktery se odesilal
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]

	//Flag TXE je nastaven do jednicky pokud je prazdny datovy registr, tudíž mùžeme zaèíst odesílat data, flag se automaticky nuluje když se datový registr zaplní
	// vlastnì øiká èekej dokud nebude volno, chtìlo by to ochranu protože když tuhle funkci zavolám a usart bude vypnutý, nikdy tento jev nenastane a bude to vlastnì while(true)
	while (!(USART2->SR & USART_SR_TXE)) {
 80002d2:	bf00      	nop
 80002d4:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <Usart2Send+0x2c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d0f9      	beq.n	80002d4 <Usart2Send+0xc>
		// TXE nemusim nulovat, dela to sam ze zapisu nove data
	}
	USART2->DR = c; // do datového registru vložím znak který chci odeslat
 80002e0:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <Usart2Send+0x2c>)
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	6053      	str	r3, [r2, #4]
	return c;
 80002e6:	79fb      	ldrb	r3, [r7, #7]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	40004400 	.word	0x40004400

080002f8 <Usart2Recived>:
		Usart2Send(*txt); // na konci je ukoncovaci nula(jakože prázdný data)
		txt++;
	}
}

int Usart2Recived(void) {
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
	while (!(USART2->SR & USART_SR_RXNE)) {
 80002fc:	bf00      	nop
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <Usart2Recived+0x20>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0320 	and.w	r3, r3, #32
 8000306:	2b00      	cmp	r3, #0
 8000308:	d0f9      	beq.n	80002fe <Usart2Recived+0x6>
		// RXNE nemusim nulovat, dela to sam když data vyètu, když je nevyètu, nulovat se nebude
	}
	return USART2->DR;
 800030a:	4b03      	ldr	r3, [pc, #12]	; (8000318 <Usart2Recived+0x20>)
 800030c:	685b      	ldr	r3, [r3, #4]
}
 800030e:	4618      	mov	r0, r3
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	40004400 	.word	0x40004400

0800031c <Usart2Initialization>:
bool IsUsart2Recived(void) {
	return (USART2->SR & USART_SR_RXNE) != 0; // testování jestli jsou nìjaká data k pøeètení
}


void Usart2Initialization(int baudSpeed){ // baud zatim nefunkcni
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]

	if (!(RCC->APB1ENR & RCC_APB1ENR_USART2EN)) // neni povolen USART2
 8000324:	4b29      	ldr	r3, [pc, #164]	; (80003cc <Usart2Initialization+0xb0>)
 8000326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800032c:	2b00      	cmp	r3, #0
 800032e:	d111      	bne.n	8000354 <Usart2Initialization+0x38>
	{
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000330:	4a26      	ldr	r2, [pc, #152]	; (80003cc <Usart2Initialization+0xb0>)
 8000332:	4b26      	ldr	r3, [pc, #152]	; (80003cc <Usart2Initialization+0xb0>)
 8000334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800033a:	6413      	str	r3, [r2, #64]	; 0x40
		RCC->APB1RSTR |= RCC_APB1RSTR_USART2RST;
 800033c:	4a23      	ldr	r2, [pc, #140]	; (80003cc <Usart2Initialization+0xb0>)
 800033e:	4b23      	ldr	r3, [pc, #140]	; (80003cc <Usart2Initialization+0xb0>)
 8000340:	6a1b      	ldr	r3, [r3, #32]
 8000342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000346:	6213      	str	r3, [r2, #32]
		RCC->APB1RSTR &= ~RCC_APB1RSTR_USART2RST;
 8000348:	4a20      	ldr	r2, [pc, #128]	; (80003cc <Usart2Initialization+0xb0>)
 800034a:	4b20      	ldr	r3, [pc, #128]	; (80003cc <Usart2Initialization+0xb0>)
 800034c:	6a1b      	ldr	r3, [r3, #32]
 800034e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000352:	6213      	str	r3, [r2, #32]
	}

	// v nucleo schematu lze najit ze USART TX a USART RX (ètení z procesoru, zápis do nìj) je na pinech PA2 a PA3
	GPIOConfigurePin(GPIOA, 2, ioPortAlternatrPushPull); // vysílání procesoru
 8000354:	2206      	movs	r2, #6
 8000356:	2102      	movs	r1, #2
 8000358:	481d      	ldr	r0, [pc, #116]	; (80003d0 <Usart2Initialization+0xb4>)
 800035a:	f000 f869 	bl	8000430 <GPIOConfigurePin>
	GPIOConfigureAlternativFunction(GPIOA, 2, 7); // z DS kap. 4 table 9 je vidìt že pro PA2 resp. 3 je USART2 nastaven na alternativní funkci 7
 800035e:	2207      	movs	r2, #7
 8000360:	2102      	movs	r1, #2
 8000362:	481b      	ldr	r0, [pc, #108]	; (80003d0 <Usart2Initialization+0xb4>)
 8000364:	f000 f9e2 	bl	800072c <GPIOConfigureAlternativFunction>
	GPIOConfigurePin(GPIOA, 3, ioPortAlternatrPushPull); // pøíjem procesoru, pro pøíjem vede cesta jinudy takže nezáleží jestli push pull nebo openDrain
 8000368:	2206      	movs	r2, #6
 800036a:	2103      	movs	r1, #3
 800036c:	4818      	ldr	r0, [pc, #96]	; (80003d0 <Usart2Initialization+0xb4>)
 800036e:	f000 f85f 	bl	8000430 <GPIOConfigurePin>
	GPIOConfigureAlternativFunction(GPIOA, 3, 7);
 8000372:	2207      	movs	r2, #7
 8000374:	2103      	movs	r1, #3
 8000376:	4816      	ldr	r0, [pc, #88]	; (80003d0 <Usart2Initialization+0xb4>)
 8000378:	f000 f9d8 	bl	800072c <GPIOConfigureAlternativFunction>
// do teï jsme nastavovali GPIO na USART, ale teï musíme nastavit samotnou periferii USART

	USART2->CR1 = USART_CR1_RE | USART_CR1_TE; // Do konfiguraèního registru jedna "zapnu" recived(pøijmání) a transmit (vysílání)
 800037c:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <Usart2Initialization+0xb8>)
 800037e:	220c      	movs	r2, #12
 8000380:	60da      	str	r2, [r3, #12]
	USART2->CR2 = 0; // nic nenastavujeme zatím
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <Usart2Initialization+0xb8>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
	USART2->CR3 = 0; // nic nenastavujeme zatím
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <Usart2Initialization+0xb8>)
 800038a:	2200      	movs	r2, #0
 800038c:	615a      	str	r2, [r3, #20]

	USART2->BRR = 0x1A1; // v podstatì dìliè který nastavuje rychlost komunikace (pro komunikaèní rychlost 38400 pøi 16MHz je 0x1A1)
 800038e:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <Usart2Initialization+0xb8>)
 8000390:	f240 12a1 	movw	r2, #417	; 0x1a1
 8000394:	609a      	str	r2, [r3, #8]

	USART2->CR1 |= USART_CR1_UE; // nakonec povoluji usart
 8000396:	4a0f      	ldr	r2, [pc, #60]	; (80003d4 <Usart2Initialization+0xb8>)
 8000398:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <Usart2Initialization+0xb8>)
 800039a:	68db      	ldr	r3, [r3, #12]
 800039c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003a0:	60d3      	str	r3, [r2, #12]

	setvbuf(stdout,NULL,_IONBF,0); // datový proud, nepoviný parametr, typ(nebufrovat), délka v tomto pøípadì nesmyslný argument, takže nula
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <Usart2Initialization+0xbc>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	6898      	ldr	r0, [r3, #8]
 80003a8:	2300      	movs	r3, #0
 80003aa:	2202      	movs	r2, #2
 80003ac:	2100      	movs	r1, #0
 80003ae:	f000 fdd1 	bl	8000f54 <setvbuf>
	setvbuf(stdin,NULL,_IONBF,0); // používám pro vstupní i výstupní (printf a podobnì všechno používá stdint/stdout)
 80003b2:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <Usart2Initialization+0xbc>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	6858      	ldr	r0, [r3, #4]
 80003b8:	2300      	movs	r3, #0
 80003ba:	2202      	movs	r2, #2
 80003bc:	2100      	movs	r1, #0
 80003be:	f000 fdc9 	bl	8000f54 <setvbuf>
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40023800 	.word	0x40023800
 80003d0:	40020000 	.word	0x40020000
 80003d4:	40004400 	.word	0x40004400
 80003d8:	20000000 	.word	0x20000000

080003dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000414 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003e2:	e003      	b.n	80003ec <LoopCopyDataInit>

080003e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003ea:	3104      	adds	r1, #4

080003ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003ec:	480b      	ldr	r0, [pc, #44]	; (800041c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003ee:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003f4:	d3f6      	bcc.n	80003e4 <CopyDataInit>
  ldr  r2, =_sbss
 80003f6:	4a0b      	ldr	r2, [pc, #44]	; (8000424 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003f8:	e002      	b.n	8000400 <LoopFillZerobss>

080003fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003fc:	f842 3b04 	str.w	r3, [r2], #4

08000400 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000400:	4b09      	ldr	r3, [pc, #36]	; (8000428 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000402:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000404:	d3f9      	bcc.n	80003fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000406:	f000 fa9b 	bl	8000940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800040a:	f000 fcbb 	bl	8000d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800040e:	f7ff ff23 	bl	8000258 <main>
  bx  lr    
 8000412:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000414:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000418:	080015fc 	.word	0x080015fc
  ldr  r0, =_sdata
 800041c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000420:	20000064 	.word	0x20000064
  ldr  r2, =_sbss
 8000424:	20000064 	.word	0x20000064
  ldr  r3, = _ebss
 8000428:	20000090 	.word	0x20000090

0800042c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800042c:	e7fe      	b.n	800042c <ADC_IRQHandler>
	...

08000430 <GPIOConfigurePin>:
 *      Author: Lapunik
 */
#include "stm_core.h"

bool GPIOConfigurePin(GPIO_TypeDef *gpio,uint32_t bitNumber, ioPortMode mode) // konfigurace GPIO do pøedpøipravených stavù
{
 8000430:	b480      	push	{r7}
 8000432:	b087      	sub	sp, #28
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	4613      	mov	r3, r2
 800043c:	71fb      	strb	r3, [r7, #7]

	uint32_t enableMask = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]
	uint32_t resetMask = 0;
 8000442:	2300      	movs	r3, #0
 8000444:	613b      	str	r3, [r7, #16]

	switch((uint32_t)gpio) // je potøeba zapnout hodiny podle toho který gpio chceme vyuzivat => ulozime bity pro reset a pro zapnuti do masek a pote masku aplikujeme
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	4a99      	ldr	r2, [pc, #612]	; (80006b0 <GPIOConfigurePin+0x280>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d01d      	beq.n	800048a <GPIOConfigurePin+0x5a>
 800044e:	4a98      	ldr	r2, [pc, #608]	; (80006b0 <GPIOConfigurePin+0x280>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d806      	bhi.n	8000462 <GPIOConfigurePin+0x32>
 8000454:	4a97      	ldr	r2, [pc, #604]	; (80006b4 <GPIOConfigurePin+0x284>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d00d      	beq.n	8000476 <GPIOConfigurePin+0x46>
 800045a:	4a97      	ldr	r2, [pc, #604]	; (80006b8 <GPIOConfigurePin+0x288>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d00f      	beq.n	8000480 <GPIOConfigurePin+0x50>
 8000460:	e027      	b.n	80004b2 <GPIOConfigurePin+0x82>
 8000462:	4a96      	ldr	r2, [pc, #600]	; (80006bc <GPIOConfigurePin+0x28c>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d01a      	beq.n	800049e <GPIOConfigurePin+0x6e>
 8000468:	4a95      	ldr	r2, [pc, #596]	; (80006c0 <GPIOConfigurePin+0x290>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d01c      	beq.n	80004a8 <GPIOConfigurePin+0x78>
 800046e:	4a95      	ldr	r2, [pc, #596]	; (80006c4 <GPIOConfigurePin+0x294>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d00f      	beq.n	8000494 <GPIOConfigurePin+0x64>
 8000474:	e01d      	b.n	80004b2 <GPIOConfigurePin+0x82>
	{
	case (uint32_t)GPIOA: // GPIOA je definovana konstanta ve formátu "ukazatel", proto msím pøetypovat na celoèíselnou hodnotu
        enableMask = RCC_AHB1ENR_GPIOAEN;
 8000476:	2301      	movs	r3, #1
 8000478:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOARST;
 800047a:	2301      	movs	r3, #1
 800047c:	613b      	str	r3, [r7, #16]
	break;
 800047e:	e018      	b.n	80004b2 <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOB:
        enableMask = RCC_AHB1ENR_GPIOBEN;
 8000480:	2302      	movs	r3, #2
 8000482:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOBRST;
 8000484:	2302      	movs	r3, #2
 8000486:	613b      	str	r3, [r7, #16]
	break;
 8000488:	e013      	b.n	80004b2 <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOC:
        enableMask = RCC_AHB1ENR_GPIOCEN;
 800048a:	2304      	movs	r3, #4
 800048c:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOCRST;
 800048e:	2304      	movs	r3, #4
 8000490:	613b      	str	r3, [r7, #16]
	break;
 8000492:	e00e      	b.n	80004b2 <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOD:
        enableMask = RCC_AHB1ENR_GPIODEN;
 8000494:	2308      	movs	r3, #8
 8000496:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIODRST;
 8000498:	2308      	movs	r3, #8
 800049a:	613b      	str	r3, [r7, #16]
	break;
 800049c:	e009      	b.n	80004b2 <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOE:
        enableMask = RCC_AHB1ENR_GPIOEEN;
 800049e:	2310      	movs	r3, #16
 80004a0:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOERST;
 80004a2:	2310      	movs	r3, #16
 80004a4:	613b      	str	r3, [r7, #16]
	break;
 80004a6:	e004      	b.n	80004b2 <GPIOConfigurePin+0x82>
        enableMask = RCC_AHB1ENR_GPIOGEN;
        resetMask = RCC_AHB1RSTR_GPIOGRST;
	break;
#endif
	case (uint32_t)GPIOH:
        enableMask = RCC_AHB1ENR_GPIOHEN;
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOHRST;
 80004ac:	2380      	movs	r3, #128	; 0x80
 80004ae:	613b      	str	r3, [r7, #16]
	break;
 80004b0:	bf00      	nop

	}

	if((resetMask == 0)||(enableMask == 0)) // pokud se do masek neuložila žádná hodnota, ukonèi konfiguraci a vrat zpravu false o neúspìchu
 80004b2:	693b      	ldr	r3, [r7, #16]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d002      	beq.n	80004be <GPIOConfigurePin+0x8e>
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d101      	bne.n	80004c2 <GPIOConfigurePin+0x92>
	{
		return false;
 80004be:	2300      	movs	r3, #0
 80004c0:	e12d      	b.n	800071e <GPIOConfigurePin+0x2ee>
	}
	else
	{
		  if(!(RCC -> AHB1ENR & enableMask)) // jestliže nejsou masky prázdné, použi je pro nastavení hodin
 80004c2:	4b81      	ldr	r3, [pc, #516]	; (80006c8 <GPIOConfigurePin+0x298>)
 80004c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	4013      	ands	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d112      	bne.n	80004f4 <GPIOConfigurePin+0xc4>
		  {
		    RCC->AHB1ENR |= enableMask;
 80004ce:	497e      	ldr	r1, [pc, #504]	; (80006c8 <GPIOConfigurePin+0x298>)
 80004d0:	4b7d      	ldr	r3, [pc, #500]	; (80006c8 <GPIOConfigurePin+0x298>)
 80004d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	4313      	orrs	r3, r2
 80004d8:	630b      	str	r3, [r1, #48]	; 0x30
		    RCC->AHB1RSTR |= resetMask;
 80004da:	497b      	ldr	r1, [pc, #492]	; (80006c8 <GPIOConfigurePin+0x298>)
 80004dc:	4b7a      	ldr	r3, [pc, #488]	; (80006c8 <GPIOConfigurePin+0x298>)
 80004de:	691a      	ldr	r2, [r3, #16]
 80004e0:	693b      	ldr	r3, [r7, #16]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	610b      	str	r3, [r1, #16]
		    RCC->AHB1RSTR &= ~resetMask;
 80004e6:	4978      	ldr	r1, [pc, #480]	; (80006c8 <GPIOConfigurePin+0x298>)
 80004e8:	4b77      	ldr	r3, [pc, #476]	; (80006c8 <GPIOConfigurePin+0x298>)
 80004ea:	691a      	ldr	r2, [r3, #16]
 80004ec:	693b      	ldr	r3, [r7, #16]
 80004ee:	43db      	mvns	r3, r3
 80004f0:	4013      	ands	r3, r2
 80004f2:	610b      	str	r3, [r1, #16]
		  }
	}

gpio -> MODER &= ~(0x03 << (bitNumber*2)); // vynulovani zdvojených bitu pøed nastavováním (kdyby nìkde byla kombinace 10 a já tam ORoval 01 tak vysledna kombinace je 11 misto 01)...u registru kde se nastavuje pouze jeden bit toho nehrozí
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	0052      	lsls	r2, r2, #1
 80004fc:	2103      	movs	r1, #3
 80004fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000502:	43d2      	mvns	r2, r2
 8000504:	401a      	ands	r2, r3
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	601a      	str	r2, [r3, #0]
gpio -> PUPDR &= ~(0x03 << (bitNumber*2));
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	68ba      	ldr	r2, [r7, #8]
 8000510:	0052      	lsls	r2, r2, #1
 8000512:	2103      	movs	r1, #3
 8000514:	fa01 f202 	lsl.w	r2, r1, r2
 8000518:	43d2      	mvns	r2, r2
 800051a:	401a      	ands	r2, r3
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	60da      	str	r2, [r3, #12]
gpio -> OSPEEDR &= ~(0x03 << (bitNumber*2));
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	68ba      	ldr	r2, [r7, #8]
 8000526:	0052      	lsls	r2, r2, #1
 8000528:	2103      	movs	r1, #3
 800052a:	fa01 f202 	lsl.w	r2, r1, r2
 800052e:	43d2      	mvns	r2, r2
 8000530:	401a      	ands	r2, r3
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	609a      	str	r2, [r3, #8]


switch(mode)
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b07      	cmp	r3, #7
 800053a:	f200 80ef 	bhi.w	800071c <GPIOConfigurePin+0x2ec>
 800053e:	a201      	add	r2, pc, #4	; (adr r2, 8000544 <GPIOConfigurePin+0x114>)
 8000540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000544:	08000565 	.word	0x08000565
 8000548:	080005b7 	.word	0x080005b7
 800054c:	08000607 	.word	0x08000607
 8000550:	0800061d 	.word	0x0800061d
 8000554:	08000633 	.word	0x08000633
 8000558:	08000649 	.word	0x08000649
 800055c:	0800065f 	.word	0x0800065f
 8000560:	080006cd 	.word	0x080006cd
{
case ioPortOutputPushPull:

	gpio->MODER |= 0x01<<(2*bitNumber); // output
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	68ba      	ldr	r2, [r7, #8]
 800056a:	0052      	lsls	r2, r2, #1
 800056c:	2101      	movs	r1, #1
 800056e:	fa01 f202 	lsl.w	r2, r1, r2
 8000572:	431a      	orrs	r2, r3
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	601a      	str	r2, [r3, #0]
	gpio->OTYPER &= ~(0x01<<bitNumber); // push-pull
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	2101      	movs	r1, #1
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	fa01 f202 	lsl.w	r2, r1, r2
 8000584:	43d2      	mvns	r2, r2
 8000586:	401a      	ands	r2, r3
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	68ba      	ldr	r2, [r7, #8]
 8000592:	0052      	lsls	r2, r2, #1
 8000594:	2103      	movs	r1, #3
 8000596:	fa01 f202 	lsl.w	r2, r1, r2
 800059a:	431a      	orrs	r2, r3
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	2103      	movs	r1, #3
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ac:	43d2      	mvns	r2, r2
 80005ae:	401a      	ands	r2, r3
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	60da      	str	r2, [r3, #12]
    break;
 80005b4:	e0b2      	b.n	800071c <GPIOConfigurePin+0x2ec>

case ioPortOutputOpenDrain:

	gpio->MODER |= 0x01<<(2*bitNumber); // output
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	68ba      	ldr	r2, [r7, #8]
 80005bc:	0052      	lsls	r2, r2, #1
 80005be:	2101      	movs	r1, #1
 80005c0:	fa01 f202 	lsl.w	r2, r1, r2
 80005c4:	431a      	orrs	r2, r3
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	601a      	str	r2, [r3, #0]
	gpio->OTYPER |= (0x01<<bitNumber); // open drain
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	2101      	movs	r1, #1
 80005d0:	68ba      	ldr	r2, [r7, #8]
 80005d2:	fa01 f202 	lsl.w	r2, r1, r2
 80005d6:	431a      	orrs	r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	68ba      	ldr	r2, [r7, #8]
 80005e2:	0052      	lsls	r2, r2, #1
 80005e4:	2103      	movs	r1, #3
 80005e6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ea:	431a      	orrs	r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	2103      	movs	r1, #3
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	fa01 f202 	lsl.w	r2, r1, r2
 80005fc:	43d2      	mvns	r2, r2
 80005fe:	401a      	ands	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	60da      	str	r2, [r3, #12]
    break;
 8000604:	e08a      	b.n	800071c <GPIOConfigurePin+0x2ec>

case ioPortAnalog:

	gpio->MODER |= 0x03<<(2*bitNumber); // analog
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	0052      	lsls	r2, r2, #1
 800060e:	2103      	movs	r1, #3
 8000610:	fa01 f202 	lsl.w	r2, r1, r2
 8000614:	431a      	orrs	r2, r3
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	601a      	str	r2, [r3, #0]
    break;
 800061a:	e07f      	b.n	800071c <GPIOConfigurePin+0x2ec>

case ioPortInputFloat:

	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	2103      	movs	r1, #3
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	fa01 f202 	lsl.w	r2, r1, r2
 8000628:	43d2      	mvns	r2, r2
 800062a:	401a      	ands	r2, r3
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	60da      	str	r2, [r3, #12]
    break;
 8000630:	e074      	b.n	800071c <GPIOConfigurePin+0x2ec>

case ioPortInputPullUp:

	gpio->PUPDR |= ~(0x01<<bitNumber); // pull up
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	68db      	ldr	r3, [r3, #12]
 8000636:	2101      	movs	r1, #1
 8000638:	68ba      	ldr	r2, [r7, #8]
 800063a:	fa01 f202 	lsl.w	r2, r1, r2
 800063e:	43d2      	mvns	r2, r2
 8000640:	431a      	orrs	r2, r3
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	60da      	str	r2, [r3, #12]
    break;
 8000646:	e069      	b.n	800071c <GPIOConfigurePin+0x2ec>

case ioPortInputPullDown:

	gpio->PUPDR |= ~(0x02<<bitNumber); // pull down
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	2102      	movs	r1, #2
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	fa01 f202 	lsl.w	r2, r1, r2
 8000654:	43d2      	mvns	r2, r2
 8000656:	431a      	orrs	r2, r3
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	60da      	str	r2, [r3, #12]
    break;
 800065c:	e05e      	b.n	800071c <GPIOConfigurePin+0x2ec>

case ioPortAlternatrPushPull:

	gpio->MODER |= 0x02<<(2*bitNumber); // alternate function
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	0052      	lsls	r2, r2, #1
 8000666:	2102      	movs	r1, #2
 8000668:	fa01 f202 	lsl.w	r2, r1, r2
 800066c:	431a      	orrs	r2, r3
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	601a      	str	r2, [r3, #0]
	gpio->OTYPER &= ~(0x01<<bitNumber); // push pull
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	2101      	movs	r1, #1
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	fa01 f202 	lsl.w	r2, r1, r2
 800067e:	43d2      	mvns	r2, r2
 8000680:	401a      	ands	r2, r3
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	0052      	lsls	r2, r2, #1
 800068e:	2103      	movs	r1, #3
 8000690:	fa01 f202 	lsl.w	r2, r1, r2
 8000694:	431a      	orrs	r2, r3
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	2103      	movs	r1, #3
 80006a0:	68ba      	ldr	r2, [r7, #8]
 80006a2:	fa01 f202 	lsl.w	r2, r1, r2
 80006a6:	43d2      	mvns	r2, r2
 80006a8:	401a      	ands	r2, r3
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	60da      	str	r2, [r3, #12]
    break;
 80006ae:	e035      	b.n	800071c <GPIOConfigurePin+0x2ec>
 80006b0:	40020800 	.word	0x40020800
 80006b4:	40020000 	.word	0x40020000
 80006b8:	40020400 	.word	0x40020400
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40021c00 	.word	0x40021c00
 80006c4:	40020c00 	.word	0x40020c00
 80006c8:	40023800 	.word	0x40023800

case ioPortAlternatrOpenDrain:

	gpio->MODER |= 0x02<<(2*bitNumber); // alternate function
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	2102      	movs	r1, #2
 80006d6:	fa01 f202 	lsl.w	r2, r1, r2
 80006da:	431a      	orrs	r2, r3
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	601a      	str	r2, [r3, #0]
	gpio->OTYPER |= (0x01<<bitNumber); // open drain
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	2101      	movs	r1, #1
 80006e6:	68ba      	ldr	r2, [r7, #8]
 80006e8:	fa01 f202 	lsl.w	r2, r1, r2
 80006ec:	431a      	orrs	r2, r3
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	0052      	lsls	r2, r2, #1
 80006fa:	2103      	movs	r1, #3
 80006fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000700:	431a      	orrs	r2, r3
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	2103      	movs	r1, #3
 800070c:	68ba      	ldr	r2, [r7, #8]
 800070e:	fa01 f202 	lsl.w	r2, r1, r2
 8000712:	43d2      	mvns	r2, r2
 8000714:	401a      	ands	r2, r3
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	60da      	str	r2, [r3, #12]
    break;
 800071a:	bf00      	nop


}
    return true;
 800071c:	2301      	movs	r3, #1
}
 800071e:	4618      	mov	r0, r3
 8000720:	371c      	adds	r7, #28
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop

0800072c <GPIOConfigureAlternativFunction>:

bool GPIOConfigureAlternativFunction(GPIO_TypeDef *gpio,uint32_t bitNumber, uint32_t afValue) // konfigurace GPIO do alternativní funkce
{
 800072c:	b480      	push	{r7}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
	// alternativni funkce se nastavuje pomoci registrù AFR,(to øíká která alternativní funkce je pøipojena), registry jsou dva(AFRL,AFRH) protože potøebujeme 64bit (je tam šestnáct alternativních kanálù na každej vstup a výstup(to zanemná 4 bity na jeden kanál))
	// v hlavièkových souborech neni AFRL a AFRH ale je tam dvouprvkove uint 32 bitove pole (AFR[0] = AFRL,AFR[1] = AFRH)
	uint8_t afr = (bitNumber < 8) ? 0 : 1 ;
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	2b07      	cmp	r3, #7
 800073c:	bf8c      	ite	hi
 800073e:	2301      	movhi	r3, #1
 8000740:	2300      	movls	r3, #0
 8000742:	b2db      	uxtb	r3, r3
 8000744:	75fb      	strb	r3, [r7, #23]

    gpio->AFR[afr] &= ~(0x0f << (4 * (bitNumber & 0x07))); // vynulujeme 4 bity naseho kanalu, pro jistotu maskuju bit number
 8000746:	7dfa      	ldrb	r2, [r7, #23]
 8000748:	7df9      	ldrb	r1, [r7, #23]
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	3108      	adds	r1, #8
 800074e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000752:	68b9      	ldr	r1, [r7, #8]
 8000754:	f001 0107 	and.w	r1, r1, #7
 8000758:	0089      	lsls	r1, r1, #2
 800075a:	200f      	movs	r0, #15
 800075c:	fa00 f101 	lsl.w	r1, r0, r1
 8000760:	43c9      	mvns	r1, r1
 8000762:	4019      	ands	r1, r3
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3208      	adds	r2, #8
 8000768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    gpio->AFR[afr] |= ((afValue & 0x0f) << (4 * (bitNumber & 0x07))); // nastavim pozadovanou hodnotu alternativni funkce, prom jistotu, kdyby byla afValue vetsi než 4 bity(nemìla by být) si maskujeme jenom dané 4 bity které chceme používat
 800076c:	7dfa      	ldrb	r2, [r7, #23]
 800076e:	7df9      	ldrb	r1, [r7, #23]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	3108      	adds	r1, #8
 8000774:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f003 000f 	and.w	r0, r3, #15
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	f003 0307 	and.w	r3, r3, #7
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	fa00 f303 	lsl.w	r3, r0, r3
 800078a:	4319      	orrs	r1, r3
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	3208      	adds	r2, #8
 8000790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return true;
 8000794:	2301      	movs	r3, #1
  //  gpio->AFR[(bitNumber < 8) ? 0 : 1] &= ~(0x0f << (4 * (bitNumber & 0x07))); // vynuluj AF bity
  //  gpio->AFR[(bitNumber < 8) ? 0 : 1] |= ((afValue & 0x0f) << (4 * (bitNumber & 0x07))); // nastav AF bity



}
 8000796:	4618      	mov	r0, r3
 8000798:	371c      	adds	r7, #28
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <GPIORead>:
{
gpio -> ODR ^= (1<<bitNumber); // prostì jen zmìò hobnotu v ODR pro pøíslušný bit
}

bool GPIORead(GPIO_TypeDef *gpio, uint32_t bitNumber) // funkce pro zjištìní hodnoty na výstupu ODR pro bit na zadaném místì
{
 80007a2:	b480      	push	{r7}
 80007a4:	b083      	sub	sp, #12
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
 80007aa:	6039      	str	r1, [r7, #0]
	if((gpio -> MODER & (0x03<<(bitNumber*2))) == 0x00) // jestliže je pin nastaven jako vstup
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	683a      	ldr	r2, [r7, #0]
 80007b2:	0052      	lsls	r2, r2, #1
 80007b4:	2103      	movs	r1, #3
 80007b6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ba:	4013      	ands	r3, r2
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d10c      	bne.n	80007da <GPIORead+0x38>
	{
		 return ((gpio -> IDR) & (1<<bitNumber)); // AND ODR s maskou vrátí 0 (false) pokud zkoumany bit je nula, a pokud neni nula a je to jakekoliv jine cislo, nezalezi na to jake, vrati (true)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	691b      	ldr	r3, [r3, #16]
 80007c4:	2101      	movs	r1, #1
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	fa01 f202 	lsl.w	r2, r1, r2
 80007cc:	4013      	ands	r3, r2
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	bf14      	ite	ne
 80007d2:	2301      	movne	r3, #1
 80007d4:	2300      	moveq	r3, #0
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	e01c      	b.n	8000814 <GPIORead+0x72>

	}else if ((gpio -> MODER & (0x03<<(bitNumber*2))) == (0x01<<(bitNumber*2))) // pokud ne, tak je na prislusnem bitNumber kombinace 01
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	683a      	ldr	r2, [r7, #0]
 80007e0:	0052      	lsls	r2, r2, #1
 80007e2:	2103      	movs	r1, #3
 80007e4:	fa01 f202 	lsl.w	r2, r1, r2
 80007e8:	4013      	ands	r3, r2
 80007ea:	683a      	ldr	r2, [r7, #0]
 80007ec:	0052      	lsls	r2, r2, #1
 80007ee:	2101      	movs	r1, #1
 80007f0:	fa01 f202 	lsl.w	r2, r1, r2
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d10c      	bne.n	8000812 <GPIORead+0x70>
	{
		 return ((gpio -> ODR) & (1<<bitNumber)); // AND ODR s maskou vrátí 0 (false) pokud zkoumany bit je nula, a pokud neni nula a je to jakekoliv jine cislo, nezalezi na to jake, vrati (true)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	2101      	movs	r1, #1
 80007fe:	683a      	ldr	r2, [r7, #0]
 8000800:	fa01 f202 	lsl.w	r2, r1, r2
 8000804:	4013      	ands	r3, r2
 8000806:	2b00      	cmp	r3, #0
 8000808:	bf14      	ite	ne
 800080a:	2301      	movne	r3, #1
 800080c:	2300      	moveq	r3, #0
 800080e:	b2db      	uxtb	r3, r3
 8000810:	e000      	b.n	8000814 <GPIORead+0x72>
	}else
	{
		return false; // je potøeba dodìlat!!!!! pro analog a alternativvní funkce nebude fungovat!!!!!!!!
 8000812:	2300      	movs	r3, #0
	}

}
 8000814:	4618      	mov	r0, r3
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <_sbrk>:
	while (1) {}		/* Make sure we hang here */
}


void * _sbrk(int32_t incr)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8000828:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <_sbrk+0x38>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d102      	bne.n	8000836 <_sbrk+0x16>
		heap_end = & end;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <_sbrk+0x38>)
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <_sbrk+0x3c>)
 8000834:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <_sbrk+0x38>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <_sbrk+0x38>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4413      	add	r3, r2
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <_sbrk+0x38>)
 8000846:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8000848:	68fb      	ldr	r3, [r7, #12]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20000080 	.word	0x20000080
 800085c:	20000090 	.word	0x20000090

08000860 <_close>:

int _close(int32_t file)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <_close+0x20>)
 800086a:	2258      	movs	r2, #88	; 0x58
 800086c:	601a      	str	r2, [r3, #0]
	return -1;
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	2000008c 	.word	0x2000008c

08000884 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <_fstat+0x20>)
 8000890:	2258      	movs	r2, #88	; 0x58
 8000892:	601a      	str	r2, [r3, #0]
	return -1;
 8000894:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	2000008c 	.word	0x2000008c

080008a8 <_lseek>:
	errno = ENOSYS;
	return 0;
}

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <_lseek+0x24>)
 80008b6:	2258      	movs	r2, #88	; 0x58
 80008b8:	601a      	str	r2, [r3, #0]
	return -1;
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	2000008c 	.word	0x2000008c

080008d0 <_write>:
// pomocna deklarace, asi to ten kompilátor pochopí že už je nìkde mám vytvoøený a nevytvoøí si je sám a když je pak najde v main, tak je používá tam odsud, nebo nevím
int Usart2Send(char c);
int Usart2Recived(void);

int _write(int32_t file, uint8_t *ptr, int32_t len)
{ // prvni parametr, jestli se jedná stdin, stdout a podobnì.. druhý parametr je ukazatel na data které se mají vysílat a tøetí parametr je délka dat, kolik se jich má vysílat (respektive u write pøijmout)
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]


	for(int i = 0;i<len;i++)
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	e009      	b.n	80008f6 <_write+0x26>
	{
		Usart2Send(ptr[i]);
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	68ba      	ldr	r2, [r7, #8]
 80008e6:	4413      	add	r3, r2
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fcec 	bl	80002c8 <Usart2Send>
	for(int i = 0;i<len;i++)
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	3301      	adds	r3, #1
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	dbf1      	blt.n	80008e2 <_write+0x12>
	}

	errno = 0; // priznak ze neni chbya chyby
 80008fe:	4b04      	ldr	r3, [pc, #16]	; (8000910 <_write+0x40>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]

	return len; // vratim kolik jsem jich odvisilal
 8000904:	687b      	ldr	r3, [r7, #4]

//	errno = ENOSYS; // ENOSYS je chybový pøíznak že funkce není implementována... priznak bez chyby je nula
//	return -1;

}
 8000906:	4618      	mov	r0, r3
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000008c 	.word	0x2000008c

08000914 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]

	*ptr = Usart2Recived();
 8000920:	f7ff fcea 	bl	80002f8 <Usart2Recived>
 8000924:	4603      	mov	r3, r0
 8000926:	b2da      	uxtb	r2, r3
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	701a      	strb	r2, [r3, #0]

    errno = 0;
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <_read+0x28>)
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]

	return 1; // budu vracet pouze jeden znak, pokud budu chtit vic, zavolam funkci nekolikrat (protože Usar2Read je blokující, takže aby zbyteènì neblokovala než pøijdou všechny znaky)
 8000932:	2301      	movs	r3, #1


//	errno = ENOSYS;
//	return -1;
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2000008c 	.word	0x2000008c

08000940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000944:	4a16      	ldr	r2, [pc, #88]	; (80009a0 <SystemInit+0x60>)
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <SystemInit+0x60>)
 8000948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800094c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000954:	4a13      	ldr	r2, [pc, #76]	; (80009a4 <SystemInit+0x64>)
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <SystemInit+0x64>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000960:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <SystemInit+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000966:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <SystemInit+0x64>)
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <SystemInit+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000974:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <SystemInit+0x64>)
 8000978:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <SystemInit+0x68>)
 800097a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800097c:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <SystemInit+0x64>)
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <SystemInit+0x64>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000986:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <SystemInit+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <SystemInit+0x60>)
 8000990:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000994:	609a      	str	r2, [r3, #8]
#endif
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00
 80009a4:	40023800 	.word	0x40023800
 80009a8:	24003010 	.word	0x24003010

080009ac <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b087      	sub	sp, #28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
	int div = 1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80009bc:	e004      	b.n	80009c8 <ts_itoa+0x1c>
		div *= base;
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	fb02 f303 	mul.w	r3, r2, r3
 80009c6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d2f3      	bcs.n	80009be <ts_itoa+0x12>

	while (div != 0)
 80009d6:	e029      	b.n	8000a2c <ts_itoa+0x80>
	{
		int num = d/div;
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e0:	613b      	str	r3, [r7, #16]
		d = d%div;
 80009e2:	697a      	ldr	r2, [r7, #20]
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80009ea:	fb02 f201 	mul.w	r2, r2, r1
 80009ee:	1a9b      	subs	r3, r3, r2
 80009f0:	60bb      	str	r3, [r7, #8]
		div /= base;
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80009fa:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	2b09      	cmp	r3, #9
 8000a00:	dd0a      	ble.n	8000a18 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	1c59      	adds	r1, r3, #1
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	6011      	str	r1, [r2, #0]
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	b2d2      	uxtb	r2, r2
 8000a10:	3237      	adds	r2, #55	; 0x37
 8000a12:	b2d2      	uxtb	r2, r2
 8000a14:	701a      	strb	r2, [r3, #0]
 8000a16:	e009      	b.n	8000a2c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	1c59      	adds	r1, r3, #1
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	6011      	str	r1, [r2, #0]
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	b2d2      	uxtb	r2, r2
 8000a26:	3230      	adds	r2, #48	; 0x30
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d1d2      	bne.n	80009d8 <ts_itoa+0x2c>
	}
}
 8000a32:	bf00      	nop
 8000a34:	371c      	adds	r7, #28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b088      	sub	sp, #32
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	60f8      	str	r0, [r7, #12]
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8000a4e:	e07d      	b.n	8000b4c <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b25      	cmp	r3, #37	; 0x25
 8000a56:	d171      	bne.n	8000b3c <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b64      	cmp	r3, #100	; 0x64
 8000a64:	d01e      	beq.n	8000aa4 <ts_formatstring+0x66>
 8000a66:	2b64      	cmp	r3, #100	; 0x64
 8000a68:	dc06      	bgt.n	8000a78 <ts_formatstring+0x3a>
 8000a6a:	2b58      	cmp	r3, #88	; 0x58
 8000a6c:	d050      	beq.n	8000b10 <ts_formatstring+0xd2>
 8000a6e:	2b63      	cmp	r3, #99	; 0x63
 8000a70:	d00e      	beq.n	8000a90 <ts_formatstring+0x52>
 8000a72:	2b25      	cmp	r3, #37	; 0x25
 8000a74:	d058      	beq.n	8000b28 <ts_formatstring+0xea>
 8000a76:	e05d      	b.n	8000b34 <ts_formatstring+0xf6>
 8000a78:	2b73      	cmp	r3, #115	; 0x73
 8000a7a:	d02b      	beq.n	8000ad4 <ts_formatstring+0x96>
 8000a7c:	2b73      	cmp	r3, #115	; 0x73
 8000a7e:	dc02      	bgt.n	8000a86 <ts_formatstring+0x48>
 8000a80:	2b69      	cmp	r3, #105	; 0x69
 8000a82:	d00f      	beq.n	8000aa4 <ts_formatstring+0x66>
 8000a84:	e056      	b.n	8000b34 <ts_formatstring+0xf6>
 8000a86:	2b75      	cmp	r3, #117	; 0x75
 8000a88:	d037      	beq.n	8000afa <ts_formatstring+0xbc>
 8000a8a:	2b78      	cmp	r3, #120	; 0x78
 8000a8c:	d040      	beq.n	8000b10 <ts_formatstring+0xd2>
 8000a8e:	e051      	b.n	8000b34 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	1c5a      	adds	r2, r3, #1
 8000a94:	60fa      	str	r2, [r7, #12]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	1d11      	adds	r1, r2, #4
 8000a9a:	6079      	str	r1, [r7, #4]
 8000a9c:	6812      	ldr	r2, [r2, #0]
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	701a      	strb	r2, [r3, #0]
				break;
 8000aa2:	e047      	b.n	8000b34 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	1d1a      	adds	r2, r3, #4
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	da07      	bge.n	8000ac4 <ts_formatstring+0x86>
					{
						val *= -1;
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	425b      	negs	r3, r3
 8000ab8:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	1c5a      	adds	r2, r3, #1
 8000abe:	60fa      	str	r2, [r7, #12]
 8000ac0:	222d      	movs	r2, #45	; 0x2d
 8000ac2:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8000ac4:	69f9      	ldr	r1, [r7, #28]
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	220a      	movs	r2, #10
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff6d 	bl	80009ac <ts_itoa>
				}
				break;
 8000ad2:	e02f      	b.n	8000b34 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	1d1a      	adds	r2, r3, #4
 8000ad8:	607a      	str	r2, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8000ade:	e007      	b.n	8000af0 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	60fa      	str	r2, [r7, #12]
 8000ae6:	69ba      	ldr	r2, [r7, #24]
 8000ae8:	1c51      	adds	r1, r2, #1
 8000aea:	61b9      	str	r1, [r7, #24]
 8000aec:	7812      	ldrb	r2, [r2, #0]
 8000aee:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d1f3      	bne.n	8000ae0 <ts_formatstring+0xa2>
					}
				}
				break;
 8000af8:	e01c      	b.n	8000b34 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	1d1a      	adds	r2, r3, #4
 8000afe:	607a      	str	r2, [r7, #4]
 8000b00:	6819      	ldr	r1, [r3, #0]
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	220a      	movs	r2, #10
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff4f 	bl	80009ac <ts_itoa>
				break;
 8000b0e:	e011      	b.n	8000b34 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	1d1a      	adds	r2, r3, #4
 8000b14:	607a      	str	r2, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	2210      	movs	r2, #16
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff43 	bl	80009ac <ts_itoa>
				break;
 8000b26:	e005      	b.n	8000b34 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	60fa      	str	r2, [r7, #12]
 8000b2e:	2225      	movs	r2, #37	; 0x25
 8000b30:	701a      	strb	r2, [r3, #0]
				  break;
 8000b32:	bf00      	nop
			}
			fmt++;
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	3301      	adds	r3, #1
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	e007      	b.n	8000b4c <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	60fa      	str	r2, [r7, #12]
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	1c51      	adds	r1, r2, #1
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	7812      	ldrb	r2, [r2, #0]
 8000b4a:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	f47f af7d 	bne.w	8000a50 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	1ad3      	subs	r3, r2, r3
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3720      	adds	r7, #32
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
	int length = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8000b7a:	e081      	b.n	8000c80 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b25      	cmp	r3, #37	; 0x25
 8000b82:	d177      	bne.n	8000c74 <ts_formatlength+0x108>
		{
			++fmt;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3301      	adds	r3, #1
 8000b88:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	3b58      	subs	r3, #88	; 0x58
 8000b90:	2b20      	cmp	r3, #32
 8000b92:	d86a      	bhi.n	8000c6a <ts_formatlength+0xfe>
 8000b94:	a201      	add	r2, pc, #4	; (adr r2, 8000b9c <ts_formatlength+0x30>)
 8000b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9a:	bf00      	nop
 8000b9c:	08000c5d 	.word	0x08000c5d
 8000ba0:	08000c6b 	.word	0x08000c6b
 8000ba4:	08000c6b 	.word	0x08000c6b
 8000ba8:	08000c6b 	.word	0x08000c6b
 8000bac:	08000c6b 	.word	0x08000c6b
 8000bb0:	08000c6b 	.word	0x08000c6b
 8000bb4:	08000c6b 	.word	0x08000c6b
 8000bb8:	08000c6b 	.word	0x08000c6b
 8000bbc:	08000c6b 	.word	0x08000c6b
 8000bc0:	08000c6b 	.word	0x08000c6b
 8000bc4:	08000c6b 	.word	0x08000c6b
 8000bc8:	08000c21 	.word	0x08000c21
 8000bcc:	08000c2f 	.word	0x08000c2f
 8000bd0:	08000c6b 	.word	0x08000c6b
 8000bd4:	08000c6b 	.word	0x08000c6b
 8000bd8:	08000c6b 	.word	0x08000c6b
 8000bdc:	08000c6b 	.word	0x08000c6b
 8000be0:	08000c2f 	.word	0x08000c2f
 8000be4:	08000c6b 	.word	0x08000c6b
 8000be8:	08000c6b 	.word	0x08000c6b
 8000bec:	08000c6b 	.word	0x08000c6b
 8000bf0:	08000c6b 	.word	0x08000c6b
 8000bf4:	08000c6b 	.word	0x08000c6b
 8000bf8:	08000c6b 	.word	0x08000c6b
 8000bfc:	08000c6b 	.word	0x08000c6b
 8000c00:	08000c6b 	.word	0x08000c6b
 8000c04:	08000c6b 	.word	0x08000c6b
 8000c08:	08000c3d 	.word	0x08000c3d
 8000c0c:	08000c6b 	.word	0x08000c6b
 8000c10:	08000c2f 	.word	0x08000c2f
 8000c14:	08000c6b 	.word	0x08000c6b
 8000c18:	08000c6b 	.word	0x08000c6b
 8000c1c:	08000c5d 	.word	0x08000c5d
			{
			  case 'c':
		  		  va_arg(va, int);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	3304      	adds	r3, #4
 8000c24:	603b      	str	r3, [r7, #0]
				  ++length;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
				  break;
 8000c2c:	e025      	b.n	8000c7a <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	330b      	adds	r3, #11
 8000c32:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	3304      	adds	r3, #4
 8000c38:	603b      	str	r3, [r7, #0]
				  break;
 8000c3a:	e01e      	b.n	8000c7a <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	1d1a      	adds	r2, r3, #4
 8000c40:	603a      	str	r2, [r7, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8000c46:	e002      	b.n	8000c4e <ts_formatlength+0xe2>
			  			  ++length;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	1c5a      	adds	r2, r3, #1
 8000c52:	60ba      	str	r2, [r7, #8]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1f6      	bne.n	8000c48 <ts_formatlength+0xdc>
			  	  }
				  break;
 8000c5a:	e00e      	b.n	8000c7a <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3308      	adds	r3, #8
 8000c60:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	3304      	adds	r3, #4
 8000c66:	603b      	str	r3, [r7, #0]
				  break;
 8000c68:	e007      	b.n	8000c7a <ts_formatlength+0x10e>
			  default:
				  ++length;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
				  break;
 8000c70:	bf00      	nop
 8000c72:	e002      	b.n	8000c7a <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	3301      	adds	r3, #1
 8000c78:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	f47f af79 	bne.w	8000b7c <ts_formatlength+0x10>
	}
	return length;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8000c98:	b40f      	push	{r0, r1, r2, r3}
 8000c9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
	int length = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8000ca6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000caa:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8000cac:	6839      	ldr	r1, [r7, #0]
 8000cae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cb0:	f7ff ff5c 	bl	8000b6c <ts_formatlength>
 8000cb4:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8000cb6:	466b      	mov	r3, sp
 8000cb8:	461e      	mov	r6, r3
		char buf[length];
 8000cba:	68f9      	ldr	r1, [r7, #12]
 8000cbc:	1e4b      	subs	r3, r1, #1
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8000ccc:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8000cd0:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	00dd      	lsls	r5, r3, #3
 8000cde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8000ce2:	00d4      	lsls	r4, r2, #3
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	3307      	adds	r3, #7
 8000ce8:	08db      	lsrs	r3, r3, #3
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	ebad 0d03 	sub.w	sp, sp, r3
 8000cf0:	466b      	mov	r3, sp
 8000cf2:	3300      	adds	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8000cf6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cfa:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	683a      	ldr	r2, [r7, #0]
 8000d00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fe9b 	bl	8000a3e <ts_formatstring>
 8000d08:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	2001      	movs	r0, #1
 8000d12:	f7ff fddd 	bl	80008d0 <_write>
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d26:	b004      	add	sp, #16
 8000d28:	4770      	bx	lr
	...

08000d2c <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff fa4f 	bl	80001d8 <strlen>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	2001      	movs	r0, #1
 8000d48:	f7ff fdc2 	bl	80008d0 <_write>
 8000d4c:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	490b      	ldr	r1, [pc, #44]	; (8000d80 <puts+0x54>)
 8000d52:	2001      	movs	r0, #1
 8000d54:	f7ff fdbc 	bl	80008d0 <_write>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d102      	bne.n	8000d70 <puts+0x44>
	{
		res = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	e002      	b.n	8000d76 <puts+0x4a>
	}
	else
	{
		res = EOF;
 8000d70:	f04f 33ff 	mov.w	r3, #4294967295
 8000d74:	617b      	str	r3, [r7, #20]
	}

	return res;
 8000d76:	697b      	ldr	r3, [r7, #20]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	0800158c 	.word	0x0800158c

08000d84 <__libc_init_array>:
 8000d84:	b570      	push	{r4, r5, r6, lr}
 8000d86:	4e0d      	ldr	r6, [pc, #52]	; (8000dbc <__libc_init_array+0x38>)
 8000d88:	4c0d      	ldr	r4, [pc, #52]	; (8000dc0 <__libc_init_array+0x3c>)
 8000d8a:	1ba4      	subs	r4, r4, r6
 8000d8c:	10a4      	asrs	r4, r4, #2
 8000d8e:	2500      	movs	r5, #0
 8000d90:	42a5      	cmp	r5, r4
 8000d92:	d109      	bne.n	8000da8 <__libc_init_array+0x24>
 8000d94:	4e0b      	ldr	r6, [pc, #44]	; (8000dc4 <__libc_init_array+0x40>)
 8000d96:	4c0c      	ldr	r4, [pc, #48]	; (8000dc8 <__libc_init_array+0x44>)
 8000d98:	f000 fbd0 	bl	800153c <_init>
 8000d9c:	1ba4      	subs	r4, r4, r6
 8000d9e:	10a4      	asrs	r4, r4, #2
 8000da0:	2500      	movs	r5, #0
 8000da2:	42a5      	cmp	r5, r4
 8000da4:	d105      	bne.n	8000db2 <__libc_init_array+0x2e>
 8000da6:	bd70      	pop	{r4, r5, r6, pc}
 8000da8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dac:	4798      	blx	r3
 8000dae:	3501      	adds	r5, #1
 8000db0:	e7ee      	b.n	8000d90 <__libc_init_array+0xc>
 8000db2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000db6:	4798      	blx	r3
 8000db8:	3501      	adds	r5, #1
 8000dba:	e7f2      	b.n	8000da2 <__libc_init_array+0x1e>
 8000dbc:	080015f4 	.word	0x080015f4
 8000dc0:	080015f4 	.word	0x080015f4
 8000dc4:	080015f4 	.word	0x080015f4
 8000dc8:	080015f8 	.word	0x080015f8

08000dcc <malloc>:
 8000dcc:	4b02      	ldr	r3, [pc, #8]	; (8000dd8 <malloc+0xc>)
 8000dce:	4601      	mov	r1, r0
 8000dd0:	6818      	ldr	r0, [r3, #0]
 8000dd2:	f000 b851 	b.w	8000e78 <_malloc_r>
 8000dd6:	bf00      	nop
 8000dd8:	20000000 	.word	0x20000000

08000ddc <_free_r>:
 8000ddc:	b538      	push	{r3, r4, r5, lr}
 8000dde:	4605      	mov	r5, r0
 8000de0:	2900      	cmp	r1, #0
 8000de2:	d045      	beq.n	8000e70 <_free_r+0x94>
 8000de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000de8:	1f0c      	subs	r4, r1, #4
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	bfb8      	it	lt
 8000dee:	18e4      	addlt	r4, r4, r3
 8000df0:	f000 fb06 	bl	8001400 <__malloc_lock>
 8000df4:	4a1f      	ldr	r2, [pc, #124]	; (8000e74 <_free_r+0x98>)
 8000df6:	6813      	ldr	r3, [r2, #0]
 8000df8:	4610      	mov	r0, r2
 8000dfa:	b933      	cbnz	r3, 8000e0a <_free_r+0x2e>
 8000dfc:	6063      	str	r3, [r4, #4]
 8000dfe:	6014      	str	r4, [r2, #0]
 8000e00:	4628      	mov	r0, r5
 8000e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e06:	f000 bafc 	b.w	8001402 <__malloc_unlock>
 8000e0a:	42a3      	cmp	r3, r4
 8000e0c:	d90c      	bls.n	8000e28 <_free_r+0x4c>
 8000e0e:	6821      	ldr	r1, [r4, #0]
 8000e10:	1862      	adds	r2, r4, r1
 8000e12:	4293      	cmp	r3, r2
 8000e14:	bf04      	itt	eq
 8000e16:	681a      	ldreq	r2, [r3, #0]
 8000e18:	685b      	ldreq	r3, [r3, #4]
 8000e1a:	6063      	str	r3, [r4, #4]
 8000e1c:	bf04      	itt	eq
 8000e1e:	1852      	addeq	r2, r2, r1
 8000e20:	6022      	streq	r2, [r4, #0]
 8000e22:	6004      	str	r4, [r0, #0]
 8000e24:	e7ec      	b.n	8000e00 <_free_r+0x24>
 8000e26:	4613      	mov	r3, r2
 8000e28:	685a      	ldr	r2, [r3, #4]
 8000e2a:	b10a      	cbz	r2, 8000e30 <_free_r+0x54>
 8000e2c:	42a2      	cmp	r2, r4
 8000e2e:	d9fa      	bls.n	8000e26 <_free_r+0x4a>
 8000e30:	6819      	ldr	r1, [r3, #0]
 8000e32:	1858      	adds	r0, r3, r1
 8000e34:	42a0      	cmp	r0, r4
 8000e36:	d10b      	bne.n	8000e50 <_free_r+0x74>
 8000e38:	6820      	ldr	r0, [r4, #0]
 8000e3a:	4401      	add	r1, r0
 8000e3c:	1858      	adds	r0, r3, r1
 8000e3e:	4282      	cmp	r2, r0
 8000e40:	6019      	str	r1, [r3, #0]
 8000e42:	d1dd      	bne.n	8000e00 <_free_r+0x24>
 8000e44:	6810      	ldr	r0, [r2, #0]
 8000e46:	6852      	ldr	r2, [r2, #4]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	4401      	add	r1, r0
 8000e4c:	6019      	str	r1, [r3, #0]
 8000e4e:	e7d7      	b.n	8000e00 <_free_r+0x24>
 8000e50:	d902      	bls.n	8000e58 <_free_r+0x7c>
 8000e52:	230c      	movs	r3, #12
 8000e54:	602b      	str	r3, [r5, #0]
 8000e56:	e7d3      	b.n	8000e00 <_free_r+0x24>
 8000e58:	6820      	ldr	r0, [r4, #0]
 8000e5a:	1821      	adds	r1, r4, r0
 8000e5c:	428a      	cmp	r2, r1
 8000e5e:	bf04      	itt	eq
 8000e60:	6811      	ldreq	r1, [r2, #0]
 8000e62:	6852      	ldreq	r2, [r2, #4]
 8000e64:	6062      	str	r2, [r4, #4]
 8000e66:	bf04      	itt	eq
 8000e68:	1809      	addeq	r1, r1, r0
 8000e6a:	6021      	streq	r1, [r4, #0]
 8000e6c:	605c      	str	r4, [r3, #4]
 8000e6e:	e7c7      	b.n	8000e00 <_free_r+0x24>
 8000e70:	bd38      	pop	{r3, r4, r5, pc}
 8000e72:	bf00      	nop
 8000e74:	20000084 	.word	0x20000084

08000e78 <_malloc_r>:
 8000e78:	b570      	push	{r4, r5, r6, lr}
 8000e7a:	1ccd      	adds	r5, r1, #3
 8000e7c:	f025 0503 	bic.w	r5, r5, #3
 8000e80:	3508      	adds	r5, #8
 8000e82:	2d0c      	cmp	r5, #12
 8000e84:	bf38      	it	cc
 8000e86:	250c      	movcc	r5, #12
 8000e88:	2d00      	cmp	r5, #0
 8000e8a:	4606      	mov	r6, r0
 8000e8c:	db01      	blt.n	8000e92 <_malloc_r+0x1a>
 8000e8e:	42a9      	cmp	r1, r5
 8000e90:	d903      	bls.n	8000e9a <_malloc_r+0x22>
 8000e92:	230c      	movs	r3, #12
 8000e94:	6033      	str	r3, [r6, #0]
 8000e96:	2000      	movs	r0, #0
 8000e98:	bd70      	pop	{r4, r5, r6, pc}
 8000e9a:	f000 fab1 	bl	8001400 <__malloc_lock>
 8000e9e:	4a23      	ldr	r2, [pc, #140]	; (8000f2c <_malloc_r+0xb4>)
 8000ea0:	6814      	ldr	r4, [r2, #0]
 8000ea2:	4621      	mov	r1, r4
 8000ea4:	b991      	cbnz	r1, 8000ecc <_malloc_r+0x54>
 8000ea6:	4c22      	ldr	r4, [pc, #136]	; (8000f30 <_malloc_r+0xb8>)
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	b91b      	cbnz	r3, 8000eb4 <_malloc_r+0x3c>
 8000eac:	4630      	mov	r0, r6
 8000eae:	f000 f841 	bl	8000f34 <_sbrk_r>
 8000eb2:	6020      	str	r0, [r4, #0]
 8000eb4:	4629      	mov	r1, r5
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	f000 f83c 	bl	8000f34 <_sbrk_r>
 8000ebc:	1c43      	adds	r3, r0, #1
 8000ebe:	d126      	bne.n	8000f0e <_malloc_r+0x96>
 8000ec0:	230c      	movs	r3, #12
 8000ec2:	6033      	str	r3, [r6, #0]
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	f000 fa9c 	bl	8001402 <__malloc_unlock>
 8000eca:	e7e4      	b.n	8000e96 <_malloc_r+0x1e>
 8000ecc:	680b      	ldr	r3, [r1, #0]
 8000ece:	1b5b      	subs	r3, r3, r5
 8000ed0:	d41a      	bmi.n	8000f08 <_malloc_r+0x90>
 8000ed2:	2b0b      	cmp	r3, #11
 8000ed4:	d90f      	bls.n	8000ef6 <_malloc_r+0x7e>
 8000ed6:	600b      	str	r3, [r1, #0]
 8000ed8:	50cd      	str	r5, [r1, r3]
 8000eda:	18cc      	adds	r4, r1, r3
 8000edc:	4630      	mov	r0, r6
 8000ede:	f000 fa90 	bl	8001402 <__malloc_unlock>
 8000ee2:	f104 000b 	add.w	r0, r4, #11
 8000ee6:	1d23      	adds	r3, r4, #4
 8000ee8:	f020 0007 	bic.w	r0, r0, #7
 8000eec:	1ac3      	subs	r3, r0, r3
 8000eee:	d01b      	beq.n	8000f28 <_malloc_r+0xb0>
 8000ef0:	425a      	negs	r2, r3
 8000ef2:	50e2      	str	r2, [r4, r3]
 8000ef4:	bd70      	pop	{r4, r5, r6, pc}
 8000ef6:	428c      	cmp	r4, r1
 8000ef8:	bf0d      	iteet	eq
 8000efa:	6863      	ldreq	r3, [r4, #4]
 8000efc:	684b      	ldrne	r3, [r1, #4]
 8000efe:	6063      	strne	r3, [r4, #4]
 8000f00:	6013      	streq	r3, [r2, #0]
 8000f02:	bf18      	it	ne
 8000f04:	460c      	movne	r4, r1
 8000f06:	e7e9      	b.n	8000edc <_malloc_r+0x64>
 8000f08:	460c      	mov	r4, r1
 8000f0a:	6849      	ldr	r1, [r1, #4]
 8000f0c:	e7ca      	b.n	8000ea4 <_malloc_r+0x2c>
 8000f0e:	1cc4      	adds	r4, r0, #3
 8000f10:	f024 0403 	bic.w	r4, r4, #3
 8000f14:	42a0      	cmp	r0, r4
 8000f16:	d005      	beq.n	8000f24 <_malloc_r+0xac>
 8000f18:	1a21      	subs	r1, r4, r0
 8000f1a:	4630      	mov	r0, r6
 8000f1c:	f000 f80a 	bl	8000f34 <_sbrk_r>
 8000f20:	3001      	adds	r0, #1
 8000f22:	d0cd      	beq.n	8000ec0 <_malloc_r+0x48>
 8000f24:	6025      	str	r5, [r4, #0]
 8000f26:	e7d9      	b.n	8000edc <_malloc_r+0x64>
 8000f28:	bd70      	pop	{r4, r5, r6, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000084 	.word	0x20000084
 8000f30:	20000088 	.word	0x20000088

08000f34 <_sbrk_r>:
 8000f34:	b538      	push	{r3, r4, r5, lr}
 8000f36:	4c06      	ldr	r4, [pc, #24]	; (8000f50 <_sbrk_r+0x1c>)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	4605      	mov	r5, r0
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	6023      	str	r3, [r4, #0]
 8000f40:	f7ff fc6e 	bl	8000820 <_sbrk>
 8000f44:	1c43      	adds	r3, r0, #1
 8000f46:	d102      	bne.n	8000f4e <_sbrk_r+0x1a>
 8000f48:	6823      	ldr	r3, [r4, #0]
 8000f4a:	b103      	cbz	r3, 8000f4e <_sbrk_r+0x1a>
 8000f4c:	602b      	str	r3, [r5, #0]
 8000f4e:	bd38      	pop	{r3, r4, r5, pc}
 8000f50:	2000008c 	.word	0x2000008c

08000f54 <setvbuf>:
 8000f54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000f58:	461d      	mov	r5, r3
 8000f5a:	4b51      	ldr	r3, [pc, #324]	; (80010a0 <setvbuf+0x14c>)
 8000f5c:	681e      	ldr	r6, [r3, #0]
 8000f5e:	4604      	mov	r4, r0
 8000f60:	460f      	mov	r7, r1
 8000f62:	4690      	mov	r8, r2
 8000f64:	b126      	cbz	r6, 8000f70 <setvbuf+0x1c>
 8000f66:	69b3      	ldr	r3, [r6, #24]
 8000f68:	b913      	cbnz	r3, 8000f70 <setvbuf+0x1c>
 8000f6a:	4630      	mov	r0, r6
 8000f6c:	f000 f992 	bl	8001294 <__sinit>
 8000f70:	4b4c      	ldr	r3, [pc, #304]	; (80010a4 <setvbuf+0x150>)
 8000f72:	429c      	cmp	r4, r3
 8000f74:	d152      	bne.n	800101c <setvbuf+0xc8>
 8000f76:	6874      	ldr	r4, [r6, #4]
 8000f78:	f1b8 0f02 	cmp.w	r8, #2
 8000f7c:	d006      	beq.n	8000f8c <setvbuf+0x38>
 8000f7e:	f1b8 0f01 	cmp.w	r8, #1
 8000f82:	f200 8089 	bhi.w	8001098 <setvbuf+0x144>
 8000f86:	2d00      	cmp	r5, #0
 8000f88:	f2c0 8086 	blt.w	8001098 <setvbuf+0x144>
 8000f8c:	4621      	mov	r1, r4
 8000f8e:	4630      	mov	r0, r6
 8000f90:	f000 f916 	bl	80011c0 <_fflush_r>
 8000f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f96:	b141      	cbz	r1, 8000faa <setvbuf+0x56>
 8000f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f9c:	4299      	cmp	r1, r3
 8000f9e:	d002      	beq.n	8000fa6 <setvbuf+0x52>
 8000fa0:	4630      	mov	r0, r6
 8000fa2:	f7ff ff1b 	bl	8000ddc <_free_r>
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	6363      	str	r3, [r4, #52]	; 0x34
 8000faa:	2300      	movs	r3, #0
 8000fac:	61a3      	str	r3, [r4, #24]
 8000fae:	6063      	str	r3, [r4, #4]
 8000fb0:	89a3      	ldrh	r3, [r4, #12]
 8000fb2:	061b      	lsls	r3, r3, #24
 8000fb4:	d503      	bpl.n	8000fbe <setvbuf+0x6a>
 8000fb6:	6921      	ldr	r1, [r4, #16]
 8000fb8:	4630      	mov	r0, r6
 8000fba:	f7ff ff0f 	bl	8000ddc <_free_r>
 8000fbe:	89a3      	ldrh	r3, [r4, #12]
 8000fc0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8000fc4:	f023 0303 	bic.w	r3, r3, #3
 8000fc8:	f1b8 0f02 	cmp.w	r8, #2
 8000fcc:	81a3      	strh	r3, [r4, #12]
 8000fce:	d05d      	beq.n	800108c <setvbuf+0x138>
 8000fd0:	ab01      	add	r3, sp, #4
 8000fd2:	466a      	mov	r2, sp
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	f000 f9e6 	bl	80013a8 <__swhatbuf_r>
 8000fdc:	89a3      	ldrh	r3, [r4, #12]
 8000fde:	4318      	orrs	r0, r3
 8000fe0:	81a0      	strh	r0, [r4, #12]
 8000fe2:	bb2d      	cbnz	r5, 8001030 <setvbuf+0xdc>
 8000fe4:	9d00      	ldr	r5, [sp, #0]
 8000fe6:	4628      	mov	r0, r5
 8000fe8:	f7ff fef0 	bl	8000dcc <malloc>
 8000fec:	4607      	mov	r7, r0
 8000fee:	2800      	cmp	r0, #0
 8000ff0:	d14e      	bne.n	8001090 <setvbuf+0x13c>
 8000ff2:	f8dd 9000 	ldr.w	r9, [sp]
 8000ff6:	45a9      	cmp	r9, r5
 8000ff8:	d13c      	bne.n	8001074 <setvbuf+0x120>
 8000ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffe:	89a3      	ldrh	r3, [r4, #12]
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	81a3      	strh	r3, [r4, #12]
 8001006:	2300      	movs	r3, #0
 8001008:	60a3      	str	r3, [r4, #8]
 800100a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800100e:	6023      	str	r3, [r4, #0]
 8001010:	6123      	str	r3, [r4, #16]
 8001012:	2301      	movs	r3, #1
 8001014:	6163      	str	r3, [r4, #20]
 8001016:	b003      	add	sp, #12
 8001018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800101c:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <setvbuf+0x154>)
 800101e:	429c      	cmp	r4, r3
 8001020:	d101      	bne.n	8001026 <setvbuf+0xd2>
 8001022:	68b4      	ldr	r4, [r6, #8]
 8001024:	e7a8      	b.n	8000f78 <setvbuf+0x24>
 8001026:	4b21      	ldr	r3, [pc, #132]	; (80010ac <setvbuf+0x158>)
 8001028:	429c      	cmp	r4, r3
 800102a:	bf08      	it	eq
 800102c:	68f4      	ldreq	r4, [r6, #12]
 800102e:	e7a3      	b.n	8000f78 <setvbuf+0x24>
 8001030:	2f00      	cmp	r7, #0
 8001032:	d0d8      	beq.n	8000fe6 <setvbuf+0x92>
 8001034:	69b3      	ldr	r3, [r6, #24]
 8001036:	b913      	cbnz	r3, 800103e <setvbuf+0xea>
 8001038:	4630      	mov	r0, r6
 800103a:	f000 f92b 	bl	8001294 <__sinit>
 800103e:	f1b8 0f01 	cmp.w	r8, #1
 8001042:	bf08      	it	eq
 8001044:	89a3      	ldrheq	r3, [r4, #12]
 8001046:	6027      	str	r7, [r4, #0]
 8001048:	bf04      	itt	eq
 800104a:	f043 0301 	orreq.w	r3, r3, #1
 800104e:	81a3      	strheq	r3, [r4, #12]
 8001050:	89a3      	ldrh	r3, [r4, #12]
 8001052:	6127      	str	r7, [r4, #16]
 8001054:	f013 0008 	ands.w	r0, r3, #8
 8001058:	6165      	str	r5, [r4, #20]
 800105a:	d01b      	beq.n	8001094 <setvbuf+0x140>
 800105c:	f013 0001 	ands.w	r0, r3, #1
 8001060:	bf18      	it	ne
 8001062:	426d      	negne	r5, r5
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	bf1d      	ittte	ne
 800106a:	60a3      	strne	r3, [r4, #8]
 800106c:	61a5      	strne	r5, [r4, #24]
 800106e:	4618      	movne	r0, r3
 8001070:	60a5      	streq	r5, [r4, #8]
 8001072:	e7d0      	b.n	8001016 <setvbuf+0xc2>
 8001074:	4648      	mov	r0, r9
 8001076:	f7ff fea9 	bl	8000dcc <malloc>
 800107a:	4607      	mov	r7, r0
 800107c:	2800      	cmp	r0, #0
 800107e:	d0bc      	beq.n	8000ffa <setvbuf+0xa6>
 8001080:	89a3      	ldrh	r3, [r4, #12]
 8001082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001086:	81a3      	strh	r3, [r4, #12]
 8001088:	464d      	mov	r5, r9
 800108a:	e7d3      	b.n	8001034 <setvbuf+0xe0>
 800108c:	2000      	movs	r0, #0
 800108e:	e7b6      	b.n	8000ffe <setvbuf+0xaa>
 8001090:	46a9      	mov	r9, r5
 8001092:	e7f5      	b.n	8001080 <setvbuf+0x12c>
 8001094:	60a0      	str	r0, [r4, #8]
 8001096:	e7be      	b.n	8001016 <setvbuf+0xc2>
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	e7bb      	b.n	8001016 <setvbuf+0xc2>
 800109e:	bf00      	nop
 80010a0:	20000000 	.word	0x20000000
 80010a4:	080015b4 	.word	0x080015b4
 80010a8:	080015d4 	.word	0x080015d4
 80010ac:	08001594 	.word	0x08001594

080010b0 <__sflush_r>:
 80010b0:	898a      	ldrh	r2, [r1, #12]
 80010b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010b6:	4605      	mov	r5, r0
 80010b8:	0710      	lsls	r0, r2, #28
 80010ba:	460c      	mov	r4, r1
 80010bc:	d45a      	bmi.n	8001174 <__sflush_r+0xc4>
 80010be:	684b      	ldr	r3, [r1, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	dc05      	bgt.n	80010d0 <__sflush_r+0x20>
 80010c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	dc02      	bgt.n	80010d0 <__sflush_r+0x20>
 80010ca:	2000      	movs	r0, #0
 80010cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80010d2:	2e00      	cmp	r6, #0
 80010d4:	d0f9      	beq.n	80010ca <__sflush_r+0x1a>
 80010d6:	2300      	movs	r3, #0
 80010d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80010dc:	682f      	ldr	r7, [r5, #0]
 80010de:	602b      	str	r3, [r5, #0]
 80010e0:	d033      	beq.n	800114a <__sflush_r+0x9a>
 80010e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80010e4:	89a3      	ldrh	r3, [r4, #12]
 80010e6:	075a      	lsls	r2, r3, #29
 80010e8:	d505      	bpl.n	80010f6 <__sflush_r+0x46>
 80010ea:	6863      	ldr	r3, [r4, #4]
 80010ec:	1ac0      	subs	r0, r0, r3
 80010ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80010f0:	b10b      	cbz	r3, 80010f6 <__sflush_r+0x46>
 80010f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010f4:	1ac0      	subs	r0, r0, r3
 80010f6:	2300      	movs	r3, #0
 80010f8:	4602      	mov	r2, r0
 80010fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80010fc:	6a21      	ldr	r1, [r4, #32]
 80010fe:	4628      	mov	r0, r5
 8001100:	47b0      	blx	r6
 8001102:	1c43      	adds	r3, r0, #1
 8001104:	89a3      	ldrh	r3, [r4, #12]
 8001106:	d106      	bne.n	8001116 <__sflush_r+0x66>
 8001108:	6829      	ldr	r1, [r5, #0]
 800110a:	291d      	cmp	r1, #29
 800110c:	d84b      	bhi.n	80011a6 <__sflush_r+0xf6>
 800110e:	4a2b      	ldr	r2, [pc, #172]	; (80011bc <__sflush_r+0x10c>)
 8001110:	40ca      	lsrs	r2, r1
 8001112:	07d6      	lsls	r6, r2, #31
 8001114:	d547      	bpl.n	80011a6 <__sflush_r+0xf6>
 8001116:	2200      	movs	r2, #0
 8001118:	6062      	str	r2, [r4, #4]
 800111a:	04d9      	lsls	r1, r3, #19
 800111c:	6922      	ldr	r2, [r4, #16]
 800111e:	6022      	str	r2, [r4, #0]
 8001120:	d504      	bpl.n	800112c <__sflush_r+0x7c>
 8001122:	1c42      	adds	r2, r0, #1
 8001124:	d101      	bne.n	800112a <__sflush_r+0x7a>
 8001126:	682b      	ldr	r3, [r5, #0]
 8001128:	b903      	cbnz	r3, 800112c <__sflush_r+0x7c>
 800112a:	6560      	str	r0, [r4, #84]	; 0x54
 800112c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800112e:	602f      	str	r7, [r5, #0]
 8001130:	2900      	cmp	r1, #0
 8001132:	d0ca      	beq.n	80010ca <__sflush_r+0x1a>
 8001134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001138:	4299      	cmp	r1, r3
 800113a:	d002      	beq.n	8001142 <__sflush_r+0x92>
 800113c:	4628      	mov	r0, r5
 800113e:	f7ff fe4d 	bl	8000ddc <_free_r>
 8001142:	2000      	movs	r0, #0
 8001144:	6360      	str	r0, [r4, #52]	; 0x34
 8001146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800114a:	6a21      	ldr	r1, [r4, #32]
 800114c:	2301      	movs	r3, #1
 800114e:	4628      	mov	r0, r5
 8001150:	47b0      	blx	r6
 8001152:	1c41      	adds	r1, r0, #1
 8001154:	d1c6      	bne.n	80010e4 <__sflush_r+0x34>
 8001156:	682b      	ldr	r3, [r5, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0c3      	beq.n	80010e4 <__sflush_r+0x34>
 800115c:	2b1d      	cmp	r3, #29
 800115e:	d001      	beq.n	8001164 <__sflush_r+0xb4>
 8001160:	2b16      	cmp	r3, #22
 8001162:	d101      	bne.n	8001168 <__sflush_r+0xb8>
 8001164:	602f      	str	r7, [r5, #0]
 8001166:	e7b0      	b.n	80010ca <__sflush_r+0x1a>
 8001168:	89a3      	ldrh	r3, [r4, #12]
 800116a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800116e:	81a3      	strh	r3, [r4, #12]
 8001170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001174:	690f      	ldr	r7, [r1, #16]
 8001176:	2f00      	cmp	r7, #0
 8001178:	d0a7      	beq.n	80010ca <__sflush_r+0x1a>
 800117a:	0793      	lsls	r3, r2, #30
 800117c:	680e      	ldr	r6, [r1, #0]
 800117e:	bf08      	it	eq
 8001180:	694b      	ldreq	r3, [r1, #20]
 8001182:	600f      	str	r7, [r1, #0]
 8001184:	bf18      	it	ne
 8001186:	2300      	movne	r3, #0
 8001188:	eba6 0807 	sub.w	r8, r6, r7
 800118c:	608b      	str	r3, [r1, #8]
 800118e:	f1b8 0f00 	cmp.w	r8, #0
 8001192:	dd9a      	ble.n	80010ca <__sflush_r+0x1a>
 8001194:	4643      	mov	r3, r8
 8001196:	463a      	mov	r2, r7
 8001198:	6a21      	ldr	r1, [r4, #32]
 800119a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800119c:	4628      	mov	r0, r5
 800119e:	47b0      	blx	r6
 80011a0:	2800      	cmp	r0, #0
 80011a2:	dc07      	bgt.n	80011b4 <__sflush_r+0x104>
 80011a4:	89a3      	ldrh	r3, [r4, #12]
 80011a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011aa:	81a3      	strh	r3, [r4, #12]
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011b4:	4407      	add	r7, r0
 80011b6:	eba8 0800 	sub.w	r8, r8, r0
 80011ba:	e7e8      	b.n	800118e <__sflush_r+0xde>
 80011bc:	20400001 	.word	0x20400001

080011c0 <_fflush_r>:
 80011c0:	b538      	push	{r3, r4, r5, lr}
 80011c2:	690b      	ldr	r3, [r1, #16]
 80011c4:	4605      	mov	r5, r0
 80011c6:	460c      	mov	r4, r1
 80011c8:	b1db      	cbz	r3, 8001202 <_fflush_r+0x42>
 80011ca:	b118      	cbz	r0, 80011d4 <_fflush_r+0x14>
 80011cc:	6983      	ldr	r3, [r0, #24]
 80011ce:	b90b      	cbnz	r3, 80011d4 <_fflush_r+0x14>
 80011d0:	f000 f860 	bl	8001294 <__sinit>
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <_fflush_r+0x48>)
 80011d6:	429c      	cmp	r4, r3
 80011d8:	d109      	bne.n	80011ee <_fflush_r+0x2e>
 80011da:	686c      	ldr	r4, [r5, #4]
 80011dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011e0:	b17b      	cbz	r3, 8001202 <_fflush_r+0x42>
 80011e2:	4621      	mov	r1, r4
 80011e4:	4628      	mov	r0, r5
 80011e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011ea:	f7ff bf61 	b.w	80010b0 <__sflush_r>
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <_fflush_r+0x4c>)
 80011f0:	429c      	cmp	r4, r3
 80011f2:	d101      	bne.n	80011f8 <_fflush_r+0x38>
 80011f4:	68ac      	ldr	r4, [r5, #8]
 80011f6:	e7f1      	b.n	80011dc <_fflush_r+0x1c>
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <_fflush_r+0x50>)
 80011fa:	429c      	cmp	r4, r3
 80011fc:	bf08      	it	eq
 80011fe:	68ec      	ldreq	r4, [r5, #12]
 8001200:	e7ec      	b.n	80011dc <_fflush_r+0x1c>
 8001202:	2000      	movs	r0, #0
 8001204:	bd38      	pop	{r3, r4, r5, pc}
 8001206:	bf00      	nop
 8001208:	080015b4 	.word	0x080015b4
 800120c:	080015d4 	.word	0x080015d4
 8001210:	08001594 	.word	0x08001594

08001214 <_cleanup_r>:
 8001214:	4901      	ldr	r1, [pc, #4]	; (800121c <_cleanup_r+0x8>)
 8001216:	f000 b8a9 	b.w	800136c <_fwalk_reent>
 800121a:	bf00      	nop
 800121c:	080011c1 	.word	0x080011c1

08001220 <std.isra.0>:
 8001220:	2300      	movs	r3, #0
 8001222:	b510      	push	{r4, lr}
 8001224:	4604      	mov	r4, r0
 8001226:	6003      	str	r3, [r0, #0]
 8001228:	6043      	str	r3, [r0, #4]
 800122a:	6083      	str	r3, [r0, #8]
 800122c:	8181      	strh	r1, [r0, #12]
 800122e:	6643      	str	r3, [r0, #100]	; 0x64
 8001230:	81c2      	strh	r2, [r0, #14]
 8001232:	6103      	str	r3, [r0, #16]
 8001234:	6143      	str	r3, [r0, #20]
 8001236:	6183      	str	r3, [r0, #24]
 8001238:	4619      	mov	r1, r3
 800123a:	2208      	movs	r2, #8
 800123c:	305c      	adds	r0, #92	; 0x5c
 800123e:	f000 f8d7 	bl	80013f0 <memset>
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <std.isra.0+0x38>)
 8001244:	6263      	str	r3, [r4, #36]	; 0x24
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <std.isra.0+0x3c>)
 8001248:	62a3      	str	r3, [r4, #40]	; 0x28
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <std.isra.0+0x40>)
 800124c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <std.isra.0+0x44>)
 8001250:	6224      	str	r4, [r4, #32]
 8001252:	6323      	str	r3, [r4, #48]	; 0x30
 8001254:	bd10      	pop	{r4, pc}
 8001256:	bf00      	nop
 8001258:	08001405 	.word	0x08001405
 800125c:	08001427 	.word	0x08001427
 8001260:	0800145f 	.word	0x0800145f
 8001264:	08001483 	.word	0x08001483

08001268 <__sfmoreglue>:
 8001268:	b570      	push	{r4, r5, r6, lr}
 800126a:	1e4a      	subs	r2, r1, #1
 800126c:	2568      	movs	r5, #104	; 0x68
 800126e:	4355      	muls	r5, r2
 8001270:	460e      	mov	r6, r1
 8001272:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001276:	f7ff fdff 	bl	8000e78 <_malloc_r>
 800127a:	4604      	mov	r4, r0
 800127c:	b140      	cbz	r0, 8001290 <__sfmoreglue+0x28>
 800127e:	2100      	movs	r1, #0
 8001280:	e880 0042 	stmia.w	r0, {r1, r6}
 8001284:	300c      	adds	r0, #12
 8001286:	60a0      	str	r0, [r4, #8]
 8001288:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800128c:	f000 f8b0 	bl	80013f0 <memset>
 8001290:	4620      	mov	r0, r4
 8001292:	bd70      	pop	{r4, r5, r6, pc}

08001294 <__sinit>:
 8001294:	6983      	ldr	r3, [r0, #24]
 8001296:	b510      	push	{r4, lr}
 8001298:	4604      	mov	r4, r0
 800129a:	bb33      	cbnz	r3, 80012ea <__sinit+0x56>
 800129c:	6483      	str	r3, [r0, #72]	; 0x48
 800129e:	64c3      	str	r3, [r0, #76]	; 0x4c
 80012a0:	6503      	str	r3, [r0, #80]	; 0x50
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <__sinit+0x58>)
 80012a4:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <__sinit+0x5c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6282      	str	r2, [r0, #40]	; 0x28
 80012aa:	4298      	cmp	r0, r3
 80012ac:	bf04      	itt	eq
 80012ae:	2301      	moveq	r3, #1
 80012b0:	6183      	streq	r3, [r0, #24]
 80012b2:	f000 f81f 	bl	80012f4 <__sfp>
 80012b6:	6060      	str	r0, [r4, #4]
 80012b8:	4620      	mov	r0, r4
 80012ba:	f000 f81b 	bl	80012f4 <__sfp>
 80012be:	60a0      	str	r0, [r4, #8]
 80012c0:	4620      	mov	r0, r4
 80012c2:	f000 f817 	bl	80012f4 <__sfp>
 80012c6:	2200      	movs	r2, #0
 80012c8:	60e0      	str	r0, [r4, #12]
 80012ca:	2104      	movs	r1, #4
 80012cc:	6860      	ldr	r0, [r4, #4]
 80012ce:	f7ff ffa7 	bl	8001220 <std.isra.0>
 80012d2:	2201      	movs	r2, #1
 80012d4:	2109      	movs	r1, #9
 80012d6:	68a0      	ldr	r0, [r4, #8]
 80012d8:	f7ff ffa2 	bl	8001220 <std.isra.0>
 80012dc:	2202      	movs	r2, #2
 80012de:	2112      	movs	r1, #18
 80012e0:	68e0      	ldr	r0, [r4, #12]
 80012e2:	f7ff ff9d 	bl	8001220 <std.isra.0>
 80012e6:	2301      	movs	r3, #1
 80012e8:	61a3      	str	r3, [r4, #24]
 80012ea:	bd10      	pop	{r4, pc}
 80012ec:	08001590 	.word	0x08001590
 80012f0:	08001215 	.word	0x08001215

080012f4 <__sfp>:
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <__sfp+0x74>)
 80012f8:	681e      	ldr	r6, [r3, #0]
 80012fa:	69b3      	ldr	r3, [r6, #24]
 80012fc:	4607      	mov	r7, r0
 80012fe:	b913      	cbnz	r3, 8001306 <__sfp+0x12>
 8001300:	4630      	mov	r0, r6
 8001302:	f7ff ffc7 	bl	8001294 <__sinit>
 8001306:	3648      	adds	r6, #72	; 0x48
 8001308:	68b4      	ldr	r4, [r6, #8]
 800130a:	6873      	ldr	r3, [r6, #4]
 800130c:	3b01      	subs	r3, #1
 800130e:	d503      	bpl.n	8001318 <__sfp+0x24>
 8001310:	6833      	ldr	r3, [r6, #0]
 8001312:	b133      	cbz	r3, 8001322 <__sfp+0x2e>
 8001314:	6836      	ldr	r6, [r6, #0]
 8001316:	e7f7      	b.n	8001308 <__sfp+0x14>
 8001318:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800131c:	b16d      	cbz	r5, 800133a <__sfp+0x46>
 800131e:	3468      	adds	r4, #104	; 0x68
 8001320:	e7f4      	b.n	800130c <__sfp+0x18>
 8001322:	2104      	movs	r1, #4
 8001324:	4638      	mov	r0, r7
 8001326:	f7ff ff9f 	bl	8001268 <__sfmoreglue>
 800132a:	6030      	str	r0, [r6, #0]
 800132c:	2800      	cmp	r0, #0
 800132e:	d1f1      	bne.n	8001314 <__sfp+0x20>
 8001330:	230c      	movs	r3, #12
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	4604      	mov	r4, r0
 8001336:	4620      	mov	r0, r4
 8001338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800133a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800133e:	81e3      	strh	r3, [r4, #14]
 8001340:	2301      	movs	r3, #1
 8001342:	81a3      	strh	r3, [r4, #12]
 8001344:	6665      	str	r5, [r4, #100]	; 0x64
 8001346:	6025      	str	r5, [r4, #0]
 8001348:	60a5      	str	r5, [r4, #8]
 800134a:	6065      	str	r5, [r4, #4]
 800134c:	6125      	str	r5, [r4, #16]
 800134e:	6165      	str	r5, [r4, #20]
 8001350:	61a5      	str	r5, [r4, #24]
 8001352:	2208      	movs	r2, #8
 8001354:	4629      	mov	r1, r5
 8001356:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800135a:	f000 f849 	bl	80013f0 <memset>
 800135e:	6365      	str	r5, [r4, #52]	; 0x34
 8001360:	63a5      	str	r5, [r4, #56]	; 0x38
 8001362:	64a5      	str	r5, [r4, #72]	; 0x48
 8001364:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001366:	e7e6      	b.n	8001336 <__sfp+0x42>
 8001368:	08001590 	.word	0x08001590

0800136c <_fwalk_reent>:
 800136c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001370:	4680      	mov	r8, r0
 8001372:	4689      	mov	r9, r1
 8001374:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001378:	2600      	movs	r6, #0
 800137a:	b914      	cbnz	r4, 8001382 <_fwalk_reent+0x16>
 800137c:	4630      	mov	r0, r6
 800137e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001382:	68a5      	ldr	r5, [r4, #8]
 8001384:	6867      	ldr	r7, [r4, #4]
 8001386:	3f01      	subs	r7, #1
 8001388:	d501      	bpl.n	800138e <_fwalk_reent+0x22>
 800138a:	6824      	ldr	r4, [r4, #0]
 800138c:	e7f5      	b.n	800137a <_fwalk_reent+0xe>
 800138e:	89ab      	ldrh	r3, [r5, #12]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d907      	bls.n	80013a4 <_fwalk_reent+0x38>
 8001394:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001398:	3301      	adds	r3, #1
 800139a:	d003      	beq.n	80013a4 <_fwalk_reent+0x38>
 800139c:	4629      	mov	r1, r5
 800139e:	4640      	mov	r0, r8
 80013a0:	47c8      	blx	r9
 80013a2:	4306      	orrs	r6, r0
 80013a4:	3568      	adds	r5, #104	; 0x68
 80013a6:	e7ee      	b.n	8001386 <_fwalk_reent+0x1a>

080013a8 <__swhatbuf_r>:
 80013a8:	b570      	push	{r4, r5, r6, lr}
 80013aa:	460e      	mov	r6, r1
 80013ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013b0:	2900      	cmp	r1, #0
 80013b2:	b090      	sub	sp, #64	; 0x40
 80013b4:	4614      	mov	r4, r2
 80013b6:	461d      	mov	r5, r3
 80013b8:	da07      	bge.n	80013ca <__swhatbuf_r+0x22>
 80013ba:	2300      	movs	r3, #0
 80013bc:	602b      	str	r3, [r5, #0]
 80013be:	89b3      	ldrh	r3, [r6, #12]
 80013c0:	061a      	lsls	r2, r3, #24
 80013c2:	d410      	bmi.n	80013e6 <__swhatbuf_r+0x3e>
 80013c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c8:	e00e      	b.n	80013e8 <__swhatbuf_r+0x40>
 80013ca:	aa01      	add	r2, sp, #4
 80013cc:	f000 f880 	bl	80014d0 <_fstat_r>
 80013d0:	2800      	cmp	r0, #0
 80013d2:	dbf2      	blt.n	80013ba <__swhatbuf_r+0x12>
 80013d4:	9a02      	ldr	r2, [sp, #8]
 80013d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80013da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80013de:	425a      	negs	r2, r3
 80013e0:	415a      	adcs	r2, r3
 80013e2:	602a      	str	r2, [r5, #0]
 80013e4:	e7ee      	b.n	80013c4 <__swhatbuf_r+0x1c>
 80013e6:	2340      	movs	r3, #64	; 0x40
 80013e8:	2000      	movs	r0, #0
 80013ea:	6023      	str	r3, [r4, #0]
 80013ec:	b010      	add	sp, #64	; 0x40
 80013ee:	bd70      	pop	{r4, r5, r6, pc}

080013f0 <memset>:
 80013f0:	4402      	add	r2, r0
 80013f2:	4603      	mov	r3, r0
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d100      	bne.n	80013fa <memset+0xa>
 80013f8:	4770      	bx	lr
 80013fa:	f803 1b01 	strb.w	r1, [r3], #1
 80013fe:	e7f9      	b.n	80013f4 <memset+0x4>

08001400 <__malloc_lock>:
 8001400:	4770      	bx	lr

08001402 <__malloc_unlock>:
 8001402:	4770      	bx	lr

08001404 <__sread>:
 8001404:	b510      	push	{r4, lr}
 8001406:	460c      	mov	r4, r1
 8001408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800140c:	f000 f884 	bl	8001518 <_read_r>
 8001410:	2800      	cmp	r0, #0
 8001412:	bfab      	itete	ge
 8001414:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001416:	89a3      	ldrhlt	r3, [r4, #12]
 8001418:	181b      	addge	r3, r3, r0
 800141a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800141e:	bfac      	ite	ge
 8001420:	6563      	strge	r3, [r4, #84]	; 0x54
 8001422:	81a3      	strhlt	r3, [r4, #12]
 8001424:	bd10      	pop	{r4, pc}

08001426 <__swrite>:
 8001426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800142a:	461f      	mov	r7, r3
 800142c:	898b      	ldrh	r3, [r1, #12]
 800142e:	05db      	lsls	r3, r3, #23
 8001430:	4605      	mov	r5, r0
 8001432:	460c      	mov	r4, r1
 8001434:	4616      	mov	r6, r2
 8001436:	d505      	bpl.n	8001444 <__swrite+0x1e>
 8001438:	2302      	movs	r3, #2
 800143a:	2200      	movs	r2, #0
 800143c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001440:	f000 f858 	bl	80014f4 <_lseek_r>
 8001444:	89a3      	ldrh	r3, [r4, #12]
 8001446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800144a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800144e:	81a3      	strh	r3, [r4, #12]
 8001450:	4632      	mov	r2, r6
 8001452:	463b      	mov	r3, r7
 8001454:	4628      	mov	r0, r5
 8001456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800145a:	f000 b817 	b.w	800148c <_write_r>

0800145e <__sseek>:
 800145e:	b510      	push	{r4, lr}
 8001460:	460c      	mov	r4, r1
 8001462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001466:	f000 f845 	bl	80014f4 <_lseek_r>
 800146a:	1c43      	adds	r3, r0, #1
 800146c:	89a3      	ldrh	r3, [r4, #12]
 800146e:	bf15      	itete	ne
 8001470:	6560      	strne	r0, [r4, #84]	; 0x54
 8001472:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001476:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800147a:	81a3      	strheq	r3, [r4, #12]
 800147c:	bf18      	it	ne
 800147e:	81a3      	strhne	r3, [r4, #12]
 8001480:	bd10      	pop	{r4, pc}

08001482 <__sclose>:
 8001482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001486:	f000 b813 	b.w	80014b0 <_close_r>
	...

0800148c <_write_r>:
 800148c:	b538      	push	{r3, r4, r5, lr}
 800148e:	4c07      	ldr	r4, [pc, #28]	; (80014ac <_write_r+0x20>)
 8001490:	4605      	mov	r5, r0
 8001492:	4608      	mov	r0, r1
 8001494:	4611      	mov	r1, r2
 8001496:	2200      	movs	r2, #0
 8001498:	6022      	str	r2, [r4, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	f7ff fa18 	bl	80008d0 <_write>
 80014a0:	1c43      	adds	r3, r0, #1
 80014a2:	d102      	bne.n	80014aa <_write_r+0x1e>
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	b103      	cbz	r3, 80014aa <_write_r+0x1e>
 80014a8:	602b      	str	r3, [r5, #0]
 80014aa:	bd38      	pop	{r3, r4, r5, pc}
 80014ac:	2000008c 	.word	0x2000008c

080014b0 <_close_r>:
 80014b0:	b538      	push	{r3, r4, r5, lr}
 80014b2:	4c06      	ldr	r4, [pc, #24]	; (80014cc <_close_r+0x1c>)
 80014b4:	2300      	movs	r3, #0
 80014b6:	4605      	mov	r5, r0
 80014b8:	4608      	mov	r0, r1
 80014ba:	6023      	str	r3, [r4, #0]
 80014bc:	f7ff f9d0 	bl	8000860 <_close>
 80014c0:	1c43      	adds	r3, r0, #1
 80014c2:	d102      	bne.n	80014ca <_close_r+0x1a>
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	b103      	cbz	r3, 80014ca <_close_r+0x1a>
 80014c8:	602b      	str	r3, [r5, #0]
 80014ca:	bd38      	pop	{r3, r4, r5, pc}
 80014cc:	2000008c 	.word	0x2000008c

080014d0 <_fstat_r>:
 80014d0:	b538      	push	{r3, r4, r5, lr}
 80014d2:	4c07      	ldr	r4, [pc, #28]	; (80014f0 <_fstat_r+0x20>)
 80014d4:	2300      	movs	r3, #0
 80014d6:	4605      	mov	r5, r0
 80014d8:	4608      	mov	r0, r1
 80014da:	4611      	mov	r1, r2
 80014dc:	6023      	str	r3, [r4, #0]
 80014de:	f7ff f9d1 	bl	8000884 <_fstat>
 80014e2:	1c43      	adds	r3, r0, #1
 80014e4:	d102      	bne.n	80014ec <_fstat_r+0x1c>
 80014e6:	6823      	ldr	r3, [r4, #0]
 80014e8:	b103      	cbz	r3, 80014ec <_fstat_r+0x1c>
 80014ea:	602b      	str	r3, [r5, #0]
 80014ec:	bd38      	pop	{r3, r4, r5, pc}
 80014ee:	bf00      	nop
 80014f0:	2000008c 	.word	0x2000008c

080014f4 <_lseek_r>:
 80014f4:	b538      	push	{r3, r4, r5, lr}
 80014f6:	4c07      	ldr	r4, [pc, #28]	; (8001514 <_lseek_r+0x20>)
 80014f8:	4605      	mov	r5, r0
 80014fa:	4608      	mov	r0, r1
 80014fc:	4611      	mov	r1, r2
 80014fe:	2200      	movs	r2, #0
 8001500:	6022      	str	r2, [r4, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	f7ff f9d0 	bl	80008a8 <_lseek>
 8001508:	1c43      	adds	r3, r0, #1
 800150a:	d102      	bne.n	8001512 <_lseek_r+0x1e>
 800150c:	6823      	ldr	r3, [r4, #0]
 800150e:	b103      	cbz	r3, 8001512 <_lseek_r+0x1e>
 8001510:	602b      	str	r3, [r5, #0]
 8001512:	bd38      	pop	{r3, r4, r5, pc}
 8001514:	2000008c 	.word	0x2000008c

08001518 <_read_r>:
 8001518:	b538      	push	{r3, r4, r5, lr}
 800151a:	4c07      	ldr	r4, [pc, #28]	; (8001538 <_read_r+0x20>)
 800151c:	4605      	mov	r5, r0
 800151e:	4608      	mov	r0, r1
 8001520:	4611      	mov	r1, r2
 8001522:	2200      	movs	r2, #0
 8001524:	6022      	str	r2, [r4, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	f7ff f9f4 	bl	8000914 <_read>
 800152c:	1c43      	adds	r3, r0, #1
 800152e:	d102      	bne.n	8001536 <_read_r+0x1e>
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	b103      	cbz	r3, 8001536 <_read_r+0x1e>
 8001534:	602b      	str	r3, [r5, #0]
 8001536:	bd38      	pop	{r3, r4, r5, pc}
 8001538:	2000008c 	.word	0x2000008c

0800153c <_init>:
 800153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153e:	bf00      	nop
 8001540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001542:	bc08      	pop	{r3}
 8001544:	469e      	mov	lr, r3
 8001546:	4770      	bx	lr

08001548 <_fini>:
 8001548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800154a:	bf00      	nop
 800154c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800154e:	bc08      	pop	{r3}
 8001550:	469e      	mov	lr, r3
 8001552:	4770      	bx	lr

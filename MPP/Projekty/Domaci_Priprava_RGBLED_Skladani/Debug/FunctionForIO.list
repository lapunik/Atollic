
FunctionForIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000768  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000900  08000908  00010908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000900  08000900  00010900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000904  08000904  00010904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  08000908  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000001c  08000908  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00010908  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000b64  00000000  00000000  00010938  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000035e  00000000  00000000  0001149c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000a8  00000000  00000000  00011800  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000118a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000617  00000000  00000000  00011918  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000049d  00000000  00000000  00011f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000123cc  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000164  00000000  00000000  00012448  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000125ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080008e8 	.word	0x080008e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080008e8 	.word	0x080008e8

080001d8 <main>:

#include "stm_core.h"
#include "mpp_shield.h"

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0

	GPIOConfigurePin(RGBLED_GREEN, ioPortOutputPushPull);
 80001de:	2200      	movs	r2, #0
 80001e0:	210e      	movs	r1, #14
 80001e2:	488e      	ldr	r0, [pc, #568]	; (800041c <main+0x244>)
 80001e4:	f000 f948 	bl	8000478 <GPIOConfigurePin>
	GPIOConfigurePin(RGBLED_RED, ioPortOutputPushPull);
 80001e8:	2200      	movs	r2, #0
 80001ea:	210f      	movs	r1, #15
 80001ec:	488b      	ldr	r0, [pc, #556]	; (800041c <main+0x244>)
 80001ee:	f000 f943 	bl	8000478 <GPIOConfigurePin>
	GPIOConfigurePin(RGBLED_BLUE, ioPortOutputPushPull);
 80001f2:	2200      	movs	r2, #0
 80001f4:	210d      	movs	r1, #13
 80001f6:	4889      	ldr	r0, [pc, #548]	; (800041c <main+0x244>)
 80001f8:	f000 f93e 	bl	8000478 <GPIOConfigurePin>
	GPIOConfigurePin(BUTTON_LEFT,ioPortInputFloat);
 80001fc:	2203      	movs	r2, #3
 80001fe:	2105      	movs	r1, #5
 8000200:	4886      	ldr	r0, [pc, #536]	; (800041c <main+0x244>)
 8000202:	f000 f939 	bl	8000478 <GPIOConfigurePin>
	GPIOConfigurePin(BUTTON_RIGHT,ioPortInputFloat);
 8000206:	2203      	movs	r2, #3
 8000208:	2104      	movs	r1, #4
 800020a:	4884      	ldr	r0, [pc, #528]	; (800041c <main+0x244>)
 800020c:	f000 f934 	bl	8000478 <GPIOConfigurePin>
	GPIOConfigurePin(BUTTON_BLUE,ioPortInputFloat);
 8000210:	2203      	movs	r2, #3
 8000212:	210d      	movs	r1, #13
 8000214:	4882      	ldr	r0, [pc, #520]	; (8000420 <main+0x248>)
 8000216:	f000 f92f 	bl	8000478 <GPIOConfigurePin>
	// pokud se ptám jestli je na vstupu jednièka nebo nula IDR, moje funkce mi to neumí øíct

  while (1)
  {

	if((!GPIORead(BUTTON_LEFT))&&(!GPIORead(BUTTON_RIGHT))&&(!GPIORead(BUTTON_BLUE)))
 800021a:	2105      	movs	r1, #5
 800021c:	487f      	ldr	r0, [pc, #508]	; (800041c <main+0x244>)
 800021e:	f000 faa9 	bl	8000774 <GPIORead>
 8000222:	4603      	mov	r3, r0
 8000224:	f083 0301 	eor.w	r3, r3, #1
 8000228:	b2db      	uxtb	r3, r3
 800022a:	2b00      	cmp	r3, #0
 800022c:	d023      	beq.n	8000276 <main+0x9e>
 800022e:	2104      	movs	r1, #4
 8000230:	487a      	ldr	r0, [pc, #488]	; (800041c <main+0x244>)
 8000232:	f000 fa9f 	bl	8000774 <GPIORead>
 8000236:	4603      	mov	r3, r0
 8000238:	f083 0301 	eor.w	r3, r3, #1
 800023c:	b2db      	uxtb	r3, r3
 800023e:	2b00      	cmp	r3, #0
 8000240:	d019      	beq.n	8000276 <main+0x9e>
 8000242:	210d      	movs	r1, #13
 8000244:	4876      	ldr	r0, [pc, #472]	; (8000420 <main+0x248>)
 8000246:	f000 fa95 	bl	8000774 <GPIORead>
 800024a:	4603      	mov	r3, r0
 800024c:	f083 0301 	eor.w	r3, r3, #1
 8000250:	b2db      	uxtb	r3, r3
 8000252:	2b00      	cmp	r3, #0
 8000254:	d00f      	beq.n	8000276 <main+0x9e>
	{
	    GPIOWrite(RGBLED_RED,true);
 8000256:	2201      	movs	r2, #1
 8000258:	210f      	movs	r1, #15
 800025a:	4870      	ldr	r0, [pc, #448]	; (800041c <main+0x244>)
 800025c:	f000 fac9 	bl	80007f2 <GPIOWrite>
	    GPIOWrite(RGBLED_BLUE,true);
 8000260:	2201      	movs	r2, #1
 8000262:	210d      	movs	r1, #13
 8000264:	486d      	ldr	r0, [pc, #436]	; (800041c <main+0x244>)
 8000266:	f000 fac4 	bl	80007f2 <GPIOWrite>
	    GPIOWrite(RGBLED_GREEN,true);
 800026a:	2201      	movs	r2, #1
 800026c:	210e      	movs	r1, #14
 800026e:	486b      	ldr	r0, [pc, #428]	; (800041c <main+0x244>)
 8000270:	f000 fabf 	bl	80007f2 <GPIOWrite>
 8000274:	e0b8      	b.n	80003e8 <main+0x210>
	}
	else if((!GPIORead(BUTTON_LEFT))&&(!GPIORead(BUTTON_RIGHT)))
 8000276:	2105      	movs	r1, #5
 8000278:	4868      	ldr	r0, [pc, #416]	; (800041c <main+0x244>)
 800027a:	f000 fa7b 	bl	8000774 <GPIORead>
 800027e:	4603      	mov	r3, r0
 8000280:	f083 0301 	eor.w	r3, r3, #1
 8000284:	b2db      	uxtb	r3, r3
 8000286:	2b00      	cmp	r3, #0
 8000288:	d019      	beq.n	80002be <main+0xe6>
 800028a:	2104      	movs	r1, #4
 800028c:	4863      	ldr	r0, [pc, #396]	; (800041c <main+0x244>)
 800028e:	f000 fa71 	bl	8000774 <GPIORead>
 8000292:	4603      	mov	r3, r0
 8000294:	f083 0301 	eor.w	r3, r3, #1
 8000298:	b2db      	uxtb	r3, r3
 800029a:	2b00      	cmp	r3, #0
 800029c:	d00f      	beq.n	80002be <main+0xe6>
	{
	    GPIOWrite(RGBLED_RED,true);
 800029e:	2201      	movs	r2, #1
 80002a0:	210f      	movs	r1, #15
 80002a2:	485e      	ldr	r0, [pc, #376]	; (800041c <main+0x244>)
 80002a4:	f000 faa5 	bl	80007f2 <GPIOWrite>
	    GPIOWrite(RGBLED_BLUE,false);
 80002a8:	2200      	movs	r2, #0
 80002aa:	210d      	movs	r1, #13
 80002ac:	485b      	ldr	r0, [pc, #364]	; (800041c <main+0x244>)
 80002ae:	f000 faa0 	bl	80007f2 <GPIOWrite>
	    GPIOWrite(RGBLED_GREEN,true);
 80002b2:	2201      	movs	r2, #1
 80002b4:	210e      	movs	r1, #14
 80002b6:	4859      	ldr	r0, [pc, #356]	; (800041c <main+0x244>)
 80002b8:	f000 fa9b 	bl	80007f2 <GPIOWrite>
 80002bc:	e094      	b.n	80003e8 <main+0x210>
	}
	else if((!GPIORead(BUTTON_LEFT))&&(!GPIORead(BUTTON_BLUE)))
 80002be:	2105      	movs	r1, #5
 80002c0:	4856      	ldr	r0, [pc, #344]	; (800041c <main+0x244>)
 80002c2:	f000 fa57 	bl	8000774 <GPIORead>
 80002c6:	4603      	mov	r3, r0
 80002c8:	f083 0301 	eor.w	r3, r3, #1
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d019      	beq.n	8000306 <main+0x12e>
 80002d2:	210d      	movs	r1, #13
 80002d4:	4852      	ldr	r0, [pc, #328]	; (8000420 <main+0x248>)
 80002d6:	f000 fa4d 	bl	8000774 <GPIORead>
 80002da:	4603      	mov	r3, r0
 80002dc:	f083 0301 	eor.w	r3, r3, #1
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d00f      	beq.n	8000306 <main+0x12e>
	{
	    GPIOWrite(RGBLED_RED,false);
 80002e6:	2200      	movs	r2, #0
 80002e8:	210f      	movs	r1, #15
 80002ea:	484c      	ldr	r0, [pc, #304]	; (800041c <main+0x244>)
 80002ec:	f000 fa81 	bl	80007f2 <GPIOWrite>
	    GPIOWrite(RGBLED_BLUE,true);
 80002f0:	2201      	movs	r2, #1
 80002f2:	210d      	movs	r1, #13
 80002f4:	4849      	ldr	r0, [pc, #292]	; (800041c <main+0x244>)
 80002f6:	f000 fa7c 	bl	80007f2 <GPIOWrite>
	    GPIOWrite(RGBLED_GREEN,true);
 80002fa:	2201      	movs	r2, #1
 80002fc:	210e      	movs	r1, #14
 80002fe:	4847      	ldr	r0, [pc, #284]	; (800041c <main+0x244>)
 8000300:	f000 fa77 	bl	80007f2 <GPIOWrite>
 8000304:	e070      	b.n	80003e8 <main+0x210>
	}
	else if((!GPIORead(BUTTON_RIGHT))&&(!GPIORead(BUTTON_BLUE)))
 8000306:	2104      	movs	r1, #4
 8000308:	4844      	ldr	r0, [pc, #272]	; (800041c <main+0x244>)
 800030a:	f000 fa33 	bl	8000774 <GPIORead>
 800030e:	4603      	mov	r3, r0
 8000310:	f083 0301 	eor.w	r3, r3, #1
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d019      	beq.n	800034e <main+0x176>
 800031a:	210d      	movs	r1, #13
 800031c:	4840      	ldr	r0, [pc, #256]	; (8000420 <main+0x248>)
 800031e:	f000 fa29 	bl	8000774 <GPIORead>
 8000322:	4603      	mov	r3, r0
 8000324:	f083 0301 	eor.w	r3, r3, #1
 8000328:	b2db      	uxtb	r3, r3
 800032a:	2b00      	cmp	r3, #0
 800032c:	d00f      	beq.n	800034e <main+0x176>
	{
	    GPIOWrite(RGBLED_RED,true);
 800032e:	2201      	movs	r2, #1
 8000330:	210f      	movs	r1, #15
 8000332:	483a      	ldr	r0, [pc, #232]	; (800041c <main+0x244>)
 8000334:	f000 fa5d 	bl	80007f2 <GPIOWrite>
	    GPIOWrite(RGBLED_BLUE,true);
 8000338:	2201      	movs	r2, #1
 800033a:	210d      	movs	r1, #13
 800033c:	4837      	ldr	r0, [pc, #220]	; (800041c <main+0x244>)
 800033e:	f000 fa58 	bl	80007f2 <GPIOWrite>
	    GPIOWrite(RGBLED_GREEN,false);
 8000342:	2200      	movs	r2, #0
 8000344:	210e      	movs	r1, #14
 8000346:	4835      	ldr	r0, [pc, #212]	; (800041c <main+0x244>)
 8000348:	f000 fa53 	bl	80007f2 <GPIOWrite>
 800034c:	e04c      	b.n	80003e8 <main+0x210>
	}
	else if(!GPIORead(BUTTON_BLUE))
 800034e:	210d      	movs	r1, #13
 8000350:	4833      	ldr	r0, [pc, #204]	; (8000420 <main+0x248>)
 8000352:	f000 fa0f 	bl	8000774 <GPIORead>
 8000356:	4603      	mov	r3, r0
 8000358:	f083 0301 	eor.w	r3, r3, #1
 800035c:	b2db      	uxtb	r3, r3
 800035e:	2b00      	cmp	r3, #0
 8000360:	d00f      	beq.n	8000382 <main+0x1aa>
	{
	    GPIOWrite(RGBLED_RED,false);
 8000362:	2200      	movs	r2, #0
 8000364:	210f      	movs	r1, #15
 8000366:	482d      	ldr	r0, [pc, #180]	; (800041c <main+0x244>)
 8000368:	f000 fa43 	bl	80007f2 <GPIOWrite>
	    GPIOWrite(RGBLED_BLUE,true);
 800036c:	2201      	movs	r2, #1
 800036e:	210d      	movs	r1, #13
 8000370:	482a      	ldr	r0, [pc, #168]	; (800041c <main+0x244>)
 8000372:	f000 fa3e 	bl	80007f2 <GPIOWrite>
	    GPIOWrite(RGBLED_GREEN,false);
 8000376:	2200      	movs	r2, #0
 8000378:	210e      	movs	r1, #14
 800037a:	4828      	ldr	r0, [pc, #160]	; (800041c <main+0x244>)
 800037c:	f000 fa39 	bl	80007f2 <GPIOWrite>
 8000380:	e032      	b.n	80003e8 <main+0x210>
	}
	else if(!GPIORead(BUTTON_RIGHT))
 8000382:	2104      	movs	r1, #4
 8000384:	4825      	ldr	r0, [pc, #148]	; (800041c <main+0x244>)
 8000386:	f000 f9f5 	bl	8000774 <GPIORead>
 800038a:	4603      	mov	r3, r0
 800038c:	f083 0301 	eor.w	r3, r3, #1
 8000390:	b2db      	uxtb	r3, r3
 8000392:	2b00      	cmp	r3, #0
 8000394:	d00f      	beq.n	80003b6 <main+0x1de>
	{
	    GPIOWrite(RGBLED_RED,true);
 8000396:	2201      	movs	r2, #1
 8000398:	210f      	movs	r1, #15
 800039a:	4820      	ldr	r0, [pc, #128]	; (800041c <main+0x244>)
 800039c:	f000 fa29 	bl	80007f2 <GPIOWrite>
	    GPIOWrite(RGBLED_BLUE,false);
 80003a0:	2200      	movs	r2, #0
 80003a2:	210d      	movs	r1, #13
 80003a4:	481d      	ldr	r0, [pc, #116]	; (800041c <main+0x244>)
 80003a6:	f000 fa24 	bl	80007f2 <GPIOWrite>
	    GPIOWrite(RGBLED_GREEN,false);
 80003aa:	2200      	movs	r2, #0
 80003ac:	210e      	movs	r1, #14
 80003ae:	481b      	ldr	r0, [pc, #108]	; (800041c <main+0x244>)
 80003b0:	f000 fa1f 	bl	80007f2 <GPIOWrite>
 80003b4:	e018      	b.n	80003e8 <main+0x210>
	}
	else if(!GPIORead(BUTTON_LEFT))
 80003b6:	2105      	movs	r1, #5
 80003b8:	4818      	ldr	r0, [pc, #96]	; (800041c <main+0x244>)
 80003ba:	f000 f9db 	bl	8000774 <GPIORead>
 80003be:	4603      	mov	r3, r0
 80003c0:	f083 0301 	eor.w	r3, r3, #1
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d00e      	beq.n	80003e8 <main+0x210>
	{
	    GPIOWrite(RGBLED_RED,false);
 80003ca:	2200      	movs	r2, #0
 80003cc:	210f      	movs	r1, #15
 80003ce:	4813      	ldr	r0, [pc, #76]	; (800041c <main+0x244>)
 80003d0:	f000 fa0f 	bl	80007f2 <GPIOWrite>
	    GPIOWrite(RGBLED_BLUE,false);
 80003d4:	2200      	movs	r2, #0
 80003d6:	210d      	movs	r1, #13
 80003d8:	4810      	ldr	r0, [pc, #64]	; (800041c <main+0x244>)
 80003da:	f000 fa0a 	bl	80007f2 <GPIOWrite>
	    GPIOWrite(RGBLED_GREEN,true);
 80003de:	2201      	movs	r2, #1
 80003e0:	210e      	movs	r1, #14
 80003e2:	480e      	ldr	r0, [pc, #56]	; (800041c <main+0x244>)
 80003e4:	f000 fa05 	bl	80007f2 <GPIOWrite>
	}

    GPIOWrite(RGBLED_RED,false); // vypni LED, za prvý kdy není ádné tlaèítko zmáèknuté a zadruhý abychom v kombinaci s for sníili jas
 80003e8:	2200      	movs	r2, #0
 80003ea:	210f      	movs	r1, #15
 80003ec:	480b      	ldr	r0, [pc, #44]	; (800041c <main+0x244>)
 80003ee:	f000 fa00 	bl	80007f2 <GPIOWrite>
    GPIOWrite(RGBLED_BLUE,false);
 80003f2:	2200      	movs	r2, #0
 80003f4:	210d      	movs	r1, #13
 80003f6:	4809      	ldr	r0, [pc, #36]	; (800041c <main+0x244>)
 80003f8:	f000 f9fb 	bl	80007f2 <GPIOWrite>
    GPIOWrite(RGBLED_GREEN,false);
 80003fc:	2200      	movs	r2, #0
 80003fe:	210e      	movs	r1, #14
 8000400:	4806      	ldr	r0, [pc, #24]	; (800041c <main+0x244>)
 8000402:	f000 f9f6 	bl	80007f2 <GPIOWrite>

    for(int i = 0;i<100;i++); // èekací cyklus jako forma takovýho PWMka, prostì neajním naplno poøád, ale vdycky 100x projetí empty for poèkám pøi vypnutých LED a poté znovu zapínám
 8000406:	2300      	movs	r3, #0
 8000408:	607b      	str	r3, [r7, #4]
 800040a:	e002      	b.n	8000412 <main+0x23a>
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3301      	adds	r3, #1
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2b63      	cmp	r3, #99	; 0x63
 8000416:	ddf9      	ble.n	800040c <main+0x234>
	if((!GPIORead(BUTTON_LEFT))&&(!GPIORead(BUTTON_RIGHT))&&(!GPIORead(BUTTON_BLUE)))
 8000418:	e6ff      	b.n	800021a <main+0x42>
 800041a:	bf00      	nop
 800041c:	40020400 	.word	0x40020400
 8000420:	40020800 	.word	0x40020800

08000424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800045c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000428:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800042a:	e003      	b.n	8000434 <LoopCopyDataInit>

0800042c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800042c:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800042e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000430:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000432:	3104      	adds	r1, #4

08000434 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000434:	480b      	ldr	r0, [pc, #44]	; (8000464 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000438:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800043a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800043c:	d3f6      	bcc.n	800042c <CopyDataInit>
  ldr  r2, =_sbss
 800043e:	4a0b      	ldr	r2, [pc, #44]	; (800046c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000440:	e002      	b.n	8000448 <LoopFillZerobss>

08000442 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000442:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000444:	f842 3b04 	str.w	r3, [r2], #4

08000448 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800044a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800044c:	d3f9      	bcc.n	8000442 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800044e:	f000 f9f1 	bl	8000834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000452:	f000 fa25 	bl	80008a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000456:	f7ff febf 	bl	80001d8 <main>
  bx  lr    
 800045a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800045c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000460:	08000908 	.word	0x08000908
  ldr  r0, =_sdata
 8000464:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000468:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 800046c:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000470:	2000001c 	.word	0x2000001c

08000474 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000474:	e7fe      	b.n	8000474 <ADC_IRQHandler>
	...

08000478 <GPIOConfigurePin>:
 *      Author: Lapunik
 */
#include "stm_core.h"

bool GPIOConfigurePin(GPIO_TypeDef *gpio,uint32_t bitNumber, ioPortMode mode) // konfigurace GPIO do pøedpøipravených stavù
{
 8000478:	b480      	push	{r7}
 800047a:	b087      	sub	sp, #28
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	4613      	mov	r3, r2
 8000484:	71fb      	strb	r3, [r7, #7]

	uint32_t enableMask = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
	uint32_t resetMask = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	613b      	str	r3, [r7, #16]

	switch((uint32_t)gpio) // je potøeba zapnout hodiny podle toho který gpio chceme vyuzivat => ulozime bity pro reset a pro zapnuti do masek a pote masku aplikujeme
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	4a99      	ldr	r2, [pc, #612]	; (80006f8 <GPIOConfigurePin+0x280>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d01d      	beq.n	80004d2 <GPIOConfigurePin+0x5a>
 8000496:	4a98      	ldr	r2, [pc, #608]	; (80006f8 <GPIOConfigurePin+0x280>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d806      	bhi.n	80004aa <GPIOConfigurePin+0x32>
 800049c:	4a97      	ldr	r2, [pc, #604]	; (80006fc <GPIOConfigurePin+0x284>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d00d      	beq.n	80004be <GPIOConfigurePin+0x46>
 80004a2:	4a97      	ldr	r2, [pc, #604]	; (8000700 <GPIOConfigurePin+0x288>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d00f      	beq.n	80004c8 <GPIOConfigurePin+0x50>
 80004a8:	e027      	b.n	80004fa <GPIOConfigurePin+0x82>
 80004aa:	4a96      	ldr	r2, [pc, #600]	; (8000704 <GPIOConfigurePin+0x28c>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d01a      	beq.n	80004e6 <GPIOConfigurePin+0x6e>
 80004b0:	4a95      	ldr	r2, [pc, #596]	; (8000708 <GPIOConfigurePin+0x290>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d01c      	beq.n	80004f0 <GPIOConfigurePin+0x78>
 80004b6:	4a95      	ldr	r2, [pc, #596]	; (800070c <GPIOConfigurePin+0x294>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d00f      	beq.n	80004dc <GPIOConfigurePin+0x64>
 80004bc:	e01d      	b.n	80004fa <GPIOConfigurePin+0x82>
	{
	case (uint32_t)GPIOA: // GPIOA je definovana konstanta ve formátu "ukazatel", proto msím pøetypovat na celoèíselnou hodnotu
        enableMask = RCC_AHB1ENR_GPIOAEN;
 80004be:	2301      	movs	r3, #1
 80004c0:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOARST;
 80004c2:	2301      	movs	r3, #1
 80004c4:	613b      	str	r3, [r7, #16]
	break;
 80004c6:	e018      	b.n	80004fa <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOB:
        enableMask = RCC_AHB1ENR_GPIOBEN;
 80004c8:	2302      	movs	r3, #2
 80004ca:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOBRST;
 80004cc:	2302      	movs	r3, #2
 80004ce:	613b      	str	r3, [r7, #16]
	break;
 80004d0:	e013      	b.n	80004fa <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOC:
        enableMask = RCC_AHB1ENR_GPIOCEN;
 80004d2:	2304      	movs	r3, #4
 80004d4:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOCRST;
 80004d6:	2304      	movs	r3, #4
 80004d8:	613b      	str	r3, [r7, #16]
	break;
 80004da:	e00e      	b.n	80004fa <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOD:
        enableMask = RCC_AHB1ENR_GPIODEN;
 80004dc:	2308      	movs	r3, #8
 80004de:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIODRST;
 80004e0:	2308      	movs	r3, #8
 80004e2:	613b      	str	r3, [r7, #16]
	break;
 80004e4:	e009      	b.n	80004fa <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOE:
        enableMask = RCC_AHB1ENR_GPIOEEN;
 80004e6:	2310      	movs	r3, #16
 80004e8:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOERST;
 80004ea:	2310      	movs	r3, #16
 80004ec:	613b      	str	r3, [r7, #16]
	break;
 80004ee:	e004      	b.n	80004fa <GPIOConfigurePin+0x82>
        enableMask = RCC_AHB1ENR_GPIOGEN;
        resetMask = RCC_AHB1RSTR_GPIOGRST;
	break;
#endif
	case (uint32_t)GPIOH:
        enableMask = RCC_AHB1ENR_GPIOHEN;
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOHRST;
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	613b      	str	r3, [r7, #16]
	break;
 80004f8:	bf00      	nop

	}

	if((resetMask == 0)||(enableMask == 0)) // pokud se do masek neuloila ádná hodnota, ukonèi konfiguraci a vrat zpravu false o neúspìchu
 80004fa:	693b      	ldr	r3, [r7, #16]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d002      	beq.n	8000506 <GPIOConfigurePin+0x8e>
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d101      	bne.n	800050a <GPIOConfigurePin+0x92>
	{
		return false;
 8000506:	2300      	movs	r3, #0
 8000508:	e12d      	b.n	8000766 <GPIOConfigurePin+0x2ee>
	}
	else
	{
		  if(!(RCC -> AHB1ENR & enableMask)) // jestlie nejsou masky prázdné, poui je pro nastavení hodin
 800050a:	4b81      	ldr	r3, [pc, #516]	; (8000710 <GPIOConfigurePin+0x298>)
 800050c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	4013      	ands	r3, r2
 8000512:	2b00      	cmp	r3, #0
 8000514:	d112      	bne.n	800053c <GPIOConfigurePin+0xc4>
		  {
		    RCC->AHB1ENR |= enableMask;
 8000516:	497e      	ldr	r1, [pc, #504]	; (8000710 <GPIOConfigurePin+0x298>)
 8000518:	4b7d      	ldr	r3, [pc, #500]	; (8000710 <GPIOConfigurePin+0x298>)
 800051a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	4313      	orrs	r3, r2
 8000520:	630b      	str	r3, [r1, #48]	; 0x30
		    RCC->AHB1RSTR |= resetMask;
 8000522:	497b      	ldr	r1, [pc, #492]	; (8000710 <GPIOConfigurePin+0x298>)
 8000524:	4b7a      	ldr	r3, [pc, #488]	; (8000710 <GPIOConfigurePin+0x298>)
 8000526:	691a      	ldr	r2, [r3, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	4313      	orrs	r3, r2
 800052c:	610b      	str	r3, [r1, #16]
		    RCC->AHB1RSTR &= ~resetMask;
 800052e:	4978      	ldr	r1, [pc, #480]	; (8000710 <GPIOConfigurePin+0x298>)
 8000530:	4b77      	ldr	r3, [pc, #476]	; (8000710 <GPIOConfigurePin+0x298>)
 8000532:	691a      	ldr	r2, [r3, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	43db      	mvns	r3, r3
 8000538:	4013      	ands	r3, r2
 800053a:	610b      	str	r3, [r1, #16]
		  }
	}

gpio -> MODER &= ~(0x03 << (bitNumber*2)); // vynulovani zdvojených bitu pøed nastavováním (kdyby nìkde byla kombinace 10 a já tam ORoval 01 tak vysledna kombinace je 11 misto 01)...u registru kde se nastavuje pouze jeden bit toho nehrozí
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	68ba      	ldr	r2, [r7, #8]
 8000542:	0052      	lsls	r2, r2, #1
 8000544:	2103      	movs	r1, #3
 8000546:	fa01 f202 	lsl.w	r2, r1, r2
 800054a:	43d2      	mvns	r2, r2
 800054c:	401a      	ands	r2, r3
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	601a      	str	r2, [r3, #0]
gpio -> PUPDR &= ~(0x03 << (bitNumber*2));
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	68db      	ldr	r3, [r3, #12]
 8000556:	68ba      	ldr	r2, [r7, #8]
 8000558:	0052      	lsls	r2, r2, #1
 800055a:	2103      	movs	r1, #3
 800055c:	fa01 f202 	lsl.w	r2, r1, r2
 8000560:	43d2      	mvns	r2, r2
 8000562:	401a      	ands	r2, r3
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	60da      	str	r2, [r3, #12]
gpio -> OSPEEDR &= ~(0x03 << (bitNumber*2));
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	68ba      	ldr	r2, [r7, #8]
 800056e:	0052      	lsls	r2, r2, #1
 8000570:	2103      	movs	r1, #3
 8000572:	fa01 f202 	lsl.w	r2, r1, r2
 8000576:	43d2      	mvns	r2, r2
 8000578:	401a      	ands	r2, r3
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	609a      	str	r2, [r3, #8]


switch(mode)
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	2b07      	cmp	r3, #7
 8000582:	f200 80ef 	bhi.w	8000764 <GPIOConfigurePin+0x2ec>
 8000586:	a201      	add	r2, pc, #4	; (adr r2, 800058c <GPIOConfigurePin+0x114>)
 8000588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058c:	080005ad 	.word	0x080005ad
 8000590:	080005ff 	.word	0x080005ff
 8000594:	0800064f 	.word	0x0800064f
 8000598:	08000665 	.word	0x08000665
 800059c:	0800067b 	.word	0x0800067b
 80005a0:	08000691 	.word	0x08000691
 80005a4:	080006a7 	.word	0x080006a7
 80005a8:	08000715 	.word	0x08000715
{
case ioPortOutputPushPull:

	gpio->MODER |= 0x01<<(2*bitNumber); // output
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	68ba      	ldr	r2, [r7, #8]
 80005b2:	0052      	lsls	r2, r2, #1
 80005b4:	2101      	movs	r1, #1
 80005b6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ba:	431a      	orrs	r2, r3
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	601a      	str	r2, [r3, #0]
	gpio->OTYPER &= ~(0x01<<bitNumber); // push-pull
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	2101      	movs	r1, #1
 80005c6:	68ba      	ldr	r2, [r7, #8]
 80005c8:	fa01 f202 	lsl.w	r2, r1, r2
 80005cc:	43d2      	mvns	r2, r2
 80005ce:	401a      	ands	r2, r3
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	68ba      	ldr	r2, [r7, #8]
 80005da:	0052      	lsls	r2, r2, #1
 80005dc:	2103      	movs	r1, #3
 80005de:	fa01 f202 	lsl.w	r2, r1, r2
 80005e2:	431a      	orrs	r2, r3
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	2103      	movs	r1, #3
 80005ee:	68ba      	ldr	r2, [r7, #8]
 80005f0:	fa01 f202 	lsl.w	r2, r1, r2
 80005f4:	43d2      	mvns	r2, r2
 80005f6:	401a      	ands	r2, r3
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	60da      	str	r2, [r3, #12]
    break;
 80005fc:	e0b2      	b.n	8000764 <GPIOConfigurePin+0x2ec>

case ioPortOutputOpenDrain:

	gpio->MODER |= 0x01<<(2*bitNumber); // output
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	68ba      	ldr	r2, [r7, #8]
 8000604:	0052      	lsls	r2, r2, #1
 8000606:	2101      	movs	r1, #1
 8000608:	fa01 f202 	lsl.w	r2, r1, r2
 800060c:	431a      	orrs	r2, r3
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	601a      	str	r2, [r3, #0]
	gpio->OTYPER |= (0x01<<bitNumber); // open drain
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	2101      	movs	r1, #1
 8000618:	68ba      	ldr	r2, [r7, #8]
 800061a:	fa01 f202 	lsl.w	r2, r1, r2
 800061e:	431a      	orrs	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	68ba      	ldr	r2, [r7, #8]
 800062a:	0052      	lsls	r2, r2, #1
 800062c:	2103      	movs	r1, #3
 800062e:	fa01 f202 	lsl.w	r2, r1, r2
 8000632:	431a      	orrs	r2, r3
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	2103      	movs	r1, #3
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	fa01 f202 	lsl.w	r2, r1, r2
 8000644:	43d2      	mvns	r2, r2
 8000646:	401a      	ands	r2, r3
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	60da      	str	r2, [r3, #12]
    break;
 800064c:	e08a      	b.n	8000764 <GPIOConfigurePin+0x2ec>

case ioPortAnalog:

	gpio->MODER |= 0x03<<(2*bitNumber); // analog
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	0052      	lsls	r2, r2, #1
 8000656:	2103      	movs	r1, #3
 8000658:	fa01 f202 	lsl.w	r2, r1, r2
 800065c:	431a      	orrs	r2, r3
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	601a      	str	r2, [r3, #0]
    break;
 8000662:	e07f      	b.n	8000764 <GPIOConfigurePin+0x2ec>

case ioPortInputFloat:

	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	2103      	movs	r1, #3
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	fa01 f202 	lsl.w	r2, r1, r2
 8000670:	43d2      	mvns	r2, r2
 8000672:	401a      	ands	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	60da      	str	r2, [r3, #12]
    break;
 8000678:	e074      	b.n	8000764 <GPIOConfigurePin+0x2ec>

case ioPortInputPullUp:

	gpio->PUPDR |= ~(0x01<<bitNumber); // pull up
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	68db      	ldr	r3, [r3, #12]
 800067e:	2101      	movs	r1, #1
 8000680:	68ba      	ldr	r2, [r7, #8]
 8000682:	fa01 f202 	lsl.w	r2, r1, r2
 8000686:	43d2      	mvns	r2, r2
 8000688:	431a      	orrs	r2, r3
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	60da      	str	r2, [r3, #12]
    break;
 800068e:	e069      	b.n	8000764 <GPIOConfigurePin+0x2ec>

case ioPortInputPullDown:

	gpio->PUPDR |= ~(0x02<<bitNumber); // pull down
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	2102      	movs	r1, #2
 8000696:	68ba      	ldr	r2, [r7, #8]
 8000698:	fa01 f202 	lsl.w	r2, r1, r2
 800069c:	43d2      	mvns	r2, r2
 800069e:	431a      	orrs	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	60da      	str	r2, [r3, #12]
    break;
 80006a4:	e05e      	b.n	8000764 <GPIOConfigurePin+0x2ec>

case ioPortAlternatrPushPull:

	gpio->MODER |= 0x02<<(2*bitNumber); // alternate function
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	68ba      	ldr	r2, [r7, #8]
 80006ac:	0052      	lsls	r2, r2, #1
 80006ae:	2102      	movs	r1, #2
 80006b0:	fa01 f202 	lsl.w	r2, r1, r2
 80006b4:	431a      	orrs	r2, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	601a      	str	r2, [r3, #0]
	gpio->OTYPER &= ~(0x01<<bitNumber); // push pull
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	2101      	movs	r1, #1
 80006c0:	68ba      	ldr	r2, [r7, #8]
 80006c2:	fa01 f202 	lsl.w	r2, r1, r2
 80006c6:	43d2      	mvns	r2, r2
 80006c8:	401a      	ands	r2, r3
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	689b      	ldr	r3, [r3, #8]
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	0052      	lsls	r2, r2, #1
 80006d6:	2103      	movs	r1, #3
 80006d8:	fa01 f202 	lsl.w	r2, r1, r2
 80006dc:	431a      	orrs	r2, r3
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	68db      	ldr	r3, [r3, #12]
 80006e6:	2103      	movs	r1, #3
 80006e8:	68ba      	ldr	r2, [r7, #8]
 80006ea:	fa01 f202 	lsl.w	r2, r1, r2
 80006ee:	43d2      	mvns	r2, r2
 80006f0:	401a      	ands	r2, r3
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	60da      	str	r2, [r3, #12]
    break;
 80006f6:	e035      	b.n	8000764 <GPIOConfigurePin+0x2ec>
 80006f8:	40020800 	.word	0x40020800
 80006fc:	40020000 	.word	0x40020000
 8000700:	40020400 	.word	0x40020400
 8000704:	40021000 	.word	0x40021000
 8000708:	40021c00 	.word	0x40021c00
 800070c:	40020c00 	.word	0x40020c00
 8000710:	40023800 	.word	0x40023800

case ioPortAlternatrOpenDrain:

	gpio->MODER |= 0x02<<(2*bitNumber); // alternate function
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	68ba      	ldr	r2, [r7, #8]
 800071a:	0052      	lsls	r2, r2, #1
 800071c:	2102      	movs	r1, #2
 800071e:	fa01 f202 	lsl.w	r2, r1, r2
 8000722:	431a      	orrs	r2, r3
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	601a      	str	r2, [r3, #0]
	gpio->OTYPER |= (0x01<<bitNumber); // open drain
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	2101      	movs	r1, #1
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	fa01 f202 	lsl.w	r2, r1, r2
 8000734:	431a      	orrs	r2, r3
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	0052      	lsls	r2, r2, #1
 8000742:	2103      	movs	r1, #3
 8000744:	fa01 f202 	lsl.w	r2, r1, r2
 8000748:	431a      	orrs	r2, r3
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	2103      	movs	r1, #3
 8000754:	68ba      	ldr	r2, [r7, #8]
 8000756:	fa01 f202 	lsl.w	r2, r1, r2
 800075a:	43d2      	mvns	r2, r2
 800075c:	401a      	ands	r2, r3
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	60da      	str	r2, [r3, #12]
    break;
 8000762:	bf00      	nop


}
    return true;
 8000764:	2301      	movs	r3, #1
}
 8000766:	4618      	mov	r0, r3
 8000768:	371c      	adds	r7, #28
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop

08000774 <GPIORead>:
{
gpio -> ODR ^= (1<<bitNumber); // prostì jen zmìò hobnotu v ODR pro pøísluný bit
}

bool GPIORead(GPIO_TypeDef *gpio, uint32_t bitNumber) // funkce pro zjitìní hodnoty na výstupu ODR pro bit na zadaném místì
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	if((gpio -> MODER & (0x03<<(bitNumber*2))) == 0x00) // jestlie je pin nastaven jako vstup
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	683a      	ldr	r2, [r7, #0]
 8000784:	0052      	lsls	r2, r2, #1
 8000786:	2103      	movs	r1, #3
 8000788:	fa01 f202 	lsl.w	r2, r1, r2
 800078c:	4013      	ands	r3, r2
 800078e:	2b00      	cmp	r3, #0
 8000790:	d10c      	bne.n	80007ac <GPIORead+0x38>
	{
		 return ((gpio -> IDR) & (1<<bitNumber)); // AND ODR s maskou vrátí 0 (false) pokud zkoumany bit je nula, a pokud neni nula a je to jakekoliv jine cislo, nezalezi na to jake, vrati (true)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	691b      	ldr	r3, [r3, #16]
 8000796:	2101      	movs	r1, #1
 8000798:	683a      	ldr	r2, [r7, #0]
 800079a:	fa01 f202 	lsl.w	r2, r1, r2
 800079e:	4013      	ands	r3, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	bf14      	ite	ne
 80007a4:	2301      	movne	r3, #1
 80007a6:	2300      	moveq	r3, #0
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	e01c      	b.n	80007e6 <GPIORead+0x72>

	}else if ((gpio -> MODER & (0x03<<(bitNumber*2))) == (0x01<<(bitNumber*2))) // pokud ne, tak je na prislusnem bitNumber kombinace 01
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	683a      	ldr	r2, [r7, #0]
 80007b2:	0052      	lsls	r2, r2, #1
 80007b4:	2103      	movs	r1, #3
 80007b6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ba:	4013      	ands	r3, r2
 80007bc:	683a      	ldr	r2, [r7, #0]
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	2101      	movs	r1, #1
 80007c2:	fa01 f202 	lsl.w	r2, r1, r2
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d10c      	bne.n	80007e4 <GPIORead+0x70>
	{
		 return ((gpio -> ODR) & (1<<bitNumber)); // AND ODR s maskou vrátí 0 (false) pokud zkoumany bit je nula, a pokud neni nula a je to jakekoliv jine cislo, nezalezi na to jake, vrati (true)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	2101      	movs	r1, #1
 80007d0:	683a      	ldr	r2, [r7, #0]
 80007d2:	fa01 f202 	lsl.w	r2, r1, r2
 80007d6:	4013      	ands	r3, r2
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf14      	ite	ne
 80007dc:	2301      	movne	r3, #1
 80007de:	2300      	moveq	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	e000      	b.n	80007e6 <GPIORead+0x72>
	}else
	{
		return false; // je potøeba dodìlat!!!!! pro analog a alternativvní funkce nebude fungovat!!!!!!!!
 80007e4:	2300      	movs	r3, #0
	}

}
 80007e6:	4618      	mov	r0, r3
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <GPIOWrite>:

void GPIOWrite(GPIO_TypeDef *gpio, uint32_t bitNumber,bool state) // funkce pro zapsani hodnoty na výstupu ODR pro bit na zadaném místì
{ // BSRR je registr kter nastavi natvrdo hodnotu na registru ODR, máme celkem 16 výstupù, BSRR má 32 výstupù, s tím e pokud dám jednièku na nìkterý ze spodních 16, øíkám tím nastav jedna na konkrétní bit(0-16) a pokud dám jednièku na nìkterý z horních 16 bitù BSRR, tak vlastnì øíkám, nastav nulu na konkrétním bitu (0-16)
 80007f2:	b480      	push	{r7}
 80007f4:	b085      	sub	sp, #20
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	60f8      	str	r0, [r7, #12]
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	4613      	mov	r3, r2
 80007fe:	71fb      	strb	r3, [r7, #7]
 if(state) // pokud chci zapsat jednicku
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d007      	beq.n	8000816 <GPIOWrite+0x24>
 {
	gpio -> BSRR = (0x01<<bitNumber); // zapis ji do spodni poloviny BSRR na místo (0-16)
 8000806:	2201      	movs	r2, #1
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	461a      	mov	r2, r3
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	619a      	str	r2, [r3, #24]
 }else // pokud ne
 {
	 gpio -> BSRR = ((0x01<<bitNumber)<<16); // zapis ji do horni poloviny registru BSRR(17-31), co zajistí vynulování pøísluného bitu
 }
}
 8000814:	e007      	b.n	8000826 <GPIOWrite+0x34>
	 gpio -> BSRR = ((0x01<<bitNumber)<<16); // zapis ji do horni poloviny registru BSRR(17-31), co zajistí vynulování pøísluného bitu
 8000816:	2201      	movs	r2, #1
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	041b      	lsls	r3, r3, #16
 8000820:	461a      	mov	r2, r3
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	619a      	str	r2, [r3, #24]
}
 8000826:	bf00      	nop
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000838:	4a16      	ldr	r2, [pc, #88]	; (8000894 <SystemInit+0x60>)
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <SystemInit+0x60>)
 800083c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000848:	4a13      	ldr	r2, [pc, #76]	; (8000898 <SystemInit+0x64>)
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <SystemInit+0x64>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000854:	4b10      	ldr	r3, [pc, #64]	; (8000898 <SystemInit+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800085a:	4a0f      	ldr	r2, [pc, #60]	; (8000898 <SystemInit+0x64>)
 800085c:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <SystemInit+0x64>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000868:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <SystemInit+0x64>)
 800086c:	4a0b      	ldr	r2, [pc, #44]	; (800089c <SystemInit+0x68>)
 800086e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000870:	4a09      	ldr	r2, [pc, #36]	; (8000898 <SystemInit+0x64>)
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <SystemInit+0x64>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800087a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <SystemInit+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000882:	4b04      	ldr	r3, [pc, #16]	; (8000894 <SystemInit+0x60>)
 8000884:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000888:	609a      	str	r2, [r3, #8]
#endif
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000ed00 	.word	0xe000ed00
 8000898:	40023800 	.word	0x40023800
 800089c:	24003010 	.word	0x24003010

080008a0 <__libc_init_array>:
 80008a0:	b570      	push	{r4, r5, r6, lr}
 80008a2:	4e0d      	ldr	r6, [pc, #52]	; (80008d8 <__libc_init_array+0x38>)
 80008a4:	4c0d      	ldr	r4, [pc, #52]	; (80008dc <__libc_init_array+0x3c>)
 80008a6:	1ba4      	subs	r4, r4, r6
 80008a8:	10a4      	asrs	r4, r4, #2
 80008aa:	2500      	movs	r5, #0
 80008ac:	42a5      	cmp	r5, r4
 80008ae:	d109      	bne.n	80008c4 <__libc_init_array+0x24>
 80008b0:	4e0b      	ldr	r6, [pc, #44]	; (80008e0 <__libc_init_array+0x40>)
 80008b2:	4c0c      	ldr	r4, [pc, #48]	; (80008e4 <__libc_init_array+0x44>)
 80008b4:	f000 f818 	bl	80008e8 <_init>
 80008b8:	1ba4      	subs	r4, r4, r6
 80008ba:	10a4      	asrs	r4, r4, #2
 80008bc:	2500      	movs	r5, #0
 80008be:	42a5      	cmp	r5, r4
 80008c0:	d105      	bne.n	80008ce <__libc_init_array+0x2e>
 80008c2:	bd70      	pop	{r4, r5, r6, pc}
 80008c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008c8:	4798      	blx	r3
 80008ca:	3501      	adds	r5, #1
 80008cc:	e7ee      	b.n	80008ac <__libc_init_array+0xc>
 80008ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008d2:	4798      	blx	r3
 80008d4:	3501      	adds	r5, #1
 80008d6:	e7f2      	b.n	80008be <__libc_init_array+0x1e>
 80008d8:	08000900 	.word	0x08000900
 80008dc:	08000900 	.word	0x08000900
 80008e0:	08000900 	.word	0x08000900
 80008e4:	08000904 	.word	0x08000904

080008e8 <_init>:
 80008e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ea:	bf00      	nop
 80008ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ee:	bc08      	pop	{r3}
 80008f0:	469e      	mov	lr, r3
 80008f2:	4770      	bx	lr

080008f4 <_fini>:
 80008f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008f6:	bf00      	nop
 80008f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008fa:	bc08      	pop	{r3}
 80008fc:	469e      	mov	lr, r3
 80008fe:	4770      	bx	lr

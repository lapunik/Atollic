
Domaci_Priprava_RGBLED_Skladani.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005e4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800077c  08000784  00010784  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800077c  0800077c  0001077c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000780  08000780  00010780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010784  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  08000784  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000001c  08000784  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00010784  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000b5f  00000000  00000000  000107b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000346  00000000  00000000  00011313  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000a8  00000000  00000000  00011660  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00011708  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000005e8  00000000  00000000  00011778  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000004af  00000000  00000000  00011d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0001220f  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000160  00000000  00000000  0001228c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000123ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000764 	.word	0x08000764

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000764 	.word	0x08000764

080001d8 <main>:

#include "stm_core.h"
#include "mpp_shield.h"

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	GPIOConfigurePin(RGBLED_GREEN, ioPortOutputPushPull);
 80001dc:	2200      	movs	r2, #0
 80001de:	210e      	movs	r1, #14
 80001e0:	4833      	ldr	r0, [pc, #204]	; (80002b0 <main+0xd8>)
 80001e2:	f000 f893 	bl	800030c <GPIOConfigurePin>
	GPIOConfigurePin(RGBLED_RED, ioPortOutputPushPull);
 80001e6:	2200      	movs	r2, #0
 80001e8:	210f      	movs	r1, #15
 80001ea:	4831      	ldr	r0, [pc, #196]	; (80002b0 <main+0xd8>)
 80001ec:	f000 f88e 	bl	800030c <GPIOConfigurePin>
	GPIOConfigurePin(RGBLED_BLUE, ioPortOutputPushPull);
 80001f0:	2200      	movs	r2, #0
 80001f2:	210d      	movs	r1, #13
 80001f4:	482e      	ldr	r0, [pc, #184]	; (80002b0 <main+0xd8>)
 80001f6:	f000 f889 	bl	800030c <GPIOConfigurePin>
	GPIOConfigurePin(BUTTON_LEFT,ioPortInputFloat);
 80001fa:	2203      	movs	r2, #3
 80001fc:	2105      	movs	r1, #5
 80001fe:	482c      	ldr	r0, [pc, #176]	; (80002b0 <main+0xd8>)
 8000200:	f000 f884 	bl	800030c <GPIOConfigurePin>
	GPIOConfigurePin(BUTTON_RIGHT,ioPortInputFloat);
 8000204:	2203      	movs	r2, #3
 8000206:	2104      	movs	r1, #4
 8000208:	4829      	ldr	r0, [pc, #164]	; (80002b0 <main+0xd8>)
 800020a:	f000 f87f 	bl	800030c <GPIOConfigurePin>
	GPIOConfigurePin(BUTTON_BLUE,ioPortInputFloat);
 800020e:	2203      	movs	r2, #3
 8000210:	210d      	movs	r1, #13
 8000212:	4828      	ldr	r0, [pc, #160]	; (80002b4 <main+0xdc>)
 8000214:	f000 f87a 	bl	800030c <GPIOConfigurePin>
	// pokud se ptám jestli je na vstupu jednièka nebo nula IDR, moje funkce mi to neumí øíct

  while (1)
  {

		if(!GPIORead(BUTTON_BLUE))
 8000218:	210d      	movs	r1, #13
 800021a:	4826      	ldr	r0, [pc, #152]	; (80002b4 <main+0xdc>)
 800021c:	f000 fa08 	bl	8000630 <GPIORead>
 8000220:	4603      	mov	r3, r0
 8000222:	f083 0301 	eor.w	r3, r3, #1
 8000226:	b2db      	uxtb	r3, r3
 8000228:	2b00      	cmp	r3, #0
 800022a:	d00e      	beq.n	800024a <main+0x72>
		{
		    GPIOToggle(RGBLED_BLUE);
 800022c:	210d      	movs	r1, #13
 800022e:	4820      	ldr	r0, [pc, #128]	; (80002b0 <main+0xd8>)
 8000230:	f000 f9ea 	bl	8000608 <GPIOToggle>

		    while(!GPIORead(BUTTON_BLUE))
 8000234:	bf00      	nop
 8000236:	210d      	movs	r1, #13
 8000238:	481e      	ldr	r0, [pc, #120]	; (80002b4 <main+0xdc>)
 800023a:	f000 f9f9 	bl	8000630 <GPIORead>
 800023e:	4603      	mov	r3, r0
 8000240:	f083 0301 	eor.w	r3, r3, #1
 8000244:	b2db      	uxtb	r3, r3
 8000246:	2b00      	cmp	r3, #0
 8000248:	d1f5      	bne.n	8000236 <main+0x5e>
		    {

		    }
		}
		if(!GPIORead(BUTTON_RIGHT))
 800024a:	2104      	movs	r1, #4
 800024c:	4818      	ldr	r0, [pc, #96]	; (80002b0 <main+0xd8>)
 800024e:	f000 f9ef 	bl	8000630 <GPIORead>
 8000252:	4603      	mov	r3, r0
 8000254:	f083 0301 	eor.w	r3, r3, #1
 8000258:	b2db      	uxtb	r3, r3
 800025a:	2b00      	cmp	r3, #0
 800025c:	d00e      	beq.n	800027c <main+0xa4>
		{
		    GPIOToggle(RGBLED_RED);
 800025e:	210f      	movs	r1, #15
 8000260:	4813      	ldr	r0, [pc, #76]	; (80002b0 <main+0xd8>)
 8000262:	f000 f9d1 	bl	8000608 <GPIOToggle>

		    while(!GPIORead(BUTTON_RIGHT))
 8000266:	bf00      	nop
 8000268:	2104      	movs	r1, #4
 800026a:	4811      	ldr	r0, [pc, #68]	; (80002b0 <main+0xd8>)
 800026c:	f000 f9e0 	bl	8000630 <GPIORead>
 8000270:	4603      	mov	r3, r0
 8000272:	f083 0301 	eor.w	r3, r3, #1
 8000276:	b2db      	uxtb	r3, r3
 8000278:	2b00      	cmp	r3, #0
 800027a:	d1f5      	bne.n	8000268 <main+0x90>
		    {

		    }
		}
		if(!GPIORead(BUTTON_LEFT))
 800027c:	2105      	movs	r1, #5
 800027e:	480c      	ldr	r0, [pc, #48]	; (80002b0 <main+0xd8>)
 8000280:	f000 f9d6 	bl	8000630 <GPIORead>
 8000284:	4603      	mov	r3, r0
 8000286:	f083 0301 	eor.w	r3, r3, #1
 800028a:	b2db      	uxtb	r3, r3
 800028c:	2b00      	cmp	r3, #0
 800028e:	d0c3      	beq.n	8000218 <main+0x40>
		{
		    GPIOToggle(RGBLED_GREEN);
 8000290:	210e      	movs	r1, #14
 8000292:	4807      	ldr	r0, [pc, #28]	; (80002b0 <main+0xd8>)
 8000294:	f000 f9b8 	bl	8000608 <GPIOToggle>

		    while(!GPIORead(BUTTON_LEFT))
 8000298:	bf00      	nop
 800029a:	2105      	movs	r1, #5
 800029c:	4804      	ldr	r0, [pc, #16]	; (80002b0 <main+0xd8>)
 800029e:	f000 f9c7 	bl	8000630 <GPIORead>
 80002a2:	4603      	mov	r3, r0
 80002a4:	f083 0301 	eor.w	r3, r3, #1
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d1f5      	bne.n	800029a <main+0xc2>
		if(!GPIORead(BUTTON_BLUE))
 80002ae:	e7b3      	b.n	8000218 <main+0x40>
 80002b0:	40020400 	.word	0x40020400
 80002b4:	40020800 	.word	0x40020800

080002b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80002b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002be:	e003      	b.n	80002c8 <LoopCopyDataInit>

080002c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002c6:	3104      	adds	r1, #4

080002c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002c8:	480b      	ldr	r0, [pc, #44]	; (80002f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002ca:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002d0:	d3f6      	bcc.n	80002c0 <CopyDataInit>
  ldr  r2, =_sbss
 80002d2:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002d4:	e002      	b.n	80002dc <LoopFillZerobss>

080002d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002d8:	f842 3b04 	str.w	r3, [r2], #4

080002dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002dc:	4b09      	ldr	r3, [pc, #36]	; (8000304 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002e0:	d3f9      	bcc.n	80002d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002e2:	f000 f9e5 	bl	80006b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002e6:	f000 fa19 	bl	800071c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002ea:	f7ff ff75 	bl	80001d8 <main>
  bx  lr    
 80002ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80002f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80002f4:	08000784 	.word	0x08000784
  ldr  r0, =_sdata
 80002f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002fc:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000300:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000304:	2000001c 	.word	0x2000001c

08000308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC_IRQHandler>
	...

0800030c <GPIOConfigurePin>:
 *      Author: Lapunik
 */
#include "stm_core.h"

bool GPIOConfigurePin(GPIO_TypeDef *gpio,uint32_t bitNumber, ioPortMode mode) // konfigurace GPIO do pøedpøipravených stavù
{
 800030c:	b480      	push	{r7}
 800030e:	b087      	sub	sp, #28
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	4613      	mov	r3, r2
 8000318:	71fb      	strb	r3, [r7, #7]

	uint32_t enableMask = 0;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]
	uint32_t resetMask = 0;
 800031e:	2300      	movs	r3, #0
 8000320:	613b      	str	r3, [r7, #16]

	switch((uint32_t)gpio) // je potøeba zapnout hodiny podle toho který gpio chceme vyuzivat => ulozime bity pro reset a pro zapnuti do masek a pote masku aplikujeme
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	4a99      	ldr	r2, [pc, #612]	; (800058c <GPIOConfigurePin+0x280>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d01d      	beq.n	8000366 <GPIOConfigurePin+0x5a>
 800032a:	4a98      	ldr	r2, [pc, #608]	; (800058c <GPIOConfigurePin+0x280>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d806      	bhi.n	800033e <GPIOConfigurePin+0x32>
 8000330:	4a97      	ldr	r2, [pc, #604]	; (8000590 <GPIOConfigurePin+0x284>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d00d      	beq.n	8000352 <GPIOConfigurePin+0x46>
 8000336:	4a97      	ldr	r2, [pc, #604]	; (8000594 <GPIOConfigurePin+0x288>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d00f      	beq.n	800035c <GPIOConfigurePin+0x50>
 800033c:	e027      	b.n	800038e <GPIOConfigurePin+0x82>
 800033e:	4a96      	ldr	r2, [pc, #600]	; (8000598 <GPIOConfigurePin+0x28c>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d01a      	beq.n	800037a <GPIOConfigurePin+0x6e>
 8000344:	4a95      	ldr	r2, [pc, #596]	; (800059c <GPIOConfigurePin+0x290>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d01c      	beq.n	8000384 <GPIOConfigurePin+0x78>
 800034a:	4a95      	ldr	r2, [pc, #596]	; (80005a0 <GPIOConfigurePin+0x294>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d00f      	beq.n	8000370 <GPIOConfigurePin+0x64>
 8000350:	e01d      	b.n	800038e <GPIOConfigurePin+0x82>
	{
	case (uint32_t)GPIOA: // GPIOA je definovana konstanta ve formátu "ukazatel", proto msím pøetypovat na celoèíselnou hodnotu
        enableMask = RCC_AHB1ENR_GPIOAEN;
 8000352:	2301      	movs	r3, #1
 8000354:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOARST;
 8000356:	2301      	movs	r3, #1
 8000358:	613b      	str	r3, [r7, #16]
	break;
 800035a:	e018      	b.n	800038e <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOB:
        enableMask = RCC_AHB1ENR_GPIOBEN;
 800035c:	2302      	movs	r3, #2
 800035e:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOBRST;
 8000360:	2302      	movs	r3, #2
 8000362:	613b      	str	r3, [r7, #16]
	break;
 8000364:	e013      	b.n	800038e <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOC:
        enableMask = RCC_AHB1ENR_GPIOCEN;
 8000366:	2304      	movs	r3, #4
 8000368:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOCRST;
 800036a:	2304      	movs	r3, #4
 800036c:	613b      	str	r3, [r7, #16]
	break;
 800036e:	e00e      	b.n	800038e <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOD:
        enableMask = RCC_AHB1ENR_GPIODEN;
 8000370:	2308      	movs	r3, #8
 8000372:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIODRST;
 8000374:	2308      	movs	r3, #8
 8000376:	613b      	str	r3, [r7, #16]
	break;
 8000378:	e009      	b.n	800038e <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOE:
        enableMask = RCC_AHB1ENR_GPIOEEN;
 800037a:	2310      	movs	r3, #16
 800037c:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOERST;
 800037e:	2310      	movs	r3, #16
 8000380:	613b      	str	r3, [r7, #16]
	break;
 8000382:	e004      	b.n	800038e <GPIOConfigurePin+0x82>
        enableMask = RCC_AHB1ENR_GPIOGEN;
        resetMask = RCC_AHB1RSTR_GPIOGRST;
	break;
#endif
	case (uint32_t)GPIOH:
        enableMask = RCC_AHB1ENR_GPIOHEN;
 8000384:	2380      	movs	r3, #128	; 0x80
 8000386:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOHRST;
 8000388:	2380      	movs	r3, #128	; 0x80
 800038a:	613b      	str	r3, [r7, #16]
	break;
 800038c:	bf00      	nop

	}

	if((resetMask == 0)||(enableMask == 0)) // pokud se do masek neuloila ádná hodnota, ukonèi konfiguraci a vrat zpravu false o neúspìchu
 800038e:	693b      	ldr	r3, [r7, #16]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d002      	beq.n	800039a <GPIOConfigurePin+0x8e>
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d101      	bne.n	800039e <GPIOConfigurePin+0x92>
	{
		return false;
 800039a:	2300      	movs	r3, #0
 800039c:	e12d      	b.n	80005fa <GPIOConfigurePin+0x2ee>
	}
	else
	{
		  if(!(RCC -> AHB1ENR & enableMask)) // jestlie nejsou masky prázdné, poui je pro nastavení hodin
 800039e:	4b81      	ldr	r3, [pc, #516]	; (80005a4 <GPIOConfigurePin+0x298>)
 80003a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	4013      	ands	r3, r2
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d112      	bne.n	80003d0 <GPIOConfigurePin+0xc4>
		  {
		    RCC->AHB1ENR |= enableMask;
 80003aa:	497e      	ldr	r1, [pc, #504]	; (80005a4 <GPIOConfigurePin+0x298>)
 80003ac:	4b7d      	ldr	r3, [pc, #500]	; (80005a4 <GPIOConfigurePin+0x298>)
 80003ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003b0:	697b      	ldr	r3, [r7, #20]
 80003b2:	4313      	orrs	r3, r2
 80003b4:	630b      	str	r3, [r1, #48]	; 0x30
		    RCC->AHB1RSTR |= resetMask;
 80003b6:	497b      	ldr	r1, [pc, #492]	; (80005a4 <GPIOConfigurePin+0x298>)
 80003b8:	4b7a      	ldr	r3, [pc, #488]	; (80005a4 <GPIOConfigurePin+0x298>)
 80003ba:	691a      	ldr	r2, [r3, #16]
 80003bc:	693b      	ldr	r3, [r7, #16]
 80003be:	4313      	orrs	r3, r2
 80003c0:	610b      	str	r3, [r1, #16]
		    RCC->AHB1RSTR &= ~resetMask;
 80003c2:	4978      	ldr	r1, [pc, #480]	; (80005a4 <GPIOConfigurePin+0x298>)
 80003c4:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <GPIOConfigurePin+0x298>)
 80003c6:	691a      	ldr	r2, [r3, #16]
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	43db      	mvns	r3, r3
 80003cc:	4013      	ands	r3, r2
 80003ce:	610b      	str	r3, [r1, #16]
		  }
	}

gpio -> MODER &= ~(0x03 << (bitNumber*2)); // vynulovani zdvojených bitu pøed nastavováním (kdyby nìkde byla kombinace 10 a já tam ORoval 01 tak vysledna kombinace je 11 misto 01)...u registru kde se nastavuje pouze jeden bit toho nehrozí
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	68ba      	ldr	r2, [r7, #8]
 80003d6:	0052      	lsls	r2, r2, #1
 80003d8:	2103      	movs	r1, #3
 80003da:	fa01 f202 	lsl.w	r2, r1, r2
 80003de:	43d2      	mvns	r2, r2
 80003e0:	401a      	ands	r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	601a      	str	r2, [r3, #0]
gpio -> PUPDR &= ~(0x03 << (bitNumber*2));
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	68db      	ldr	r3, [r3, #12]
 80003ea:	68ba      	ldr	r2, [r7, #8]
 80003ec:	0052      	lsls	r2, r2, #1
 80003ee:	2103      	movs	r1, #3
 80003f0:	fa01 f202 	lsl.w	r2, r1, r2
 80003f4:	43d2      	mvns	r2, r2
 80003f6:	401a      	ands	r2, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	60da      	str	r2, [r3, #12]
gpio -> OSPEEDR &= ~(0x03 << (bitNumber*2));
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	689b      	ldr	r3, [r3, #8]
 8000400:	68ba      	ldr	r2, [r7, #8]
 8000402:	0052      	lsls	r2, r2, #1
 8000404:	2103      	movs	r1, #3
 8000406:	fa01 f202 	lsl.w	r2, r1, r2
 800040a:	43d2      	mvns	r2, r2
 800040c:	401a      	ands	r2, r3
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	609a      	str	r2, [r3, #8]


switch(mode)
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	2b07      	cmp	r3, #7
 8000416:	f200 80ef 	bhi.w	80005f8 <GPIOConfigurePin+0x2ec>
 800041a:	a201      	add	r2, pc, #4	; (adr r2, 8000420 <GPIOConfigurePin+0x114>)
 800041c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000420:	08000441 	.word	0x08000441
 8000424:	08000493 	.word	0x08000493
 8000428:	080004e3 	.word	0x080004e3
 800042c:	080004f9 	.word	0x080004f9
 8000430:	0800050f 	.word	0x0800050f
 8000434:	08000525 	.word	0x08000525
 8000438:	0800053b 	.word	0x0800053b
 800043c:	080005a9 	.word	0x080005a9
{
case ioPortOutputPushPull:

	gpio->MODER |= 0x01<<(2*bitNumber); // output
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	68ba      	ldr	r2, [r7, #8]
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	2101      	movs	r1, #1
 800044a:	fa01 f202 	lsl.w	r2, r1, r2
 800044e:	431a      	orrs	r2, r3
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	601a      	str	r2, [r3, #0]
	gpio->OTYPER &= ~(0x01<<bitNumber); // push-pull
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	685b      	ldr	r3, [r3, #4]
 8000458:	2101      	movs	r1, #1
 800045a:	68ba      	ldr	r2, [r7, #8]
 800045c:	fa01 f202 	lsl.w	r2, r1, r2
 8000460:	43d2      	mvns	r2, r2
 8000462:	401a      	ands	r2, r3
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	68ba      	ldr	r2, [r7, #8]
 800046e:	0052      	lsls	r2, r2, #1
 8000470:	2103      	movs	r1, #3
 8000472:	fa01 f202 	lsl.w	r2, r1, r2
 8000476:	431a      	orrs	r2, r3
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	2103      	movs	r1, #3
 8000482:	68ba      	ldr	r2, [r7, #8]
 8000484:	fa01 f202 	lsl.w	r2, r1, r2
 8000488:	43d2      	mvns	r2, r2
 800048a:	401a      	ands	r2, r3
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	60da      	str	r2, [r3, #12]
    break;
 8000490:	e0b2      	b.n	80005f8 <GPIOConfigurePin+0x2ec>

case ioPortOutputOpenDrain:

	gpio->MODER |= 0x01<<(2*bitNumber); // output
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	68ba      	ldr	r2, [r7, #8]
 8000498:	0052      	lsls	r2, r2, #1
 800049a:	2101      	movs	r1, #1
 800049c:	fa01 f202 	lsl.w	r2, r1, r2
 80004a0:	431a      	orrs	r2, r3
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	601a      	str	r2, [r3, #0]
	gpio->OTYPER |= (0x01<<bitNumber); // open drain
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	2101      	movs	r1, #1
 80004ac:	68ba      	ldr	r2, [r7, #8]
 80004ae:	fa01 f202 	lsl.w	r2, r1, r2
 80004b2:	431a      	orrs	r2, r3
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	689b      	ldr	r3, [r3, #8]
 80004bc:	68ba      	ldr	r2, [r7, #8]
 80004be:	0052      	lsls	r2, r2, #1
 80004c0:	2103      	movs	r1, #3
 80004c2:	fa01 f202 	lsl.w	r2, r1, r2
 80004c6:	431a      	orrs	r2, r3
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	2103      	movs	r1, #3
 80004d2:	68ba      	ldr	r2, [r7, #8]
 80004d4:	fa01 f202 	lsl.w	r2, r1, r2
 80004d8:	43d2      	mvns	r2, r2
 80004da:	401a      	ands	r2, r3
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	60da      	str	r2, [r3, #12]
    break;
 80004e0:	e08a      	b.n	80005f8 <GPIOConfigurePin+0x2ec>

case ioPortAnalog:

	gpio->MODER |= 0x03<<(2*bitNumber); // analog
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	68ba      	ldr	r2, [r7, #8]
 80004e8:	0052      	lsls	r2, r2, #1
 80004ea:	2103      	movs	r1, #3
 80004ec:	fa01 f202 	lsl.w	r2, r1, r2
 80004f0:	431a      	orrs	r2, r3
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	601a      	str	r2, [r3, #0]
    break;
 80004f6:	e07f      	b.n	80005f8 <GPIOConfigurePin+0x2ec>

case ioPortInputFloat:

	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	2103      	movs	r1, #3
 80004fe:	68ba      	ldr	r2, [r7, #8]
 8000500:	fa01 f202 	lsl.w	r2, r1, r2
 8000504:	43d2      	mvns	r2, r2
 8000506:	401a      	ands	r2, r3
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	60da      	str	r2, [r3, #12]
    break;
 800050c:	e074      	b.n	80005f8 <GPIOConfigurePin+0x2ec>

case ioPortInputPullUp:

	gpio->PUPDR |= ~(0x01<<bitNumber); // pull up
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	2101      	movs	r1, #1
 8000514:	68ba      	ldr	r2, [r7, #8]
 8000516:	fa01 f202 	lsl.w	r2, r1, r2
 800051a:	43d2      	mvns	r2, r2
 800051c:	431a      	orrs	r2, r3
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	60da      	str	r2, [r3, #12]
    break;
 8000522:	e069      	b.n	80005f8 <GPIOConfigurePin+0x2ec>

case ioPortInputPullDown:

	gpio->PUPDR |= ~(0x02<<bitNumber); // pull down
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	2102      	movs	r1, #2
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	fa01 f202 	lsl.w	r2, r1, r2
 8000530:	43d2      	mvns	r2, r2
 8000532:	431a      	orrs	r2, r3
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	60da      	str	r2, [r3, #12]
    break;
 8000538:	e05e      	b.n	80005f8 <GPIOConfigurePin+0x2ec>

case ioPortAlternatrPushPull:

	gpio->MODER |= 0x02<<(2*bitNumber); // alternate function
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	68ba      	ldr	r2, [r7, #8]
 8000540:	0052      	lsls	r2, r2, #1
 8000542:	2102      	movs	r1, #2
 8000544:	fa01 f202 	lsl.w	r2, r1, r2
 8000548:	431a      	orrs	r2, r3
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	601a      	str	r2, [r3, #0]
	gpio->OTYPER &= ~(0x01<<bitNumber); // push pull
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	2101      	movs	r1, #1
 8000554:	68ba      	ldr	r2, [r7, #8]
 8000556:	fa01 f202 	lsl.w	r2, r1, r2
 800055a:	43d2      	mvns	r2, r2
 800055c:	401a      	ands	r2, r3
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	68ba      	ldr	r2, [r7, #8]
 8000568:	0052      	lsls	r2, r2, #1
 800056a:	2103      	movs	r1, #3
 800056c:	fa01 f202 	lsl.w	r2, r1, r2
 8000570:	431a      	orrs	r2, r3
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	2103      	movs	r1, #3
 800057c:	68ba      	ldr	r2, [r7, #8]
 800057e:	fa01 f202 	lsl.w	r2, r1, r2
 8000582:	43d2      	mvns	r2, r2
 8000584:	401a      	ands	r2, r3
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	60da      	str	r2, [r3, #12]
    break;
 800058a:	e035      	b.n	80005f8 <GPIOConfigurePin+0x2ec>
 800058c:	40020800 	.word	0x40020800
 8000590:	40020000 	.word	0x40020000
 8000594:	40020400 	.word	0x40020400
 8000598:	40021000 	.word	0x40021000
 800059c:	40021c00 	.word	0x40021c00
 80005a0:	40020c00 	.word	0x40020c00
 80005a4:	40023800 	.word	0x40023800

case ioPortAlternatrOpenDrain:

	gpio->MODER |= 0x02<<(2*bitNumber); // alternate function
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	68ba      	ldr	r2, [r7, #8]
 80005ae:	0052      	lsls	r2, r2, #1
 80005b0:	2102      	movs	r1, #2
 80005b2:	fa01 f202 	lsl.w	r2, r1, r2
 80005b6:	431a      	orrs	r2, r3
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	601a      	str	r2, [r3, #0]
	gpio->OTYPER |= (0x01<<bitNumber); // open drain
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	2101      	movs	r1, #1
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	fa01 f202 	lsl.w	r2, r1, r2
 80005c8:	431a      	orrs	r2, r3
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	0052      	lsls	r2, r2, #1
 80005d6:	2103      	movs	r1, #3
 80005d8:	fa01 f202 	lsl.w	r2, r1, r2
 80005dc:	431a      	orrs	r2, r3
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	2103      	movs	r1, #3
 80005e8:	68ba      	ldr	r2, [r7, #8]
 80005ea:	fa01 f202 	lsl.w	r2, r1, r2
 80005ee:	43d2      	mvns	r2, r2
 80005f0:	401a      	ands	r2, r3
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	60da      	str	r2, [r3, #12]
    break;
 80005f6:	bf00      	nop


}
    return true;
 80005f8:	2301      	movs	r3, #1
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	371c      	adds	r7, #28
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <GPIOToggle>:

void GPIOToggle(GPIO_TypeDef *gpio, uint32_t bitNumber) // funkce pro zmìnu na výstupu ODR pro bit na zadaném místì
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
gpio -> ODR ^= (1<<bitNumber); // prostì jen zmìò hobnotu v ODR pro pøísluný bit
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	2101      	movs	r1, #1
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	fa01 f202 	lsl.w	r2, r1, r2
 800061e:	405a      	eors	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	615a      	str	r2, [r3, #20]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <GPIORead>:

bool GPIORead(GPIO_TypeDef *gpio, uint32_t bitNumber) // funkce pro zjitìní hodnoty na výstupu ODR pro bit na zadaném místì
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
	if((gpio -> MODER & (0x03<<(bitNumber*2))) == 0x00) // jestlie je pin nastaven jako vstup
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	0052      	lsls	r2, r2, #1
 8000642:	2103      	movs	r1, #3
 8000644:	fa01 f202 	lsl.w	r2, r1, r2
 8000648:	4013      	ands	r3, r2
 800064a:	2b00      	cmp	r3, #0
 800064c:	d10c      	bne.n	8000668 <GPIORead+0x38>
	{
		 return ((gpio -> IDR) & (1<<bitNumber)); // AND ODR s maskou vrátí 0 (false) pokud zkoumany bit je nula, a pokud neni nula a je to jakekoliv jine cislo, nezalezi na to jake, vrati (true)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	691b      	ldr	r3, [r3, #16]
 8000652:	2101      	movs	r1, #1
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	fa01 f202 	lsl.w	r2, r1, r2
 800065a:	4013      	ands	r3, r2
 800065c:	2b00      	cmp	r3, #0
 800065e:	bf14      	ite	ne
 8000660:	2301      	movne	r3, #1
 8000662:	2300      	moveq	r3, #0
 8000664:	b2db      	uxtb	r3, r3
 8000666:	e01c      	b.n	80006a2 <GPIORead+0x72>

	}else if ((gpio -> MODER & (0x03<<(bitNumber*2))) == (0x01<<(bitNumber*2))) // pokud ne, tak je na prislusnem bitNumber kombinace 01
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	0052      	lsls	r2, r2, #1
 8000670:	2103      	movs	r1, #3
 8000672:	fa01 f202 	lsl.w	r2, r1, r2
 8000676:	4013      	ands	r3, r2
 8000678:	683a      	ldr	r2, [r7, #0]
 800067a:	0052      	lsls	r2, r2, #1
 800067c:	2101      	movs	r1, #1
 800067e:	fa01 f202 	lsl.w	r2, r1, r2
 8000682:	4293      	cmp	r3, r2
 8000684:	d10c      	bne.n	80006a0 <GPIORead+0x70>
	{
		 return ((gpio -> ODR) & (1<<bitNumber)); // AND ODR s maskou vrátí 0 (false) pokud zkoumany bit je nula, a pokud neni nula a je to jakekoliv jine cislo, nezalezi na to jake, vrati (true)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	2101      	movs	r1, #1
 800068c:	683a      	ldr	r2, [r7, #0]
 800068e:	fa01 f202 	lsl.w	r2, r1, r2
 8000692:	4013      	ands	r3, r2
 8000694:	2b00      	cmp	r3, #0
 8000696:	bf14      	ite	ne
 8000698:	2301      	movne	r3, #1
 800069a:	2300      	moveq	r3, #0
 800069c:	b2db      	uxtb	r3, r3
 800069e:	e000      	b.n	80006a2 <GPIORead+0x72>
	}else
	{
		return false; // je potøeba dodìlat!!!!! pro analog a alternativvní funkce nebude fungovat!!!!!!!!
 80006a0:	2300      	movs	r3, #0
	}

}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
	...

080006b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006b4:	4a16      	ldr	r2, [pc, #88]	; (8000710 <SystemInit+0x60>)
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <SystemInit+0x60>)
 80006b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80006c4:	4a13      	ldr	r2, [pc, #76]	; (8000714 <SystemInit+0x64>)
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <SystemInit+0x64>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <SystemInit+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80006d6:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <SystemInit+0x64>)
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <SystemInit+0x64>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006e4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <SystemInit+0x64>)
 80006e8:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <SystemInit+0x68>)
 80006ea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006ec:	4a09      	ldr	r2, [pc, #36]	; (8000714 <SystemInit+0x64>)
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <SystemInit+0x64>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <SystemInit+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006fe:	4b04      	ldr	r3, [pc, #16]	; (8000710 <SystemInit+0x60>)
 8000700:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000704:	609a      	str	r2, [r3, #8]
#endif
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000ed00 	.word	0xe000ed00
 8000714:	40023800 	.word	0x40023800
 8000718:	24003010 	.word	0x24003010

0800071c <__libc_init_array>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	4e0d      	ldr	r6, [pc, #52]	; (8000754 <__libc_init_array+0x38>)
 8000720:	4c0d      	ldr	r4, [pc, #52]	; (8000758 <__libc_init_array+0x3c>)
 8000722:	1ba4      	subs	r4, r4, r6
 8000724:	10a4      	asrs	r4, r4, #2
 8000726:	2500      	movs	r5, #0
 8000728:	42a5      	cmp	r5, r4
 800072a:	d109      	bne.n	8000740 <__libc_init_array+0x24>
 800072c:	4e0b      	ldr	r6, [pc, #44]	; (800075c <__libc_init_array+0x40>)
 800072e:	4c0c      	ldr	r4, [pc, #48]	; (8000760 <__libc_init_array+0x44>)
 8000730:	f000 f818 	bl	8000764 <_init>
 8000734:	1ba4      	subs	r4, r4, r6
 8000736:	10a4      	asrs	r4, r4, #2
 8000738:	2500      	movs	r5, #0
 800073a:	42a5      	cmp	r5, r4
 800073c:	d105      	bne.n	800074a <__libc_init_array+0x2e>
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000744:	4798      	blx	r3
 8000746:	3501      	adds	r5, #1
 8000748:	e7ee      	b.n	8000728 <__libc_init_array+0xc>
 800074a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800074e:	4798      	blx	r3
 8000750:	3501      	adds	r5, #1
 8000752:	e7f2      	b.n	800073a <__libc_init_array+0x1e>
 8000754:	0800077c 	.word	0x0800077c
 8000758:	0800077c 	.word	0x0800077c
 800075c:	0800077c 	.word	0x0800077c
 8000760:	08000780 	.word	0x08000780

08000764 <_init>:
 8000764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000766:	bf00      	nop
 8000768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800076a:	bc08      	pop	{r3}
 800076c:	469e      	mov	lr, r3
 800076e:	4770      	bx	lr

08000770 <_fini>:
 8000770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000772:	bf00      	nop
 8000774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000776:	bc08      	pop	{r3}
 8000778:	469e      	mov	lr, r3
 800077a:	4770      	bx	lr

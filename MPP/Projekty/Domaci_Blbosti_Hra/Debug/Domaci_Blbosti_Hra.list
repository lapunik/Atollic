
Domaci_Blbosti_Hra.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b94  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d2c  08000d2c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000d2c  08000d2c  00010d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000d30  08000d30  00010d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  20000000  08000d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000002c  20000064  08000d98  00020064  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000090  08000d98  00020090  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  9 .debug_info   000018a9  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000588  00000000  00000000  0002193d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000e8  00000000  00000000  00021ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00021fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000983  00000000  00000000  00022050  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000091c  00000000  00000000  000229d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000232ef  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000003a4  00000000  00000000  0002336c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00023710  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000064 	.word	0x20000064
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000d14 	.word	0x08000d14

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000068 	.word	0x20000068
 80001d4:	08000d14 	.word	0x08000d14

080001d8 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b086      	sub	sp, #24
 80001dc:	af00      	add	r7, sp, #0
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

  /* TODO - Add your application code here */

	GPIOConfigurePin(BUTTON_BLUE,ioPortInputFloat);
 80001de:	2203      	movs	r2, #3
 80001e0:	210d      	movs	r1, #13
 80001e2:	487e      	ldr	r0, [pc, #504]	; (80003dc <main+0x204>)
 80001e4:	f000 fa9e 	bl	8000724 <GPIOConfigurePin>
	GPIOConfigurePin(BUTTON_LEFT,ioPortInputFloat);
 80001e8:	2203      	movs	r2, #3
 80001ea:	2105      	movs	r1, #5
 80001ec:	487c      	ldr	r0, [pc, #496]	; (80003e0 <main+0x208>)
 80001ee:	f000 fa99 	bl	8000724 <GPIOConfigurePin>
	GPIOConfigurePin(BUTTON_RIGHT,ioPortInputFloat);
 80001f2:	2203      	movs	r2, #3
 80001f4:	2104      	movs	r1, #4
 80001f6:	487a      	ldr	r0, [pc, #488]	; (80003e0 <main+0x208>)
 80001f8:	f000 fa94 	bl	8000724 <GPIOConfigurePin>

	GPIOConfigurePin(RGBLED_BLUE,ioPortOutputPushPull);
 80001fc:	2200      	movs	r2, #0
 80001fe:	210d      	movs	r1, #13
 8000200:	4877      	ldr	r0, [pc, #476]	; (80003e0 <main+0x208>)
 8000202:	f000 fa8f 	bl	8000724 <GPIOConfigurePin>
	GPIOConfigurePin(RGBLED_GREEN,ioPortOutputPushPull);
 8000206:	2200      	movs	r2, #0
 8000208:	210e      	movs	r1, #14
 800020a:	4875      	ldr	r0, [pc, #468]	; (80003e0 <main+0x208>)
 800020c:	f000 fa8a 	bl	8000724 <GPIOConfigurePin>
	GPIOConfigurePin(RGBLED_RED,ioPortOutputPushPull);
 8000210:	2200      	movs	r2, #0
 8000212:	210f      	movs	r1, #15
 8000214:	4872      	ldr	r0, [pc, #456]	; (80003e0 <main+0x208>)
 8000216:	f000 fa85 	bl	8000724 <GPIOConfigurePin>

    GPIOConfigurePin(BUZZER,ioPortOutputPushPull);
 800021a:	2200      	movs	r2, #0
 800021c:	2100      	movs	r1, #0
 800021e:	4870      	ldr	r0, [pc, #448]	; (80003e0 <main+0x208>)
 8000220:	f000 fa80 	bl	8000724 <GPIOConfigurePin>


	GPIOConfigurePin(LED_LE,ioPortOutputPushPull); // LE pøepisuje obsah posuvného registru do paralelního registru
 8000224:	2200      	movs	r2, #0
 8000226:	2108      	movs	r1, #8
 8000228:	486e      	ldr	r0, [pc, #440]	; (80003e4 <main+0x20c>)
 800022a:	f000 fa7b 	bl	8000724 <GPIOConfigurePin>
	GPIOWrite(LED_LE,false); // klidový stav
 800022e:	2200      	movs	r2, #0
 8000230:	2108      	movs	r1, #8
 8000232:	486c      	ldr	r0, [pc, #432]	; (80003e4 <main+0x20c>)
 8000234:	f000 fc33 	bl	8000a9e <GPIOWrite>
	GPIOConfigurePin(LED_OE,ioPortOutputPushPull); // ~OE øízení výstupních budièù LED (aktivní v nule)
 8000238:	2200      	movs	r2, #0
 800023a:	2109      	movs	r1, #9
 800023c:	4869      	ldr	r0, [pc, #420]	; (80003e4 <main+0x20c>)
 800023e:	f000 fa71 	bl	8000724 <GPIOConfigurePin>
	GPIOWrite(LED_OE,false); // každá zmìna se hned promítne
 8000242:	2200      	movs	r2, #0
 8000244:	2109      	movs	r1, #9
 8000246:	4867      	ldr	r0, [pc, #412]	; (80003e4 <main+0x20c>)
 8000248:	f000 fc29 	bl	8000a9e <GPIOWrite>
	GPIOConfigurePin(LED_CLK,ioPortOutputPushPull); // CLK hodiny
 800024c:	2200      	movs	r2, #0
 800024e:	2105      	movs	r1, #5
 8000250:	4864      	ldr	r0, [pc, #400]	; (80003e4 <main+0x20c>)
 8000252:	f000 fa67 	bl	8000724 <GPIOConfigurePin>
	GPIOWrite(LED_CLK,false); // Hodiny do nuly
 8000256:	2200      	movs	r2, #0
 8000258:	2105      	movs	r1, #5
 800025a:	4862      	ldr	r0, [pc, #392]	; (80003e4 <main+0x20c>)
 800025c:	f000 fc1f 	bl	8000a9e <GPIOWrite>
	GPIOConfigurePin(LED_SDI,ioPortOutputPushPull); // SDI serial data input
 8000260:	2200      	movs	r2, #0
 8000262:	2107      	movs	r1, #7
 8000264:	485f      	ldr	r0, [pc, #380]	; (80003e4 <main+0x20c>)
 8000266:	f000 fa5d 	bl	8000724 <GPIOConfigurePin>

	for(int i = 0;i<8;i++)
 800026a:	2300      	movs	r3, #0
 800026c:	617b      	str	r3, [r7, #20]
 800026e:	e008      	b.n	8000282 <main+0xaa>
	{
		GPIOConfigurePin(GPIOC,i,ioPortOutputPushPull); // konfigurace osmi èernevých LED
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	2200      	movs	r2, #0
 8000274:	4619      	mov	r1, r3
 8000276:	4859      	ldr	r0, [pc, #356]	; (80003dc <main+0x204>)
 8000278:	f000 fa54 	bl	8000724 <GPIOConfigurePin>
	for(int i = 0;i<8;i++)
 800027c:	697b      	ldr	r3, [r7, #20]
 800027e:	3301      	adds	r3, #1
 8000280:	617b      	str	r3, [r7, #20]
 8000282:	697b      	ldr	r3, [r7, #20]
 8000284:	2b07      	cmp	r3, #7
 8000286:	ddf3      	ble.n	8000270 <main+0x98>
	}

    BuzzerTone(C,150,100000);
 8000288:	4a57      	ldr	r2, [pc, #348]	; (80003e8 <main+0x210>)
 800028a:	2196      	movs	r1, #150	; 0x96
 800028c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000290:	f000 f9bc 	bl	800060c <BuzzerTone>
    BuzzerTone(B,200,100000);
 8000294:	4a54      	ldr	r2, [pc, #336]	; (80003e8 <main+0x210>)
 8000296:	21c8      	movs	r1, #200	; 0xc8
 8000298:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800029c:	f000 f9b6 	bl	800060c <BuzzerTone>
	BuzzerTone(A,200,100000);
 80002a0:	4a51      	ldr	r2, [pc, #324]	; (80003e8 <main+0x210>)
 80002a2:	21c8      	movs	r1, #200	; 0xc8
 80002a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002a8:	f000 f9b0 	bl	800060c <BuzzerTone>

    bool but = 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	74fb      	strb	r3, [r7, #19]

    uint8_t points_RED = 0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	74bb      	strb	r3, [r7, #18]
    uint8_t points_GREEN = 0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	747b      	strb	r3, [r7, #17]

	Write8LED(0xff>>(7-points_RED));
 80002b8:	7cbb      	ldrb	r3, [r7, #18]
 80002ba:	f1c3 0307 	rsb	r3, r3, #7
 80002be:	22ff      	movs	r2, #255	; 0xff
 80002c0:	fa42 f303 	asr.w	r3, r2, r3
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 f972 	bl	80005b0 <Write8LED>
	WriteSPILED(0xff<<(7-points_GREEN));
 80002cc:	7c7b      	ldrb	r3, [r7, #17]
 80002ce:	f1c3 0307 	rsb	r3, r3, #7
 80002d2:	22ff      	movs	r2, #255	; 0xff
 80002d4:	fa02 f303 	lsl.w	r3, r2, r3
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 f9c2 	bl	8000664 <WriteSPILED>


  while (1)
  {
	  int s = (rand()%10)*500;
 80002e0:	f000 fc58 	bl	8000b94 <rand>
 80002e4:	4601      	mov	r1, r0
 80002e6:	4b41      	ldr	r3, [pc, #260]	; (80003ec <main+0x214>)
 80002e8:	fb83 2301 	smull	r2, r3, r3, r1
 80002ec:	109a      	asrs	r2, r3, #2
 80002ee:	17cb      	asrs	r3, r1, #31
 80002f0:	1ad2      	subs	r2, r2, r3
 80002f2:	4613      	mov	r3, r2
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	4413      	add	r3, r2
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	1aca      	subs	r2, r1, r3
 80002fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000300:	fb03 f302 	mul.w	r3, r3, r2
 8000304:	603b      	str	r3, [r7, #0]

	  for(int i = 0;i<s;i++)
 8000306:	2300      	movs	r3, #0
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	e05c      	b.n	80003c6 <main+0x1ee>
	  {
		  Sleep(i);
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	4618      	mov	r0, r3
 8000310:	f000 f968 	bl	80005e4 <Sleep>
    	  if(!GPIORead(BUTTON_RIGHT))
 8000314:	2104      	movs	r1, #4
 8000316:	4832      	ldr	r0, [pc, #200]	; (80003e0 <main+0x208>)
 8000318:	f000 fb82 	bl	8000a20 <GPIORead>
 800031c:	4603      	mov	r3, r0
 800031e:	f083 0301 	eor.w	r3, r3, #1
 8000322:	b2db      	uxtb	r3, r3
 8000324:	2b00      	cmp	r3, #0
 8000326:	d020      	beq.n	800036a <main+0x192>
    	  {
             if(points_GREEN > 0)
 8000328:	7c7b      	ldrb	r3, [r7, #17]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d012      	beq.n	8000354 <main+0x17c>
             {
    		  points_GREEN--;
 800032e:	7c7b      	ldrb	r3, [r7, #17]
 8000330:	3b01      	subs	r3, #1
 8000332:	747b      	strb	r3, [r7, #17]
        	  WriteSPILED(0xff<<(7-points_GREEN));
 8000334:	7c7b      	ldrb	r3, [r7, #17]
 8000336:	f1c3 0307 	rsb	r3, r3, #7
 800033a:	22ff      	movs	r2, #255	; 0xff
 800033c:	fa02 f303 	lsl.w	r3, r2, r3
 8000340:	b2db      	uxtb	r3, r3
 8000342:	4618      	mov	r0, r3
 8000344:	f000 f98e 	bl	8000664 <WriteSPILED>
        	  BuzzerTone(C,100,0);
 8000348:	2200      	movs	r2, #0
 800034a:	2164      	movs	r1, #100	; 0x64
 800034c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000350:	f000 f95c 	bl	800060c <BuzzerTone>
             }
    		  while(!GPIORead(BUTTON_RIGHT))
 8000354:	bf00      	nop
 8000356:	2104      	movs	r1, #4
 8000358:	4821      	ldr	r0, [pc, #132]	; (80003e0 <main+0x208>)
 800035a:	f000 fb61 	bl	8000a20 <GPIORead>
 800035e:	4603      	mov	r3, r0
 8000360:	f083 0301 	eor.w	r3, r3, #1
 8000364:	b2db      	uxtb	r3, r3
 8000366:	2b00      	cmp	r3, #0
 8000368:	d1f5      	bne.n	8000356 <main+0x17e>
    		  {

    		  }
    	  }
    	  if(!GPIORead(BUTTON_LEFT))
 800036a:	2105      	movs	r1, #5
 800036c:	481c      	ldr	r0, [pc, #112]	; (80003e0 <main+0x208>)
 800036e:	f000 fb57 	bl	8000a20 <GPIORead>
 8000372:	4603      	mov	r3, r0
 8000374:	f083 0301 	eor.w	r3, r3, #1
 8000378:	b2db      	uxtb	r3, r3
 800037a:	2b00      	cmp	r3, #0
 800037c:	d020      	beq.n	80003c0 <main+0x1e8>
    	  {
              if(points_RED > 0)
 800037e:	7cbb      	ldrb	r3, [r7, #18]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d012      	beq.n	80003aa <main+0x1d2>
              {
              points_RED--;
 8000384:	7cbb      	ldrb	r3, [r7, #18]
 8000386:	3b01      	subs	r3, #1
 8000388:	74bb      	strb	r3, [r7, #18]
        	  Write8LED(0xff>>(7-points_RED));
 800038a:	7cbb      	ldrb	r3, [r7, #18]
 800038c:	f1c3 0307 	rsb	r3, r3, #7
 8000390:	22ff      	movs	r2, #255	; 0xff
 8000392:	fa42 f303 	asr.w	r3, r2, r3
 8000396:	b2db      	uxtb	r3, r3
 8000398:	4618      	mov	r0, r3
 800039a:	f000 f909 	bl	80005b0 <Write8LED>
        	  BuzzerTone(C,100,0);
 800039e:	2200      	movs	r2, #0
 80003a0:	2164      	movs	r1, #100	; 0x64
 80003a2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80003a6:	f000 f931 	bl	800060c <BuzzerTone>
              }
    		  while(!GPIORead(BUTTON_LEFT))
 80003aa:	bf00      	nop
 80003ac:	2105      	movs	r1, #5
 80003ae:	480c      	ldr	r0, [pc, #48]	; (80003e0 <main+0x208>)
 80003b0:	f000 fb36 	bl	8000a20 <GPIORead>
 80003b4:	4603      	mov	r3, r0
 80003b6:	f083 0301 	eor.w	r3, r3, #1
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d1f5      	bne.n	80003ac <main+0x1d4>
	  for(int i = 0;i<s;i++)
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	3301      	adds	r3, #1
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	68fa      	ldr	r2, [r7, #12]
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	429a      	cmp	r2, r3
 80003cc:	db9e      	blt.n	800030c <main+0x134>

    		  }
    	  }
	  }

      GPIOWrite(RGBLED_BLUE,true);
 80003ce:	2201      	movs	r2, #1
 80003d0:	210d      	movs	r1, #13
 80003d2:	4803      	ldr	r0, [pc, #12]	; (80003e0 <main+0x208>)
 80003d4:	f000 fb63 	bl	8000a9e <GPIOWrite>

      while(but==0)
 80003d8:	e06a      	b.n	80004b0 <main+0x2d8>
 80003da:	bf00      	nop
 80003dc:	40020800 	.word	0x40020800
 80003e0:	40020400 	.word	0x40020400
 80003e4:	40020000 	.word	0x40020000
 80003e8:	000186a0 	.word	0x000186a0
 80003ec:	66666667 	.word	0x66666667
      {
    	  if(!GPIORead(BUTTON_RIGHT)&&(but==0))
 80003f0:	2104      	movs	r1, #4
 80003f2:	486c      	ldr	r0, [pc, #432]	; (80005a4 <main+0x3cc>)
 80003f4:	f000 fb14 	bl	8000a20 <GPIORead>
 80003f8:	4603      	mov	r3, r0
 80003fa:	f083 0301 	eor.w	r3, r3, #1
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	2b00      	cmp	r3, #0
 8000402:	d025      	beq.n	8000450 <main+0x278>
 8000404:	7cfb      	ldrb	r3, [r7, #19]
 8000406:	f083 0301 	eor.w	r3, r3, #1
 800040a:	b2db      	uxtb	r3, r3
 800040c:	2b00      	cmp	r3, #0
 800040e:	d01f      	beq.n	8000450 <main+0x278>
    	  {

    		  GPIOWrite(RGBLED_BLUE,false);
 8000410:	2200      	movs	r2, #0
 8000412:	210d      	movs	r1, #13
 8000414:	4863      	ldr	r0, [pc, #396]	; (80005a4 <main+0x3cc>)
 8000416:	f000 fb42 	bl	8000a9e <GPIOWrite>
    		  GPIOWrite(RGBLED_GREEN,true);
 800041a:	2201      	movs	r2, #1
 800041c:	210e      	movs	r1, #14
 800041e:	4861      	ldr	r0, [pc, #388]	; (80005a4 <main+0x3cc>)
 8000420:	f000 fb3d 	bl	8000a9e <GPIOWrite>
              but = 1;
 8000424:	2301      	movs	r3, #1
 8000426:	74fb      	strb	r3, [r7, #19]
              points_GREEN++;
 8000428:	7c7b      	ldrb	r3, [r7, #17]
 800042a:	3301      	adds	r3, #1
 800042c:	747b      	strb	r3, [r7, #17]
      		  BuzzerTone(A,200,0);
 800042e:	2200      	movs	r2, #0
 8000430:	21c8      	movs	r1, #200	; 0xc8
 8000432:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000436:	f000 f8e9 	bl	800060c <BuzzerTone>
    		  while(!GPIORead(BUTTON_RIGHT))
 800043a:	bf00      	nop
 800043c:	2104      	movs	r1, #4
 800043e:	4859      	ldr	r0, [pc, #356]	; (80005a4 <main+0x3cc>)
 8000440:	f000 faee 	bl	8000a20 <GPIORead>
 8000444:	4603      	mov	r3, r0
 8000446:	f083 0301 	eor.w	r3, r3, #1
 800044a:	b2db      	uxtb	r3, r3
 800044c:	2b00      	cmp	r3, #0
 800044e:	d1f5      	bne.n	800043c <main+0x264>
    		  {

    		  }
    	  }

    	  if(!GPIORead(BUTTON_LEFT)&&(but==0))
 8000450:	2105      	movs	r1, #5
 8000452:	4854      	ldr	r0, [pc, #336]	; (80005a4 <main+0x3cc>)
 8000454:	f000 fae4 	bl	8000a20 <GPIORead>
 8000458:	4603      	mov	r3, r0
 800045a:	f083 0301 	eor.w	r3, r3, #1
 800045e:	b2db      	uxtb	r3, r3
 8000460:	2b00      	cmp	r3, #0
 8000462:	d025      	beq.n	80004b0 <main+0x2d8>
 8000464:	7cfb      	ldrb	r3, [r7, #19]
 8000466:	f083 0301 	eor.w	r3, r3, #1
 800046a:	b2db      	uxtb	r3, r3
 800046c:	2b00      	cmp	r3, #0
 800046e:	d01f      	beq.n	80004b0 <main+0x2d8>
    	  {
    		  GPIOWrite(RGBLED_BLUE,false);
 8000470:	2200      	movs	r2, #0
 8000472:	210d      	movs	r1, #13
 8000474:	484b      	ldr	r0, [pc, #300]	; (80005a4 <main+0x3cc>)
 8000476:	f000 fb12 	bl	8000a9e <GPIOWrite>
    		  GPIOWrite(RGBLED_RED,true);
 800047a:	2201      	movs	r2, #1
 800047c:	210f      	movs	r1, #15
 800047e:	4849      	ldr	r0, [pc, #292]	; (80005a4 <main+0x3cc>)
 8000480:	f000 fb0d 	bl	8000a9e <GPIOWrite>
              but = 1;
 8000484:	2301      	movs	r3, #1
 8000486:	74fb      	strb	r3, [r7, #19]
              points_RED++;
 8000488:	7cbb      	ldrb	r3, [r7, #18]
 800048a:	3301      	adds	r3, #1
 800048c:	74bb      	strb	r3, [r7, #18]
      		  BuzzerTone(A,200,0);
 800048e:	2200      	movs	r2, #0
 8000490:	21c8      	movs	r1, #200	; 0xc8
 8000492:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000496:	f000 f8b9 	bl	800060c <BuzzerTone>
    		  while(!GPIORead(BUTTON_LEFT))
 800049a:	bf00      	nop
 800049c:	2105      	movs	r1, #5
 800049e:	4841      	ldr	r0, [pc, #260]	; (80005a4 <main+0x3cc>)
 80004a0:	f000 fabe 	bl	8000a20 <GPIORead>
 80004a4:	4603      	mov	r3, r0
 80004a6:	f083 0301 	eor.w	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d1f5      	bne.n	800049c <main+0x2c4>
      while(but==0)
 80004b0:	7cfb      	ldrb	r3, [r7, #19]
 80004b2:	f083 0301 	eor.w	r3, r3, #1
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d199      	bne.n	80003f0 <main+0x218>

    		  }
    	  }

      }
      but = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	74fb      	strb	r3, [r7, #19]

	  Write8LED(0xff>>(7-points_RED));
 80004c0:	7cbb      	ldrb	r3, [r7, #18]
 80004c2:	f1c3 0307 	rsb	r3, r3, #7
 80004c6:	22ff      	movs	r2, #255	; 0xff
 80004c8:	fa42 f303 	asr.w	r3, r2, r3
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	4618      	mov	r0, r3
 80004d0:	f000 f86e 	bl	80005b0 <Write8LED>
	  WriteSPILED(0xff<<(7-points_GREEN));
 80004d4:	7c7b      	ldrb	r3, [r7, #17]
 80004d6:	f1c3 0307 	rsb	r3, r3, #7
 80004da:	22ff      	movs	r2, #255	; 0xff
 80004dc:	fa02 f303 	lsl.w	r3, r2, r3
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 f8be 	bl	8000664 <WriteSPILED>

	  if(points_RED==0x07)
 80004e8:	7cbb      	ldrb	r3, [r7, #18]
 80004ea:	2b07      	cmp	r3, #7
 80004ec:	d121      	bne.n	8000532 <main+0x35a>
	  {
		  Write8LED(0x00);
 80004ee:	2000      	movs	r0, #0
 80004f0:	f000 f85e 	bl	80005b0 <Write8LED>
		  WriteSPILED(0x00);
 80004f4:	2000      	movs	r0, #0
 80004f6:	f000 f8b5 	bl	8000664 <WriteSPILED>
		  int i = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	60bb      	str	r3, [r7, #8]
		  while(1)
          {
			  Write8LED(0x01<<i);
 80004fe:	2201      	movs	r2, #1
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	fa02 f303 	lsl.w	r3, r2, r3
 8000506:	b2db      	uxtb	r3, r3
 8000508:	4618      	mov	r0, r3
 800050a:	f000 f851 	bl	80005b0 <Write8LED>
			  BuzzerTone(A,200,0);
 800050e:	2200      	movs	r2, #0
 8000510:	21c8      	movs	r1, #200	; 0xc8
 8000512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000516:	f000 f879 	bl	800060c <BuzzerTone>
              i++;
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	3301      	adds	r3, #1
 800051e:	60bb      	str	r3, [r7, #8]
              if(i==8)
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	2b08      	cmp	r3, #8
 8000524:	d101      	bne.n	800052a <main+0x352>
              {
            	  i=0;
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
              }
              Sleep(100000);
 800052a:	481f      	ldr	r0, [pc, #124]	; (80005a8 <main+0x3d0>)
 800052c:	f000 f85a 	bl	80005e4 <Sleep>
			  Write8LED(0x01<<i);
 8000530:	e7e5      	b.n	80004fe <main+0x326>
          }
	  }
	  if(points_GREEN==0x07)
 8000532:	7c7b      	ldrb	r3, [r7, #17]
 8000534:	2b07      	cmp	r3, #7
 8000536:	d121      	bne.n	800057c <main+0x3a4>
      {
		  Write8LED(0x00);
 8000538:	2000      	movs	r0, #0
 800053a:	f000 f839 	bl	80005b0 <Write8LED>
		  WriteSPILED(0x00);
 800053e:	2000      	movs	r0, #0
 8000540:	f000 f890 	bl	8000664 <WriteSPILED>
		  int i = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
		  while(1)
          {
			  WriteSPILED(0x01<<i);
 8000548:	2201      	movs	r2, #1
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	fa02 f303 	lsl.w	r3, r2, r3
 8000550:	b2db      	uxtb	r3, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f886 	bl	8000664 <WriteSPILED>
			  BuzzerTone(A,200,0);
 8000558:	2200      	movs	r2, #0
 800055a:	21c8      	movs	r1, #200	; 0xc8
 800055c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000560:	f000 f854 	bl	800060c <BuzzerTone>
              i++;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3301      	adds	r3, #1
 8000568:	607b      	str	r3, [r7, #4]
              if(i==8)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b08      	cmp	r3, #8
 800056e:	d101      	bne.n	8000574 <main+0x39c>
              {
            	  i=0;
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
              }
              Sleep(100000);
 8000574:	480c      	ldr	r0, [pc, #48]	; (80005a8 <main+0x3d0>)
 8000576:	f000 f835 	bl	80005e4 <Sleep>
			  WriteSPILED(0x01<<i);
 800057a:	e7e5      	b.n	8000548 <main+0x370>
          }
	  }


      Sleep(1000000);
 800057c:	480b      	ldr	r0, [pc, #44]	; (80005ac <main+0x3d4>)
 800057e:	f000 f831 	bl	80005e4 <Sleep>
      GPIOWrite(RGBLED_GREEN,false);
 8000582:	2200      	movs	r2, #0
 8000584:	210e      	movs	r1, #14
 8000586:	4807      	ldr	r0, [pc, #28]	; (80005a4 <main+0x3cc>)
 8000588:	f000 fa89 	bl	8000a9e <GPIOWrite>
      GPIOWrite(RGBLED_BLUE,false);
 800058c:	2200      	movs	r2, #0
 800058e:	210d      	movs	r1, #13
 8000590:	4804      	ldr	r0, [pc, #16]	; (80005a4 <main+0x3cc>)
 8000592:	f000 fa84 	bl	8000a9e <GPIOWrite>
      GPIOWrite(RGBLED_RED,false);
 8000596:	2200      	movs	r2, #0
 8000598:	210f      	movs	r1, #15
 800059a:	4802      	ldr	r0, [pc, #8]	; (80005a4 <main+0x3cc>)
 800059c:	f000 fa7f 	bl	8000a9e <GPIOWrite>
  {
 80005a0:	e69e      	b.n	80002e0 <main+0x108>
 80005a2:	bf00      	nop
 80005a4:	40020400 	.word	0x40020400
 80005a8:	000186a0 	.word	0x000186a0
 80005ac:	000f4240 	.word	0x000f4240

080005b0 <Write8LED>:
  GPIOC -> OSPEEDR |= 0xffffffff;  // zase má 32 bitù a my chceme spodnich 16 mit v jednickach (11 - hight speed)
  // proc by tady mel byt return?
  }

  void Write8LED(uint8_t value)
  {
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
  GPIOC -> ODR &= (~(0xff)) ; // bitovou maskou 0000 0000 1111 1111 vynulujeme spodních 8 bitù
 80005ba:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <Write8LED+0x30>)
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <Write8LED+0x30>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80005c4:	6153      	str	r3, [r2, #20]
  GPIOC -> ODR |= (uint16_t)value; // bitovou masku mám ze vsupního argumentu, pomocí OR nastavím jednièky na mnou požadovaných bitech
 80005c6:	4906      	ldr	r1, [pc, #24]	; (80005e0 <Write8LED+0x30>)
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <Write8LED+0x30>)
 80005ca:	695a      	ldr	r2, [r3, #20]
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	614b      	str	r3, [r1, #20]
  // proc by tady mel byt return?
  }
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40020800 	.word	0x40020800

080005e4 <Sleep>:
 void Sleep(uint32_t value)
 {
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	 for(int i = 0;i<value;i++);
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	e002      	b.n	80005f8 <Sleep+0x14>
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	3301      	adds	r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fa      	ldr	r2, [r7, #12]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d3f8      	bcc.n	80005f2 <Sleep+0xe>
 }
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <BuzzerTone>:

 void BuzzerTone(tone t,uint32_t timePlay,uint32_t timeMute)
 {
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
 8000618:	81fb      	strh	r3, [r7, #14]
 	for(int i = 0;i<timePlay;i++)
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
 800061e:	e014      	b.n	800064a <BuzzerTone+0x3e>
 	{
 	GPIOWrite(BUZZER,true);
 8000620:	2201      	movs	r2, #1
 8000622:	2100      	movs	r1, #0
 8000624:	480e      	ldr	r0, [pc, #56]	; (8000660 <BuzzerTone+0x54>)
 8000626:	f000 fa3a 	bl	8000a9e <GPIOWrite>
 	Sleep(t);
 800062a:	89fb      	ldrh	r3, [r7, #14]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ffd9 	bl	80005e4 <Sleep>
 	GPIOWrite(BUZZER,false);
 8000632:	2200      	movs	r2, #0
 8000634:	2100      	movs	r1, #0
 8000636:	480a      	ldr	r0, [pc, #40]	; (8000660 <BuzzerTone+0x54>)
 8000638:	f000 fa31 	bl	8000a9e <GPIOWrite>
 	Sleep(t);
 800063c:	89fb      	ldrh	r3, [r7, #14]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ffd0 	bl	80005e4 <Sleep>
 	for(int i = 0;i<timePlay;i++)
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	3301      	adds	r3, #1
 8000648:	617b      	str	r3, [r7, #20]
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	429a      	cmp	r2, r3
 8000650:	d3e6      	bcc.n	8000620 <BuzzerTone+0x14>
     }
 	Sleep(timeMute);
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f7ff ffc6 	bl	80005e4 <Sleep>
 }
 8000658:	bf00      	nop
 800065a:	3718      	adds	r7, #24
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40020400 	.word	0x40020400

08000664 <WriteSPILED>:

	void WriteSPILED(uint8_t val)
	{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	int i;
	for(i = 0; i < 8; i++)
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	e019      	b.n	80006a8 <WriteSPILED+0x44>
	{
	GPIOWrite(LED_SDI, (val & 0x80) != 0); // maska 1000 0000
 8000674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000678:	b2db      	uxtb	r3, r3
 800067a:	09db      	lsrs	r3, r3, #7
 800067c:	b2db      	uxtb	r3, r3
 800067e:	461a      	mov	r2, r3
 8000680:	2107      	movs	r1, #7
 8000682:	4812      	ldr	r0, [pc, #72]	; (80006cc <WriteSPILED+0x68>)
 8000684:	f000 fa0b 	bl	8000a9e <GPIOWrite>
	GPIOWrite(LED_CLK, 1); // puls na CLK
 8000688:	2201      	movs	r2, #1
 800068a:	2105      	movs	r1, #5
 800068c:	480f      	ldr	r0, [pc, #60]	; (80006cc <WriteSPILED+0x68>)
 800068e:	f000 fa06 	bl	8000a9e <GPIOWrite>
	GPIOWrite(LED_CLK, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2105      	movs	r1, #5
 8000696:	480d      	ldr	r0, [pc, #52]	; (80006cc <WriteSPILED+0x68>)
 8000698:	f000 fa01 	bl	8000a9e <GPIOWrite>
	val <<= 1;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < 8; i++)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	3301      	adds	r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	2b07      	cmp	r3, #7
 80006ac:	dde2      	ble.n	8000674 <WriteSPILED+0x10>
	}
	GPIOWrite(LED_LE, 1); // puls na LE
 80006ae:	2201      	movs	r2, #1
 80006b0:	2108      	movs	r1, #8
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <WriteSPILED+0x68>)
 80006b4:	f000 f9f3 	bl	8000a9e <GPIOWrite>
	GPIOWrite(LED_LE, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2108      	movs	r1, #8
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <WriteSPILED+0x68>)
 80006be:	f000 f9ee 	bl	8000a9e <GPIOWrite>
	}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40020000 	.word	0x40020000

080006d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80006d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000708 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80006d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80006d6:	e003      	b.n	80006e0 <LoopCopyDataInit>

080006d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80006da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80006dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80006de:	3104      	adds	r1, #4

080006e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80006e0:	480b      	ldr	r0, [pc, #44]	; (8000710 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80006e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80006e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80006e8:	d3f6      	bcc.n	80006d8 <CopyDataInit>
  ldr  r2, =_sbss
 80006ea:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80006ec:	e002      	b.n	80006f4 <LoopFillZerobss>

080006ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80006ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80006f0:	f842 3b04 	str.w	r3, [r2], #4

080006f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80006f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80006f8:	d3f9      	bcc.n	80006ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006fa:	f000 f9f1 	bl	8000ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006fe:	f000 fa25 	bl	8000b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000702:	f7ff fd69 	bl	80001d8 <main>
  bx  lr    
 8000706:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000708:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800070c:	08000d34 	.word	0x08000d34
  ldr  r0, =_sdata
 8000710:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000714:	20000064 	.word	0x20000064
  ldr  r2, =_sbss
 8000718:	20000064 	.word	0x20000064
  ldr  r3, = _ebss
 800071c:	20000090 	.word	0x20000090

08000720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000720:	e7fe      	b.n	8000720 <ADC_IRQHandler>
	...

08000724 <GPIOConfigurePin>:
 *      Author: Lapunik
 */
#include "stm_core.h"

bool GPIOConfigurePin(GPIO_TypeDef *gpio,uint32_t bitNumber, ioPortMode mode) // konfigurace GPIO do pøedpøipravených stavù
{
 8000724:	b480      	push	{r7}
 8000726:	b087      	sub	sp, #28
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	4613      	mov	r3, r2
 8000730:	71fb      	strb	r3, [r7, #7]

	uint32_t enableMask = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
	uint32_t resetMask = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]

	switch((uint32_t)gpio) // je potøeba zapnout hodiny podle toho který gpio chceme vyuzivat => ulozime bity pro reset a pro zapnuti do masek a pote masku aplikujeme
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	4a99      	ldr	r2, [pc, #612]	; (80009a4 <GPIOConfigurePin+0x280>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d01d      	beq.n	800077e <GPIOConfigurePin+0x5a>
 8000742:	4a98      	ldr	r2, [pc, #608]	; (80009a4 <GPIOConfigurePin+0x280>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d806      	bhi.n	8000756 <GPIOConfigurePin+0x32>
 8000748:	4a97      	ldr	r2, [pc, #604]	; (80009a8 <GPIOConfigurePin+0x284>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d00d      	beq.n	800076a <GPIOConfigurePin+0x46>
 800074e:	4a97      	ldr	r2, [pc, #604]	; (80009ac <GPIOConfigurePin+0x288>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d00f      	beq.n	8000774 <GPIOConfigurePin+0x50>
 8000754:	e027      	b.n	80007a6 <GPIOConfigurePin+0x82>
 8000756:	4a96      	ldr	r2, [pc, #600]	; (80009b0 <GPIOConfigurePin+0x28c>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d01a      	beq.n	8000792 <GPIOConfigurePin+0x6e>
 800075c:	4a95      	ldr	r2, [pc, #596]	; (80009b4 <GPIOConfigurePin+0x290>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d01c      	beq.n	800079c <GPIOConfigurePin+0x78>
 8000762:	4a95      	ldr	r2, [pc, #596]	; (80009b8 <GPIOConfigurePin+0x294>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d00f      	beq.n	8000788 <GPIOConfigurePin+0x64>
 8000768:	e01d      	b.n	80007a6 <GPIOConfigurePin+0x82>
	{
	case (uint32_t)GPIOA: // GPIOA je definovana konstanta ve formátu "ukazatel", proto msím pøetypovat na celoèíselnou hodnotu
        enableMask = RCC_AHB1ENR_GPIOAEN;
 800076a:	2301      	movs	r3, #1
 800076c:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOARST;
 800076e:	2301      	movs	r3, #1
 8000770:	613b      	str	r3, [r7, #16]
	break;
 8000772:	e018      	b.n	80007a6 <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOB:
        enableMask = RCC_AHB1ENR_GPIOBEN;
 8000774:	2302      	movs	r3, #2
 8000776:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOBRST;
 8000778:	2302      	movs	r3, #2
 800077a:	613b      	str	r3, [r7, #16]
	break;
 800077c:	e013      	b.n	80007a6 <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOC:
        enableMask = RCC_AHB1ENR_GPIOCEN;
 800077e:	2304      	movs	r3, #4
 8000780:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOCRST;
 8000782:	2304      	movs	r3, #4
 8000784:	613b      	str	r3, [r7, #16]
	break;
 8000786:	e00e      	b.n	80007a6 <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOD:
        enableMask = RCC_AHB1ENR_GPIODEN;
 8000788:	2308      	movs	r3, #8
 800078a:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIODRST;
 800078c:	2308      	movs	r3, #8
 800078e:	613b      	str	r3, [r7, #16]
	break;
 8000790:	e009      	b.n	80007a6 <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOE:
        enableMask = RCC_AHB1ENR_GPIOEEN;
 8000792:	2310      	movs	r3, #16
 8000794:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOERST;
 8000796:	2310      	movs	r3, #16
 8000798:	613b      	str	r3, [r7, #16]
	break;
 800079a:	e004      	b.n	80007a6 <GPIOConfigurePin+0x82>
        enableMask = RCC_AHB1ENR_GPIOGEN;
        resetMask = RCC_AHB1RSTR_GPIOGRST;
	break;
#endif
	case (uint32_t)GPIOH:
        enableMask = RCC_AHB1ENR_GPIOHEN;
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOHRST;
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	613b      	str	r3, [r7, #16]
	break;
 80007a4:	bf00      	nop

	}

	if((resetMask == 0)||(enableMask == 0)) // pokud se do masek neuložila žádná hodnota, ukonèi konfiguraci a vrat zpravu false o neúspìchu
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d002      	beq.n	80007b2 <GPIOConfigurePin+0x8e>
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d101      	bne.n	80007b6 <GPIOConfigurePin+0x92>
	{
		return false;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e12d      	b.n	8000a12 <GPIOConfigurePin+0x2ee>
	}
	else
	{
		  if(!(RCC -> AHB1ENR & enableMask)) // jestliže nejsou masky prázdné, použi je pro nastavení hodin
 80007b6:	4b81      	ldr	r3, [pc, #516]	; (80009bc <GPIOConfigurePin+0x298>)
 80007b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	4013      	ands	r3, r2
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d112      	bne.n	80007e8 <GPIOConfigurePin+0xc4>
		  {
		    RCC->AHB1ENR |= enableMask;
 80007c2:	497e      	ldr	r1, [pc, #504]	; (80009bc <GPIOConfigurePin+0x298>)
 80007c4:	4b7d      	ldr	r3, [pc, #500]	; (80009bc <GPIOConfigurePin+0x298>)
 80007c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	630b      	str	r3, [r1, #48]	; 0x30
		    RCC->AHB1RSTR |= resetMask;
 80007ce:	497b      	ldr	r1, [pc, #492]	; (80009bc <GPIOConfigurePin+0x298>)
 80007d0:	4b7a      	ldr	r3, [pc, #488]	; (80009bc <GPIOConfigurePin+0x298>)
 80007d2:	691a      	ldr	r2, [r3, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	4313      	orrs	r3, r2
 80007d8:	610b      	str	r3, [r1, #16]
		    RCC->AHB1RSTR &= ~resetMask;
 80007da:	4978      	ldr	r1, [pc, #480]	; (80009bc <GPIOConfigurePin+0x298>)
 80007dc:	4b77      	ldr	r3, [pc, #476]	; (80009bc <GPIOConfigurePin+0x298>)
 80007de:	691a      	ldr	r2, [r3, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	43db      	mvns	r3, r3
 80007e4:	4013      	ands	r3, r2
 80007e6:	610b      	str	r3, [r1, #16]
		  }
	}

gpio -> MODER &= ~(0x03 << (bitNumber*2)); // vynulovani zdvojených bitu pøed nastavováním (kdyby nìkde byla kombinace 10 a já tam ORoval 01 tak vysledna kombinace je 11 misto 01)...u registru kde se nastavuje pouze jeden bit toho nehrozí
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	68ba      	ldr	r2, [r7, #8]
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	2103      	movs	r1, #3
 80007f2:	fa01 f202 	lsl.w	r2, r1, r2
 80007f6:	43d2      	mvns	r2, r2
 80007f8:	401a      	ands	r2, r3
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	601a      	str	r2, [r3, #0]
gpio -> PUPDR &= ~(0x03 << (bitNumber*2));
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	68db      	ldr	r3, [r3, #12]
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	0052      	lsls	r2, r2, #1
 8000806:	2103      	movs	r1, #3
 8000808:	fa01 f202 	lsl.w	r2, r1, r2
 800080c:	43d2      	mvns	r2, r2
 800080e:	401a      	ands	r2, r3
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	60da      	str	r2, [r3, #12]
gpio -> OSPEEDR &= ~(0x03 << (bitNumber*2));
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	68ba      	ldr	r2, [r7, #8]
 800081a:	0052      	lsls	r2, r2, #1
 800081c:	2103      	movs	r1, #3
 800081e:	fa01 f202 	lsl.w	r2, r1, r2
 8000822:	43d2      	mvns	r2, r2
 8000824:	401a      	ands	r2, r3
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	609a      	str	r2, [r3, #8]


switch(mode)
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b07      	cmp	r3, #7
 800082e:	f200 80ef 	bhi.w	8000a10 <GPIOConfigurePin+0x2ec>
 8000832:	a201      	add	r2, pc, #4	; (adr r2, 8000838 <GPIOConfigurePin+0x114>)
 8000834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000838:	08000859 	.word	0x08000859
 800083c:	080008ab 	.word	0x080008ab
 8000840:	080008fb 	.word	0x080008fb
 8000844:	08000911 	.word	0x08000911
 8000848:	08000927 	.word	0x08000927
 800084c:	0800093d 	.word	0x0800093d
 8000850:	08000953 	.word	0x08000953
 8000854:	080009c1 	.word	0x080009c1
{
case ioPortOutputPushPull:

	gpio->MODER |= 0x01<<(2*bitNumber); // output
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	68ba      	ldr	r2, [r7, #8]
 800085e:	0052      	lsls	r2, r2, #1
 8000860:	2101      	movs	r1, #1
 8000862:	fa01 f202 	lsl.w	r2, r1, r2
 8000866:	431a      	orrs	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	601a      	str	r2, [r3, #0]
	gpio->OTYPER &= ~(0x01<<bitNumber); // push-pull
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	2101      	movs	r1, #1
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	fa01 f202 	lsl.w	r2, r1, r2
 8000878:	43d2      	mvns	r2, r2
 800087a:	401a      	ands	r2, r3
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	68ba      	ldr	r2, [r7, #8]
 8000886:	0052      	lsls	r2, r2, #1
 8000888:	2103      	movs	r1, #3
 800088a:	fa01 f202 	lsl.w	r2, r1, r2
 800088e:	431a      	orrs	r2, r3
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	2103      	movs	r1, #3
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	fa01 f202 	lsl.w	r2, r1, r2
 80008a0:	43d2      	mvns	r2, r2
 80008a2:	401a      	ands	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	60da      	str	r2, [r3, #12]
    break;
 80008a8:	e0b2      	b.n	8000a10 <GPIOConfigurePin+0x2ec>

case ioPortOutputOpenDrain:

	gpio->MODER |= 0x01<<(2*bitNumber); // output
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	0052      	lsls	r2, r2, #1
 80008b2:	2101      	movs	r1, #1
 80008b4:	fa01 f202 	lsl.w	r2, r1, r2
 80008b8:	431a      	orrs	r2, r3
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	601a      	str	r2, [r3, #0]
	gpio->OTYPER |= (0x01<<bitNumber); // open drain
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	2101      	movs	r1, #1
 80008c4:	68ba      	ldr	r2, [r7, #8]
 80008c6:	fa01 f202 	lsl.w	r2, r1, r2
 80008ca:	431a      	orrs	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	0052      	lsls	r2, r2, #1
 80008d8:	2103      	movs	r1, #3
 80008da:	fa01 f202 	lsl.w	r2, r1, r2
 80008de:	431a      	orrs	r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	2103      	movs	r1, #3
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	fa01 f202 	lsl.w	r2, r1, r2
 80008f0:	43d2      	mvns	r2, r2
 80008f2:	401a      	ands	r2, r3
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	60da      	str	r2, [r3, #12]
    break;
 80008f8:	e08a      	b.n	8000a10 <GPIOConfigurePin+0x2ec>

case ioPortAnalog:

	gpio->MODER |= 0x03<<(2*bitNumber); // analog
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	68ba      	ldr	r2, [r7, #8]
 8000900:	0052      	lsls	r2, r2, #1
 8000902:	2103      	movs	r1, #3
 8000904:	fa01 f202 	lsl.w	r2, r1, r2
 8000908:	431a      	orrs	r2, r3
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	601a      	str	r2, [r3, #0]
    break;
 800090e:	e07f      	b.n	8000a10 <GPIOConfigurePin+0x2ec>

case ioPortInputFloat:

	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	2103      	movs	r1, #3
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	fa01 f202 	lsl.w	r2, r1, r2
 800091c:	43d2      	mvns	r2, r2
 800091e:	401a      	ands	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	60da      	str	r2, [r3, #12]
    break;
 8000924:	e074      	b.n	8000a10 <GPIOConfigurePin+0x2ec>

case ioPortInputPullUp:

	gpio->PUPDR |= ~(0x01<<bitNumber); // pull up
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	2101      	movs	r1, #1
 800092c:	68ba      	ldr	r2, [r7, #8]
 800092e:	fa01 f202 	lsl.w	r2, r1, r2
 8000932:	43d2      	mvns	r2, r2
 8000934:	431a      	orrs	r2, r3
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	60da      	str	r2, [r3, #12]
    break;
 800093a:	e069      	b.n	8000a10 <GPIOConfigurePin+0x2ec>

case ioPortInputPullDown:

	gpio->PUPDR |= ~(0x02<<bitNumber); // pull down
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	2102      	movs	r1, #2
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	fa01 f202 	lsl.w	r2, r1, r2
 8000948:	43d2      	mvns	r2, r2
 800094a:	431a      	orrs	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	60da      	str	r2, [r3, #12]
    break;
 8000950:	e05e      	b.n	8000a10 <GPIOConfigurePin+0x2ec>

case ioPortAlternatrPushPull:

	gpio->MODER |= 0x02<<(2*bitNumber); // alternate function
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	0052      	lsls	r2, r2, #1
 800095a:	2102      	movs	r1, #2
 800095c:	fa01 f202 	lsl.w	r2, r1, r2
 8000960:	431a      	orrs	r2, r3
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	601a      	str	r2, [r3, #0]
	gpio->OTYPER &= ~(0x01<<bitNumber); // push pull
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	2101      	movs	r1, #1
 800096c:	68ba      	ldr	r2, [r7, #8]
 800096e:	fa01 f202 	lsl.w	r2, r1, r2
 8000972:	43d2      	mvns	r2, r2
 8000974:	401a      	ands	r2, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	0052      	lsls	r2, r2, #1
 8000982:	2103      	movs	r1, #3
 8000984:	fa01 f202 	lsl.w	r2, r1, r2
 8000988:	431a      	orrs	r2, r3
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	2103      	movs	r1, #3
 8000994:	68ba      	ldr	r2, [r7, #8]
 8000996:	fa01 f202 	lsl.w	r2, r1, r2
 800099a:	43d2      	mvns	r2, r2
 800099c:	401a      	ands	r2, r3
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	60da      	str	r2, [r3, #12]
    break;
 80009a2:	e035      	b.n	8000a10 <GPIOConfigurePin+0x2ec>
 80009a4:	40020800 	.word	0x40020800
 80009a8:	40020000 	.word	0x40020000
 80009ac:	40020400 	.word	0x40020400
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40021c00 	.word	0x40021c00
 80009b8:	40020c00 	.word	0x40020c00
 80009bc:	40023800 	.word	0x40023800

case ioPortAlternatrOpenDrain:

	gpio->MODER |= 0x02<<(2*bitNumber); // alternate function
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	68ba      	ldr	r2, [r7, #8]
 80009c6:	0052      	lsls	r2, r2, #1
 80009c8:	2102      	movs	r1, #2
 80009ca:	fa01 f202 	lsl.w	r2, r1, r2
 80009ce:	431a      	orrs	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	601a      	str	r2, [r3, #0]
	gpio->OTYPER |= (0x01<<bitNumber); // open drain
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2101      	movs	r1, #1
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	fa01 f202 	lsl.w	r2, r1, r2
 80009e0:	431a      	orrs	r2, r3
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	0052      	lsls	r2, r2, #1
 80009ee:	2103      	movs	r1, #3
 80009f0:	fa01 f202 	lsl.w	r2, r1, r2
 80009f4:	431a      	orrs	r2, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	2103      	movs	r1, #3
 8000a00:	68ba      	ldr	r2, [r7, #8]
 8000a02:	fa01 f202 	lsl.w	r2, r1, r2
 8000a06:	43d2      	mvns	r2, r2
 8000a08:	401a      	ands	r2, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	60da      	str	r2, [r3, #12]
    break;
 8000a0e:	bf00      	nop


}
    return true;
 8000a10:	2301      	movs	r3, #1
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	371c      	adds	r7, #28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop

08000a20 <GPIORead>:
{
gpio -> ODR ^= (1<<bitNumber); // prostì jen zmìò hobnotu v ODR pro pøíslušný bit
}

bool GPIORead(GPIO_TypeDef *gpio, uint32_t bitNumber) // funkce pro zjištìní hodnoty na výstupu ODR pro bit na zadaném místì
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
	if((gpio -> MODER & (0x03<<(bitNumber*2))) == 0x00) // jestliže je pin nastaven jako vstup
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	683a      	ldr	r2, [r7, #0]
 8000a30:	0052      	lsls	r2, r2, #1
 8000a32:	2103      	movs	r1, #3
 8000a34:	fa01 f202 	lsl.w	r2, r1, r2
 8000a38:	4013      	ands	r3, r2
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d10c      	bne.n	8000a58 <GPIORead+0x38>
	{
		 return ((gpio -> IDR) & (1<<bitNumber)); // AND ODR s maskou vrátí 0 (false) pokud zkoumany bit je nula, a pokud neni nula a je to jakekoliv jine cislo, nezalezi na to jake, vrati (true)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	691b      	ldr	r3, [r3, #16]
 8000a42:	2101      	movs	r1, #1
 8000a44:	683a      	ldr	r2, [r7, #0]
 8000a46:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	bf14      	ite	ne
 8000a50:	2301      	movne	r3, #1
 8000a52:	2300      	moveq	r3, #0
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	e01c      	b.n	8000a92 <GPIORead+0x72>

	}else if ((gpio -> MODER & (0x03<<(bitNumber*2))) == (0x01<<(bitNumber*2))) // pokud ne, tak je na prislusnem bitNumber kombinace 01
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	683a      	ldr	r2, [r7, #0]
 8000a5e:	0052      	lsls	r2, r2, #1
 8000a60:	2103      	movs	r1, #3
 8000a62:	fa01 f202 	lsl.w	r2, r1, r2
 8000a66:	4013      	ands	r3, r2
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	0052      	lsls	r2, r2, #1
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d10c      	bne.n	8000a90 <GPIORead+0x70>
	{
		 return ((gpio -> ODR) & (1<<bitNumber)); // AND ODR s maskou vrátí 0 (false) pokud zkoumany bit je nula, a pokud neni nula a je to jakekoliv jine cislo, nezalezi na to jake, vrati (true)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a82:	4013      	ands	r3, r2
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	bf14      	ite	ne
 8000a88:	2301      	movne	r3, #1
 8000a8a:	2300      	moveq	r3, #0
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	e000      	b.n	8000a92 <GPIORead+0x72>
	}else
	{
		return false; // je potøeba dodìlat!!!!! pro analog a alternativvní funkce nebude fungovat!!!!!!!!
 8000a90:	2300      	movs	r3, #0
	}

}
 8000a92:	4618      	mov	r0, r3
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <GPIOWrite>:

void GPIOWrite(GPIO_TypeDef *gpio, uint32_t bitNumber,bool state) // funkce pro zapsani hodnoty na výstupu ODR pro bit na zadaném místì
{ // BSRR je registr kter nastavi natvrdo hodnotu na registru ODR, máme celkem 16 výstupù, BSRR má 32 výstupù, s tím že pokud dám jednièku na nìkterý ze spodních 16, øíkám tím nastav jedna na konkrétní bit(0-16) a pokud dám jednièku na nìkterý z horních 16 bitù BSRR, tak vlastnì øíkám, nastav nulu na konkrétním bitu (0-16)
 8000a9e:	b480      	push	{r7}
 8000aa0:	b085      	sub	sp, #20
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	60f8      	str	r0, [r7, #12]
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	71fb      	strb	r3, [r7, #7]
 if(state) // pokud chci zapsat jednicku
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d007      	beq.n	8000ac2 <GPIOWrite+0x24>
 {
	gpio -> BSRR = (0x01<<bitNumber); // zapis ji do spodni poloviny BSRR na místo (0-16)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	461a      	mov	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	619a      	str	r2, [r3, #24]
 }else // pokud ne
 {
	 gpio -> BSRR = ((0x01<<bitNumber)<<16); // zapis ji do horni poloviny registru BSRR(17-31), což zajistí vynulování pøíslušného bitu
 }
}
 8000ac0:	e007      	b.n	8000ad2 <GPIOWrite+0x34>
	 gpio -> BSRR = ((0x01<<bitNumber)<<16); // zapis ji do horni poloviny registru BSRR(17-31), což zajistí vynulování pøíslušného bitu
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	041b      	lsls	r3, r3, #16
 8000acc:	461a      	mov	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	619a      	str	r2, [r3, #24]
}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae4:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <SystemInit+0x60>)
 8000ae6:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <SystemInit+0x60>)
 8000ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000af4:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <SystemInit+0x64>)
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <SystemInit+0x64>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b00:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <SystemInit+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <SystemInit+0x64>)
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <SystemInit+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b14:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <SystemInit+0x64>)
 8000b18:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <SystemInit+0x68>)
 8000b1a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b1c:	4a09      	ldr	r2, [pc, #36]	; (8000b44 <SystemInit+0x64>)
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <SystemInit+0x64>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <SystemInit+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SystemInit+0x60>)
 8000b30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b34:	609a      	str	r2, [r3, #8]
#endif
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00
 8000b44:	40023800 	.word	0x40023800
 8000b48:	24003010 	.word	0x24003010

08000b4c <__libc_init_array>:
 8000b4c:	b570      	push	{r4, r5, r6, lr}
 8000b4e:	4e0d      	ldr	r6, [pc, #52]	; (8000b84 <__libc_init_array+0x38>)
 8000b50:	4c0d      	ldr	r4, [pc, #52]	; (8000b88 <__libc_init_array+0x3c>)
 8000b52:	1ba4      	subs	r4, r4, r6
 8000b54:	10a4      	asrs	r4, r4, #2
 8000b56:	2500      	movs	r5, #0
 8000b58:	42a5      	cmp	r5, r4
 8000b5a:	d109      	bne.n	8000b70 <__libc_init_array+0x24>
 8000b5c:	4e0b      	ldr	r6, [pc, #44]	; (8000b8c <__libc_init_array+0x40>)
 8000b5e:	4c0c      	ldr	r4, [pc, #48]	; (8000b90 <__libc_init_array+0x44>)
 8000b60:	f000 f8d8 	bl	8000d14 <_init>
 8000b64:	1ba4      	subs	r4, r4, r6
 8000b66:	10a4      	asrs	r4, r4, #2
 8000b68:	2500      	movs	r5, #0
 8000b6a:	42a5      	cmp	r5, r4
 8000b6c:	d105      	bne.n	8000b7a <__libc_init_array+0x2e>
 8000b6e:	bd70      	pop	{r4, r5, r6, pc}
 8000b70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b74:	4798      	blx	r3
 8000b76:	3501      	adds	r5, #1
 8000b78:	e7ee      	b.n	8000b58 <__libc_init_array+0xc>
 8000b7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b7e:	4798      	blx	r3
 8000b80:	3501      	adds	r5, #1
 8000b82:	e7f2      	b.n	8000b6a <__libc_init_array+0x1e>
 8000b84:	08000d2c 	.word	0x08000d2c
 8000b88:	08000d2c 	.word	0x08000d2c
 8000b8c:	08000d2c 	.word	0x08000d2c
 8000b90:	08000d30 	.word	0x08000d30

08000b94 <rand>:
 8000b94:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <rand+0x68>)
 8000b96:	b510      	push	{r4, lr}
 8000b98:	681c      	ldr	r4, [r3, #0]
 8000b9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000b9c:	b9d3      	cbnz	r3, 8000bd4 <rand+0x40>
 8000b9e:	2018      	movs	r0, #24
 8000ba0:	f000 f832 	bl	8000c08 <malloc>
 8000ba4:	f243 330e 	movw	r3, #13070	; 0x330e
 8000ba8:	63a0      	str	r0, [r4, #56]	; 0x38
 8000baa:	8003      	strh	r3, [r0, #0]
 8000bac:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8000bb0:	8043      	strh	r3, [r0, #2]
 8000bb2:	f241 2334 	movw	r3, #4660	; 0x1234
 8000bb6:	8083      	strh	r3, [r0, #4]
 8000bb8:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8000bbc:	80c3      	strh	r3, [r0, #6]
 8000bbe:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8000bc2:	8103      	strh	r3, [r0, #8]
 8000bc4:	2305      	movs	r3, #5
 8000bc6:	8143      	strh	r3, [r0, #10]
 8000bc8:	230b      	movs	r3, #11
 8000bca:	8183      	strh	r3, [r0, #12]
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8000bd4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000bd6:	480a      	ldr	r0, [pc, #40]	; (8000c00 <rand+0x6c>)
 8000bd8:	690a      	ldr	r2, [r1, #16]
 8000bda:	694b      	ldr	r3, [r1, #20]
 8000bdc:	4c09      	ldr	r4, [pc, #36]	; (8000c04 <rand+0x70>)
 8000bde:	4350      	muls	r0, r2
 8000be0:	fb04 0003 	mla	r0, r4, r3, r0
 8000be4:	fba2 2304 	umull	r2, r3, r2, r4
 8000be8:	3201      	adds	r2, #1
 8000bea:	4403      	add	r3, r0
 8000bec:	f143 0300 	adc.w	r3, r3, #0
 8000bf0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000bf4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8000bf8:	bd10      	pop	{r4, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	5851f42d 	.word	0x5851f42d
 8000c04:	4c957f2d 	.word	0x4c957f2d

08000c08 <malloc>:
 8000c08:	4b02      	ldr	r3, [pc, #8]	; (8000c14 <malloc+0xc>)
 8000c0a:	4601      	mov	r1, r0
 8000c0c:	6818      	ldr	r0, [r3, #0]
 8000c0e:	f000 b803 	b.w	8000c18 <_malloc_r>
 8000c12:	bf00      	nop
 8000c14:	20000000 	.word	0x20000000

08000c18 <_malloc_r>:
 8000c18:	b570      	push	{r4, r5, r6, lr}
 8000c1a:	1ccd      	adds	r5, r1, #3
 8000c1c:	f025 0503 	bic.w	r5, r5, #3
 8000c20:	3508      	adds	r5, #8
 8000c22:	2d0c      	cmp	r5, #12
 8000c24:	bf38      	it	cc
 8000c26:	250c      	movcc	r5, #12
 8000c28:	2d00      	cmp	r5, #0
 8000c2a:	4606      	mov	r6, r0
 8000c2c:	db01      	blt.n	8000c32 <_malloc_r+0x1a>
 8000c2e:	42a9      	cmp	r1, r5
 8000c30:	d903      	bls.n	8000c3a <_malloc_r+0x22>
 8000c32:	230c      	movs	r3, #12
 8000c34:	6033      	str	r3, [r6, #0]
 8000c36:	2000      	movs	r0, #0
 8000c38:	bd70      	pop	{r4, r5, r6, pc}
 8000c3a:	f000 f85b 	bl	8000cf4 <__malloc_lock>
 8000c3e:	4a23      	ldr	r2, [pc, #140]	; (8000ccc <_malloc_r+0xb4>)
 8000c40:	6814      	ldr	r4, [r2, #0]
 8000c42:	4621      	mov	r1, r4
 8000c44:	b991      	cbnz	r1, 8000c6c <_malloc_r+0x54>
 8000c46:	4c22      	ldr	r4, [pc, #136]	; (8000cd0 <_malloc_r+0xb8>)
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	b91b      	cbnz	r3, 8000c54 <_malloc_r+0x3c>
 8000c4c:	4630      	mov	r0, r6
 8000c4e:	f000 f841 	bl	8000cd4 <_sbrk_r>
 8000c52:	6020      	str	r0, [r4, #0]
 8000c54:	4629      	mov	r1, r5
 8000c56:	4630      	mov	r0, r6
 8000c58:	f000 f83c 	bl	8000cd4 <_sbrk_r>
 8000c5c:	1c43      	adds	r3, r0, #1
 8000c5e:	d126      	bne.n	8000cae <_malloc_r+0x96>
 8000c60:	230c      	movs	r3, #12
 8000c62:	6033      	str	r3, [r6, #0]
 8000c64:	4630      	mov	r0, r6
 8000c66:	f000 f846 	bl	8000cf6 <__malloc_unlock>
 8000c6a:	e7e4      	b.n	8000c36 <_malloc_r+0x1e>
 8000c6c:	680b      	ldr	r3, [r1, #0]
 8000c6e:	1b5b      	subs	r3, r3, r5
 8000c70:	d41a      	bmi.n	8000ca8 <_malloc_r+0x90>
 8000c72:	2b0b      	cmp	r3, #11
 8000c74:	d90f      	bls.n	8000c96 <_malloc_r+0x7e>
 8000c76:	600b      	str	r3, [r1, #0]
 8000c78:	50cd      	str	r5, [r1, r3]
 8000c7a:	18cc      	adds	r4, r1, r3
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	f000 f83a 	bl	8000cf6 <__malloc_unlock>
 8000c82:	f104 000b 	add.w	r0, r4, #11
 8000c86:	1d23      	adds	r3, r4, #4
 8000c88:	f020 0007 	bic.w	r0, r0, #7
 8000c8c:	1ac3      	subs	r3, r0, r3
 8000c8e:	d01b      	beq.n	8000cc8 <_malloc_r+0xb0>
 8000c90:	425a      	negs	r2, r3
 8000c92:	50e2      	str	r2, [r4, r3]
 8000c94:	bd70      	pop	{r4, r5, r6, pc}
 8000c96:	428c      	cmp	r4, r1
 8000c98:	bf0d      	iteet	eq
 8000c9a:	6863      	ldreq	r3, [r4, #4]
 8000c9c:	684b      	ldrne	r3, [r1, #4]
 8000c9e:	6063      	strne	r3, [r4, #4]
 8000ca0:	6013      	streq	r3, [r2, #0]
 8000ca2:	bf18      	it	ne
 8000ca4:	460c      	movne	r4, r1
 8000ca6:	e7e9      	b.n	8000c7c <_malloc_r+0x64>
 8000ca8:	460c      	mov	r4, r1
 8000caa:	6849      	ldr	r1, [r1, #4]
 8000cac:	e7ca      	b.n	8000c44 <_malloc_r+0x2c>
 8000cae:	1cc4      	adds	r4, r0, #3
 8000cb0:	f024 0403 	bic.w	r4, r4, #3
 8000cb4:	42a0      	cmp	r0, r4
 8000cb6:	d005      	beq.n	8000cc4 <_malloc_r+0xac>
 8000cb8:	1a21      	subs	r1, r4, r0
 8000cba:	4630      	mov	r0, r6
 8000cbc:	f000 f80a 	bl	8000cd4 <_sbrk_r>
 8000cc0:	3001      	adds	r0, #1
 8000cc2:	d0cd      	beq.n	8000c60 <_malloc_r+0x48>
 8000cc4:	6025      	str	r5, [r4, #0]
 8000cc6:	e7d9      	b.n	8000c7c <_malloc_r+0x64>
 8000cc8:	bd70      	pop	{r4, r5, r6, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000080 	.word	0x20000080
 8000cd0:	20000084 	.word	0x20000084

08000cd4 <_sbrk_r>:
 8000cd4:	b538      	push	{r3, r4, r5, lr}
 8000cd6:	4c06      	ldr	r4, [pc, #24]	; (8000cf0 <_sbrk_r+0x1c>)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	4605      	mov	r5, r0
 8000cdc:	4608      	mov	r0, r1
 8000cde:	6023      	str	r3, [r4, #0]
 8000ce0:	f000 f80a 	bl	8000cf8 <_sbrk>
 8000ce4:	1c43      	adds	r3, r0, #1
 8000ce6:	d102      	bne.n	8000cee <_sbrk_r+0x1a>
 8000ce8:	6823      	ldr	r3, [r4, #0]
 8000cea:	b103      	cbz	r3, 8000cee <_sbrk_r+0x1a>
 8000cec:	602b      	str	r3, [r5, #0]
 8000cee:	bd38      	pop	{r3, r4, r5, pc}
 8000cf0:	2000008c 	.word	0x2000008c

08000cf4 <__malloc_lock>:
 8000cf4:	4770      	bx	lr

08000cf6 <__malloc_unlock>:
 8000cf6:	4770      	bx	lr

08000cf8 <_sbrk>:
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <_sbrk+0x14>)
 8000cfa:	6819      	ldr	r1, [r3, #0]
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	b909      	cbnz	r1, 8000d04 <_sbrk+0xc>
 8000d00:	4903      	ldr	r1, [pc, #12]	; (8000d10 <_sbrk+0x18>)
 8000d02:	6019      	str	r1, [r3, #0]
 8000d04:	6818      	ldr	r0, [r3, #0]
 8000d06:	4402      	add	r2, r0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	4770      	bx	lr
 8000d0c:	20000088 	.word	0x20000088
 8000d10:	20000090 	.word	0x20000090

08000d14 <_init>:
 8000d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d16:	bf00      	nop
 8000d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d1a:	bc08      	pop	{r3}
 8000d1c:	469e      	mov	lr, r3
 8000d1e:	4770      	bx	lr

08000d20 <_fini>:
 8000d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d22:	bf00      	nop
 8000d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d26:	bc08      	pop	{r3}
 8000d28:	469e      	mov	lr, r3
 8000d2a:	4770      	bx	lr


Domaci_Blbosti_RGB_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000230  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c8  080003d0  000103d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080003c8  080003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080003cc  080003cc  000103cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000103d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  080003d0  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000001c  080003d0  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000103d0  2**0
                  CONTENTS, READONLY
  9 .debug_info   000008e1  00000000  00000000  00010400  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000250  00000000  00000000  00010ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000080  00000000  00000000  00010f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00010fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000003e3  00000000  00000000  00011010  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000398  00000000  00000000  000113f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0001178b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000104  00000000  00000000  00011808  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0001190c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003b0 	.word	0x080003b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003b0 	.word	0x080003b0

080001d8 <OnLED>:
/* Private variables */
/* Private function prototypes */
/* Private functions */

void OnLED (uint8_t value)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  GPIOB -> ODR |= value<<13;
 80001e2:	4906      	ldr	r1, [pc, #24]	; (80001fc <OnLED+0x24>)
 80001e4:	4b05      	ldr	r3, [pc, #20]	; (80001fc <OnLED+0x24>)
 80001e6:	695b      	ldr	r3, [r3, #20]
 80001e8:	79fa      	ldrb	r2, [r7, #7]
 80001ea:	0352      	lsls	r2, r2, #13
 80001ec:	4313      	orrs	r3, r2
 80001ee:	614b      	str	r3, [r1, #20]
}
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr
 80001fc:	40020400 	.word	0x40020400

08000200 <OffLED>:

void OffLED (uint8_t value)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	71fb      	strb	r3, [r7, #7]
  GPIOB -> ODR &= (~(value))<<13;
 800020a:	4907      	ldr	r1, [pc, #28]	; (8000228 <OffLED+0x28>)
 800020c:	4b06      	ldr	r3, [pc, #24]	; (8000228 <OffLED+0x28>)
 800020e:	695b      	ldr	r3, [r3, #20]
 8000210:	79fa      	ldrb	r2, [r7, #7]
 8000212:	43d2      	mvns	r2, r2
 8000214:	0352      	lsls	r2, r2, #13
 8000216:	4013      	ands	r3, r2
 8000218:	614b      	str	r3, [r1, #20]
}
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	40020400 	.word	0x40020400

0800022c <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
  *  See also the <system_*.c> file and how the SystemInit() function updates 
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

  if(!(RCC ->AHB1ENR |= RCC_AHB1ENR_GPIOBEN))
 8000232:	4a1a      	ldr	r2, [pc, #104]	; (800029c <main+0x70>)
 8000234:	4b19      	ldr	r3, [pc, #100]	; (800029c <main+0x70>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	f043 0302 	orr.w	r3, r3, #2
 800023c:	6313      	str	r3, [r2, #48]	; 0x30
      RCC->AHB1RSTR |= RCC_AHB1RSTR_GPIOBRST;
      RCC->AHB1RSTR &= ~RCC_AHB1RSTR_GPIOBRST;

    }

   GPIOB->MODER |= (0x15<<26);
 800023e:	4a18      	ldr	r2, [pc, #96]	; (80002a0 <main+0x74>)
 8000240:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <main+0x74>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f043 43a8 	orr.w	r3, r3, #1409286144	; 0x54000000
 8000248:	6013      	str	r3, [r2, #0]
   GPIOB->OTYPER &= ~(0xe000);
 800024a:	4a15      	ldr	r2, [pc, #84]	; (80002a0 <main+0x74>)
 800024c:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <main+0x74>)
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000254:	6053      	str	r3, [r2, #4]
   GPIOB->OSPEEDR |= (0x3f<<26);
 8000256:	4a12      	ldr	r2, [pc, #72]	; (80002a0 <main+0x74>)
 8000258:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <main+0x74>)
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	f043 437c 	orr.w	r3, r3, #4227858432	; 0xfc000000
 8000260:	6093      	str	r3, [r2, #8]

   uint8_t j = 1;
 8000262:	2301      	movs	r3, #1
 8000264:	71fb      	strb	r3, [r7, #7]

   /* Infinite loop */
   while (1)
   {
      OffLED(0x07);
 8000266:	2007      	movs	r0, #7
 8000268:	f7ff ffca 	bl	8000200 <OffLED>
      OnLED(j);
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	4618      	mov	r0, r3
 8000270:	f7ff ffb2 	bl	80001d8 <OnLED>

      j++;
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	3301      	adds	r3, #1
 8000278:	71fb      	strb	r3, [r7, #7]

      if(j==0x08)
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	2b08      	cmp	r3, #8
 800027e:	d101      	bne.n	8000284 <main+0x58>
      {
        j = 1;
 8000280:	2301      	movs	r3, #1
 8000282:	71fb      	strb	r3, [r7, #7]
      }

      for(int i = 0;i<1000000;i++){}
 8000284:	2300      	movs	r3, #0
 8000286:	603b      	str	r3, [r7, #0]
 8000288:	e002      	b.n	8000290 <main+0x64>
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	3301      	adds	r3, #1
 800028e:	603b      	str	r3, [r7, #0]
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	4a04      	ldr	r2, [pc, #16]	; (80002a4 <main+0x78>)
 8000294:	4293      	cmp	r3, r2
 8000296:	ddf8      	ble.n	800028a <main+0x5e>
      OffLED(0x07);
 8000298:	e7e5      	b.n	8000266 <main+0x3a>
 800029a:	bf00      	nop
 800029c:	40023800 	.word	0x40023800
 80002a0:	40020400 	.word	0x40020400
 80002a4:	000f423f 	.word	0x000f423f

080002a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80002a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002ae:	e003      	b.n	80002b8 <LoopCopyDataInit>

080002b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002b6:	3104      	adds	r1, #4

080002b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002b8:	480b      	ldr	r0, [pc, #44]	; (80002e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002ba:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002c0:	d3f6      	bcc.n	80002b0 <CopyDataInit>
  ldr  r2, =_sbss
 80002c2:	4a0b      	ldr	r2, [pc, #44]	; (80002f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002c4:	e002      	b.n	80002cc <LoopFillZerobss>

080002c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002c8:	f842 3b04 	str.w	r3, [r2], #4

080002cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002cc:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002d0:	d3f9      	bcc.n	80002c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002d2:	f000 f813 	bl	80002fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002d6:	f000 f847 	bl	8000368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002da:	f7ff ffa7 	bl	800022c <main>
  bx  lr    
 80002de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80002e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80002e4:	080003d0 	.word	0x080003d0
  ldr  r0, =_sdata
 80002e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002ec:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80002f0:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80002f4:	2000001c 	.word	0x2000001c

080002f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC_IRQHandler>
	...

080002fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000300:	4a16      	ldr	r2, [pc, #88]	; (800035c <SystemInit+0x60>)
 8000302:	4b16      	ldr	r3, [pc, #88]	; (800035c <SystemInit+0x60>)
 8000304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800030c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000310:	4a13      	ldr	r2, [pc, #76]	; (8000360 <SystemInit+0x64>)
 8000312:	4b13      	ldr	r3, [pc, #76]	; (8000360 <SystemInit+0x64>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f043 0301 	orr.w	r3, r3, #1
 800031a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800031c:	4b10      	ldr	r3, [pc, #64]	; (8000360 <SystemInit+0x64>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000322:	4a0f      	ldr	r2, [pc, #60]	; (8000360 <SystemInit+0x64>)
 8000324:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <SystemInit+0x64>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800032c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000330:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000332:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <SystemInit+0x64>)
 8000334:	4a0b      	ldr	r2, [pc, #44]	; (8000364 <SystemInit+0x68>)
 8000336:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000338:	4a09      	ldr	r2, [pc, #36]	; (8000360 <SystemInit+0x64>)
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <SystemInit+0x64>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000342:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <SystemInit+0x64>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800034a:	4b04      	ldr	r3, [pc, #16]	; (800035c <SystemInit+0x60>)
 800034c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000350:	609a      	str	r2, [r3, #8]
#endif
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	e000ed00 	.word	0xe000ed00
 8000360:	40023800 	.word	0x40023800
 8000364:	24003010 	.word	0x24003010

08000368 <__libc_init_array>:
 8000368:	b570      	push	{r4, r5, r6, lr}
 800036a:	4e0d      	ldr	r6, [pc, #52]	; (80003a0 <__libc_init_array+0x38>)
 800036c:	4c0d      	ldr	r4, [pc, #52]	; (80003a4 <__libc_init_array+0x3c>)
 800036e:	1ba4      	subs	r4, r4, r6
 8000370:	10a4      	asrs	r4, r4, #2
 8000372:	2500      	movs	r5, #0
 8000374:	42a5      	cmp	r5, r4
 8000376:	d109      	bne.n	800038c <__libc_init_array+0x24>
 8000378:	4e0b      	ldr	r6, [pc, #44]	; (80003a8 <__libc_init_array+0x40>)
 800037a:	4c0c      	ldr	r4, [pc, #48]	; (80003ac <__libc_init_array+0x44>)
 800037c:	f000 f818 	bl	80003b0 <_init>
 8000380:	1ba4      	subs	r4, r4, r6
 8000382:	10a4      	asrs	r4, r4, #2
 8000384:	2500      	movs	r5, #0
 8000386:	42a5      	cmp	r5, r4
 8000388:	d105      	bne.n	8000396 <__libc_init_array+0x2e>
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000390:	4798      	blx	r3
 8000392:	3501      	adds	r5, #1
 8000394:	e7ee      	b.n	8000374 <__libc_init_array+0xc>
 8000396:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800039a:	4798      	blx	r3
 800039c:	3501      	adds	r5, #1
 800039e:	e7f2      	b.n	8000386 <__libc_init_array+0x1e>
 80003a0:	080003c8 	.word	0x080003c8
 80003a4:	080003c8 	.word	0x080003c8
 80003a8:	080003c8 	.word	0x080003c8
 80003ac:	080003cc 	.word	0x080003cc

080003b0 <_init>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr

080003bc <_fini>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr


Terminal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001180  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08001318  08001318  00011318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080013cc  080013cc  000113cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080013d0  080013d0  000113d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  20000000  080013d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000002c  20000064  08001438  00020064  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000090  08001438  00020090  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002350  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000664  00000000  00000000  000223e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000170  00000000  00000000  00022a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00022bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000b76  00000000  00000000  00022ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000a50  00000000  00000000  00023856  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000242a6  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000b30  00000000  00000000  00024324  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000064 	.word	0x20000064
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001300 	.word	0x08001300

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000068 	.word	0x20000068
 80001d4:	08001300 	.word	0x08001300

080001d8 <__sputc_r>:
#else
#define __sgetc_r(__ptr, __p) __sgetc_raw_r(__ptr, __p)
#endif

#ifdef __GNUC__
_ELIDABLE_INLINE int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
 80001de:	60f8      	str	r0, [r7, #12]
 80001e0:	60b9      	str	r1, [r7, #8]
 80001e2:	607a      	str	r2, [r7, #4]
#ifdef __SCLE
	if ((_p->_flags & __SCLE) && _c == '\n')
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	1e5a      	subs	r2, r3, #1
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	609a      	str	r2, [r3, #8]
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	689b      	ldr	r3, [r3, #8]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	da09      	bge.n	800020a <__sputc_r+0x32>
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	689a      	ldr	r2, [r3, #8]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	699b      	ldr	r3, [r3, #24]
 80001fe:	429a      	cmp	r2, r3
 8000200:	db0d      	blt.n	800021e <__sputc_r+0x46>
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	b2db      	uxtb	r3, r3
 8000206:	2b0a      	cmp	r3, #10
 8000208:	d009      	beq.n	800021e <__sputc_r+0x46>
		return (*_p->_p++ = _c);
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	1c59      	adds	r1, r3, #1
 8000210:	687a      	ldr	r2, [r7, #4]
 8000212:	6011      	str	r1, [r2, #0]
 8000214:	68ba      	ldr	r2, [r7, #8]
 8000216:	b2d2      	uxtb	r2, r2
 8000218:	701a      	strb	r2, [r3, #0]
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	e005      	b.n	800022a <__sputc_r+0x52>
	else
		return (__swbuf_r(_ptr, _c, _p));
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	68b9      	ldr	r1, [r7, #8]
 8000222:	68f8      	ldr	r0, [r7, #12]
 8000224:	f000 fb90 	bl	8000948 <__swbuf_r>
 8000228:	4603      	mov	r3, r0
}
 800022a:	4618      	mov	r0, r3
 800022c:	3710      	adds	r7, #16
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <AnsiPuts>:
/* Private variables */
/* Private function prototypes */
/* Private functions */

int AnsiPuts(char *cPtr)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  for (;*cPtr;cPtr++)
 800023c:	e00d      	b.n	800025a <AnsiPuts+0x26>
    putchar(*cPtr);
 800023e:	4b0b      	ldr	r3, [pc, #44]	; (800026c <AnsiPuts+0x38>)
 8000240:	6818      	ldr	r0, [r3, #0]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	4619      	mov	r1, r3
 8000248:	4b08      	ldr	r3, [pc, #32]	; (800026c <AnsiPuts+0x38>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	689b      	ldr	r3, [r3, #8]
 800024e:	461a      	mov	r2, r3
 8000250:	f7ff ffc2 	bl	80001d8 <__sputc_r>
  for (;*cPtr;cPtr++)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3301      	adds	r3, #1
 8000258:	607b      	str	r3, [r7, #4]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d1ed      	bne.n	800023e <AnsiPuts+0xa>

  return 1;
 8000262:	2301      	movs	r3, #1
}
 8000264:	4618      	mov	r0, r3
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000000 	.word	0x20000000

08000270 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0

  /* TODO - Add your application code here */

  unsigned int keycode;

  if(!(RCC->APB1ENR & RCC_APB1ENR_USART2EN))
 8000276:	4b65      	ldr	r3, [pc, #404]	; (800040c <main+0x19c>)
 8000278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800027a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800027e:	2b00      	cmp	r3, #0
 8000280:	d112      	bne.n	80002a8 <main+0x38>
  {
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000282:	4a62      	ldr	r2, [pc, #392]	; (800040c <main+0x19c>)
 8000284:	4b61      	ldr	r3, [pc, #388]	; (800040c <main+0x19c>)
 8000286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800028c:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->APB1RSTR |= RCC_APB1RSTR_USART2RST;
 800028e:	4a5f      	ldr	r2, [pc, #380]	; (800040c <main+0x19c>)
 8000290:	4b5e      	ldr	r3, [pc, #376]	; (800040c <main+0x19c>)
 8000292:	6a1b      	ldr	r3, [r3, #32]
 8000294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000298:	6213      	str	r3, [r2, #32]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800029a:	bf00      	nop
    __NOP();
    RCC->APB1RSTR &= ~RCC_APB1RSTR_USART2RST;
 800029c:	4a5b      	ldr	r2, [pc, #364]	; (800040c <main+0x19c>)
 800029e:	4b5b      	ldr	r3, [pc, #364]	; (800040c <main+0x19c>)
 80002a0:	6a1b      	ldr	r3, [r3, #32]
 80002a2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80002a6:	6213      	str	r3, [r2, #32]
  }

  USART2->CR1 = USART_CR1_TE | USART_CR1_RE;
 80002a8:	4b59      	ldr	r3, [pc, #356]	; (8000410 <main+0x1a0>)
 80002aa:	220c      	movs	r2, #12
 80002ac:	60da      	str	r2, [r3, #12]
  USART2->CR2 = 0U;
 80002ae:	4b58      	ldr	r3, [pc, #352]	; (8000410 <main+0x1a0>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
  USART2->CR3 = 0U;
 80002b4:	4b56      	ldr	r3, [pc, #344]	; (8000410 <main+0x1a0>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	615a      	str	r2, [r3, #20]
  USART2->BRR = BIT_RATE_38400_16MHz;
 80002ba:	4b55      	ldr	r3, [pc, #340]	; (8000410 <main+0x1a0>)
 80002bc:	f240 12a1 	movw	r2, #417	; 0x1a1
 80002c0:	609a      	str	r2, [r3, #8]
  USART2->CR1 |= USART_CR1_UE;
 80002c2:	4a53      	ldr	r2, [pc, #332]	; (8000410 <main+0x1a0>)
 80002c4:	4b52      	ldr	r3, [pc, #328]	; (8000410 <main+0x1a0>)
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002cc:	60d3      	str	r3, [r2, #12]


  if(!(RCC->AHB1ENR & RCC_AHB1ENR_GPIOAEN))
 80002ce:	4b4f      	ldr	r3, [pc, #316]	; (800040c <main+0x19c>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d112      	bne.n	8000300 <main+0x90>
  {
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002da:	4a4c      	ldr	r2, [pc, #304]	; (800040c <main+0x19c>)
 80002dc:	4b4b      	ldr	r3, [pc, #300]	; (800040c <main+0x19c>)
 80002de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1RSTR |= RCC_AHB1RSTR_GPIOARST;
 80002e6:	4a49      	ldr	r2, [pc, #292]	; (800040c <main+0x19c>)
 80002e8:	4b48      	ldr	r3, [pc, #288]	; (800040c <main+0x19c>)
 80002ea:	691b      	ldr	r3, [r3, #16]
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6113      	str	r3, [r2, #16]
 80002f2:	bf00      	nop
    __NOP();
    RCC->AHB1RSTR &= ~RCC_AHB1RSTR_GPIOARST;
 80002f4:	4a45      	ldr	r2, [pc, #276]	; (800040c <main+0x19c>)
 80002f6:	4b45      	ldr	r3, [pc, #276]	; (800040c <main+0x19c>)
 80002f8:	691b      	ldr	r3, [r3, #16]
 80002fa:	f023 0301 	bic.w	r3, r3, #1
 80002fe:	6113      	str	r3, [r2, #16]
  }

  GPIOA->MODER = ((GPIOA->MODER & ~(GPIO_MODER_MODER3 | GPIO_MODER_MODER2)) | GPIO_MODER_MODER3_1 | GPIO_MODER_MODER2_1 );
 8000300:	4a44      	ldr	r2, [pc, #272]	; (8000414 <main+0x1a4>)
 8000302:	4b44      	ldr	r3, [pc, #272]	; (8000414 <main+0x1a4>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800030a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800030e:	6013      	str	r3, [r2, #0]
  GPIOA->OTYPER &= ~ GPIO_OTYPER_OT_2;
 8000310:	4a40      	ldr	r2, [pc, #256]	; (8000414 <main+0x1a4>)
 8000312:	4b40      	ldr	r3, [pc, #256]	; (8000414 <main+0x1a4>)
 8000314:	685b      	ldr	r3, [r3, #4]
 8000316:	f023 0304 	bic.w	r3, r3, #4
 800031a:	6053      	str	r3, [r2, #4]
  GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR2;
 800031c:	4a3d      	ldr	r2, [pc, #244]	; (8000414 <main+0x1a4>)
 800031e:	4b3d      	ldr	r3, [pc, #244]	; (8000414 <main+0x1a4>)
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000326:	6093      	str	r3, [r2, #8]
  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR3 | GPIO_PUPDR_PUPDR2);
 8000328:	4a3a      	ldr	r2, [pc, #232]	; (8000414 <main+0x1a4>)
 800032a:	4b3a      	ldr	r3, [pc, #232]	; (8000414 <main+0x1a4>)
 800032c:	68db      	ldr	r3, [r3, #12]
 800032e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000332:	60d3      	str	r3, [r2, #12]
  GPIOA->AFR[0] = (GPIOA->AFR[0] & 0xFFFF00FF) | 0x00007700;
 8000334:	4a37      	ldr	r2, [pc, #220]	; (8000414 <main+0x1a4>)
 8000336:	4b37      	ldr	r3, [pc, #220]	; (8000414 <main+0x1a4>)
 8000338:	6a1b      	ldr	r3, [r3, #32]
 800033a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800033e:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000342:	6213      	str	r3, [r2, #32]

  setvbuf(stdout, NULL, _IONBF, 0);
 8000344:	4b34      	ldr	r3, [pc, #208]	; (8000418 <main+0x1a8>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	6898      	ldr	r0, [r3, #8]
 800034a:	2300      	movs	r3, #0
 800034c:	2202      	movs	r2, #2
 800034e:	2100      	movs	r1, #0
 8000350:	f000 fa4c 	bl	80007ec <setvbuf>
  setvbuf(stdin, NULL, _IONBF, 0);
 8000354:	4b30      	ldr	r3, [pc, #192]	; (8000418 <main+0x1a8>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	6858      	ldr	r0, [r3, #4]
 800035a:	2300      	movs	r3, #0
 800035c:	2202      	movs	r2, #2
 800035e:	2100      	movs	r1, #0
 8000360:	f000 fa44 	bl	80007ec <setvbuf>

  puts("Test stdio ...");
 8000364:	482d      	ldr	r0, [pc, #180]	; (800041c <main+0x1ac>)
 8000366:	f000 fa0d 	bl	8000784 <puts>
  puts("Line2 ...");
 800036a:	482d      	ldr	r0, [pc, #180]	; (8000420 <main+0x1b0>)
 800036c:	f000 fa0a 	bl	8000784 <puts>
  puts("Line3 ...");
 8000370:	482c      	ldr	r0, [pc, #176]	; (8000424 <main+0x1b4>)
 8000372:	f000 fa07 	bl	8000784 <puts>
  puts("Test stdio ...  Line4");
 8000376:	482c      	ldr	r0, [pc, #176]	; (8000428 <main+0x1b8>)
 8000378:	f000 fa04 	bl	8000784 <puts>

  keycode = getchar();
 800037c:	4b26      	ldr	r3, [pc, #152]	; (8000418 <main+0x1a8>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	685a      	ldr	r2, [r3, #4]
 8000384:	3a01      	subs	r2, #1
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	2b00      	cmp	r3, #0
 800038c:	da0a      	bge.n	80003a4 <main+0x134>
 800038e:	4b22      	ldr	r3, [pc, #136]	; (8000418 <main+0x1a8>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4b21      	ldr	r3, [pc, #132]	; (8000418 <main+0x1a8>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	4619      	mov	r1, r3
 800039a:	4610      	mov	r0, r2
 800039c:	f000 f9fa 	bl	8000794 <__srget_r>
 80003a0:	4603      	mov	r3, r0
 80003a2:	e006      	b.n	80003b2 <main+0x142>
 80003a4:	4b1c      	ldr	r3, [pc, #112]	; (8000418 <main+0x1a8>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	685a      	ldr	r2, [r3, #4]
 80003aa:	6813      	ldr	r3, [r2, #0]
 80003ac:	1c59      	adds	r1, r3, #1
 80003ae:	6011      	str	r1, [r2, #0]
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	607b      	str	r3, [r7, #4]
  AnsiPuts(ERASE_SCREEN);
 80003b4:	481d      	ldr	r0, [pc, #116]	; (800042c <main+0x1bc>)
 80003b6:	f7ff ff3d 	bl	8000234 <AnsiPuts>
  AnsiPuts(POSITION_0_0);
 80003ba:	481d      	ldr	r0, [pc, #116]	; (8000430 <main+0x1c0>)
 80003bc:	f7ff ff3a 	bl	8000234 <AnsiPuts>

  while(1)
  {
    keycode = getchar();
 80003c0:	4b15      	ldr	r3, [pc, #84]	; (8000418 <main+0x1a8>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	685a      	ldr	r2, [r3, #4]
 80003c8:	3a01      	subs	r2, #1
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	da0a      	bge.n	80003e8 <main+0x178>
 80003d2:	4b11      	ldr	r3, [pc, #68]	; (8000418 <main+0x1a8>)
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	4b10      	ldr	r3, [pc, #64]	; (8000418 <main+0x1a8>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	4619      	mov	r1, r3
 80003de:	4610      	mov	r0, r2
 80003e0:	f000 f9d8 	bl	8000794 <__srget_r>
 80003e4:	4603      	mov	r3, r0
 80003e6:	e006      	b.n	80003f6 <main+0x186>
 80003e8:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <main+0x1a8>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	685a      	ldr	r2, [r3, #4]
 80003ee:	6813      	ldr	r3, [r2, #0]
 80003f0:	1c59      	adds	r1, r3, #1
 80003f2:	6011      	str	r1, [r2, #0]
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	607b      	str	r3, [r7, #4]
    putchar(keycode);
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <main+0x1a8>)
 80003fa:	6818      	ldr	r0, [r3, #0]
 80003fc:	6879      	ldr	r1, [r7, #4]
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <main+0x1a8>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	461a      	mov	r2, r3
 8000406:	f7ff fee7 	bl	80001d8 <__sputc_r>
    keycode = getchar();
 800040a:	e7d9      	b.n	80003c0 <main+0x150>
 800040c:	40023800 	.word	0x40023800
 8000410:	40004400 	.word	0x40004400
 8000414:	40020000 	.word	0x40020000
 8000418:	20000000 	.word	0x20000000
 800041c:	08001318 	.word	0x08001318
 8000420:	08001328 	.word	0x08001328
 8000424:	08001334 	.word	0x08001334
 8000428:	08001340 	.word	0x08001340
 800042c:	08001358 	.word	0x08001358
 8000430:	08001360 	.word	0x08001360

08000434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800046c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000438:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800043a:	e003      	b.n	8000444 <LoopCopyDataInit>

0800043c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800043c:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800043e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000440:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000442:	3104      	adds	r1, #4

08000444 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000444:	480b      	ldr	r0, [pc, #44]	; (8000474 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000448:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800044a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800044c:	d3f6      	bcc.n	800043c <CopyDataInit>
  ldr  r2, =_sbss
 800044e:	4a0b      	ldr	r2, [pc, #44]	; (800047c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000450:	e002      	b.n	8000458 <LoopFillZerobss>

08000452 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000452:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000454:	f842 3b04 	str.w	r3, [r2], #4

08000458 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000458:	4b09      	ldr	r3, [pc, #36]	; (8000480 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800045a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800045c:	d3f9      	bcc.n	8000452 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800045e:	f000 f8db 	bl	8000618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000462:	f000 f90f 	bl	8000684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000466:	f7ff ff03 	bl	8000270 <main>
  bx  lr    
 800046a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800046c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000470:	080013d4 	.word	0x080013d4
  ldr  r0, =_sdata
 8000474:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000478:	20000064 	.word	0x20000064
  ldr  r2, =_sbss
 800047c:	20000064 	.word	0x20000064
  ldr  r3, = _ebss
 8000480:	20000090 	.word	0x20000090

08000484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000484:	e7fe      	b.n	8000484 <ADC_IRQHandler>
	...

08000488 <__io_putchar>:
#include "stm32f4xx.h"


  void __io_putchar(char ch)
  {
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
     while(!(USART2->SR & USART_SR_TXE))    // Wait for transmit buffer empty
 8000492:	bf00      	nop
 8000494:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <__io_putchar+0x2c>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800049c:	2b00      	cmp	r3, #0
 800049e:	d0f9      	beq.n	8000494 <__io_putchar+0xc>
     {
     }       
     USART2->DR = ch; 
 80004a0:	4a04      	ldr	r2, [pc, #16]	; (80004b4 <__io_putchar+0x2c>)
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	6053      	str	r3, [r2, #4]

   }
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	40004400 	.word	0x40004400

080004b8 <__io_getchar>:



  int __io_getchar(void)
  {
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
   while(!(USART2->SR & USART_SR_RXNE))  // Wait for receive buffer not empty
 80004bc:	bf00      	nop
 80004be:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <__io_getchar+0x20>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f003 0320 	and.w	r3, r3, #32
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d0f9      	beq.n	80004be <__io_getchar+0x6>
   {
   }       

   return USART2->DR;                    // Return received character
 80004ca:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <__io_getchar+0x20>)
 80004cc:	685b      	ldr	r3, [r3, #4]
  }
 80004ce:	4618      	mov	r0, r3
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	40004400 	.word	0x40004400

080004dc <_write>:


/* Functions */

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  int32_t length = len;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	617b      	str	r3, [r7, #20]

  while(length--)
 80004ec:	e006      	b.n	80004fc <_write+0x20>
  {
    __io_putchar(*ptr++);
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	1c5a      	adds	r2, r3, #1
 80004f2:	60ba      	str	r2, [r7, #8]
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff ffc6 	bl	8000488 <__io_putchar>
  while(length--)
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	1e5a      	subs	r2, r3, #1
 8000500:	617a      	str	r2, [r7, #20]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d1f3      	bne.n	80004ee <_write+0x12>
  }

  errno = 0;
 8000506:	4b04      	ldr	r3, [pc, #16]	; (8000518 <_write+0x3c>)
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
  return len;
 800050c:	687b      	ldr	r3, [r7, #4]
}
 800050e:	4618      	mov	r0, r3
 8000510:	3718      	adds	r7, #24
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	2000008c 	.word	0x2000008c

0800051c <_read>:


int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
  *ptr = __io_getchar();
 8000528:	f7ff ffc6 	bl	80004b8 <__io_getchar>
 800052c:	4603      	mov	r3, r0
 800052e:	b2da      	uxtb	r2, r3
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	701a      	strb	r2, [r3, #0]

  errno = 0;
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <_read+0x28>)
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
  return 1;
 800053a:	2301      	movs	r3, #1
}
 800053c:	4618      	mov	r0, r3
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	2000008c 	.word	0x2000008c

08000548 <_sbrk>:
	while (1) {}		/* Make sure we hang here */
}


void * _sbrk(int32_t incr)
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <_sbrk+0x38>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d102      	bne.n	800055e <_sbrk+0x16>
		heap_end = & end;
 8000558:	4b09      	ldr	r3, [pc, #36]	; (8000580 <_sbrk+0x38>)
 800055a:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <_sbrk+0x3c>)
 800055c:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <_sbrk+0x38>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <_sbrk+0x38>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4413      	add	r3, r2
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <_sbrk+0x38>)
 800056e:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8000570:	68fb      	ldr	r3, [r7, #12]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20000080 	.word	0x20000080
 8000584:	20000090 	.word	0x20000090

08000588 <_close>:

int _close(int32_t file)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <_close+0x20>)
 8000592:	2258      	movs	r2, #88	; 0x58
 8000594:	601a      	str	r2, [r3, #0]
	return -1;
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
}
 800059a:	4618      	mov	r0, r3
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	2000008c 	.word	0x2000008c

080005ac <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 80005b6:	4b05      	ldr	r3, [pc, #20]	; (80005cc <_fstat+0x20>)
 80005b8:	2258      	movs	r2, #88	; 0x58
 80005ba:	601a      	str	r2, [r3, #0]
	return -1;
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	2000008c 	.word	0x2000008c

080005d0 <_isatty>:

int _isatty(int32_t file)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <_isatty+0x1c>)
 80005da:	2258      	movs	r2, #88	; 0x58
 80005dc:	601a      	str	r2, [r3, #0]
	return 0;
 80005de:	2300      	movs	r3, #0
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	2000008c 	.word	0x2000008c

080005f0 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <_lseek+0x24>)
 80005fe:	2258      	movs	r2, #88	; 0x58
 8000600:	601a      	str	r2, [r3, #0]
	return -1;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000606:	4618      	mov	r0, r3
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	2000008c 	.word	0x2000008c

08000618 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800061c:	4a16      	ldr	r2, [pc, #88]	; (8000678 <SystemInit+0x60>)
 800061e:	4b16      	ldr	r3, [pc, #88]	; (8000678 <SystemInit+0x60>)
 8000620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800062c:	4a13      	ldr	r2, [pc, #76]	; (800067c <SystemInit+0x64>)
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <SystemInit+0x64>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <SystemInit+0x64>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800063e:	4a0f      	ldr	r2, [pc, #60]	; (800067c <SystemInit+0x64>)
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <SystemInit+0x64>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800064c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <SystemInit+0x64>)
 8000650:	4a0b      	ldr	r2, [pc, #44]	; (8000680 <SystemInit+0x68>)
 8000652:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000654:	4a09      	ldr	r2, [pc, #36]	; (800067c <SystemInit+0x64>)
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <SystemInit+0x64>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800065e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <SystemInit+0x64>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000666:	4b04      	ldr	r3, [pc, #16]	; (8000678 <SystemInit+0x60>)
 8000668:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800066c:	609a      	str	r2, [r3, #8]
#endif
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00
 800067c:	40023800 	.word	0x40023800
 8000680:	24003010 	.word	0x24003010

08000684 <__libc_init_array>:
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	4e0d      	ldr	r6, [pc, #52]	; (80006bc <__libc_init_array+0x38>)
 8000688:	4c0d      	ldr	r4, [pc, #52]	; (80006c0 <__libc_init_array+0x3c>)
 800068a:	1ba4      	subs	r4, r4, r6
 800068c:	10a4      	asrs	r4, r4, #2
 800068e:	2500      	movs	r5, #0
 8000690:	42a5      	cmp	r5, r4
 8000692:	d109      	bne.n	80006a8 <__libc_init_array+0x24>
 8000694:	4e0b      	ldr	r6, [pc, #44]	; (80006c4 <__libc_init_array+0x40>)
 8000696:	4c0c      	ldr	r4, [pc, #48]	; (80006c8 <__libc_init_array+0x44>)
 8000698:	f000 fe32 	bl	8001300 <_init>
 800069c:	1ba4      	subs	r4, r4, r6
 800069e:	10a4      	asrs	r4, r4, #2
 80006a0:	2500      	movs	r5, #0
 80006a2:	42a5      	cmp	r5, r4
 80006a4:	d105      	bne.n	80006b2 <__libc_init_array+0x2e>
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006ac:	4798      	blx	r3
 80006ae:	3501      	adds	r5, #1
 80006b0:	e7ee      	b.n	8000690 <__libc_init_array+0xc>
 80006b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006b6:	4798      	blx	r3
 80006b8:	3501      	adds	r5, #1
 80006ba:	e7f2      	b.n	80006a2 <__libc_init_array+0x1e>
 80006bc:	080013cc 	.word	0x080013cc
 80006c0:	080013cc 	.word	0x080013cc
 80006c4:	080013cc 	.word	0x080013cc
 80006c8:	080013d0 	.word	0x080013d0

080006cc <_puts_r>:
 80006cc:	b570      	push	{r4, r5, r6, lr}
 80006ce:	460e      	mov	r6, r1
 80006d0:	4605      	mov	r5, r0
 80006d2:	b118      	cbz	r0, 80006dc <_puts_r+0x10>
 80006d4:	6983      	ldr	r3, [r0, #24]
 80006d6:	b90b      	cbnz	r3, 80006dc <_puts_r+0x10>
 80006d8:	f000 fafa 	bl	8000cd0 <__sinit>
 80006dc:	69ab      	ldr	r3, [r5, #24]
 80006de:	68ac      	ldr	r4, [r5, #8]
 80006e0:	b913      	cbnz	r3, 80006e8 <_puts_r+0x1c>
 80006e2:	4628      	mov	r0, r5
 80006e4:	f000 faf4 	bl	8000cd0 <__sinit>
 80006e8:	4b23      	ldr	r3, [pc, #140]	; (8000778 <_puts_r+0xac>)
 80006ea:	429c      	cmp	r4, r3
 80006ec:	d117      	bne.n	800071e <_puts_r+0x52>
 80006ee:	686c      	ldr	r4, [r5, #4]
 80006f0:	89a3      	ldrh	r3, [r4, #12]
 80006f2:	071b      	lsls	r3, r3, #28
 80006f4:	d51d      	bpl.n	8000732 <_puts_r+0x66>
 80006f6:	6923      	ldr	r3, [r4, #16]
 80006f8:	b1db      	cbz	r3, 8000732 <_puts_r+0x66>
 80006fa:	3e01      	subs	r6, #1
 80006fc:	68a3      	ldr	r3, [r4, #8]
 80006fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000702:	3b01      	subs	r3, #1
 8000704:	60a3      	str	r3, [r4, #8]
 8000706:	b9e9      	cbnz	r1, 8000744 <_puts_r+0x78>
 8000708:	2b00      	cmp	r3, #0
 800070a:	da2e      	bge.n	800076a <_puts_r+0x9e>
 800070c:	4622      	mov	r2, r4
 800070e:	210a      	movs	r1, #10
 8000710:	4628      	mov	r0, r5
 8000712:	f000 f919 	bl	8000948 <__swbuf_r>
 8000716:	3001      	adds	r0, #1
 8000718:	d011      	beq.n	800073e <_puts_r+0x72>
 800071a:	200a      	movs	r0, #10
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <_puts_r+0xb0>)
 8000720:	429c      	cmp	r4, r3
 8000722:	d101      	bne.n	8000728 <_puts_r+0x5c>
 8000724:	68ac      	ldr	r4, [r5, #8]
 8000726:	e7e3      	b.n	80006f0 <_puts_r+0x24>
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <_puts_r+0xb4>)
 800072a:	429c      	cmp	r4, r3
 800072c:	bf08      	it	eq
 800072e:	68ec      	ldreq	r4, [r5, #12]
 8000730:	e7de      	b.n	80006f0 <_puts_r+0x24>
 8000732:	4621      	mov	r1, r4
 8000734:	4628      	mov	r0, r5
 8000736:	f000 f959 	bl	80009ec <__swsetup_r>
 800073a:	2800      	cmp	r0, #0
 800073c:	d0dd      	beq.n	80006fa <_puts_r+0x2e>
 800073e:	f04f 30ff 	mov.w	r0, #4294967295
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	2b00      	cmp	r3, #0
 8000746:	da04      	bge.n	8000752 <_puts_r+0x86>
 8000748:	69a2      	ldr	r2, [r4, #24]
 800074a:	4293      	cmp	r3, r2
 800074c:	db06      	blt.n	800075c <_puts_r+0x90>
 800074e:	290a      	cmp	r1, #10
 8000750:	d004      	beq.n	800075c <_puts_r+0x90>
 8000752:	6823      	ldr	r3, [r4, #0]
 8000754:	1c5a      	adds	r2, r3, #1
 8000756:	6022      	str	r2, [r4, #0]
 8000758:	7019      	strb	r1, [r3, #0]
 800075a:	e7cf      	b.n	80006fc <_puts_r+0x30>
 800075c:	4622      	mov	r2, r4
 800075e:	4628      	mov	r0, r5
 8000760:	f000 f8f2 	bl	8000948 <__swbuf_r>
 8000764:	3001      	adds	r0, #1
 8000766:	d1c9      	bne.n	80006fc <_puts_r+0x30>
 8000768:	e7e9      	b.n	800073e <_puts_r+0x72>
 800076a:	6823      	ldr	r3, [r4, #0]
 800076c:	200a      	movs	r0, #10
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	6022      	str	r2, [r4, #0]
 8000772:	7018      	strb	r0, [r3, #0]
 8000774:	bd70      	pop	{r4, r5, r6, pc}
 8000776:	bf00      	nop
 8000778:	0800138c 	.word	0x0800138c
 800077c:	080013ac 	.word	0x080013ac
 8000780:	0800136c 	.word	0x0800136c

08000784 <puts>:
 8000784:	4b02      	ldr	r3, [pc, #8]	; (8000790 <puts+0xc>)
 8000786:	4601      	mov	r1, r0
 8000788:	6818      	ldr	r0, [r3, #0]
 800078a:	f7ff bf9f 	b.w	80006cc <_puts_r>
 800078e:	bf00      	nop
 8000790:	20000000 	.word	0x20000000

08000794 <__srget_r>:
 8000794:	b538      	push	{r3, r4, r5, lr}
 8000796:	460c      	mov	r4, r1
 8000798:	4605      	mov	r5, r0
 800079a:	b118      	cbz	r0, 80007a4 <__srget_r+0x10>
 800079c:	6983      	ldr	r3, [r0, #24]
 800079e:	b90b      	cbnz	r3, 80007a4 <__srget_r+0x10>
 80007a0:	f000 fa96 	bl	8000cd0 <__sinit>
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <__srget_r+0x4c>)
 80007a6:	429c      	cmp	r4, r3
 80007a8:	d10d      	bne.n	80007c6 <__srget_r+0x32>
 80007aa:	686c      	ldr	r4, [r5, #4]
 80007ac:	4621      	mov	r1, r4
 80007ae:	4628      	mov	r0, r5
 80007b0:	f000 fc5e 	bl	8001070 <__srefill_r>
 80007b4:	b988      	cbnz	r0, 80007da <__srget_r+0x46>
 80007b6:	6863      	ldr	r3, [r4, #4]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	6063      	str	r3, [r4, #4]
 80007bc:	6823      	ldr	r3, [r4, #0]
 80007be:	1c5a      	adds	r2, r3, #1
 80007c0:	6022      	str	r2, [r4, #0]
 80007c2:	7818      	ldrb	r0, [r3, #0]
 80007c4:	bd38      	pop	{r3, r4, r5, pc}
 80007c6:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <__srget_r+0x50>)
 80007c8:	429c      	cmp	r4, r3
 80007ca:	d101      	bne.n	80007d0 <__srget_r+0x3c>
 80007cc:	68ac      	ldr	r4, [r5, #8]
 80007ce:	e7ed      	b.n	80007ac <__srget_r+0x18>
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <__srget_r+0x54>)
 80007d2:	429c      	cmp	r4, r3
 80007d4:	bf08      	it	eq
 80007d6:	68ec      	ldreq	r4, [r5, #12]
 80007d8:	e7e8      	b.n	80007ac <__srget_r+0x18>
 80007da:	f04f 30ff 	mov.w	r0, #4294967295
 80007de:	bd38      	pop	{r3, r4, r5, pc}
 80007e0:	0800138c 	.word	0x0800138c
 80007e4:	080013ac 	.word	0x080013ac
 80007e8:	0800136c 	.word	0x0800136c

080007ec <setvbuf>:
 80007ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80007f0:	461d      	mov	r5, r3
 80007f2:	4b51      	ldr	r3, [pc, #324]	; (8000938 <setvbuf+0x14c>)
 80007f4:	681e      	ldr	r6, [r3, #0]
 80007f6:	4604      	mov	r4, r0
 80007f8:	460f      	mov	r7, r1
 80007fa:	4690      	mov	r8, r2
 80007fc:	b126      	cbz	r6, 8000808 <setvbuf+0x1c>
 80007fe:	69b3      	ldr	r3, [r6, #24]
 8000800:	b913      	cbnz	r3, 8000808 <setvbuf+0x1c>
 8000802:	4630      	mov	r0, r6
 8000804:	f000 fa64 	bl	8000cd0 <__sinit>
 8000808:	4b4c      	ldr	r3, [pc, #304]	; (800093c <setvbuf+0x150>)
 800080a:	429c      	cmp	r4, r3
 800080c:	d152      	bne.n	80008b4 <setvbuf+0xc8>
 800080e:	6874      	ldr	r4, [r6, #4]
 8000810:	f1b8 0f02 	cmp.w	r8, #2
 8000814:	d006      	beq.n	8000824 <setvbuf+0x38>
 8000816:	f1b8 0f01 	cmp.w	r8, #1
 800081a:	f200 8089 	bhi.w	8000930 <setvbuf+0x144>
 800081e:	2d00      	cmp	r5, #0
 8000820:	f2c0 8086 	blt.w	8000930 <setvbuf+0x144>
 8000824:	4621      	mov	r1, r4
 8000826:	4630      	mov	r0, r6
 8000828:	f000 f9d6 	bl	8000bd8 <_fflush_r>
 800082c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800082e:	b141      	cbz	r1, 8000842 <setvbuf+0x56>
 8000830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000834:	4299      	cmp	r1, r3
 8000836:	d002      	beq.n	800083e <setvbuf+0x52>
 8000838:	4630      	mov	r0, r6
 800083a:	f000 fb63 	bl	8000f04 <_free_r>
 800083e:	2300      	movs	r3, #0
 8000840:	6363      	str	r3, [r4, #52]	; 0x34
 8000842:	2300      	movs	r3, #0
 8000844:	61a3      	str	r3, [r4, #24]
 8000846:	6063      	str	r3, [r4, #4]
 8000848:	89a3      	ldrh	r3, [r4, #12]
 800084a:	061b      	lsls	r3, r3, #24
 800084c:	d503      	bpl.n	8000856 <setvbuf+0x6a>
 800084e:	6921      	ldr	r1, [r4, #16]
 8000850:	4630      	mov	r0, r6
 8000852:	f000 fb57 	bl	8000f04 <_free_r>
 8000856:	89a3      	ldrh	r3, [r4, #12]
 8000858:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800085c:	f023 0303 	bic.w	r3, r3, #3
 8000860:	f1b8 0f02 	cmp.w	r8, #2
 8000864:	81a3      	strh	r3, [r4, #12]
 8000866:	d05d      	beq.n	8000924 <setvbuf+0x138>
 8000868:	ab01      	add	r3, sp, #4
 800086a:	466a      	mov	r2, sp
 800086c:	4621      	mov	r1, r4
 800086e:	4630      	mov	r0, r6
 8000870:	f000 fad4 	bl	8000e1c <__swhatbuf_r>
 8000874:	89a3      	ldrh	r3, [r4, #12]
 8000876:	4318      	orrs	r0, r3
 8000878:	81a0      	strh	r0, [r4, #12]
 800087a:	bb2d      	cbnz	r5, 80008c8 <setvbuf+0xdc>
 800087c:	9d00      	ldr	r5, [sp, #0]
 800087e:	4628      	mov	r0, r5
 8000880:	f000 fb30 	bl	8000ee4 <malloc>
 8000884:	4607      	mov	r7, r0
 8000886:	2800      	cmp	r0, #0
 8000888:	d14e      	bne.n	8000928 <setvbuf+0x13c>
 800088a:	f8dd 9000 	ldr.w	r9, [sp]
 800088e:	45a9      	cmp	r9, r5
 8000890:	d13c      	bne.n	800090c <setvbuf+0x120>
 8000892:	f04f 30ff 	mov.w	r0, #4294967295
 8000896:	89a3      	ldrh	r3, [r4, #12]
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	81a3      	strh	r3, [r4, #12]
 800089e:	2300      	movs	r3, #0
 80008a0:	60a3      	str	r3, [r4, #8]
 80008a2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80008a6:	6023      	str	r3, [r4, #0]
 80008a8:	6123      	str	r3, [r4, #16]
 80008aa:	2301      	movs	r3, #1
 80008ac:	6163      	str	r3, [r4, #20]
 80008ae:	b003      	add	sp, #12
 80008b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80008b4:	4b22      	ldr	r3, [pc, #136]	; (8000940 <setvbuf+0x154>)
 80008b6:	429c      	cmp	r4, r3
 80008b8:	d101      	bne.n	80008be <setvbuf+0xd2>
 80008ba:	68b4      	ldr	r4, [r6, #8]
 80008bc:	e7a8      	b.n	8000810 <setvbuf+0x24>
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <setvbuf+0x158>)
 80008c0:	429c      	cmp	r4, r3
 80008c2:	bf08      	it	eq
 80008c4:	68f4      	ldreq	r4, [r6, #12]
 80008c6:	e7a3      	b.n	8000810 <setvbuf+0x24>
 80008c8:	2f00      	cmp	r7, #0
 80008ca:	d0d8      	beq.n	800087e <setvbuf+0x92>
 80008cc:	69b3      	ldr	r3, [r6, #24]
 80008ce:	b913      	cbnz	r3, 80008d6 <setvbuf+0xea>
 80008d0:	4630      	mov	r0, r6
 80008d2:	f000 f9fd 	bl	8000cd0 <__sinit>
 80008d6:	f1b8 0f01 	cmp.w	r8, #1
 80008da:	bf08      	it	eq
 80008dc:	89a3      	ldrheq	r3, [r4, #12]
 80008de:	6027      	str	r7, [r4, #0]
 80008e0:	bf04      	itt	eq
 80008e2:	f043 0301 	orreq.w	r3, r3, #1
 80008e6:	81a3      	strheq	r3, [r4, #12]
 80008e8:	89a3      	ldrh	r3, [r4, #12]
 80008ea:	6127      	str	r7, [r4, #16]
 80008ec:	f013 0008 	ands.w	r0, r3, #8
 80008f0:	6165      	str	r5, [r4, #20]
 80008f2:	d01b      	beq.n	800092c <setvbuf+0x140>
 80008f4:	f013 0001 	ands.w	r0, r3, #1
 80008f8:	bf18      	it	ne
 80008fa:	426d      	negne	r5, r5
 80008fc:	f04f 0300 	mov.w	r3, #0
 8000900:	bf1d      	ittte	ne
 8000902:	60a3      	strne	r3, [r4, #8]
 8000904:	61a5      	strne	r5, [r4, #24]
 8000906:	4618      	movne	r0, r3
 8000908:	60a5      	streq	r5, [r4, #8]
 800090a:	e7d0      	b.n	80008ae <setvbuf+0xc2>
 800090c:	4648      	mov	r0, r9
 800090e:	f000 fae9 	bl	8000ee4 <malloc>
 8000912:	4607      	mov	r7, r0
 8000914:	2800      	cmp	r0, #0
 8000916:	d0bc      	beq.n	8000892 <setvbuf+0xa6>
 8000918:	89a3      	ldrh	r3, [r4, #12]
 800091a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091e:	81a3      	strh	r3, [r4, #12]
 8000920:	464d      	mov	r5, r9
 8000922:	e7d3      	b.n	80008cc <setvbuf+0xe0>
 8000924:	2000      	movs	r0, #0
 8000926:	e7b6      	b.n	8000896 <setvbuf+0xaa>
 8000928:	46a9      	mov	r9, r5
 800092a:	e7f5      	b.n	8000918 <setvbuf+0x12c>
 800092c:	60a0      	str	r0, [r4, #8]
 800092e:	e7be      	b.n	80008ae <setvbuf+0xc2>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	e7bb      	b.n	80008ae <setvbuf+0xc2>
 8000936:	bf00      	nop
 8000938:	20000000 	.word	0x20000000
 800093c:	0800138c 	.word	0x0800138c
 8000940:	080013ac 	.word	0x080013ac
 8000944:	0800136c 	.word	0x0800136c

08000948 <__swbuf_r>:
 8000948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800094a:	460e      	mov	r6, r1
 800094c:	4614      	mov	r4, r2
 800094e:	4605      	mov	r5, r0
 8000950:	b118      	cbz	r0, 800095a <__swbuf_r+0x12>
 8000952:	6983      	ldr	r3, [r0, #24]
 8000954:	b90b      	cbnz	r3, 800095a <__swbuf_r+0x12>
 8000956:	f000 f9bb 	bl	8000cd0 <__sinit>
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <__swbuf_r+0x98>)
 800095c:	429c      	cmp	r4, r3
 800095e:	d12a      	bne.n	80009b6 <__swbuf_r+0x6e>
 8000960:	686c      	ldr	r4, [r5, #4]
 8000962:	69a3      	ldr	r3, [r4, #24]
 8000964:	60a3      	str	r3, [r4, #8]
 8000966:	89a3      	ldrh	r3, [r4, #12]
 8000968:	071a      	lsls	r2, r3, #28
 800096a:	d52e      	bpl.n	80009ca <__swbuf_r+0x82>
 800096c:	6923      	ldr	r3, [r4, #16]
 800096e:	b363      	cbz	r3, 80009ca <__swbuf_r+0x82>
 8000970:	6923      	ldr	r3, [r4, #16]
 8000972:	6820      	ldr	r0, [r4, #0]
 8000974:	1ac0      	subs	r0, r0, r3
 8000976:	6963      	ldr	r3, [r4, #20]
 8000978:	b2f6      	uxtb	r6, r6
 800097a:	4298      	cmp	r0, r3
 800097c:	4637      	mov	r7, r6
 800097e:	db04      	blt.n	800098a <__swbuf_r+0x42>
 8000980:	4621      	mov	r1, r4
 8000982:	4628      	mov	r0, r5
 8000984:	f000 f928 	bl	8000bd8 <_fflush_r>
 8000988:	bb28      	cbnz	r0, 80009d6 <__swbuf_r+0x8e>
 800098a:	68a3      	ldr	r3, [r4, #8]
 800098c:	3b01      	subs	r3, #1
 800098e:	60a3      	str	r3, [r4, #8]
 8000990:	6823      	ldr	r3, [r4, #0]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	6022      	str	r2, [r4, #0]
 8000996:	701e      	strb	r6, [r3, #0]
 8000998:	6963      	ldr	r3, [r4, #20]
 800099a:	3001      	adds	r0, #1
 800099c:	4298      	cmp	r0, r3
 800099e:	d004      	beq.n	80009aa <__swbuf_r+0x62>
 80009a0:	89a3      	ldrh	r3, [r4, #12]
 80009a2:	07db      	lsls	r3, r3, #31
 80009a4:	d519      	bpl.n	80009da <__swbuf_r+0x92>
 80009a6:	2e0a      	cmp	r6, #10
 80009a8:	d117      	bne.n	80009da <__swbuf_r+0x92>
 80009aa:	4621      	mov	r1, r4
 80009ac:	4628      	mov	r0, r5
 80009ae:	f000 f913 	bl	8000bd8 <_fflush_r>
 80009b2:	b190      	cbz	r0, 80009da <__swbuf_r+0x92>
 80009b4:	e00f      	b.n	80009d6 <__swbuf_r+0x8e>
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <__swbuf_r+0x9c>)
 80009b8:	429c      	cmp	r4, r3
 80009ba:	d101      	bne.n	80009c0 <__swbuf_r+0x78>
 80009bc:	68ac      	ldr	r4, [r5, #8]
 80009be:	e7d0      	b.n	8000962 <__swbuf_r+0x1a>
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <__swbuf_r+0xa0>)
 80009c2:	429c      	cmp	r4, r3
 80009c4:	bf08      	it	eq
 80009c6:	68ec      	ldreq	r4, [r5, #12]
 80009c8:	e7cb      	b.n	8000962 <__swbuf_r+0x1a>
 80009ca:	4621      	mov	r1, r4
 80009cc:	4628      	mov	r0, r5
 80009ce:	f000 f80d 	bl	80009ec <__swsetup_r>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	d0cc      	beq.n	8000970 <__swbuf_r+0x28>
 80009d6:	f04f 37ff 	mov.w	r7, #4294967295
 80009da:	4638      	mov	r0, r7
 80009dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009de:	bf00      	nop
 80009e0:	0800138c 	.word	0x0800138c
 80009e4:	080013ac 	.word	0x080013ac
 80009e8:	0800136c 	.word	0x0800136c

080009ec <__swsetup_r>:
 80009ec:	4b32      	ldr	r3, [pc, #200]	; (8000ab8 <__swsetup_r+0xcc>)
 80009ee:	b570      	push	{r4, r5, r6, lr}
 80009f0:	681d      	ldr	r5, [r3, #0]
 80009f2:	4606      	mov	r6, r0
 80009f4:	460c      	mov	r4, r1
 80009f6:	b125      	cbz	r5, 8000a02 <__swsetup_r+0x16>
 80009f8:	69ab      	ldr	r3, [r5, #24]
 80009fa:	b913      	cbnz	r3, 8000a02 <__swsetup_r+0x16>
 80009fc:	4628      	mov	r0, r5
 80009fe:	f000 f967 	bl	8000cd0 <__sinit>
 8000a02:	4b2e      	ldr	r3, [pc, #184]	; (8000abc <__swsetup_r+0xd0>)
 8000a04:	429c      	cmp	r4, r3
 8000a06:	d10f      	bne.n	8000a28 <__swsetup_r+0x3c>
 8000a08:	686c      	ldr	r4, [r5, #4]
 8000a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	0715      	lsls	r5, r2, #28
 8000a12:	d42c      	bmi.n	8000a6e <__swsetup_r+0x82>
 8000a14:	06d0      	lsls	r0, r2, #27
 8000a16:	d411      	bmi.n	8000a3c <__swsetup_r+0x50>
 8000a18:	2209      	movs	r2, #9
 8000a1a:	6032      	str	r2, [r6, #0]
 8000a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a20:	81a3      	strh	r3, [r4, #12]
 8000a22:	f04f 30ff 	mov.w	r0, #4294967295
 8000a26:	bd70      	pop	{r4, r5, r6, pc}
 8000a28:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <__swsetup_r+0xd4>)
 8000a2a:	429c      	cmp	r4, r3
 8000a2c:	d101      	bne.n	8000a32 <__swsetup_r+0x46>
 8000a2e:	68ac      	ldr	r4, [r5, #8]
 8000a30:	e7eb      	b.n	8000a0a <__swsetup_r+0x1e>
 8000a32:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <__swsetup_r+0xd8>)
 8000a34:	429c      	cmp	r4, r3
 8000a36:	bf08      	it	eq
 8000a38:	68ec      	ldreq	r4, [r5, #12]
 8000a3a:	e7e6      	b.n	8000a0a <__swsetup_r+0x1e>
 8000a3c:	0751      	lsls	r1, r2, #29
 8000a3e:	d512      	bpl.n	8000a66 <__swsetup_r+0x7a>
 8000a40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a42:	b141      	cbz	r1, 8000a56 <__swsetup_r+0x6a>
 8000a44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a48:	4299      	cmp	r1, r3
 8000a4a:	d002      	beq.n	8000a52 <__swsetup_r+0x66>
 8000a4c:	4630      	mov	r0, r6
 8000a4e:	f000 fa59 	bl	8000f04 <_free_r>
 8000a52:	2300      	movs	r3, #0
 8000a54:	6363      	str	r3, [r4, #52]	; 0x34
 8000a56:	89a3      	ldrh	r3, [r4, #12]
 8000a58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a5c:	81a3      	strh	r3, [r4, #12]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	6063      	str	r3, [r4, #4]
 8000a62:	6923      	ldr	r3, [r4, #16]
 8000a64:	6023      	str	r3, [r4, #0]
 8000a66:	89a3      	ldrh	r3, [r4, #12]
 8000a68:	f043 0308 	orr.w	r3, r3, #8
 8000a6c:	81a3      	strh	r3, [r4, #12]
 8000a6e:	6923      	ldr	r3, [r4, #16]
 8000a70:	b94b      	cbnz	r3, 8000a86 <__swsetup_r+0x9a>
 8000a72:	89a3      	ldrh	r3, [r4, #12]
 8000a74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a7c:	d003      	beq.n	8000a86 <__swsetup_r+0x9a>
 8000a7e:	4621      	mov	r1, r4
 8000a80:	4630      	mov	r0, r6
 8000a82:	f000 f9ef 	bl	8000e64 <__smakebuf_r>
 8000a86:	89a2      	ldrh	r2, [r4, #12]
 8000a88:	f012 0301 	ands.w	r3, r2, #1
 8000a8c:	d00c      	beq.n	8000aa8 <__swsetup_r+0xbc>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60a3      	str	r3, [r4, #8]
 8000a92:	6963      	ldr	r3, [r4, #20]
 8000a94:	425b      	negs	r3, r3
 8000a96:	61a3      	str	r3, [r4, #24]
 8000a98:	6923      	ldr	r3, [r4, #16]
 8000a9a:	b953      	cbnz	r3, 8000ab2 <__swsetup_r+0xc6>
 8000a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000aa0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000aa4:	d1ba      	bne.n	8000a1c <__swsetup_r+0x30>
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	0792      	lsls	r2, r2, #30
 8000aaa:	bf58      	it	pl
 8000aac:	6963      	ldrpl	r3, [r4, #20]
 8000aae:	60a3      	str	r3, [r4, #8]
 8000ab0:	e7f2      	b.n	8000a98 <__swsetup_r+0xac>
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	e7f7      	b.n	8000aa6 <__swsetup_r+0xba>
 8000ab6:	bf00      	nop
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	0800138c 	.word	0x0800138c
 8000ac0:	080013ac 	.word	0x080013ac
 8000ac4:	0800136c 	.word	0x0800136c

08000ac8 <__sflush_r>:
 8000ac8:	898a      	ldrh	r2, [r1, #12]
 8000aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ace:	4605      	mov	r5, r0
 8000ad0:	0710      	lsls	r0, r2, #28
 8000ad2:	460c      	mov	r4, r1
 8000ad4:	d45a      	bmi.n	8000b8c <__sflush_r+0xc4>
 8000ad6:	684b      	ldr	r3, [r1, #4]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	dc05      	bgt.n	8000ae8 <__sflush_r+0x20>
 8000adc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	dc02      	bgt.n	8000ae8 <__sflush_r+0x20>
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d0f9      	beq.n	8000ae2 <__sflush_r+0x1a>
 8000aee:	2300      	movs	r3, #0
 8000af0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000af4:	682f      	ldr	r7, [r5, #0]
 8000af6:	602b      	str	r3, [r5, #0]
 8000af8:	d033      	beq.n	8000b62 <__sflush_r+0x9a>
 8000afa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000afc:	89a3      	ldrh	r3, [r4, #12]
 8000afe:	075a      	lsls	r2, r3, #29
 8000b00:	d505      	bpl.n	8000b0e <__sflush_r+0x46>
 8000b02:	6863      	ldr	r3, [r4, #4]
 8000b04:	1ac0      	subs	r0, r0, r3
 8000b06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b08:	b10b      	cbz	r3, 8000b0e <__sflush_r+0x46>
 8000b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b0c:	1ac0      	subs	r0, r0, r3
 8000b0e:	2300      	movs	r3, #0
 8000b10:	4602      	mov	r2, r0
 8000b12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b14:	6a21      	ldr	r1, [r4, #32]
 8000b16:	4628      	mov	r0, r5
 8000b18:	47b0      	blx	r6
 8000b1a:	1c43      	adds	r3, r0, #1
 8000b1c:	89a3      	ldrh	r3, [r4, #12]
 8000b1e:	d106      	bne.n	8000b2e <__sflush_r+0x66>
 8000b20:	6829      	ldr	r1, [r5, #0]
 8000b22:	291d      	cmp	r1, #29
 8000b24:	d84b      	bhi.n	8000bbe <__sflush_r+0xf6>
 8000b26:	4a2b      	ldr	r2, [pc, #172]	; (8000bd4 <__sflush_r+0x10c>)
 8000b28:	40ca      	lsrs	r2, r1
 8000b2a:	07d6      	lsls	r6, r2, #31
 8000b2c:	d547      	bpl.n	8000bbe <__sflush_r+0xf6>
 8000b2e:	2200      	movs	r2, #0
 8000b30:	6062      	str	r2, [r4, #4]
 8000b32:	04d9      	lsls	r1, r3, #19
 8000b34:	6922      	ldr	r2, [r4, #16]
 8000b36:	6022      	str	r2, [r4, #0]
 8000b38:	d504      	bpl.n	8000b44 <__sflush_r+0x7c>
 8000b3a:	1c42      	adds	r2, r0, #1
 8000b3c:	d101      	bne.n	8000b42 <__sflush_r+0x7a>
 8000b3e:	682b      	ldr	r3, [r5, #0]
 8000b40:	b903      	cbnz	r3, 8000b44 <__sflush_r+0x7c>
 8000b42:	6560      	str	r0, [r4, #84]	; 0x54
 8000b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b46:	602f      	str	r7, [r5, #0]
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	d0ca      	beq.n	8000ae2 <__sflush_r+0x1a>
 8000b4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b50:	4299      	cmp	r1, r3
 8000b52:	d002      	beq.n	8000b5a <__sflush_r+0x92>
 8000b54:	4628      	mov	r0, r5
 8000b56:	f000 f9d5 	bl	8000f04 <_free_r>
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	6360      	str	r0, [r4, #52]	; 0x34
 8000b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b62:	6a21      	ldr	r1, [r4, #32]
 8000b64:	2301      	movs	r3, #1
 8000b66:	4628      	mov	r0, r5
 8000b68:	47b0      	blx	r6
 8000b6a:	1c41      	adds	r1, r0, #1
 8000b6c:	d1c6      	bne.n	8000afc <__sflush_r+0x34>
 8000b6e:	682b      	ldr	r3, [r5, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d0c3      	beq.n	8000afc <__sflush_r+0x34>
 8000b74:	2b1d      	cmp	r3, #29
 8000b76:	d001      	beq.n	8000b7c <__sflush_r+0xb4>
 8000b78:	2b16      	cmp	r3, #22
 8000b7a:	d101      	bne.n	8000b80 <__sflush_r+0xb8>
 8000b7c:	602f      	str	r7, [r5, #0]
 8000b7e:	e7b0      	b.n	8000ae2 <__sflush_r+0x1a>
 8000b80:	89a3      	ldrh	r3, [r4, #12]
 8000b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b86:	81a3      	strh	r3, [r4, #12]
 8000b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b8c:	690f      	ldr	r7, [r1, #16]
 8000b8e:	2f00      	cmp	r7, #0
 8000b90:	d0a7      	beq.n	8000ae2 <__sflush_r+0x1a>
 8000b92:	0793      	lsls	r3, r2, #30
 8000b94:	680e      	ldr	r6, [r1, #0]
 8000b96:	bf08      	it	eq
 8000b98:	694b      	ldreq	r3, [r1, #20]
 8000b9a:	600f      	str	r7, [r1, #0]
 8000b9c:	bf18      	it	ne
 8000b9e:	2300      	movne	r3, #0
 8000ba0:	eba6 0807 	sub.w	r8, r6, r7
 8000ba4:	608b      	str	r3, [r1, #8]
 8000ba6:	f1b8 0f00 	cmp.w	r8, #0
 8000baa:	dd9a      	ble.n	8000ae2 <__sflush_r+0x1a>
 8000bac:	4643      	mov	r3, r8
 8000bae:	463a      	mov	r2, r7
 8000bb0:	6a21      	ldr	r1, [r4, #32]
 8000bb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000bb4:	4628      	mov	r0, r5
 8000bb6:	47b0      	blx	r6
 8000bb8:	2800      	cmp	r0, #0
 8000bba:	dc07      	bgt.n	8000bcc <__sflush_r+0x104>
 8000bbc:	89a3      	ldrh	r3, [r4, #12]
 8000bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc2:	81a3      	strh	r3, [r4, #12]
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bcc:	4407      	add	r7, r0
 8000bce:	eba8 0800 	sub.w	r8, r8, r0
 8000bd2:	e7e8      	b.n	8000ba6 <__sflush_r+0xde>
 8000bd4:	20400001 	.word	0x20400001

08000bd8 <_fflush_r>:
 8000bd8:	b538      	push	{r3, r4, r5, lr}
 8000bda:	690b      	ldr	r3, [r1, #16]
 8000bdc:	4605      	mov	r5, r0
 8000bde:	460c      	mov	r4, r1
 8000be0:	b1db      	cbz	r3, 8000c1a <_fflush_r+0x42>
 8000be2:	b118      	cbz	r0, 8000bec <_fflush_r+0x14>
 8000be4:	6983      	ldr	r3, [r0, #24]
 8000be6:	b90b      	cbnz	r3, 8000bec <_fflush_r+0x14>
 8000be8:	f000 f872 	bl	8000cd0 <__sinit>
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <_fflush_r+0x48>)
 8000bee:	429c      	cmp	r4, r3
 8000bf0:	d109      	bne.n	8000c06 <_fflush_r+0x2e>
 8000bf2:	686c      	ldr	r4, [r5, #4]
 8000bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bf8:	b17b      	cbz	r3, 8000c1a <_fflush_r+0x42>
 8000bfa:	4621      	mov	r1, r4
 8000bfc:	4628      	mov	r0, r5
 8000bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c02:	f7ff bf61 	b.w	8000ac8 <__sflush_r>
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <_fflush_r+0x4c>)
 8000c08:	429c      	cmp	r4, r3
 8000c0a:	d101      	bne.n	8000c10 <_fflush_r+0x38>
 8000c0c:	68ac      	ldr	r4, [r5, #8]
 8000c0e:	e7f1      	b.n	8000bf4 <_fflush_r+0x1c>
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <_fflush_r+0x50>)
 8000c12:	429c      	cmp	r4, r3
 8000c14:	bf08      	it	eq
 8000c16:	68ec      	ldreq	r4, [r5, #12]
 8000c18:	e7ec      	b.n	8000bf4 <_fflush_r+0x1c>
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	bd38      	pop	{r3, r4, r5, pc}
 8000c1e:	bf00      	nop
 8000c20:	0800138c 	.word	0x0800138c
 8000c24:	080013ac 	.word	0x080013ac
 8000c28:	0800136c 	.word	0x0800136c

08000c2c <fflush>:
 8000c2c:	4601      	mov	r1, r0
 8000c2e:	b920      	cbnz	r0, 8000c3a <fflush+0xe>
 8000c30:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <fflush+0x18>)
 8000c32:	4905      	ldr	r1, [pc, #20]	; (8000c48 <fflush+0x1c>)
 8000c34:	6818      	ldr	r0, [r3, #0]
 8000c36:	f000 b8d3 	b.w	8000de0 <_fwalk_reent>
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <fflush+0x20>)
 8000c3c:	6818      	ldr	r0, [r3, #0]
 8000c3e:	f7ff bfcb 	b.w	8000bd8 <_fflush_r>
 8000c42:	bf00      	nop
 8000c44:	08001368 	.word	0x08001368
 8000c48:	08000bd9 	.word	0x08000bd9
 8000c4c:	20000000 	.word	0x20000000

08000c50 <_cleanup_r>:
 8000c50:	4901      	ldr	r1, [pc, #4]	; (8000c58 <_cleanup_r+0x8>)
 8000c52:	f000 b8c5 	b.w	8000de0 <_fwalk_reent>
 8000c56:	bf00      	nop
 8000c58:	08000bd9 	.word	0x08000bd9

08000c5c <std.isra.0>:
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	b510      	push	{r4, lr}
 8000c60:	4604      	mov	r4, r0
 8000c62:	6003      	str	r3, [r0, #0]
 8000c64:	6043      	str	r3, [r0, #4]
 8000c66:	6083      	str	r3, [r0, #8]
 8000c68:	8181      	strh	r1, [r0, #12]
 8000c6a:	6643      	str	r3, [r0, #100]	; 0x64
 8000c6c:	81c2      	strh	r2, [r0, #14]
 8000c6e:	6103      	str	r3, [r0, #16]
 8000c70:	6143      	str	r3, [r0, #20]
 8000c72:	6183      	str	r3, [r0, #24]
 8000c74:	4619      	mov	r1, r3
 8000c76:	2208      	movs	r2, #8
 8000c78:	305c      	adds	r0, #92	; 0x5c
 8000c7a:	f000 f93b 	bl	8000ef4 <memset>
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <std.isra.0+0x38>)
 8000c80:	6263      	str	r3, [r4, #36]	; 0x24
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <std.isra.0+0x3c>)
 8000c84:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <std.isra.0+0x40>)
 8000c88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <std.isra.0+0x44>)
 8000c8c:	6224      	str	r4, [r4, #32]
 8000c8e:	6323      	str	r3, [r4, #48]	; 0x30
 8000c90:	bd10      	pop	{r4, pc}
 8000c92:	bf00      	nop
 8000c94:	080011a5 	.word	0x080011a5
 8000c98:	080011c7 	.word	0x080011c7
 8000c9c:	080011ff 	.word	0x080011ff
 8000ca0:	08001223 	.word	0x08001223

08000ca4 <__sfmoreglue>:
 8000ca4:	b570      	push	{r4, r5, r6, lr}
 8000ca6:	1e4a      	subs	r2, r1, #1
 8000ca8:	2568      	movs	r5, #104	; 0x68
 8000caa:	4355      	muls	r5, r2
 8000cac:	460e      	mov	r6, r1
 8000cae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000cb2:	f000 f975 	bl	8000fa0 <_malloc_r>
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	b140      	cbz	r0, 8000ccc <__sfmoreglue+0x28>
 8000cba:	2100      	movs	r1, #0
 8000cbc:	e880 0042 	stmia.w	r0, {r1, r6}
 8000cc0:	300c      	adds	r0, #12
 8000cc2:	60a0      	str	r0, [r4, #8]
 8000cc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000cc8:	f000 f914 	bl	8000ef4 <memset>
 8000ccc:	4620      	mov	r0, r4
 8000cce:	bd70      	pop	{r4, r5, r6, pc}

08000cd0 <__sinit>:
 8000cd0:	6983      	ldr	r3, [r0, #24]
 8000cd2:	b510      	push	{r4, lr}
 8000cd4:	4604      	mov	r4, r0
 8000cd6:	bb33      	cbnz	r3, 8000d26 <__sinit+0x56>
 8000cd8:	6483      	str	r3, [r0, #72]	; 0x48
 8000cda:	64c3      	str	r3, [r0, #76]	; 0x4c
 8000cdc:	6503      	str	r3, [r0, #80]	; 0x50
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <__sinit+0x58>)
 8000ce0:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <__sinit+0x5c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6282      	str	r2, [r0, #40]	; 0x28
 8000ce6:	4298      	cmp	r0, r3
 8000ce8:	bf04      	itt	eq
 8000cea:	2301      	moveq	r3, #1
 8000cec:	6183      	streq	r3, [r0, #24]
 8000cee:	f000 f81f 	bl	8000d30 <__sfp>
 8000cf2:	6060      	str	r0, [r4, #4]
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f000 f81b 	bl	8000d30 <__sfp>
 8000cfa:	60a0      	str	r0, [r4, #8]
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f000 f817 	bl	8000d30 <__sfp>
 8000d02:	2200      	movs	r2, #0
 8000d04:	60e0      	str	r0, [r4, #12]
 8000d06:	2104      	movs	r1, #4
 8000d08:	6860      	ldr	r0, [r4, #4]
 8000d0a:	f7ff ffa7 	bl	8000c5c <std.isra.0>
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2109      	movs	r1, #9
 8000d12:	68a0      	ldr	r0, [r4, #8]
 8000d14:	f7ff ffa2 	bl	8000c5c <std.isra.0>
 8000d18:	2202      	movs	r2, #2
 8000d1a:	2112      	movs	r1, #18
 8000d1c:	68e0      	ldr	r0, [r4, #12]
 8000d1e:	f7ff ff9d 	bl	8000c5c <std.isra.0>
 8000d22:	2301      	movs	r3, #1
 8000d24:	61a3      	str	r3, [r4, #24]
 8000d26:	bd10      	pop	{r4, pc}
 8000d28:	08001368 	.word	0x08001368
 8000d2c:	08000c51 	.word	0x08000c51

08000d30 <__sfp>:
 8000d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <__sfp+0x74>)
 8000d34:	681e      	ldr	r6, [r3, #0]
 8000d36:	69b3      	ldr	r3, [r6, #24]
 8000d38:	4607      	mov	r7, r0
 8000d3a:	b913      	cbnz	r3, 8000d42 <__sfp+0x12>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	f7ff ffc7 	bl	8000cd0 <__sinit>
 8000d42:	3648      	adds	r6, #72	; 0x48
 8000d44:	68b4      	ldr	r4, [r6, #8]
 8000d46:	6873      	ldr	r3, [r6, #4]
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	d503      	bpl.n	8000d54 <__sfp+0x24>
 8000d4c:	6833      	ldr	r3, [r6, #0]
 8000d4e:	b133      	cbz	r3, 8000d5e <__sfp+0x2e>
 8000d50:	6836      	ldr	r6, [r6, #0]
 8000d52:	e7f7      	b.n	8000d44 <__sfp+0x14>
 8000d54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000d58:	b16d      	cbz	r5, 8000d76 <__sfp+0x46>
 8000d5a:	3468      	adds	r4, #104	; 0x68
 8000d5c:	e7f4      	b.n	8000d48 <__sfp+0x18>
 8000d5e:	2104      	movs	r1, #4
 8000d60:	4638      	mov	r0, r7
 8000d62:	f7ff ff9f 	bl	8000ca4 <__sfmoreglue>
 8000d66:	6030      	str	r0, [r6, #0]
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	d1f1      	bne.n	8000d50 <__sfp+0x20>
 8000d6c:	230c      	movs	r3, #12
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	4604      	mov	r4, r0
 8000d72:	4620      	mov	r0, r4
 8000d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d7a:	81e3      	strh	r3, [r4, #14]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	81a3      	strh	r3, [r4, #12]
 8000d80:	6665      	str	r5, [r4, #100]	; 0x64
 8000d82:	6025      	str	r5, [r4, #0]
 8000d84:	60a5      	str	r5, [r4, #8]
 8000d86:	6065      	str	r5, [r4, #4]
 8000d88:	6125      	str	r5, [r4, #16]
 8000d8a:	6165      	str	r5, [r4, #20]
 8000d8c:	61a5      	str	r5, [r4, #24]
 8000d8e:	2208      	movs	r2, #8
 8000d90:	4629      	mov	r1, r5
 8000d92:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000d96:	f000 f8ad 	bl	8000ef4 <memset>
 8000d9a:	6365      	str	r5, [r4, #52]	; 0x34
 8000d9c:	63a5      	str	r5, [r4, #56]	; 0x38
 8000d9e:	64a5      	str	r5, [r4, #72]	; 0x48
 8000da0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8000da2:	e7e6      	b.n	8000d72 <__sfp+0x42>
 8000da4:	08001368 	.word	0x08001368

08000da8 <_fwalk>:
 8000da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dac:	4688      	mov	r8, r1
 8000dae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000db2:	2600      	movs	r6, #0
 8000db4:	b914      	cbnz	r4, 8000dbc <_fwalk+0x14>
 8000db6:	4630      	mov	r0, r6
 8000db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dbc:	68a5      	ldr	r5, [r4, #8]
 8000dbe:	6867      	ldr	r7, [r4, #4]
 8000dc0:	3f01      	subs	r7, #1
 8000dc2:	d501      	bpl.n	8000dc8 <_fwalk+0x20>
 8000dc4:	6824      	ldr	r4, [r4, #0]
 8000dc6:	e7f5      	b.n	8000db4 <_fwalk+0xc>
 8000dc8:	89ab      	ldrh	r3, [r5, #12]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d906      	bls.n	8000ddc <_fwalk+0x34>
 8000dce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	d002      	beq.n	8000ddc <_fwalk+0x34>
 8000dd6:	4628      	mov	r0, r5
 8000dd8:	47c0      	blx	r8
 8000dda:	4306      	orrs	r6, r0
 8000ddc:	3568      	adds	r5, #104	; 0x68
 8000dde:	e7ef      	b.n	8000dc0 <_fwalk+0x18>

08000de0 <_fwalk_reent>:
 8000de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000de4:	4680      	mov	r8, r0
 8000de6:	4689      	mov	r9, r1
 8000de8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000dec:	2600      	movs	r6, #0
 8000dee:	b914      	cbnz	r4, 8000df6 <_fwalk_reent+0x16>
 8000df0:	4630      	mov	r0, r6
 8000df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000df6:	68a5      	ldr	r5, [r4, #8]
 8000df8:	6867      	ldr	r7, [r4, #4]
 8000dfa:	3f01      	subs	r7, #1
 8000dfc:	d501      	bpl.n	8000e02 <_fwalk_reent+0x22>
 8000dfe:	6824      	ldr	r4, [r4, #0]
 8000e00:	e7f5      	b.n	8000dee <_fwalk_reent+0xe>
 8000e02:	89ab      	ldrh	r3, [r5, #12]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d907      	bls.n	8000e18 <_fwalk_reent+0x38>
 8000e08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	d003      	beq.n	8000e18 <_fwalk_reent+0x38>
 8000e10:	4629      	mov	r1, r5
 8000e12:	4640      	mov	r0, r8
 8000e14:	47c8      	blx	r9
 8000e16:	4306      	orrs	r6, r0
 8000e18:	3568      	adds	r5, #104	; 0x68
 8000e1a:	e7ee      	b.n	8000dfa <_fwalk_reent+0x1a>

08000e1c <__swhatbuf_r>:
 8000e1c:	b570      	push	{r4, r5, r6, lr}
 8000e1e:	460e      	mov	r6, r1
 8000e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e24:	2900      	cmp	r1, #0
 8000e26:	b090      	sub	sp, #64	; 0x40
 8000e28:	4614      	mov	r4, r2
 8000e2a:	461d      	mov	r5, r3
 8000e2c:	da07      	bge.n	8000e3e <__swhatbuf_r+0x22>
 8000e2e:	2300      	movs	r3, #0
 8000e30:	602b      	str	r3, [r5, #0]
 8000e32:	89b3      	ldrh	r3, [r6, #12]
 8000e34:	061a      	lsls	r2, r3, #24
 8000e36:	d410      	bmi.n	8000e5a <__swhatbuf_r+0x3e>
 8000e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3c:	e00e      	b.n	8000e5c <__swhatbuf_r+0x40>
 8000e3e:	aa01      	add	r2, sp, #4
 8000e40:	f000 fa16 	bl	8001270 <_fstat_r>
 8000e44:	2800      	cmp	r0, #0
 8000e46:	dbf2      	blt.n	8000e2e <__swhatbuf_r+0x12>
 8000e48:	9a02      	ldr	r2, [sp, #8]
 8000e4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000e4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000e52:	425a      	negs	r2, r3
 8000e54:	415a      	adcs	r2, r3
 8000e56:	602a      	str	r2, [r5, #0]
 8000e58:	e7ee      	b.n	8000e38 <__swhatbuf_r+0x1c>
 8000e5a:	2340      	movs	r3, #64	; 0x40
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	6023      	str	r3, [r4, #0]
 8000e60:	b010      	add	sp, #64	; 0x40
 8000e62:	bd70      	pop	{r4, r5, r6, pc}

08000e64 <__smakebuf_r>:
 8000e64:	898b      	ldrh	r3, [r1, #12]
 8000e66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e68:	079d      	lsls	r5, r3, #30
 8000e6a:	4606      	mov	r6, r0
 8000e6c:	460c      	mov	r4, r1
 8000e6e:	d507      	bpl.n	8000e80 <__smakebuf_r+0x1c>
 8000e70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000e74:	6023      	str	r3, [r4, #0]
 8000e76:	6123      	str	r3, [r4, #16]
 8000e78:	2301      	movs	r3, #1
 8000e7a:	6163      	str	r3, [r4, #20]
 8000e7c:	b002      	add	sp, #8
 8000e7e:	bd70      	pop	{r4, r5, r6, pc}
 8000e80:	ab01      	add	r3, sp, #4
 8000e82:	466a      	mov	r2, sp
 8000e84:	f7ff ffca 	bl	8000e1c <__swhatbuf_r>
 8000e88:	9900      	ldr	r1, [sp, #0]
 8000e8a:	4605      	mov	r5, r0
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	f000 f887 	bl	8000fa0 <_malloc_r>
 8000e92:	b948      	cbnz	r0, 8000ea8 <__smakebuf_r+0x44>
 8000e94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e98:	059a      	lsls	r2, r3, #22
 8000e9a:	d4ef      	bmi.n	8000e7c <__smakebuf_r+0x18>
 8000e9c:	f023 0303 	bic.w	r3, r3, #3
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	81a3      	strh	r3, [r4, #12]
 8000ea6:	e7e3      	b.n	8000e70 <__smakebuf_r+0xc>
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <__smakebuf_r+0x7c>)
 8000eaa:	62b3      	str	r3, [r6, #40]	; 0x28
 8000eac:	89a3      	ldrh	r3, [r4, #12]
 8000eae:	6020      	str	r0, [r4, #0]
 8000eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb4:	81a3      	strh	r3, [r4, #12]
 8000eb6:	9b00      	ldr	r3, [sp, #0]
 8000eb8:	6163      	str	r3, [r4, #20]
 8000eba:	9b01      	ldr	r3, [sp, #4]
 8000ebc:	6120      	str	r0, [r4, #16]
 8000ebe:	b15b      	cbz	r3, 8000ed8 <__smakebuf_r+0x74>
 8000ec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	f000 f9e5 	bl	8001294 <_isatty_r>
 8000eca:	b128      	cbz	r0, 8000ed8 <__smakebuf_r+0x74>
 8000ecc:	89a3      	ldrh	r3, [r4, #12]
 8000ece:	f023 0303 	bic.w	r3, r3, #3
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	81a3      	strh	r3, [r4, #12]
 8000ed8:	89a3      	ldrh	r3, [r4, #12]
 8000eda:	431d      	orrs	r5, r3
 8000edc:	81a5      	strh	r5, [r4, #12]
 8000ede:	e7cd      	b.n	8000e7c <__smakebuf_r+0x18>
 8000ee0:	08000c51 	.word	0x08000c51

08000ee4 <malloc>:
 8000ee4:	4b02      	ldr	r3, [pc, #8]	; (8000ef0 <malloc+0xc>)
 8000ee6:	4601      	mov	r1, r0
 8000ee8:	6818      	ldr	r0, [r3, #0]
 8000eea:	f000 b859 	b.w	8000fa0 <_malloc_r>
 8000eee:	bf00      	nop
 8000ef0:	20000000 	.word	0x20000000

08000ef4 <memset>:
 8000ef4:	4402      	add	r2, r0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d100      	bne.n	8000efe <memset+0xa>
 8000efc:	4770      	bx	lr
 8000efe:	f803 1b01 	strb.w	r1, [r3], #1
 8000f02:	e7f9      	b.n	8000ef8 <memset+0x4>

08000f04 <_free_r>:
 8000f04:	b538      	push	{r3, r4, r5, lr}
 8000f06:	4605      	mov	r5, r0
 8000f08:	2900      	cmp	r1, #0
 8000f0a:	d045      	beq.n	8000f98 <_free_r+0x94>
 8000f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f10:	1f0c      	subs	r4, r1, #4
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	bfb8      	it	lt
 8000f16:	18e4      	addlt	r4, r4, r3
 8000f18:	f000 f9de 	bl	80012d8 <__malloc_lock>
 8000f1c:	4a1f      	ldr	r2, [pc, #124]	; (8000f9c <_free_r+0x98>)
 8000f1e:	6813      	ldr	r3, [r2, #0]
 8000f20:	4610      	mov	r0, r2
 8000f22:	b933      	cbnz	r3, 8000f32 <_free_r+0x2e>
 8000f24:	6063      	str	r3, [r4, #4]
 8000f26:	6014      	str	r4, [r2, #0]
 8000f28:	4628      	mov	r0, r5
 8000f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f2e:	f000 b9d4 	b.w	80012da <__malloc_unlock>
 8000f32:	42a3      	cmp	r3, r4
 8000f34:	d90c      	bls.n	8000f50 <_free_r+0x4c>
 8000f36:	6821      	ldr	r1, [r4, #0]
 8000f38:	1862      	adds	r2, r4, r1
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	bf04      	itt	eq
 8000f3e:	681a      	ldreq	r2, [r3, #0]
 8000f40:	685b      	ldreq	r3, [r3, #4]
 8000f42:	6063      	str	r3, [r4, #4]
 8000f44:	bf04      	itt	eq
 8000f46:	1852      	addeq	r2, r2, r1
 8000f48:	6022      	streq	r2, [r4, #0]
 8000f4a:	6004      	str	r4, [r0, #0]
 8000f4c:	e7ec      	b.n	8000f28 <_free_r+0x24>
 8000f4e:	4613      	mov	r3, r2
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	b10a      	cbz	r2, 8000f58 <_free_r+0x54>
 8000f54:	42a2      	cmp	r2, r4
 8000f56:	d9fa      	bls.n	8000f4e <_free_r+0x4a>
 8000f58:	6819      	ldr	r1, [r3, #0]
 8000f5a:	1858      	adds	r0, r3, r1
 8000f5c:	42a0      	cmp	r0, r4
 8000f5e:	d10b      	bne.n	8000f78 <_free_r+0x74>
 8000f60:	6820      	ldr	r0, [r4, #0]
 8000f62:	4401      	add	r1, r0
 8000f64:	1858      	adds	r0, r3, r1
 8000f66:	4282      	cmp	r2, r0
 8000f68:	6019      	str	r1, [r3, #0]
 8000f6a:	d1dd      	bne.n	8000f28 <_free_r+0x24>
 8000f6c:	6810      	ldr	r0, [r2, #0]
 8000f6e:	6852      	ldr	r2, [r2, #4]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	4401      	add	r1, r0
 8000f74:	6019      	str	r1, [r3, #0]
 8000f76:	e7d7      	b.n	8000f28 <_free_r+0x24>
 8000f78:	d902      	bls.n	8000f80 <_free_r+0x7c>
 8000f7a:	230c      	movs	r3, #12
 8000f7c:	602b      	str	r3, [r5, #0]
 8000f7e:	e7d3      	b.n	8000f28 <_free_r+0x24>
 8000f80:	6820      	ldr	r0, [r4, #0]
 8000f82:	1821      	adds	r1, r4, r0
 8000f84:	428a      	cmp	r2, r1
 8000f86:	bf04      	itt	eq
 8000f88:	6811      	ldreq	r1, [r2, #0]
 8000f8a:	6852      	ldreq	r2, [r2, #4]
 8000f8c:	6062      	str	r2, [r4, #4]
 8000f8e:	bf04      	itt	eq
 8000f90:	1809      	addeq	r1, r1, r0
 8000f92:	6021      	streq	r1, [r4, #0]
 8000f94:	605c      	str	r4, [r3, #4]
 8000f96:	e7c7      	b.n	8000f28 <_free_r+0x24>
 8000f98:	bd38      	pop	{r3, r4, r5, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000084 	.word	0x20000084

08000fa0 <_malloc_r>:
 8000fa0:	b570      	push	{r4, r5, r6, lr}
 8000fa2:	1ccd      	adds	r5, r1, #3
 8000fa4:	f025 0503 	bic.w	r5, r5, #3
 8000fa8:	3508      	adds	r5, #8
 8000faa:	2d0c      	cmp	r5, #12
 8000fac:	bf38      	it	cc
 8000fae:	250c      	movcc	r5, #12
 8000fb0:	2d00      	cmp	r5, #0
 8000fb2:	4606      	mov	r6, r0
 8000fb4:	db01      	blt.n	8000fba <_malloc_r+0x1a>
 8000fb6:	42a9      	cmp	r1, r5
 8000fb8:	d903      	bls.n	8000fc2 <_malloc_r+0x22>
 8000fba:	230c      	movs	r3, #12
 8000fbc:	6033      	str	r3, [r6, #0]
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	bd70      	pop	{r4, r5, r6, pc}
 8000fc2:	f000 f989 	bl	80012d8 <__malloc_lock>
 8000fc6:	4a23      	ldr	r2, [pc, #140]	; (8001054 <_malloc_r+0xb4>)
 8000fc8:	6814      	ldr	r4, [r2, #0]
 8000fca:	4621      	mov	r1, r4
 8000fcc:	b991      	cbnz	r1, 8000ff4 <_malloc_r+0x54>
 8000fce:	4c22      	ldr	r4, [pc, #136]	; (8001058 <_malloc_r+0xb8>)
 8000fd0:	6823      	ldr	r3, [r4, #0]
 8000fd2:	b91b      	cbnz	r3, 8000fdc <_malloc_r+0x3c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	f000 f8d5 	bl	8001184 <_sbrk_r>
 8000fda:	6020      	str	r0, [r4, #0]
 8000fdc:	4629      	mov	r1, r5
 8000fde:	4630      	mov	r0, r6
 8000fe0:	f000 f8d0 	bl	8001184 <_sbrk_r>
 8000fe4:	1c43      	adds	r3, r0, #1
 8000fe6:	d126      	bne.n	8001036 <_malloc_r+0x96>
 8000fe8:	230c      	movs	r3, #12
 8000fea:	6033      	str	r3, [r6, #0]
 8000fec:	4630      	mov	r0, r6
 8000fee:	f000 f974 	bl	80012da <__malloc_unlock>
 8000ff2:	e7e4      	b.n	8000fbe <_malloc_r+0x1e>
 8000ff4:	680b      	ldr	r3, [r1, #0]
 8000ff6:	1b5b      	subs	r3, r3, r5
 8000ff8:	d41a      	bmi.n	8001030 <_malloc_r+0x90>
 8000ffa:	2b0b      	cmp	r3, #11
 8000ffc:	d90f      	bls.n	800101e <_malloc_r+0x7e>
 8000ffe:	600b      	str	r3, [r1, #0]
 8001000:	50cd      	str	r5, [r1, r3]
 8001002:	18cc      	adds	r4, r1, r3
 8001004:	4630      	mov	r0, r6
 8001006:	f000 f968 	bl	80012da <__malloc_unlock>
 800100a:	f104 000b 	add.w	r0, r4, #11
 800100e:	1d23      	adds	r3, r4, #4
 8001010:	f020 0007 	bic.w	r0, r0, #7
 8001014:	1ac3      	subs	r3, r0, r3
 8001016:	d01b      	beq.n	8001050 <_malloc_r+0xb0>
 8001018:	425a      	negs	r2, r3
 800101a:	50e2      	str	r2, [r4, r3]
 800101c:	bd70      	pop	{r4, r5, r6, pc}
 800101e:	428c      	cmp	r4, r1
 8001020:	bf0d      	iteet	eq
 8001022:	6863      	ldreq	r3, [r4, #4]
 8001024:	684b      	ldrne	r3, [r1, #4]
 8001026:	6063      	strne	r3, [r4, #4]
 8001028:	6013      	streq	r3, [r2, #0]
 800102a:	bf18      	it	ne
 800102c:	460c      	movne	r4, r1
 800102e:	e7e9      	b.n	8001004 <_malloc_r+0x64>
 8001030:	460c      	mov	r4, r1
 8001032:	6849      	ldr	r1, [r1, #4]
 8001034:	e7ca      	b.n	8000fcc <_malloc_r+0x2c>
 8001036:	1cc4      	adds	r4, r0, #3
 8001038:	f024 0403 	bic.w	r4, r4, #3
 800103c:	42a0      	cmp	r0, r4
 800103e:	d005      	beq.n	800104c <_malloc_r+0xac>
 8001040:	1a21      	subs	r1, r4, r0
 8001042:	4630      	mov	r0, r6
 8001044:	f000 f89e 	bl	8001184 <_sbrk_r>
 8001048:	3001      	adds	r0, #1
 800104a:	d0cd      	beq.n	8000fe8 <_malloc_r+0x48>
 800104c:	6025      	str	r5, [r4, #0]
 800104e:	e7d9      	b.n	8001004 <_malloc_r+0x64>
 8001050:	bd70      	pop	{r4, r5, r6, pc}
 8001052:	bf00      	nop
 8001054:	20000084 	.word	0x20000084
 8001058:	20000088 	.word	0x20000088

0800105c <lflush>:
 800105c:	8983      	ldrh	r3, [r0, #12]
 800105e:	f003 0309 	and.w	r3, r3, #9
 8001062:	2b09      	cmp	r3, #9
 8001064:	d101      	bne.n	800106a <lflush+0xe>
 8001066:	f7ff bde1 	b.w	8000c2c <fflush>
 800106a:	2000      	movs	r0, #0
 800106c:	4770      	bx	lr
	...

08001070 <__srefill_r>:
 8001070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001072:	460c      	mov	r4, r1
 8001074:	4605      	mov	r5, r0
 8001076:	b118      	cbz	r0, 8001080 <__srefill_r+0x10>
 8001078:	6983      	ldr	r3, [r0, #24]
 800107a:	b90b      	cbnz	r3, 8001080 <__srefill_r+0x10>
 800107c:	f7ff fe28 	bl	8000cd0 <__sinit>
 8001080:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <__srefill_r+0x100>)
 8001082:	429c      	cmp	r4, r3
 8001084:	d10a      	bne.n	800109c <__srefill_r+0x2c>
 8001086:	686c      	ldr	r4, [r5, #4]
 8001088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800108c:	2300      	movs	r3, #0
 800108e:	6063      	str	r3, [r4, #4]
 8001090:	b293      	uxth	r3, r2
 8001092:	069e      	lsls	r6, r3, #26
 8001094:	d50c      	bpl.n	80010b0 <__srefill_r+0x40>
 8001096:	f04f 30ff 	mov.w	r0, #4294967295
 800109a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800109c:	4b35      	ldr	r3, [pc, #212]	; (8001174 <__srefill_r+0x104>)
 800109e:	429c      	cmp	r4, r3
 80010a0:	d101      	bne.n	80010a6 <__srefill_r+0x36>
 80010a2:	68ac      	ldr	r4, [r5, #8]
 80010a4:	e7f0      	b.n	8001088 <__srefill_r+0x18>
 80010a6:	4b34      	ldr	r3, [pc, #208]	; (8001178 <__srefill_r+0x108>)
 80010a8:	429c      	cmp	r4, r3
 80010aa:	bf08      	it	eq
 80010ac:	68ec      	ldreq	r4, [r5, #12]
 80010ae:	e7eb      	b.n	8001088 <__srefill_r+0x18>
 80010b0:	0758      	lsls	r0, r3, #29
 80010b2:	d448      	bmi.n	8001146 <__srefill_r+0xd6>
 80010b4:	06d9      	lsls	r1, r3, #27
 80010b6:	d405      	bmi.n	80010c4 <__srefill_r+0x54>
 80010b8:	2309      	movs	r3, #9
 80010ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010be:	602b      	str	r3, [r5, #0]
 80010c0:	81a2      	strh	r2, [r4, #12]
 80010c2:	e7e8      	b.n	8001096 <__srefill_r+0x26>
 80010c4:	071a      	lsls	r2, r3, #28
 80010c6:	d50b      	bpl.n	80010e0 <__srefill_r+0x70>
 80010c8:	4621      	mov	r1, r4
 80010ca:	4628      	mov	r0, r5
 80010cc:	f7ff fd84 	bl	8000bd8 <_fflush_r>
 80010d0:	2800      	cmp	r0, #0
 80010d2:	d1e0      	bne.n	8001096 <__srefill_r+0x26>
 80010d4:	89a3      	ldrh	r3, [r4, #12]
 80010d6:	60a0      	str	r0, [r4, #8]
 80010d8:	f023 0308 	bic.w	r3, r3, #8
 80010dc:	81a3      	strh	r3, [r4, #12]
 80010de:	61a0      	str	r0, [r4, #24]
 80010e0:	89a3      	ldrh	r3, [r4, #12]
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	81a3      	strh	r3, [r4, #12]
 80010e8:	6923      	ldr	r3, [r4, #16]
 80010ea:	b91b      	cbnz	r3, 80010f4 <__srefill_r+0x84>
 80010ec:	4621      	mov	r1, r4
 80010ee:	4628      	mov	r0, r5
 80010f0:	f7ff feb8 	bl	8000e64 <__smakebuf_r>
 80010f4:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80010f8:	b2be      	uxth	r6, r7
 80010fa:	07b3      	lsls	r3, r6, #30
 80010fc:	d00f      	beq.n	800111e <__srefill_r+0xae>
 80010fe:	2301      	movs	r3, #1
 8001100:	81a3      	strh	r3, [r4, #12]
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <__srefill_r+0x10c>)
 8001104:	491e      	ldr	r1, [pc, #120]	; (8001180 <__srefill_r+0x110>)
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	f006 0609 	and.w	r6, r6, #9
 800110c:	f7ff fe4c 	bl	8000da8 <_fwalk>
 8001110:	2e09      	cmp	r6, #9
 8001112:	81a7      	strh	r7, [r4, #12]
 8001114:	d103      	bne.n	800111e <__srefill_r+0xae>
 8001116:	4621      	mov	r1, r4
 8001118:	4628      	mov	r0, r5
 800111a:	f7ff fcd5 	bl	8000ac8 <__sflush_r>
 800111e:	6922      	ldr	r2, [r4, #16]
 8001120:	6022      	str	r2, [r4, #0]
 8001122:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8001124:	6963      	ldr	r3, [r4, #20]
 8001126:	6a21      	ldr	r1, [r4, #32]
 8001128:	4628      	mov	r0, r5
 800112a:	47b0      	blx	r6
 800112c:	2800      	cmp	r0, #0
 800112e:	6060      	str	r0, [r4, #4]
 8001130:	dc1c      	bgt.n	800116c <__srefill_r+0xfc>
 8001132:	89a3      	ldrh	r3, [r4, #12]
 8001134:	bf17      	itett	ne
 8001136:	2200      	movne	r2, #0
 8001138:	f043 0320 	orreq.w	r3, r3, #32
 800113c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8001140:	6062      	strne	r2, [r4, #4]
 8001142:	81a3      	strh	r3, [r4, #12]
 8001144:	e7a7      	b.n	8001096 <__srefill_r+0x26>
 8001146:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001148:	2900      	cmp	r1, #0
 800114a:	d0cd      	beq.n	80010e8 <__srefill_r+0x78>
 800114c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001150:	4299      	cmp	r1, r3
 8001152:	d002      	beq.n	800115a <__srefill_r+0xea>
 8001154:	4628      	mov	r0, r5
 8001156:	f7ff fed5 	bl	8000f04 <_free_r>
 800115a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800115c:	6063      	str	r3, [r4, #4]
 800115e:	2000      	movs	r0, #0
 8001160:	6360      	str	r0, [r4, #52]	; 0x34
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0c0      	beq.n	80010e8 <__srefill_r+0x78>
 8001166:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001168:	6023      	str	r3, [r4, #0]
 800116a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800116c:	2000      	movs	r0, #0
 800116e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001170:	0800138c 	.word	0x0800138c
 8001174:	080013ac 	.word	0x080013ac
 8001178:	0800136c 	.word	0x0800136c
 800117c:	08001368 	.word	0x08001368
 8001180:	0800105d 	.word	0x0800105d

08001184 <_sbrk_r>:
 8001184:	b538      	push	{r3, r4, r5, lr}
 8001186:	4c06      	ldr	r4, [pc, #24]	; (80011a0 <_sbrk_r+0x1c>)
 8001188:	2300      	movs	r3, #0
 800118a:	4605      	mov	r5, r0
 800118c:	4608      	mov	r0, r1
 800118e:	6023      	str	r3, [r4, #0]
 8001190:	f7ff f9da 	bl	8000548 <_sbrk>
 8001194:	1c43      	adds	r3, r0, #1
 8001196:	d102      	bne.n	800119e <_sbrk_r+0x1a>
 8001198:	6823      	ldr	r3, [r4, #0]
 800119a:	b103      	cbz	r3, 800119e <_sbrk_r+0x1a>
 800119c:	602b      	str	r3, [r5, #0]
 800119e:	bd38      	pop	{r3, r4, r5, pc}
 80011a0:	2000008c 	.word	0x2000008c

080011a4 <__sread>:
 80011a4:	b510      	push	{r4, lr}
 80011a6:	460c      	mov	r4, r1
 80011a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011ac:	f000 f896 	bl	80012dc <_read_r>
 80011b0:	2800      	cmp	r0, #0
 80011b2:	bfab      	itete	ge
 80011b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80011b6:	89a3      	ldrhlt	r3, [r4, #12]
 80011b8:	181b      	addge	r3, r3, r0
 80011ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80011be:	bfac      	ite	ge
 80011c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80011c2:	81a3      	strhlt	r3, [r4, #12]
 80011c4:	bd10      	pop	{r4, pc}

080011c6 <__swrite>:
 80011c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011ca:	461f      	mov	r7, r3
 80011cc:	898b      	ldrh	r3, [r1, #12]
 80011ce:	05db      	lsls	r3, r3, #23
 80011d0:	4605      	mov	r5, r0
 80011d2:	460c      	mov	r4, r1
 80011d4:	4616      	mov	r6, r2
 80011d6:	d505      	bpl.n	80011e4 <__swrite+0x1e>
 80011d8:	2302      	movs	r3, #2
 80011da:	2200      	movs	r2, #0
 80011dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011e0:	f000 f868 	bl	80012b4 <_lseek_r>
 80011e4:	89a3      	ldrh	r3, [r4, #12]
 80011e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80011ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011ee:	81a3      	strh	r3, [r4, #12]
 80011f0:	4632      	mov	r2, r6
 80011f2:	463b      	mov	r3, r7
 80011f4:	4628      	mov	r0, r5
 80011f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011fa:	f000 b817 	b.w	800122c <_write_r>

080011fe <__sseek>:
 80011fe:	b510      	push	{r4, lr}
 8001200:	460c      	mov	r4, r1
 8001202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001206:	f000 f855 	bl	80012b4 <_lseek_r>
 800120a:	1c43      	adds	r3, r0, #1
 800120c:	89a3      	ldrh	r3, [r4, #12]
 800120e:	bf15      	itete	ne
 8001210:	6560      	strne	r0, [r4, #84]	; 0x54
 8001212:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001216:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800121a:	81a3      	strheq	r3, [r4, #12]
 800121c:	bf18      	it	ne
 800121e:	81a3      	strhne	r3, [r4, #12]
 8001220:	bd10      	pop	{r4, pc}

08001222 <__sclose>:
 8001222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001226:	f000 b813 	b.w	8001250 <_close_r>
	...

0800122c <_write_r>:
 800122c:	b538      	push	{r3, r4, r5, lr}
 800122e:	4c07      	ldr	r4, [pc, #28]	; (800124c <_write_r+0x20>)
 8001230:	4605      	mov	r5, r0
 8001232:	4608      	mov	r0, r1
 8001234:	4611      	mov	r1, r2
 8001236:	2200      	movs	r2, #0
 8001238:	6022      	str	r2, [r4, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	f7ff f94e 	bl	80004dc <_write>
 8001240:	1c43      	adds	r3, r0, #1
 8001242:	d102      	bne.n	800124a <_write_r+0x1e>
 8001244:	6823      	ldr	r3, [r4, #0]
 8001246:	b103      	cbz	r3, 800124a <_write_r+0x1e>
 8001248:	602b      	str	r3, [r5, #0]
 800124a:	bd38      	pop	{r3, r4, r5, pc}
 800124c:	2000008c 	.word	0x2000008c

08001250 <_close_r>:
 8001250:	b538      	push	{r3, r4, r5, lr}
 8001252:	4c06      	ldr	r4, [pc, #24]	; (800126c <_close_r+0x1c>)
 8001254:	2300      	movs	r3, #0
 8001256:	4605      	mov	r5, r0
 8001258:	4608      	mov	r0, r1
 800125a:	6023      	str	r3, [r4, #0]
 800125c:	f7ff f994 	bl	8000588 <_close>
 8001260:	1c43      	adds	r3, r0, #1
 8001262:	d102      	bne.n	800126a <_close_r+0x1a>
 8001264:	6823      	ldr	r3, [r4, #0]
 8001266:	b103      	cbz	r3, 800126a <_close_r+0x1a>
 8001268:	602b      	str	r3, [r5, #0]
 800126a:	bd38      	pop	{r3, r4, r5, pc}
 800126c:	2000008c 	.word	0x2000008c

08001270 <_fstat_r>:
 8001270:	b538      	push	{r3, r4, r5, lr}
 8001272:	4c07      	ldr	r4, [pc, #28]	; (8001290 <_fstat_r+0x20>)
 8001274:	2300      	movs	r3, #0
 8001276:	4605      	mov	r5, r0
 8001278:	4608      	mov	r0, r1
 800127a:	4611      	mov	r1, r2
 800127c:	6023      	str	r3, [r4, #0]
 800127e:	f7ff f995 	bl	80005ac <_fstat>
 8001282:	1c43      	adds	r3, r0, #1
 8001284:	d102      	bne.n	800128c <_fstat_r+0x1c>
 8001286:	6823      	ldr	r3, [r4, #0]
 8001288:	b103      	cbz	r3, 800128c <_fstat_r+0x1c>
 800128a:	602b      	str	r3, [r5, #0]
 800128c:	bd38      	pop	{r3, r4, r5, pc}
 800128e:	bf00      	nop
 8001290:	2000008c 	.word	0x2000008c

08001294 <_isatty_r>:
 8001294:	b538      	push	{r3, r4, r5, lr}
 8001296:	4c06      	ldr	r4, [pc, #24]	; (80012b0 <_isatty_r+0x1c>)
 8001298:	2300      	movs	r3, #0
 800129a:	4605      	mov	r5, r0
 800129c:	4608      	mov	r0, r1
 800129e:	6023      	str	r3, [r4, #0]
 80012a0:	f7ff f996 	bl	80005d0 <_isatty>
 80012a4:	1c43      	adds	r3, r0, #1
 80012a6:	d102      	bne.n	80012ae <_isatty_r+0x1a>
 80012a8:	6823      	ldr	r3, [r4, #0]
 80012aa:	b103      	cbz	r3, 80012ae <_isatty_r+0x1a>
 80012ac:	602b      	str	r3, [r5, #0]
 80012ae:	bd38      	pop	{r3, r4, r5, pc}
 80012b0:	2000008c 	.word	0x2000008c

080012b4 <_lseek_r>:
 80012b4:	b538      	push	{r3, r4, r5, lr}
 80012b6:	4c07      	ldr	r4, [pc, #28]	; (80012d4 <_lseek_r+0x20>)
 80012b8:	4605      	mov	r5, r0
 80012ba:	4608      	mov	r0, r1
 80012bc:	4611      	mov	r1, r2
 80012be:	2200      	movs	r2, #0
 80012c0:	6022      	str	r2, [r4, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	f7ff f994 	bl	80005f0 <_lseek>
 80012c8:	1c43      	adds	r3, r0, #1
 80012ca:	d102      	bne.n	80012d2 <_lseek_r+0x1e>
 80012cc:	6823      	ldr	r3, [r4, #0]
 80012ce:	b103      	cbz	r3, 80012d2 <_lseek_r+0x1e>
 80012d0:	602b      	str	r3, [r5, #0]
 80012d2:	bd38      	pop	{r3, r4, r5, pc}
 80012d4:	2000008c 	.word	0x2000008c

080012d8 <__malloc_lock>:
 80012d8:	4770      	bx	lr

080012da <__malloc_unlock>:
 80012da:	4770      	bx	lr

080012dc <_read_r>:
 80012dc:	b538      	push	{r3, r4, r5, lr}
 80012de:	4c07      	ldr	r4, [pc, #28]	; (80012fc <_read_r+0x20>)
 80012e0:	4605      	mov	r5, r0
 80012e2:	4608      	mov	r0, r1
 80012e4:	4611      	mov	r1, r2
 80012e6:	2200      	movs	r2, #0
 80012e8:	6022      	str	r2, [r4, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	f7ff f916 	bl	800051c <_read>
 80012f0:	1c43      	adds	r3, r0, #1
 80012f2:	d102      	bne.n	80012fa <_read_r+0x1e>
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	b103      	cbz	r3, 80012fa <_read_r+0x1e>
 80012f8:	602b      	str	r3, [r5, #0]
 80012fa:	bd38      	pop	{r3, r4, r5, pc}
 80012fc:	2000008c 	.word	0x2000008c

08001300 <_init>:
 8001300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001302:	bf00      	nop
 8001304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001306:	bc08      	pop	{r3}
 8001308:	469e      	mov	lr, r3
 800130a:	4770      	bx	lr

0800130c <_fini>:
 800130c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800130e:	bf00      	nop
 8001310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001312:	bc08      	pop	{r3}
 8001314:	469e      	mov	lr, r3
 8001316:	4770      	bx	lr

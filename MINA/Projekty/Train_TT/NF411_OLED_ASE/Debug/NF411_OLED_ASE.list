
NF411_OLED_ASE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008440  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010c8  080085e0  080085e0  000185e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080096a8  080096a8  000196a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080096b0  080096b0  000196b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080096b4  080096b4  000196b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000798  20000000  080096b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004b0  20000798  08009e50  00020798  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000c48  08009e50  00020c48  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020798  2**0
                  CONTENTS, READONLY
 10 .debug_info   000063cd  00000000  00000000  000207c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000128e  00000000  00000000  00026b95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000003b8  00000000  00000000  00027e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002b8  00000000  00000000  000281e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001fba  00000000  00000000  00028498  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000017b3  00000000  00000000  0002a452  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002bc05  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001f08  00000000  00000000  0002bc84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000798 	.word	0x20000798
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080085c8 	.word	0x080085c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000079c 	.word	0x2000079c
 80001dc:	080085c8 	.word	0x080085c8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_uldivmod>:
 8000c50:	b953      	cbnz	r3, 8000c68 <__aeabi_uldivmod+0x18>
 8000c52:	b94a      	cbnz	r2, 8000c68 <__aeabi_uldivmod+0x18>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bf08      	it	eq
 8000c58:	2800      	cmpeq	r0, #0
 8000c5a:	bf1c      	itt	ne
 8000c5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c60:	f04f 30ff 	movne.w	r0, #4294967295
 8000c64:	f000 b97a 	b.w	8000f5c <__aeabi_idiv0>
 8000c68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c70:	f000 f806 	bl	8000c80 <__udivmoddi4>
 8000c74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7c:	b004      	add	sp, #16
 8000c7e:	4770      	bx	lr

08000c80 <__udivmoddi4>:
 8000c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c84:	468c      	mov	ip, r1
 8000c86:	460d      	mov	r5, r1
 8000c88:	4604      	mov	r4, r0
 8000c8a:	9e08      	ldr	r6, [sp, #32]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d151      	bne.n	8000d34 <__udivmoddi4+0xb4>
 8000c90:	428a      	cmp	r2, r1
 8000c92:	4617      	mov	r7, r2
 8000c94:	d96d      	bls.n	8000d72 <__udivmoddi4+0xf2>
 8000c96:	fab2 fe82 	clz	lr, r2
 8000c9a:	f1be 0f00 	cmp.w	lr, #0
 8000c9e:	d00b      	beq.n	8000cb8 <__udivmoddi4+0x38>
 8000ca0:	f1ce 0c20 	rsb	ip, lr, #32
 8000ca4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000ca8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cac:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cb0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cb4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cb8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cbc:	0c25      	lsrs	r5, r4, #16
 8000cbe:	fbbc f8fa 	udiv	r8, ip, sl
 8000cc2:	fa1f f987 	uxth.w	r9, r7
 8000cc6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cca:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cce:	fb08 f309 	mul.w	r3, r8, r9
 8000cd2:	42ab      	cmp	r3, r5
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x6c>
 8000cd6:	19ed      	adds	r5, r5, r7
 8000cd8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000cdc:	f080 8123 	bcs.w	8000f26 <__udivmoddi4+0x2a6>
 8000ce0:	42ab      	cmp	r3, r5
 8000ce2:	f240 8120 	bls.w	8000f26 <__udivmoddi4+0x2a6>
 8000ce6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cea:	443d      	add	r5, r7
 8000cec:	1aed      	subs	r5, r5, r3
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000cf4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000cf8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cfc:	fb00 f909 	mul.w	r9, r0, r9
 8000d00:	45a1      	cmp	r9, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x98>
 8000d04:	19e4      	adds	r4, r4, r7
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	f080 810a 	bcs.w	8000f22 <__udivmoddi4+0x2a2>
 8000d0e:	45a1      	cmp	r9, r4
 8000d10:	f240 8107 	bls.w	8000f22 <__udivmoddi4+0x2a2>
 8000d14:	3802      	subs	r0, #2
 8000d16:	443c      	add	r4, r7
 8000d18:	eba4 0409 	sub.w	r4, r4, r9
 8000d1c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d20:	2100      	movs	r1, #0
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	d061      	beq.n	8000dea <__udivmoddi4+0x16a>
 8000d26:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	6034      	str	r4, [r6, #0]
 8000d2e:	6073      	str	r3, [r6, #4]
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	428b      	cmp	r3, r1
 8000d36:	d907      	bls.n	8000d48 <__udivmoddi4+0xc8>
 8000d38:	2e00      	cmp	r6, #0
 8000d3a:	d054      	beq.n	8000de6 <__udivmoddi4+0x166>
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d42:	4608      	mov	r0, r1
 8000d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d48:	fab3 f183 	clz	r1, r3
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	f040 808e 	bne.w	8000e6e <__udivmoddi4+0x1ee>
 8000d52:	42ab      	cmp	r3, r5
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xdc>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80fa 	bhi.w	8000f50 <__udivmoddi4+0x2d0>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	46ac      	mov	ip, r5
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d03f      	beq.n	8000dea <__udivmoddi4+0x16a>
 8000d6a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	b912      	cbnz	r2, 8000d7a <__udivmoddi4+0xfa>
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d7a:	fab7 fe87 	clz	lr, r7
 8000d7e:	f1be 0f00 	cmp.w	lr, #0
 8000d82:	d134      	bne.n	8000dee <__udivmoddi4+0x16e>
 8000d84:	1beb      	subs	r3, r5, r7
 8000d86:	0c3a      	lsrs	r2, r7, #16
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d92:	0c25      	lsrs	r5, r4, #16
 8000d94:	fb02 3318 	mls	r3, r2, r8, r3
 8000d98:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9c:	fb0c f308 	mul.w	r3, ip, r8
 8000da0:	42ab      	cmp	r3, r5
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x134>
 8000da4:	19ed      	adds	r5, r5, r7
 8000da6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x132>
 8000dac:	42ab      	cmp	r3, r5
 8000dae:	f200 80d1 	bhi.w	8000f54 <__udivmoddi4+0x2d4>
 8000db2:	4680      	mov	r8, r0
 8000db4:	1aed      	subs	r5, r5, r3
 8000db6:	b2a3      	uxth	r3, r4
 8000db8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dbc:	fb02 5510 	mls	r5, r2, r0, r5
 8000dc0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000dc4:	fb0c fc00 	mul.w	ip, ip, r0
 8000dc8:	45a4      	cmp	ip, r4
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x15c>
 8000dcc:	19e4      	adds	r4, r4, r7
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x15a>
 8000dd4:	45a4      	cmp	ip, r4
 8000dd6:	f200 80b8 	bhi.w	8000f4a <__udivmoddi4+0x2ca>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	eba4 040c 	sub.w	r4, r4, ip
 8000de0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de4:	e79d      	b.n	8000d22 <__udivmoddi4+0xa2>
 8000de6:	4631      	mov	r1, r6
 8000de8:	4630      	mov	r0, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	f1ce 0420 	rsb	r4, lr, #32
 8000df2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000df6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dfa:	fa20 f804 	lsr.w	r8, r0, r4
 8000dfe:	0c3a      	lsrs	r2, r7, #16
 8000e00:	fa25 f404 	lsr.w	r4, r5, r4
 8000e04:	ea48 0803 	orr.w	r8, r8, r3
 8000e08:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e0c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e10:	fb02 4411 	mls	r4, r2, r1, r4
 8000e14:	fa1f fc87 	uxth.w	ip, r7
 8000e18:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e1c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e20:	42ab      	cmp	r3, r5
 8000e22:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e26:	d909      	bls.n	8000e3c <__udivmoddi4+0x1bc>
 8000e28:	19ed      	adds	r5, r5, r7
 8000e2a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e2e:	f080 808a 	bcs.w	8000f46 <__udivmoddi4+0x2c6>
 8000e32:	42ab      	cmp	r3, r5
 8000e34:	f240 8087 	bls.w	8000f46 <__udivmoddi4+0x2c6>
 8000e38:	3902      	subs	r1, #2
 8000e3a:	443d      	add	r5, r7
 8000e3c:	1aeb      	subs	r3, r5, r3
 8000e3e:	fa1f f588 	uxth.w	r5, r8
 8000e42:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e46:	fb02 3310 	mls	r3, r2, r0, r3
 8000e4a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e4e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e52:	42ab      	cmp	r3, r5
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x1e6>
 8000e56:	19ed      	adds	r5, r5, r7
 8000e58:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5c:	d26f      	bcs.n	8000f3e <__udivmoddi4+0x2be>
 8000e5e:	42ab      	cmp	r3, r5
 8000e60:	d96d      	bls.n	8000f3e <__udivmoddi4+0x2be>
 8000e62:	3802      	subs	r0, #2
 8000e64:	443d      	add	r5, r7
 8000e66:	1aeb      	subs	r3, r5, r3
 8000e68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6c:	e78f      	b.n	8000d8e <__udivmoddi4+0x10e>
 8000e6e:	f1c1 0720 	rsb	r7, r1, #32
 8000e72:	fa22 f807 	lsr.w	r8, r2, r7
 8000e76:	408b      	lsls	r3, r1
 8000e78:	fa05 f401 	lsl.w	r4, r5, r1
 8000e7c:	ea48 0303 	orr.w	r3, r8, r3
 8000e80:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e84:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e8e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e92:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e96:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e9a:	fa1f f883 	uxth.w	r8, r3
 8000e9e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ea2:	fb09 f408 	mul.w	r4, r9, r8
 8000ea6:	42ac      	cmp	r4, r5
 8000ea8:	fa02 f201 	lsl.w	r2, r2, r1
 8000eac:	fa00 fa01 	lsl.w	sl, r0, r1
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x244>
 8000eb2:	18ed      	adds	r5, r5, r3
 8000eb4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb8:	d243      	bcs.n	8000f42 <__udivmoddi4+0x2c2>
 8000eba:	42ac      	cmp	r4, r5
 8000ebc:	d941      	bls.n	8000f42 <__udivmoddi4+0x2c2>
 8000ebe:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec2:	441d      	add	r5, r3
 8000ec4:	1b2d      	subs	r5, r5, r4
 8000ec6:	fa1f fe8e 	uxth.w	lr, lr
 8000eca:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ece:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ed2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ed6:	fb00 f808 	mul.w	r8, r0, r8
 8000eda:	45a0      	cmp	r8, r4
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x26e>
 8000ede:	18e4      	adds	r4, r4, r3
 8000ee0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ee4:	d229      	bcs.n	8000f3a <__udivmoddi4+0x2ba>
 8000ee6:	45a0      	cmp	r8, r4
 8000ee8:	d927      	bls.n	8000f3a <__udivmoddi4+0x2ba>
 8000eea:	3802      	subs	r0, #2
 8000eec:	441c      	add	r4, r3
 8000eee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef2:	eba4 0408 	sub.w	r4, r4, r8
 8000ef6:	fba0 8902 	umull	r8, r9, r0, r2
 8000efa:	454c      	cmp	r4, r9
 8000efc:	46c6      	mov	lr, r8
 8000efe:	464d      	mov	r5, r9
 8000f00:	d315      	bcc.n	8000f2e <__udivmoddi4+0x2ae>
 8000f02:	d012      	beq.n	8000f2a <__udivmoddi4+0x2aa>
 8000f04:	b156      	cbz	r6, 8000f1c <__udivmoddi4+0x29c>
 8000f06:	ebba 030e 	subs.w	r3, sl, lr
 8000f0a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f12:	40cb      	lsrs	r3, r1
 8000f14:	431f      	orrs	r7, r3
 8000f16:	40cc      	lsrs	r4, r1
 8000f18:	6037      	str	r7, [r6, #0]
 8000f1a:	6074      	str	r4, [r6, #4]
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f22:	4618      	mov	r0, r3
 8000f24:	e6f8      	b.n	8000d18 <__udivmoddi4+0x98>
 8000f26:	4690      	mov	r8, r2
 8000f28:	e6e0      	b.n	8000cec <__udivmoddi4+0x6c>
 8000f2a:	45c2      	cmp	sl, r8
 8000f2c:	d2ea      	bcs.n	8000f04 <__udivmoddi4+0x284>
 8000f2e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f32:	eb69 0503 	sbc.w	r5, r9, r3
 8000f36:	3801      	subs	r0, #1
 8000f38:	e7e4      	b.n	8000f04 <__udivmoddi4+0x284>
 8000f3a:	4628      	mov	r0, r5
 8000f3c:	e7d7      	b.n	8000eee <__udivmoddi4+0x26e>
 8000f3e:	4640      	mov	r0, r8
 8000f40:	e791      	b.n	8000e66 <__udivmoddi4+0x1e6>
 8000f42:	4681      	mov	r9, r0
 8000f44:	e7be      	b.n	8000ec4 <__udivmoddi4+0x244>
 8000f46:	4601      	mov	r1, r0
 8000f48:	e778      	b.n	8000e3c <__udivmoddi4+0x1bc>
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	443c      	add	r4, r7
 8000f4e:	e745      	b.n	8000ddc <__udivmoddi4+0x15c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e708      	b.n	8000d66 <__udivmoddi4+0xe6>
 8000f54:	f1a8 0802 	sub.w	r8, r8, #2
 8000f58:	443d      	add	r5, r7
 8000f5a:	e72b      	b.n	8000db4 <__udivmoddi4+0x134>

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <SetHiLevelDisp>:
static int pixelsWidth, pixelsHeight;
static int textX = 0, textY = 0;

void SetHiLevelDisp(int pixWidth, int pixHeight,
    void *ptrDrawPixel, void *ptrSetByte, void *ptrSetBytes)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	603b      	str	r3, [r7, #0]
  my_DrawPixel = ptrDrawPixel;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <SetHiLevelDisp+0x38>)
 8000f72:	6013      	str	r3, [r2, #0]
  my_SetByte = ptrSetByte;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	4a09      	ldr	r2, [pc, #36]	; (8000f9c <SetHiLevelDisp+0x3c>)
 8000f78:	6013      	str	r3, [r2, #0]
  my_SetBytes = ptrSetBytes;
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <SetHiLevelDisp+0x40>)
 8000f7e:	6013      	str	r3, [r2, #0]

  pixelsWidth = pixWidth;
 8000f80:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <SetHiLevelDisp+0x44>)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6013      	str	r3, [r2, #0]
  pixelsHeight = pixHeight;
 8000f86:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <SetHiLevelDisp+0x48>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	200007b4 	.word	0x200007b4
 8000f9c:	200007b8 	.word	0x200007b8
 8000fa0:	200007bc 	.word	0x200007bc
 8000fa4:	200007c0 	.word	0x200007c0
 8000fa8:	200007c4 	.word	0x200007c4

08000fac <DISP_SetFont>:

static uint8_t *bpFontBase = NULL;
static FONT_Header_t *ptrFontHeader = NULL;

bool DISP_SetFont(eFontsAvailable fnt)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  switch(fnt)
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d80a      	bhi.n	8000fd4 <DISP_SetFont+0x28>
 8000fbe:	a201      	add	r2, pc, #4	; (adr r2, 8000fc4 <DISP_SetFont+0x18>)
 8000fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc4:	08000fe3 	.word	0x08000fe3
 8000fc8:	08000ff1 	.word	0x08000ff1
 8000fcc:	08000fff 	.word	0x08000fff
 8000fd0:	0800100d 	.word	0x0800100d
  {
    case font_atari_8x8:
    default:
      ptrFontHeader = (FONT_Header_t *)font_atari_8x8_data;
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <DISP_SetFont+0x7c>)
 8000fd6:	4a15      	ldr	r2, [pc, #84]	; (800102c <DISP_SetFont+0x80>)
 8000fd8:	601a      	str	r2, [r3, #0]

      //TODO select start of char defines, fefaultne ZA hlavickou
      bpFontBase = font_atari_8x8_data + sizeof(FONT_Header_t);
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <DISP_SetFont+0x84>)
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <DISP_SetFont+0x88>)
 8000fde:	601a      	str	r2, [r3, #0]
      break;
 8000fe0:	e01b      	b.n	800101a <DISP_SetFont+0x6e>
    case font_thin_8x8:
      ptrFontHeader = (FONT_Header_t *)font_thin_8x8_data;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <DISP_SetFont+0x7c>)
 8000fe4:	4a14      	ldr	r2, [pc, #80]	; (8001038 <DISP_SetFont+0x8c>)
 8000fe6:	601a      	str	r2, [r3, #0]
      bpFontBase = font_thin_8x8_data + sizeof(FONT_Header_t);
 8000fe8:	4a14      	ldr	r2, [pc, #80]	; (800103c <DISP_SetFont+0x90>)
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <DISP_SetFont+0x88>)
 8000fec:	601a      	str	r2, [r3, #0]
      break;
 8000fee:	e014      	b.n	800101a <DISP_SetFont+0x6e>
    case font_system_5x7:
      ptrFontHeader = (FONT_Header_t *)font_system_5x7_data;
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <DISP_SetFont+0x7c>)
 8000ff2:	4a13      	ldr	r2, [pc, #76]	; (8001040 <DISP_SetFont+0x94>)
 8000ff4:	601a      	str	r2, [r3, #0]
      bpFontBase = font_system_5x7_data + sizeof(FONT_Header_t);
 8000ff6:	4a13      	ldr	r2, [pc, #76]	; (8001044 <DISP_SetFont+0x98>)
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <DISP_SetFont+0x88>)
 8000ffa:	601a      	str	r2, [r3, #0]
      break;
 8000ffc:	e00d      	b.n	800101a <DISP_SetFont+0x6e>
    case font_wendy_3x5:
      ptrFontHeader = (FONT_Header_t *)font_wendy_3x5_data;
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <DISP_SetFont+0x7c>)
 8001000:	4a11      	ldr	r2, [pc, #68]	; (8001048 <DISP_SetFont+0x9c>)
 8001002:	601a      	str	r2, [r3, #0]
      bpFontBase = font_wendy_3x5_data + sizeof(FONT_Header_t);
 8001004:	4a11      	ldr	r2, [pc, #68]	; (800104c <DISP_SetFont+0xa0>)
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <DISP_SetFont+0x88>)
 8001008:	601a      	str	r2, [r3, #0]
      break;
 800100a:	e006      	b.n	800101a <DISP_SetFont+0x6e>
    case font_newbasic_3x6:
      ptrFontHeader = (FONT_Header_t *)font_newbasic_3x6_data;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <DISP_SetFont+0x7c>)
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <DISP_SetFont+0xa4>)
 8001010:	601a      	str	r2, [r3, #0]
      bpFontBase = font_newbasic_3x6_data + sizeof(FONT_Header_t);
 8001012:	4a10      	ldr	r2, [pc, #64]	; (8001054 <DISP_SetFont+0xa8>)
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <DISP_SetFont+0x88>)
 8001016:	601a      	str	r2, [r3, #0]
      break;
 8001018:	bf00      	nop
  }

  return true;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	200007d4 	.word	0x200007d4
 800102c:	080086a8 	.word	0x080086a8
 8001030:	080086ae 	.word	0x080086ae
 8001034:	200007d0 	.word	0x200007d0
 8001038:	08008dc4 	.word	0x08008dc4
 800103c:	08008dca 	.word	0x08008dca
 8001040:	08008bd8 	.word	0x08008bd8
 8001044:	08008bde 	.word	0x08008bde
 8001048:	080090c4 	.word	0x080090c4
 800104c:	080090ca 	.word	0x080090ca
 8001050:	08008ab0 	.word	0x08008ab0
 8001054:	08008ab6 	.word	0x08008ab6

08001058 <DISP_GotoXY>:
{
  return pixelsHeight / ptrFontHeader->height;
}

void DISP_GotoXY(int x, int y)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  textX = x;
 8001062:	4a06      	ldr	r2, [pc, #24]	; (800107c <DISP_GotoXY+0x24>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6013      	str	r3, [r2, #0]
  textY = y;
 8001068:	4a05      	ldr	r2, [pc, #20]	; (8001080 <DISP_GotoXY+0x28>)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	6013      	str	r3, [r2, #0]
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	200007c8 	.word	0x200007c8
 8001080:	200007cc 	.word	0x200007cc

08001084 <DISP_WriteChar>:

void DISP_WriteChar(char c)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
  DISP_WriteCharXY(textX, textY, c);
 800108e:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <DISP_WriteChar+0x70>)
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <DISP_WriteChar+0x74>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	79fa      	ldrb	r2, [r7, #7]
 8001098:	4619      	mov	r1, r3
 800109a:	f000 f84b 	bl	8001134 <DISP_WriteCharXY>

  textX++;
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <DISP_WriteChar+0x70>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	3301      	adds	r3, #1
 80010a4:	4a13      	ldr	r2, [pc, #76]	; (80010f4 <DISP_WriteChar+0x70>)
 80010a6:	6013      	str	r3, [r2, #0]
  if (textX >= pixelsWidth / ptrFontHeader->width)
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <DISP_WriteChar+0x78>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a14      	ldr	r2, [pc, #80]	; (8001100 <DISP_WriteChar+0x7c>)
 80010ae:	6812      	ldr	r2, [r2, #0]
 80010b0:	7892      	ldrb	r2, [r2, #2]
 80010b2:	fb93 f2f2 	sdiv	r2, r3, r2
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <DISP_WriteChar+0x70>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	dc15      	bgt.n	80010ea <DISP_WriteChar+0x66>
  {
    textX = 0;
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <DISP_WriteChar+0x70>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]

    textY++;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <DISP_WriteChar+0x74>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <DISP_WriteChar+0x74>)
 80010cc:	6013      	str	r3, [r2, #0]
    if (textY >= pixelsHeight / ptrFontHeader->height)
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <DISP_WriteChar+0x80>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <DISP_WriteChar+0x7c>)
 80010d4:	6812      	ldr	r2, [r2, #0]
 80010d6:	78d2      	ldrb	r2, [r2, #3]
 80010d8:	fb93 f2f2 	sdiv	r2, r3, r2
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <DISP_WriteChar+0x74>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	dc02      	bgt.n	80010ea <DISP_WriteChar+0x66>
      textY = 0;
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <DISP_WriteChar+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
  }
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200007c8 	.word	0x200007c8
 80010f8:	200007cc 	.word	0x200007cc
 80010fc:	200007c0 	.word	0x200007c0
 8001100:	200007d4 	.word	0x200007d4
 8001104:	200007c4 	.word	0x200007c4

08001108 <DISP_WriteString>:

void DISP_WriteString(char *cp)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  while(*cp)
 8001110:	e007      	b.n	8001122 <DISP_WriteString+0x1a>
  {
    DISP_WriteChar(*cp);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ffb4 	bl	8001084 <DISP_WriteChar>
    cp++;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3301      	adds	r3, #1
 8001120:	607b      	str	r3, [r7, #4]
  while(*cp)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f3      	bne.n	8001112 <DISP_WriteString+0xa>
  }
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <DISP_WriteCharXY>:

void DISP_WriteCharXY(int x, int y, char c)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	4613      	mov	r3, r2
 8001140:	71fb      	strb	r3, [r7, #7]
  int i, j;
  uint8_t *bp;

  if (ptrFontHeader == NULL)
 8001142:	4b50      	ldr	r3, [pc, #320]	; (8001284 <DISP_WriteCharXY+0x150>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d102      	bne.n	8001150 <DISP_WriteCharXY+0x1c>
    DISP_SetFont(-1);     // use default font
 800114a:	20ff      	movs	r0, #255	; 0xff
 800114c:	f7ff ff2e 	bl	8000fac <DISP_SetFont>

  if ((c >= (ptrFontHeader->first + ptrFontHeader->count)) || (c < ptrFontHeader->first))
 8001150:	79fa      	ldrb	r2, [r7, #7]
 8001152:	4b4c      	ldr	r3, [pc, #304]	; (8001284 <DISP_WriteCharXY+0x150>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	791b      	ldrb	r3, [r3, #4]
 8001158:	4619      	mov	r1, r3
 800115a:	4b4a      	ldr	r3, [pc, #296]	; (8001284 <DISP_WriteCharXY+0x150>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	795b      	ldrb	r3, [r3, #5]
 8001160:	440b      	add	r3, r1
 8001162:	429a      	cmp	r2, r3
 8001164:	f280 8089 	bge.w	800127a <DISP_WriteCharXY+0x146>
 8001168:	4b46      	ldr	r3, [pc, #280]	; (8001284 <DISP_WriteCharXY+0x150>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	791b      	ldrb	r3, [r3, #4]
 800116e:	79fa      	ldrb	r2, [r7, #7]
 8001170:	429a      	cmp	r2, r3
 8001172:	f0c0 8082 	bcc.w	800127a <DISP_WriteCharXY+0x146>
    return;

  c -= ptrFontHeader->first;
 8001176:	4b43      	ldr	r3, [pc, #268]	; (8001284 <DISP_WriteCharXY+0x150>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	791b      	ldrb	r3, [r3, #4]
 800117c:	79fa      	ldrb	r2, [r7, #7]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	71fb      	strb	r3, [r7, #7]
  bp = bpFontBase + (c * ptrFontHeader->width);
 8001182:	4b41      	ldr	r3, [pc, #260]	; (8001288 <DISP_WriteCharXY+0x154>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	79fa      	ldrb	r2, [r7, #7]
 8001188:	493e      	ldr	r1, [pc, #248]	; (8001284 <DISP_WriteCharXY+0x150>)
 800118a:	6809      	ldr	r1, [r1, #0]
 800118c:	7889      	ldrb	r1, [r1, #2]
 800118e:	fb01 f202 	mul.w	r2, r1, r2
 8001192:	4413      	add	r3, r2
 8001194:	613b      	str	r3, [r7, #16]

  if (ptrFontHeader->height == 8)     // pro vysku 8px vyhodne po bajtech
 8001196:	4b3b      	ldr	r3, [pc, #236]	; (8001284 <DISP_WriteCharXY+0x150>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	78db      	ldrb	r3, [r3, #3]
 800119c:	2b08      	cmp	r3, #8
 800119e:	d126      	bne.n	80011ee <DISP_WriteCharXY+0xba>
  {
    if (my_SetBytes != NULL)
 80011a0:	4b3a      	ldr	r3, [pc, #232]	; (800128c <DISP_WriteCharXY+0x158>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d008      	beq.n	80011ba <DISP_WriteCharXY+0x86>
    {
      my_SetBytes(x * 8, y, bp, 8);
 80011a8:	4b38      	ldr	r3, [pc, #224]	; (800128c <DISP_WriteCharXY+0x158>)
 80011aa:	681c      	ldr	r4, [r3, #0]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	00d8      	lsls	r0, r3, #3
 80011b0:	2308      	movs	r3, #8
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	47a0      	blx	r4
      return;
 80011b8:	e060      	b.n	800127c <DISP_WriteCharXY+0x148>
    }

    if (my_SetByte != NULL)
 80011ba:	4b35      	ldr	r3, [pc, #212]	; (8001290 <DISP_WriteCharXY+0x15c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d015      	beq.n	80011ee <DISP_WriteCharXY+0xba>
    {
      for (i = 0; i < 8; i++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	e00e      	b.n	80011e6 <DISP_WriteCharXY+0xb2>
        my_SetByte(x * 8 + i, y, bp[i]);
 80011c8:	4b31      	ldr	r3, [pc, #196]	; (8001290 <DISP_WriteCharXY+0x15c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	00d1      	lsls	r1, r2, #3
 80011d0:	69fa      	ldr	r2, [r7, #28]
 80011d2:	1888      	adds	r0, r1, r2
 80011d4:	69fa      	ldr	r2, [r7, #28]
 80011d6:	6939      	ldr	r1, [r7, #16]
 80011d8:	440a      	add	r2, r1
 80011da:	7812      	ldrb	r2, [r2, #0]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	4798      	blx	r3
      for (i = 0; i < 8; i++)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	3301      	adds	r3, #1
 80011e4:	61fb      	str	r3, [r7, #28]
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	2b07      	cmp	r3, #7
 80011ea:	dded      	ble.n	80011c8 <DISP_WriteCharXY+0x94>

      return;
 80011ec:	e046      	b.n	800127c <DISP_WriteCharXY+0x148>
    }
  }

  for (i = 0; i < ptrFontHeader->width; i++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	e03a      	b.n	800126a <DISP_WriteCharXY+0x136>
  {
    uint8_t b = bp[i];
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4413      	add	r3, r2
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	75fb      	strb	r3, [r7, #23]

    if (ptrFontHeader->height <= 8)
 80011fe:	4b21      	ldr	r3, [pc, #132]	; (8001284 <DISP_WriteCharXY+0x150>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	78db      	ldrb	r3, [r3, #3]
 8001204:	2b08      	cmp	r3, #8
 8001206:	d82d      	bhi.n	8001264 <DISP_WriteCharXY+0x130>
    {
      for (j = 0; j < ptrFontHeader->height; j++)
 8001208:	2300      	movs	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]
 800120c:	e022      	b.n	8001254 <DISP_WriteCharXY+0x120>
      {
        my_DrawPixel(x * ptrFontHeader->width + i, y * ptrFontHeader->height + j, (b & 1));    // LSB first
 800120e:	4b21      	ldr	r3, [pc, #132]	; (8001294 <DISP_WriteCharXY+0x160>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a1c      	ldr	r2, [pc, #112]	; (8001284 <DISP_WriteCharXY+0x150>)
 8001214:	6812      	ldr	r2, [r2, #0]
 8001216:	7892      	ldrb	r2, [r2, #2]
 8001218:	4611      	mov	r1, r2
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	fb02 f101 	mul.w	r1, r2, r1
 8001220:	69fa      	ldr	r2, [r7, #28]
 8001222:	1888      	adds	r0, r1, r2
 8001224:	4a17      	ldr	r2, [pc, #92]	; (8001284 <DISP_WriteCharXY+0x150>)
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	78d2      	ldrb	r2, [r2, #3]
 800122a:	4611      	mov	r1, r2
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	fb02 f101 	mul.w	r1, r2, r1
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4411      	add	r1, r2
 8001236:	7dfa      	ldrb	r2, [r7, #23]
 8001238:	f002 0201 	and.w	r2, r2, #1
 800123c:	2a00      	cmp	r2, #0
 800123e:	bf14      	ite	ne
 8001240:	2201      	movne	r2, #1
 8001242:	2200      	moveq	r2, #0
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	4798      	blx	r3
        b >>= 1;
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	085b      	lsrs	r3, r3, #1
 800124c:	75fb      	strb	r3, [r7, #23]
      for (j = 0; j < ptrFontHeader->height; j++)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	3301      	adds	r3, #1
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <DISP_WriteCharXY+0x150>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	78db      	ldrb	r3, [r3, #3]
 800125a:	461a      	mov	r2, r3
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	429a      	cmp	r2, r3
 8001260:	dcd5      	bgt.n	800120e <DISP_WriteCharXY+0xda>
      }

      continue;
 8001262:	bf00      	nop
  for (i = 0; i < ptrFontHeader->width; i++)
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	3301      	adds	r3, #1
 8001268:	61fb      	str	r3, [r7, #28]
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <DISP_WriteCharXY+0x150>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	789b      	ldrb	r3, [r3, #2]
 8001270:	461a      	mov	r2, r3
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	429a      	cmp	r2, r3
 8001276:	dcbd      	bgt.n	80011f4 <DISP_WriteCharXY+0xc0>
 8001278:	e000      	b.n	800127c <DISP_WriteCharXY+0x148>
    return;
 800127a:	bf00      	nop

      continue;
    }
    */
  }
}
 800127c:	3724      	adds	r7, #36	; 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd90      	pop	{r4, r7, pc}
 8001282:	bf00      	nop
 8001284:	200007d4 	.word	0x200007d4
 8001288:	200007d0 	.word	0x200007d0
 800128c:	200007bc 	.word	0x200007bc
 8001290:	200007b8 	.word	0x200007b8
 8001294:	200007b4 	.word	0x200007b4

08001298 <DISP_Clear>:

bool DISP_Clear()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  return DISP_Fill(0x00);
 800129c:	2000      	movs	r0, #0
 800129e:	f000 f803 	bl	80012a8 <DISP_Fill>
 80012a2:	4603      	mov	r3, r0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <DISP_Fill>:

bool DISP_Fill(uint8_t bFill)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  int r, x;

  if (my_SetByte != NULL)
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <DISP_Fill+0x64>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d021      	beq.n	80012fe <DISP_Fill+0x56>
  {
    for (r = 0; r < pixelsHeight / 8; r++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	e013      	b.n	80012e8 <DISP_Fill+0x40>
    {
      for (x = 0; x < pixelsWidth; x++)
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	e008      	b.n	80012d8 <DISP_Fill+0x30>
        my_SetByte(x, r, bFill);
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <DISP_Fill+0x64>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	68f9      	ldr	r1, [r7, #12]
 80012ce:	68b8      	ldr	r0, [r7, #8]
 80012d0:	4798      	blx	r3
      for (x = 0; x < pixelsWidth; x++)
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	3301      	adds	r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <DISP_Fill+0x68>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	429a      	cmp	r2, r3
 80012e0:	dbf1      	blt.n	80012c6 <DISP_Fill+0x1e>
    for (r = 0; r < pixelsHeight / 8; r++)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	3301      	adds	r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <DISP_Fill+0x6c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	da00      	bge.n	80012f2 <DISP_Fill+0x4a>
 80012f0:	3307      	adds	r3, #7
 80012f2:	10db      	asrs	r3, r3, #3
 80012f4:	461a      	mov	r2, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	dce1      	bgt.n	80012c0 <DISP_Fill+0x18>
 80012fc:	e001      	b.n	8001302 <DISP_Fill+0x5a>
    }
  }
  else
    return false;
 80012fe:	2300      	movs	r3, #0
 8001300:	e000      	b.n	8001304 <DISP_Fill+0x5c>

  return true;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	200007b8 	.word	0x200007b8
 8001310:	200007c0 	.word	0x200007c0
 8001314:	200007c4 	.word	0x200007c4

08001318 <DISP_DemoCntRow>:

bool DISP_DemoCntRow(uint8_t bRow)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
  int x;

  if (my_SetByte != NULL)
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <DISP_DemoCntRow+0x48>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d012      	beq.n	8001350 <DISP_DemoCntRow+0x38>
  {
    for (x = 0; x < pixelsWidth; x++)
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	e009      	b.n	8001344 <DISP_DemoCntRow+0x2c>
      my_SetByte(x, bRow, x);
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <DISP_DemoCntRow+0x48>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	79f9      	ldrb	r1, [r7, #7]
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	4798      	blx	r3
    for (x = 0; x < pixelsWidth; x++)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3301      	adds	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <DISP_DemoCntRow+0x4c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	429a      	cmp	r2, r3
 800134c:	dbf0      	blt.n	8001330 <DISP_DemoCntRow+0x18>
 800134e:	e001      	b.n	8001354 <DISP_DemoCntRow+0x3c>
  }
  else
    return false;
 8001350:	2300      	movs	r3, #0
 8001352:	e000      	b.n	8001356 <DISP_DemoCntRow+0x3e>

  return true;
 8001354:	2301      	movs	r3, #1
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200007b8 	.word	0x200007b8
 8001364:	200007c0 	.word	0x200007c0

08001368 <DISP_DrawLine>:

void DISP_DrawLine(int x0, int y0, int x1, int y1, bool color)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	603b      	str	r3, [r7, #0]
  int dx = (x0 < x1) ? (x1 - x0) : (x0 - x1), sx = (x0 < x1) ? 1 : -1;
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	429a      	cmp	r2, r3
 800137c:	da03      	bge.n	8001386 <DISP_DrawLine+0x1e>
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	e002      	b.n	800138c <DISP_DrawLine+0x24>
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	623b      	str	r3, [r7, #32]
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	429a      	cmp	r2, r3
 8001394:	da01      	bge.n	800139a <DISP_DrawLine+0x32>
 8001396:	2301      	movs	r3, #1
 8001398:	e001      	b.n	800139e <DISP_DrawLine+0x36>
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	61fb      	str	r3, [r7, #28]
  int dy = (y0 < y1) ? (y1 - y0) : (y0 - y1), sy = (y0 < y1) ? 1 : -1;
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	da03      	bge.n	80013b0 <DISP_DrawLine+0x48>
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	e002      	b.n	80013b6 <DISP_DrawLine+0x4e>
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	429a      	cmp	r2, r3
 80013be:	da01      	bge.n	80013c4 <DISP_DrawLine+0x5c>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e001      	b.n	80013c8 <DISP_DrawLine+0x60>
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
 80013c8:	617b      	str	r3, [r7, #20]
  int err = ((dx > dy) ? dx : -dy) / 2, e2;
 80013ca:	6a3a      	ldr	r2, [r7, #32]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	dc05      	bgt.n	80013de <DISP_DrawLine+0x76>
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	425b      	negs	r3, r3
 80013d6:	0fda      	lsrs	r2, r3, #31
 80013d8:	4413      	add	r3, r2
 80013da:	105b      	asrs	r3, r3, #1
 80013dc:	e003      	b.n	80013e6 <DISP_DrawLine+0x7e>
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	0fda      	lsrs	r2, r3, #31
 80013e2:	4413      	add	r3, r2
 80013e4:	105b      	asrs	r3, r3, #1
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24

  for (; ; )
  {
    if ((x0 == x1) && (y0 == y1))
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d103      	bne.n	80013f8 <DISP_DrawLine+0x90>
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d026      	beq.n	8001446 <DISP_DrawLine+0xde>
      break;

    (*my_DrawPixel)((uint8_t)x0, (uint8_t)y0, color);
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <DISP_DrawLine+0xe8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	4610      	mov	r0, r2
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	4611      	mov	r1, r2
 8001408:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800140c:	4798      	blx	r3

    e2 = err;
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	613b      	str	r3, [r7, #16]
    if (e2 > -dx)
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	425a      	negs	r2, r3
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	429a      	cmp	r2, r3
 800141a:	da07      	bge.n	800142c <DISP_DrawLine+0xc4>
    {
      err -= dy; x0 += sx;
 800141c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	4413      	add	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]
    }

    if (e2 < dy)
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	429a      	cmp	r2, r3
 8001432:	dad9      	bge.n	80013e8 <DISP_DrawLine+0x80>
    {
      err += dx; y0 += sy;
 8001434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	4413      	add	r3, r2
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
 800143c:	68ba      	ldr	r2, [r7, #8]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	4413      	add	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
    if ((x0 == x1) && (y0 == y1))
 8001444:	e7d0      	b.n	80013e8 <DISP_DrawLine+0x80>
      break;
 8001446:	bf00      	nop
    }
  }
}
 8001448:	bf00      	nop
 800144a:	3728      	adds	r7, #40	; 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200007b4 	.word	0x200007b4

08001454 <DISP_DrawRect>:

void DISP_DrawRect(int x, int y, int w, int h, bool color)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af02      	add	r7, sp, #8
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	603b      	str	r3, [r7, #0]
  DISP_DrawLine(x, y, x + w, y, color);
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	441a      	add	r2, r3
 8001468:	7e3b      	ldrb	r3, [r7, #24]
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	68b9      	ldr	r1, [r7, #8]
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f7ff ff79 	bl	8001368 <DISP_DrawLine>
  DISP_DrawLine(x + w, y, x + w, y + h, color);
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	18d0      	adds	r0, r2, r3
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	18d1      	adds	r1, r2, r3
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	441a      	add	r2, r3
 8001488:	7e3b      	ldrb	r3, [r7, #24]
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	4613      	mov	r3, r2
 800148e:	460a      	mov	r2, r1
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	f7ff ff69 	bl	8001368 <DISP_DrawLine>
  DISP_DrawLine(x + w, y + h, x, y + h, color);
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	18d0      	adds	r0, r2, r3
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	18d1      	adds	r1, r2, r3
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	441a      	add	r2, r3
 80014a8:	7e3b      	ldrb	r3, [r7, #24]
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	4613      	mov	r3, r2
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	f7ff ff5a 	bl	8001368 <DISP_DrawLine>
  DISP_DrawLine(x, y + h, x, y, color);
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	18d1      	adds	r1, r2, r3
 80014ba:	7e3b      	ldrb	r3, [r7, #24]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f7ff ff50 	bl	8001368 <DISP_DrawLine>
}
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <DISP_DrawCircle>:
    y++;
  }
}

void DISP_DrawCircle(int centerX, int centerY, int radius, bool colorSet)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	70fb      	strb	r3, [r7, #3]
  int d = (5 - radius * 4) / 4;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	f1c3 0305 	rsb	r3, r3, #5
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	da00      	bge.n	80014ec <DISP_DrawCircle+0x1c>
 80014ea:	3303      	adds	r3, #3
 80014ec:	109b      	asrs	r3, r3, #2
 80014ee:	61fb      	str	r3, [r7, #28]
  int x = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
  int y = radius;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	617b      	str	r3, [r7, #20]

  do
  {
    // ensure index is in range before setting (depends on your image implementation)
    // in this case we check if the pixel location is within the bounds of the image before setting the pixel
    if (((centerX + x) >= 0) && ((centerX + x) <= (pixelsWidth - 1)) && ((centerY + y) >= 0) && ((centerY + y) <= (pixelsHeight - 1))) (*my_DrawPixel)(centerX + x, centerY + y, colorSet);
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	4413      	add	r3, r2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	db1e      	blt.n	8001540 <DISP_DrawCircle+0x70>
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	441a      	add	r2, r3
 8001508:	4b90      	ldr	r3, [pc, #576]	; (800174c <DISP_DrawCircle+0x27c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	3b01      	subs	r3, #1
 800150e:	429a      	cmp	r2, r3
 8001510:	dc16      	bgt.n	8001540 <DISP_DrawCircle+0x70>
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	4413      	add	r3, r2
 8001518:	2b00      	cmp	r3, #0
 800151a:	db11      	blt.n	8001540 <DISP_DrawCircle+0x70>
 800151c:	68ba      	ldr	r2, [r7, #8]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	441a      	add	r2, r3
 8001522:	4b8b      	ldr	r3, [pc, #556]	; (8001750 <DISP_DrawCircle+0x280>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	3b01      	subs	r3, #1
 8001528:	429a      	cmp	r2, r3
 800152a:	dc09      	bgt.n	8001540 <DISP_DrawCircle+0x70>
 800152c:	4b89      	ldr	r3, [pc, #548]	; (8001754 <DISP_DrawCircle+0x284>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68f9      	ldr	r1, [r7, #12]
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	1888      	adds	r0, r1, r2
 8001536:	68b9      	ldr	r1, [r7, #8]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	4411      	add	r1, r2
 800153c:	78fa      	ldrb	r2, [r7, #3]
 800153e:	4798      	blx	r3
    if (((centerX + x) >= 0) && ((centerX + x) <= (pixelsWidth - 1)) && ((centerY - y) >= 0) && ((centerY - y) <= (pixelsHeight - 1))) (*my_DrawPixel)(centerX + x, centerY - y, colorSet);
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	4413      	add	r3, r2
 8001546:	2b00      	cmp	r3, #0
 8001548:	db1e      	blt.n	8001588 <DISP_DrawCircle+0xb8>
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	441a      	add	r2, r3
 8001550:	4b7e      	ldr	r3, [pc, #504]	; (800174c <DISP_DrawCircle+0x27c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	3b01      	subs	r3, #1
 8001556:	429a      	cmp	r2, r3
 8001558:	dc16      	bgt.n	8001588 <DISP_DrawCircle+0xb8>
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	db11      	blt.n	8001588 <DISP_DrawCircle+0xb8>
 8001564:	68ba      	ldr	r2, [r7, #8]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	1ad2      	subs	r2, r2, r3
 800156a:	4b79      	ldr	r3, [pc, #484]	; (8001750 <DISP_DrawCircle+0x280>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	3b01      	subs	r3, #1
 8001570:	429a      	cmp	r2, r3
 8001572:	dc09      	bgt.n	8001588 <DISP_DrawCircle+0xb8>
 8001574:	4b77      	ldr	r3, [pc, #476]	; (8001754 <DISP_DrawCircle+0x284>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68f9      	ldr	r1, [r7, #12]
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	1888      	adds	r0, r1, r2
 800157e:	68b9      	ldr	r1, [r7, #8]
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	1a89      	subs	r1, r1, r2
 8001584:	78fa      	ldrb	r2, [r7, #3]
 8001586:	4798      	blx	r3
    if (((centerX - x) >= 0) && ((centerX - x) <= (pixelsWidth - 1)) && ((centerY + y) >= 0) && ((centerY + y) <= (pixelsHeight - 1))) (*my_DrawPixel)(centerX - x, centerY + y, colorSet);
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	db1e      	blt.n	80015d0 <DISP_DrawCircle+0x100>
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	1ad2      	subs	r2, r2, r3
 8001598:	4b6c      	ldr	r3, [pc, #432]	; (800174c <DISP_DrawCircle+0x27c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3b01      	subs	r3, #1
 800159e:	429a      	cmp	r2, r3
 80015a0:	dc16      	bgt.n	80015d0 <DISP_DrawCircle+0x100>
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	4413      	add	r3, r2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db11      	blt.n	80015d0 <DISP_DrawCircle+0x100>
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	441a      	add	r2, r3
 80015b2:	4b67      	ldr	r3, [pc, #412]	; (8001750 <DISP_DrawCircle+0x280>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dc09      	bgt.n	80015d0 <DISP_DrawCircle+0x100>
 80015bc:	4b65      	ldr	r3, [pc, #404]	; (8001754 <DISP_DrawCircle+0x284>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68f9      	ldr	r1, [r7, #12]
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	1a88      	subs	r0, r1, r2
 80015c6:	68b9      	ldr	r1, [r7, #8]
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	4411      	add	r1, r2
 80015cc:	78fa      	ldrb	r2, [r7, #3]
 80015ce:	4798      	blx	r3
    if (((centerX - x) >= 0) && ((centerX - x) <= (pixelsWidth - 1)) && ((centerY - y) >= 0) && ((centerY - y) <= (pixelsHeight - 1))) (*my_DrawPixel)(centerX - x, centerY - y, colorSet);
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	db1e      	blt.n	8001618 <DISP_DrawCircle+0x148>
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	1ad2      	subs	r2, r2, r3
 80015e0:	4b5a      	ldr	r3, [pc, #360]	; (800174c <DISP_DrawCircle+0x27c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	429a      	cmp	r2, r3
 80015e8:	dc16      	bgt.n	8001618 <DISP_DrawCircle+0x148>
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db11      	blt.n	8001618 <DISP_DrawCircle+0x148>
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	1ad2      	subs	r2, r2, r3
 80015fa:	4b55      	ldr	r3, [pc, #340]	; (8001750 <DISP_DrawCircle+0x280>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	3b01      	subs	r3, #1
 8001600:	429a      	cmp	r2, r3
 8001602:	dc09      	bgt.n	8001618 <DISP_DrawCircle+0x148>
 8001604:	4b53      	ldr	r3, [pc, #332]	; (8001754 <DISP_DrawCircle+0x284>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68f9      	ldr	r1, [r7, #12]
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	1a88      	subs	r0, r1, r2
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	1a89      	subs	r1, r1, r2
 8001614:	78fa      	ldrb	r2, [r7, #3]
 8001616:	4798      	blx	r3
    if (((centerX + y) >= 0) && ((centerX + y) <= (pixelsWidth - 1)) && ((centerY + x) >= 0) && ((centerY + x) <= (pixelsHeight - 1))) (*my_DrawPixel)(centerX + y, centerY + x, colorSet);
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	4413      	add	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	db1e      	blt.n	8001660 <DISP_DrawCircle+0x190>
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	441a      	add	r2, r3
 8001628:	4b48      	ldr	r3, [pc, #288]	; (800174c <DISP_DrawCircle+0x27c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	3b01      	subs	r3, #1
 800162e:	429a      	cmp	r2, r3
 8001630:	dc16      	bgt.n	8001660 <DISP_DrawCircle+0x190>
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	4413      	add	r3, r2
 8001638:	2b00      	cmp	r3, #0
 800163a:	db11      	blt.n	8001660 <DISP_DrawCircle+0x190>
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	441a      	add	r2, r3
 8001642:	4b43      	ldr	r3, [pc, #268]	; (8001750 <DISP_DrawCircle+0x280>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	3b01      	subs	r3, #1
 8001648:	429a      	cmp	r2, r3
 800164a:	dc09      	bgt.n	8001660 <DISP_DrawCircle+0x190>
 800164c:	4b41      	ldr	r3, [pc, #260]	; (8001754 <DISP_DrawCircle+0x284>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68f9      	ldr	r1, [r7, #12]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	1888      	adds	r0, r1, r2
 8001656:	68b9      	ldr	r1, [r7, #8]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4411      	add	r1, r2
 800165c:	78fa      	ldrb	r2, [r7, #3]
 800165e:	4798      	blx	r3
    if (((centerX + y) >= 0) && ((centerX + y) <= (pixelsWidth - 1)) && ((centerY - x) >= 0) && ((centerY - x) <= (pixelsHeight - 1))) (*my_DrawPixel)(centerX + y, centerY - x, colorSet);
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	4413      	add	r3, r2
 8001666:	2b00      	cmp	r3, #0
 8001668:	db1e      	blt.n	80016a8 <DISP_DrawCircle+0x1d8>
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	441a      	add	r2, r3
 8001670:	4b36      	ldr	r3, [pc, #216]	; (800174c <DISP_DrawCircle+0x27c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3b01      	subs	r3, #1
 8001676:	429a      	cmp	r2, r3
 8001678:	dc16      	bgt.n	80016a8 <DISP_DrawCircle+0x1d8>
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	db11      	blt.n	80016a8 <DISP_DrawCircle+0x1d8>
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	1ad2      	subs	r2, r2, r3
 800168a:	4b31      	ldr	r3, [pc, #196]	; (8001750 <DISP_DrawCircle+0x280>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3b01      	subs	r3, #1
 8001690:	429a      	cmp	r2, r3
 8001692:	dc09      	bgt.n	80016a8 <DISP_DrawCircle+0x1d8>
 8001694:	4b2f      	ldr	r3, [pc, #188]	; (8001754 <DISP_DrawCircle+0x284>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68f9      	ldr	r1, [r7, #12]
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	1888      	adds	r0, r1, r2
 800169e:	68b9      	ldr	r1, [r7, #8]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	1a89      	subs	r1, r1, r2
 80016a4:	78fa      	ldrb	r2, [r7, #3]
 80016a6:	4798      	blx	r3
    if (((centerX - y) >= 0) && ((centerX - y) <= (pixelsWidth - 1)) && ((centerY + x) >= 0) && ((centerY + x) <= (pixelsHeight - 1))) (*my_DrawPixel)(centerX - y, centerY + x, colorSet);
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	db1e      	blt.n	80016f0 <DISP_DrawCircle+0x220>
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	1ad2      	subs	r2, r2, r3
 80016b8:	4b24      	ldr	r3, [pc, #144]	; (800174c <DISP_DrawCircle+0x27c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3b01      	subs	r3, #1
 80016be:	429a      	cmp	r2, r3
 80016c0:	dc16      	bgt.n	80016f0 <DISP_DrawCircle+0x220>
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	4413      	add	r3, r2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	db11      	blt.n	80016f0 <DISP_DrawCircle+0x220>
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	441a      	add	r2, r3
 80016d2:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <DISP_DrawCircle+0x280>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	429a      	cmp	r2, r3
 80016da:	dc09      	bgt.n	80016f0 <DISP_DrawCircle+0x220>
 80016dc:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <DISP_DrawCircle+0x284>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68f9      	ldr	r1, [r7, #12]
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	1a88      	subs	r0, r1, r2
 80016e6:	68b9      	ldr	r1, [r7, #8]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4411      	add	r1, r2
 80016ec:	78fa      	ldrb	r2, [r7, #3]
 80016ee:	4798      	blx	r3
    if (((centerX - y) >= 0) && ((centerX - y) <= (pixelsWidth - 1)) && ((centerY - x) >= 0) && ((centerY - x) <= (pixelsHeight - 1))) (*my_DrawPixel)(centerX - y, centerY - x, colorSet);
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	db1e      	blt.n	8001738 <DISP_DrawCircle+0x268>
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	1ad2      	subs	r2, r2, r3
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <DISP_DrawCircle+0x27c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	3b01      	subs	r3, #1
 8001706:	429a      	cmp	r2, r3
 8001708:	dc16      	bgt.n	8001738 <DISP_DrawCircle+0x268>
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	db11      	blt.n	8001738 <DISP_DrawCircle+0x268>
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	1ad2      	subs	r2, r2, r3
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <DISP_DrawCircle+0x280>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	3b01      	subs	r3, #1
 8001720:	429a      	cmp	r2, r3
 8001722:	dc09      	bgt.n	8001738 <DISP_DrawCircle+0x268>
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <DISP_DrawCircle+0x284>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68f9      	ldr	r1, [r7, #12]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	1a88      	subs	r0, r1, r2
 800172e:	68b9      	ldr	r1, [r7, #8]
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	1a89      	subs	r1, r1, r2
 8001734:	78fa      	ldrb	r2, [r7, #3]
 8001736:	4798      	blx	r3
    if (d < 0)
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	2b00      	cmp	r3, #0
 800173c:	da0c      	bge.n	8001758 <DISP_DrawCircle+0x288>
    {
      d += 2 * x + 1;
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	3301      	adds	r3, #1
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	4413      	add	r3, r2
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	e010      	b.n	800176e <DISP_DrawCircle+0x29e>
 800174c:	200007c0 	.word	0x200007c0
 8001750:	200007c4 	.word	0x200007c4
 8001754:	200007b4 	.word	0x200007b4
    }
    else
    {
      d += 2 * (x - y) + 1;
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	3301      	adds	r3, #1
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	4413      	add	r3, r2
 8001766:	61fb      	str	r3, [r7, #28]
      y--;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	3b01      	subs	r3, #1
 800176c:	617b      	str	r3, [r7, #20]
    }
    x++;
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	3301      	adds	r3, #1
 8001772:	61bb      	str	r3, [r7, #24]
  } while (x <= y);
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	429a      	cmp	r2, r3
 800177a:	f77f aebd 	ble.w	80014f8 <DISP_DrawCircle+0x28>
}
 800177e:	bf00      	nop
 8001780:	3720      	adds	r7, #32
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop

08001788 <__sputc_r>:
#else
#define __sgetc_r(__ptr, __p) __sgetc_raw_r(__ptr, __p)
#endif

#ifdef __GNUC__
_ELIDABLE_INLINE int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
#ifdef __SCLE
	if ((_p->_flags & __SCLE) && _c == '\n')
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	1e5a      	subs	r2, r3, #1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	da09      	bge.n	80017ba <__sputc_r+0x32>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	db0d      	blt.n	80017ce <__sputc_r+0x46>
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b0a      	cmp	r3, #10
 80017b8:	d009      	beq.n	80017ce <__sputc_r+0x46>
		return (*_p->_p++ = _c);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	1c59      	adds	r1, r3, #1
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6011      	str	r1, [r2, #0]
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	701a      	strb	r2, [r3, #0]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	e005      	b.n	80017da <__sputc_r+0x52>
	else
		return (__swbuf_r(_ptr, _c, _p));
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f003 f8f0 	bl	80049b8 <__swbuf_r>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	0000      	movs	r0, r0
 80017e4:	0000      	movs	r0, r0
	...

080017e8 <rotateZ3D>:
int edge10[] = {2, 6};
int edge11[] = {3, 7};
int *edges[COUNT_EDGES]  = {edge0, edge1, edge2, edge3, edge4, edge5, edge6, edge7, edge8, edge9, edge10, edge11};

void rotateZ3D(float theta)
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	ed87 0a01 	vstr	s0, [r7, #4]
  float sin_t = sin(theta * M_PI / 180);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7fe feb0 	bl	8000558 <__aeabi_f2d>
 80017f8:	a343      	add	r3, pc, #268	; (adr r3, 8001908 <rotateZ3D+0x120>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7fe feff 	bl	8000600 <__aeabi_dmul>
 8001802:	4603      	mov	r3, r0
 8001804:	460c      	mov	r4, r1
 8001806:	4618      	mov	r0, r3
 8001808:	4621      	mov	r1, r4
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	4b40      	ldr	r3, [pc, #256]	; (8001910 <rotateZ3D+0x128>)
 8001810:	f7ff f820 	bl	8000854 <__aeabi_ddiv>
 8001814:	4603      	mov	r3, r0
 8001816:	460c      	mov	r4, r1
 8001818:	ec44 3b17 	vmov	d7, r3, r4
 800181c:	eeb0 0a47 	vmov.f32	s0, s14
 8001820:	eef0 0a67 	vmov.f32	s1, s15
 8001824:	f005 fe8c 	bl	8007540 <sin>
 8001828:	ec54 3b10 	vmov	r3, r4, d0
 800182c:	4618      	mov	r0, r3
 800182e:	4621      	mov	r1, r4
 8001830:	f7ff f9be 	bl	8000bb0 <__aeabi_d2f>
 8001834:	4603      	mov	r3, r0
 8001836:	61bb      	str	r3, [r7, #24]
  float cos_t = cos(theta * M_PI / 180);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7fe fe8d 	bl	8000558 <__aeabi_f2d>
 800183e:	a332      	add	r3, pc, #200	; (adr r3, 8001908 <rotateZ3D+0x120>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7fe fedc 	bl	8000600 <__aeabi_dmul>
 8001848:	4603      	mov	r3, r0
 800184a:	460c      	mov	r4, r1
 800184c:	4618      	mov	r0, r3
 800184e:	4621      	mov	r1, r4
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <rotateZ3D+0x128>)
 8001856:	f7fe fffd 	bl	8000854 <__aeabi_ddiv>
 800185a:	4603      	mov	r3, r0
 800185c:	460c      	mov	r4, r1
 800185e:	ec44 3b17 	vmov	d7, r3, r4
 8001862:	eeb0 0a47 	vmov.f32	s0, s14
 8001866:	eef0 0a67 	vmov.f32	s1, s15
 800186a:	f005 fe25 	bl	80074b8 <cos>
 800186e:	ec54 3b10 	vmov	r3, r4, d0
 8001872:	4618      	mov	r0, r3
 8001874:	4621      	mov	r1, r4
 8001876:	f7ff f99b 	bl	8000bb0 <__aeabi_d2f>
 800187a:	4603      	mov	r3, r0
 800187c:	617b      	str	r3, [r7, #20]

  for(int i = 0; i < COUNT_NODES; i++)
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	e037      	b.n	80018f4 <rotateZ3D+0x10c>
  {
    float x = nodes[i][0];
 8001884:	4a23      	ldr	r2, [pc, #140]	; (8001914 <rotateZ3D+0x12c>)
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	613b      	str	r3, [r7, #16]
    float y = nodes[i][1];
 8001890:	4a20      	ldr	r2, [pc, #128]	; (8001914 <rotateZ3D+0x12c>)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	60fb      	str	r3, [r7, #12]
    nodes[i][0] = x * cos_t - y * sin_t;
 800189c:	4a1d      	ldr	r2, [pc, #116]	; (8001914 <rotateZ3D+0x12c>)
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80018a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80018ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018b0:	edd7 6a03 	vldr	s13, [r7, #12]
 80018b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80018b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c0:	edc3 7a00 	vstr	s15, [r3]
    nodes[i][1] = y * cos_t + x * sin_t;
 80018c4:	4a13      	ldr	r2, [pc, #76]	; (8001914 <rotateZ3D+0x12c>)
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018cc:	3304      	adds	r3, #4
 80018ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80018d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80018d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018da:	edd7 6a04 	vldr	s13, [r7, #16]
 80018de:	edd7 7a06 	vldr	s15, [r7, #24]
 80018e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ea:	edc3 7a00 	vstr	s15, [r3]
  for(int i = 0; i < COUNT_NODES; i++)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3301      	adds	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	2b07      	cmp	r3, #7
 80018f8:	ddc4      	ble.n	8001884 <rotateZ3D+0x9c>
  }
}
 80018fa:	bf00      	nop
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd90      	pop	{r4, r7, pc}
 8001902:	bf00      	nop
 8001904:	f3af 8000 	nop.w
 8001908:	54442d18 	.word	0x54442d18
 800190c:	400921fb 	.word	0x400921fb
 8001910:	40668000 	.word	0x40668000
 8001914:	20000060 	.word	0x20000060

08001918 <rotateY3D>:

void rotateY3D (float theta)
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	ed87 0a01 	vstr	s0, [r7, #4]
  float sin_t = sin(theta * M_PI / 180);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7fe fe18 	bl	8000558 <__aeabi_f2d>
 8001928:	a343      	add	r3, pc, #268	; (adr r3, 8001a38 <rotateY3D+0x120>)
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	f7fe fe67 	bl	8000600 <__aeabi_dmul>
 8001932:	4603      	mov	r3, r0
 8001934:	460c      	mov	r4, r1
 8001936:	4618      	mov	r0, r3
 8001938:	4621      	mov	r1, r4
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	4b40      	ldr	r3, [pc, #256]	; (8001a40 <rotateY3D+0x128>)
 8001940:	f7fe ff88 	bl	8000854 <__aeabi_ddiv>
 8001944:	4603      	mov	r3, r0
 8001946:	460c      	mov	r4, r1
 8001948:	ec44 3b17 	vmov	d7, r3, r4
 800194c:	eeb0 0a47 	vmov.f32	s0, s14
 8001950:	eef0 0a67 	vmov.f32	s1, s15
 8001954:	f005 fdf4 	bl	8007540 <sin>
 8001958:	ec54 3b10 	vmov	r3, r4, d0
 800195c:	4618      	mov	r0, r3
 800195e:	4621      	mov	r1, r4
 8001960:	f7ff f926 	bl	8000bb0 <__aeabi_d2f>
 8001964:	4603      	mov	r3, r0
 8001966:	61bb      	str	r3, [r7, #24]
  float cos_t = cos(theta * M_PI / 180);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7fe fdf5 	bl	8000558 <__aeabi_f2d>
 800196e:	a332      	add	r3, pc, #200	; (adr r3, 8001a38 <rotateY3D+0x120>)
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	f7fe fe44 	bl	8000600 <__aeabi_dmul>
 8001978:	4603      	mov	r3, r0
 800197a:	460c      	mov	r4, r1
 800197c:	4618      	mov	r0, r3
 800197e:	4621      	mov	r1, r4
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	4b2e      	ldr	r3, [pc, #184]	; (8001a40 <rotateY3D+0x128>)
 8001986:	f7fe ff65 	bl	8000854 <__aeabi_ddiv>
 800198a:	4603      	mov	r3, r0
 800198c:	460c      	mov	r4, r1
 800198e:	ec44 3b17 	vmov	d7, r3, r4
 8001992:	eeb0 0a47 	vmov.f32	s0, s14
 8001996:	eef0 0a67 	vmov.f32	s1, s15
 800199a:	f005 fd8d 	bl	80074b8 <cos>
 800199e:	ec54 3b10 	vmov	r3, r4, d0
 80019a2:	4618      	mov	r0, r3
 80019a4:	4621      	mov	r1, r4
 80019a6:	f7ff f903 	bl	8000bb0 <__aeabi_d2f>
 80019aa:	4603      	mov	r3, r0
 80019ac:	617b      	str	r3, [r7, #20]

  for(int i = 0; i < COUNT_NODES; i++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	e037      	b.n	8001a24 <rotateY3D+0x10c>
  {
    float x = nodes[i][0];
 80019b4:	4a23      	ldr	r2, [pc, #140]	; (8001a44 <rotateY3D+0x12c>)
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	613b      	str	r3, [r7, #16]
    float z = nodes[i][2];
 80019c0:	4a20      	ldr	r2, [pc, #128]	; (8001a44 <rotateY3D+0x12c>)
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	60fb      	str	r3, [r7, #12]
    nodes[i][0] = x * cos_t - z * sin_t;
 80019cc:	4a1d      	ldr	r2, [pc, #116]	; (8001a44 <rotateY3D+0x12c>)
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80019d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e0:	edd7 6a03 	vldr	s13, [r7, #12]
 80019e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80019e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f0:	edc3 7a00 	vstr	s15, [r3]
    nodes[i][2] = z * cos_t + x * sin_t;
 80019f4:	4a13      	ldr	r2, [pc, #76]	; (8001a44 <rotateY3D+0x12c>)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fc:	3308      	adds	r3, #8
 80019fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a02:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a0a:	edd7 6a04 	vldr	s13, [r7, #16]
 8001a0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1a:	edc3 7a00 	vstr	s15, [r3]
  for(int i = 0; i < COUNT_NODES; i++)
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3301      	adds	r3, #1
 8001a22:	61fb      	str	r3, [r7, #28]
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	2b07      	cmp	r3, #7
 8001a28:	ddc4      	ble.n	80019b4 <rotateY3D+0x9c>
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3724      	adds	r7, #36	; 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd90      	pop	{r4, r7, pc}
 8001a32:	bf00      	nop
 8001a34:	f3af 8000 	nop.w
 8001a38:	54442d18 	.word	0x54442d18
 8001a3c:	400921fb 	.word	0x400921fb
 8001a40:	40668000 	.word	0x40668000
 8001a44:	20000060 	.word	0x20000060

08001a48 <rotateX3D>:

void rotateX3D(float theta)
{
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b089      	sub	sp, #36	; 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	ed87 0a01 	vstr	s0, [r7, #4]
  float sin_t = sin(theta * M_PI / 180);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7fe fd80 	bl	8000558 <__aeabi_f2d>
 8001a58:	a343      	add	r3, pc, #268	; (adr r3, 8001b68 <rotateX3D+0x120>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f7fe fdcf 	bl	8000600 <__aeabi_dmul>
 8001a62:	4603      	mov	r3, r0
 8001a64:	460c      	mov	r4, r1
 8001a66:	4618      	mov	r0, r3
 8001a68:	4621      	mov	r1, r4
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	4b40      	ldr	r3, [pc, #256]	; (8001b70 <rotateX3D+0x128>)
 8001a70:	f7fe fef0 	bl	8000854 <__aeabi_ddiv>
 8001a74:	4603      	mov	r3, r0
 8001a76:	460c      	mov	r4, r1
 8001a78:	ec44 3b17 	vmov	d7, r3, r4
 8001a7c:	eeb0 0a47 	vmov.f32	s0, s14
 8001a80:	eef0 0a67 	vmov.f32	s1, s15
 8001a84:	f005 fd5c 	bl	8007540 <sin>
 8001a88:	ec54 3b10 	vmov	r3, r4, d0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	4621      	mov	r1, r4
 8001a90:	f7ff f88e 	bl	8000bb0 <__aeabi_d2f>
 8001a94:	4603      	mov	r3, r0
 8001a96:	61bb      	str	r3, [r7, #24]
  float cos_t = cos(theta * M_PI / 180);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7fe fd5d 	bl	8000558 <__aeabi_f2d>
 8001a9e:	a332      	add	r3, pc, #200	; (adr r3, 8001b68 <rotateX3D+0x120>)
 8001aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa4:	f7fe fdac 	bl	8000600 <__aeabi_dmul>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	460c      	mov	r4, r1
 8001aac:	4618      	mov	r0, r3
 8001aae:	4621      	mov	r1, r4
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	4b2e      	ldr	r3, [pc, #184]	; (8001b70 <rotateX3D+0x128>)
 8001ab6:	f7fe fecd 	bl	8000854 <__aeabi_ddiv>
 8001aba:	4603      	mov	r3, r0
 8001abc:	460c      	mov	r4, r1
 8001abe:	ec44 3b17 	vmov	d7, r3, r4
 8001ac2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ac6:	eef0 0a67 	vmov.f32	s1, s15
 8001aca:	f005 fcf5 	bl	80074b8 <cos>
 8001ace:	ec54 3b10 	vmov	r3, r4, d0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	f7ff f86b 	bl	8000bb0 <__aeabi_d2f>
 8001ada:	4603      	mov	r3, r0
 8001adc:	617b      	str	r3, [r7, #20]

  for(int i = 0; i < COUNT_NODES; i++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	e038      	b.n	8001b56 <rotateX3D+0x10e>
  {
    float y = nodes[i][1];
 8001ae4:	4a23      	ldr	r2, [pc, #140]	; (8001b74 <rotateX3D+0x12c>)
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	613b      	str	r3, [r7, #16]
    float z = nodes[i][2];
 8001af0:	4a20      	ldr	r2, [pc, #128]	; (8001b74 <rotateX3D+0x12c>)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	60fb      	str	r3, [r7, #12]
    nodes[i][1] = y * cos_t - z * sin_t;
 8001afc:	4a1d      	ldr	r2, [pc, #116]	; (8001b74 <rotateX3D+0x12c>)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b04:	3304      	adds	r3, #4
 8001b06:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b12:	edd7 6a03 	vldr	s13, [r7, #12]
 8001b16:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b22:	edc3 7a00 	vstr	s15, [r3]
    nodes[i][2] = z * cos_t + y * sin_t;
 8001b26:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <rotateX3D+0x12c>)
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2e:	3308      	adds	r3, #8
 8001b30:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b34:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b3c:	edd7 6a04 	vldr	s13, [r7, #16]
 8001b40:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4c:	edc3 7a00 	vstr	s15, [r3]
  for(int i = 0; i < COUNT_NODES; i++)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	3301      	adds	r3, #1
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	2b07      	cmp	r3, #7
 8001b5a:	ddc3      	ble.n	8001ae4 <rotateX3D+0x9c>
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3724      	adds	r7, #36	; 0x24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd90      	pop	{r4, r7, pc}
 8001b64:	f3af 8000 	nop.w
 8001b68:	54442d18 	.word	0x54442d18
 8001b6c:	400921fb 	.word	0x400921fb
 8001b70:	40668000 	.word	0x40668000
 8001b74:	20000060 	.word	0x20000060

08001b78 <DrawCube>:

void DrawCube(bool color)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  for(int i = 0; i < COUNT_EDGES; i++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	e06b      	b.n	8001c60 <DrawCube+0xe8>
  {
    float *n0 = nodes[edges[i][0]];
 8001b88:	4a39      	ldr	r2, [pc, #228]	; (8001c70 <DrawCube+0xf8>)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a38      	ldr	r2, [pc, #224]	; (8001c74 <DrawCube+0xfc>)
 8001b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b98:	613b      	str	r3, [r7, #16]
    float *n1 = nodes[edges[i][1]];
 8001b9a:	4a35      	ldr	r2, [pc, #212]	; (8001c70 <DrawCube+0xf8>)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a33      	ldr	r2, [pc, #204]	; (8001c74 <DrawCube+0xfc>)
 8001ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bac:	60fb      	str	r3, [r7, #12]

    DISP_DrawLine((n0[0] + center[0]) * 16 / 200, (n0[1] + center[1]) * 16 / 200,
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	ed93 7a00 	vldr	s14, [r3]
 8001bb4:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <DrawCube+0x100>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bbe:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001bc2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bc6:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001c7c <DrawCube+0x104>
 8001bca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bce:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	ed93 7a00 	vldr	s14, [r3]
 8001bda:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <DrawCube+0x100>)
 8001bdc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be4:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001be8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bec:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001c7c <DrawCube+0x104>
 8001bf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf4:	eefd 5ae7 	vcvt.s32.f32	s11, s15
      (n1[0] + center[0]) * 16 / 200, (n1[1] + center[1]) * 16 / 200,
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	ed93 7a00 	vldr	s14, [r3]
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <DrawCube+0x100>)
 8001c00:	edd3 7a00 	vldr	s15, [r3]
 8001c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c08:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001c0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c10:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001c7c <DrawCube+0x104>
 8001c14:	eec7 7a26 	vdiv.f32	s15, s14, s13
    DISP_DrawLine((n0[0] + center[0]) * 16 / 200, (n0[1] + center[1]) * 16 / 200,
 8001c18:	eebd 5ae7 	vcvt.s32.f32	s10, s15
      (n1[0] + center[0]) * 16 / 200, (n1[1] + center[1]) * 16 / 200,
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	3304      	adds	r3, #4
 8001c20:	ed93 7a00 	vldr	s14, [r3]
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <DrawCube+0x100>)
 8001c26:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001c32:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c36:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001c7c <DrawCube+0x104>
 8001c3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
    DISP_DrawLine((n0[0] + center[0]) * 16 / 200, (n0[1] + center[1]) * 16 / 200,
 8001c3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	ee17 3a90 	vmov	r3, s15
 8001c4a:	ee15 2a10 	vmov	r2, s10
 8001c4e:	ee15 1a90 	vmov	r1, s11
 8001c52:	ee16 0a10 	vmov	r0, s12
 8001c56:	f7ff fb87 	bl	8001368 <DISP_DrawLine>
  for(int i = 0; i < COUNT_EDGES; i++)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2b0b      	cmp	r3, #11
 8001c64:	dd90      	ble.n	8001b88 <DrawCube+0x10>
      color);
  }
}
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200000e8 	.word	0x200000e8
 8001c74:	20000060 	.word	0x20000060
 8001c78:	20000080 	.word	0x20000080
 8001c7c:	43480000 	.word	0x43480000

08001c80 <RedrawCube>:

void RedrawCube(float xAng, float yAng, float zAng)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c8a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c8e:	ed87 1a01 	vstr	s2, [r7, #4]
  DrawCube(false);
 8001c92:	2000      	movs	r0, #0
 8001c94:	f7ff ff70 	bl	8001b78 <DrawCube>

  if (zAng != 0)
 8001c98:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca4:	d003      	beq.n	8001cae <RedrawCube+0x2e>
    rotateZ3D(zAng);
 8001ca6:	ed97 0a01 	vldr	s0, [r7, #4]
 8001caa:	f7ff fd9d 	bl	80017e8 <rotateZ3D>
  if (xAng != 0)
 8001cae:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cb2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cba:	d003      	beq.n	8001cc4 <RedrawCube+0x44>
    rotateX3D(xAng);
 8001cbc:	ed97 0a03 	vldr	s0, [r7, #12]
 8001cc0:	f7ff fec2 	bl	8001a48 <rotateX3D>
  if (yAng != 0)
 8001cc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cc8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd0:	d003      	beq.n	8001cda <RedrawCube+0x5a>
    rotateY3D(yAng);
 8001cd2:	ed97 0a02 	vldr	s0, [r7, #8]
 8001cd6:	f7ff fe1f 	bl	8001918 <rotateY3D>

  DrawCube(true);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f7ff ff4c 	bl	8001b78 <DrawCube>
}
 8001ce0:	bf00      	nop
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af02      	add	r7, sp, #8
  uint32_t tmBtn = 0, tmAction = 0, intervalAction = 1000;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfa:	60fb      	str	r3, [r7, #12]
  bool bbButton, bbLastButton = true;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	72fb      	strb	r3, [r7, #11]
  eStates state = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	72bb      	strb	r3, [r7, #10]
  int boxCount = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	607b      	str	r3, [r7, #4]
  bool boxColor = true;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	70fb      	strb	r3, [r7, #3]
  bool autoRotate = true;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	70bb      	strb	r3, [r7, #2]

  SystemClock_100MHz();
 8001d10:	f000 fad6 	bl	80022c0 <SystemClock_100MHz>
  SystemCoreClockUpdate();
 8001d14:	f001 fb20 	bl	8003358 <SystemCoreClockUpdate>

  InitSystickDefault();
 8001d18:	f001 fc0e 	bl	8003538 <InitSystickDefault>

// shared SPI-CLK  Nucleo_SetPinGPIO(GPIOA, 5, output);
//  Nucleo_SetPinGPIO(GPIOC, 13, input_pullup);
  Nucleo_SetPinGPIO(GPIOA, 0, input_pullup);
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	2100      	movs	r1, #0
 8001d20:	48b0      	ldr	r0, [pc, #704]	; (8001fe4 <main+0x2fc>)
 8001d22:	f000 fb57 	bl	80023d4 <Nucleo_SetPinGPIO>

  Nucleo_StartUart2(38400);
 8001d26:	f44f 4016 	mov.w	r0, #38400	; 0x9600
 8001d2a:	f000 fd1f 	bl	800276c <Nucleo_StartUart2>

  // pozor, bez tohoto nefunguje putchar a musel by byt fputc(.., stdout)
  setvbuf(stdout,NULL,_IONBF,0);
 8001d2e:	4bae      	ldr	r3, [pc, #696]	; (8001fe8 <main+0x300>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6898      	ldr	r0, [r3, #8]
 8001d34:	2300      	movs	r3, #0
 8001d36:	2202      	movs	r2, #2
 8001d38:	2100      	movs	r1, #0
 8001d3a:	f001 fcf5 	bl	8003728 <setvbuf>
  setvbuf(stdin,NULL,_IONBF,0);
 8001d3e:	4baa      	ldr	r3, [pc, #680]	; (8001fe8 <main+0x300>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6858      	ldr	r0, [r3, #4]
 8001d44:	2300      	movs	r3, #0
 8001d46:	2202      	movs	r2, #2
 8001d48:	2100      	movs	r1, #0
 8001d4a:	f001 fced 	bl	8003728 <setvbuf>

  puts("\n\nStart APP OLED (ASE) - " __DATE__ " " __TIME__);
 8001d4e:	48a7      	ldr	r0, [pc, #668]	; (8001fec <main+0x304>)
 8001d50:	f001 fcb6 	bl	80036c0 <puts>
  printf("CoreClock: %ld\n", SystemCoreClock);
 8001d54:	4ba6      	ldr	r3, [pc, #664]	; (8001ff0 <main+0x308>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	48a6      	ldr	r0, [pc, #664]	; (8001ff4 <main+0x30c>)
 8001d5c:	f001 fc38 	bl	80035d0 <printf>

  OLED_Init();    //! globalne musi byt nastaven REFRESH_TIMER, ktery Timer pro refresh
 8001d60:	f001 f8c4 	bl	8002eec <OLED_Init>

  WaitMs(50);
 8001d64:	2032      	movs	r0, #50	; 0x32
 8001d66:	f001 fbcf 	bl	8003508 <WaitMs>

  puts("OLED Init finish");
 8001d6a:	48a3      	ldr	r0, [pc, #652]	; (8001ff8 <main+0x310>)
 8001d6c:	f001 fca8 	bl	80036c0 <puts>

  DISP_Clear();
 8001d70:	f7ff fa92 	bl	8001298 <DISP_Clear>
  DISP_DemoCntRow(2);
 8001d74:	2002      	movs	r0, #2
 8001d76:	f7ff facf 	bl	8001318 <DISP_DemoCntRow>

  tmBtn = CUR_TICKS - 1;   // aby se to hned spustilo
 8001d7a:	4ba0      	ldr	r3, [pc, #640]	; (8001ffc <main+0x314>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	617b      	str	r3, [r7, #20]

  DISP_GotoXY(0, 0);
 8001d82:	2100      	movs	r1, #0
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7ff f967 	bl	8001058 <DISP_GotoXY>

  /* Infinite loop */
  while (1)
  {
    if (CUR_TICKS > tmBtn)
 8001d8a:	4b9c      	ldr	r3, [pc, #624]	; (8001ffc <main+0x314>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	f240 8081 	bls.w	8001e98 <main+0x1b0>
    {
      tmBtn = CUR_TICKS + 10;
 8001d96:	4b99      	ldr	r3, [pc, #612]	; (8001ffc <main+0x314>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	330a      	adds	r3, #10
 8001d9c:	617b      	str	r3, [r7, #20]

//      bbButton = GPIO_READ(GPIOC, 13);
      bbButton = GPIO_READ(GPIOA, 0);
 8001d9e:	4b91      	ldr	r3, [pc, #580]	; (8001fe4 <main+0x2fc>)
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	bf14      	ite	ne
 8001daa:	2301      	movne	r3, #1
 8001dac:	2300      	moveq	r3, #0
 8001dae:	707b      	strb	r3, [r7, #1]

      if (bbLastButton != bbButton)
 8001db0:	7afa      	ldrb	r2, [r7, #11]
 8001db2:	787b      	ldrb	r3, [r7, #1]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d06f      	beq.n	8001e98 <main+0x1b0>
      {
        bbLastButton = bbButton;
 8001db8:	787b      	ldrb	r3, [r7, #1]
 8001dba:	72fb      	strb	r3, [r7, #11]

        if (bbButton)       // edge to H
 8001dbc:	787b      	ldrb	r3, [r7, #1]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d06a      	beq.n	8001e98 <main+0x1b0>
        {
          state++;
 8001dc2:	7abb      	ldrb	r3, [r7, #10]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	72bb      	strb	r3, [r7, #10]
          if (state >= stateLast)
 8001dc8:	7abb      	ldrb	r3, [r7, #10]
 8001dca:	2b06      	cmp	r3, #6
 8001dcc:	d901      	bls.n	8001dd2 <main+0xea>
            state = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	72bb      	strb	r3, [r7, #10]

          printf("\nNew State %d\n", state);
 8001dd2:	7abb      	ldrb	r3, [r7, #10]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	488a      	ldr	r0, [pc, #552]	; (8002000 <main+0x318>)
 8001dd8:	f001 fbfa 	bl	80035d0 <printf>

          DISP_Clear();
 8001ddc:	f7ff fa5c 	bl	8001298 <DISP_Clear>

          switch(state)
 8001de0:	7abb      	ldrb	r3, [r7, #10]
 8001de2:	2b06      	cmp	r3, #6
 8001de4:	d857      	bhi.n	8001e96 <main+0x1ae>
 8001de6:	a201      	add	r2, pc, #4	; (adr r2, 8001dec <main+0x104>)
 8001de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dec:	08001e09 	.word	0x08001e09
 8001df0:	08001e1f 	.word	0x08001e1f
 8001df4:	08001e35 	.word	0x08001e35
 8001df8:	08001e4b 	.word	0x08001e4b
 8001dfc:	08001e61 	.word	0x08001e61
 8001e00:	08001e71 	.word	0x08001e71
 8001e04:	08001e81 	.word	0x08001e81
          {
            case stateTextAtari:
              DISP_SetFont(font_atari_8x8);
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f7ff f8cf 	bl	8000fac <DISP_SetFont>
              DISP_GotoXY(0, 0);
 8001e0e:	2100      	movs	r1, #0
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7ff f921 	bl	8001058 <DISP_GotoXY>
              DISP_WriteString("ATARI 8x8");
 8001e16:	487b      	ldr	r0, [pc, #492]	; (8002004 <main+0x31c>)
 8001e18:	f7ff f976 	bl	8001108 <DISP_WriteString>
              break;
 8001e1c:	e03c      	b.n	8001e98 <main+0x1b0>
            case stateTextThin:
              DISP_SetFont(font_thin_8x8);
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f7ff f8c4 	bl	8000fac <DISP_SetFont>
              DISP_GotoXY(0, 0);
 8001e24:	2100      	movs	r1, #0
 8001e26:	2000      	movs	r0, #0
 8001e28:	f7ff f916 	bl	8001058 <DISP_GotoXY>
              DISP_WriteString("Thin 8x8");
 8001e2c:	4876      	ldr	r0, [pc, #472]	; (8002008 <main+0x320>)
 8001e2e:	f7ff f96b 	bl	8001108 <DISP_WriteString>
              break;
 8001e32:	e031      	b.n	8001e98 <main+0x1b0>
            case stateText5x7:
              DISP_SetFont(font_system_5x7);
 8001e34:	2002      	movs	r0, #2
 8001e36:	f7ff f8b9 	bl	8000fac <DISP_SetFont>
              DISP_GotoXY(0, 0);
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f7ff f90b 	bl	8001058 <DISP_GotoXY>
              DISP_WriteString("System 5x7");
 8001e42:	4872      	ldr	r0, [pc, #456]	; (800200c <main+0x324>)
 8001e44:	f7ff f960 	bl	8001108 <DISP_WriteString>
              break;
 8001e48:	e026      	b.n	8001e98 <main+0x1b0>
            case stateText3x5:
              DISP_SetFont(font_wendy_3x5);
 8001e4a:	2003      	movs	r0, #3
 8001e4c:	f7ff f8ae 	bl	8000fac <DISP_SetFont>
              DISP_GotoXY(0, 0);
 8001e50:	2100      	movs	r1, #0
 8001e52:	2000      	movs	r0, #0
 8001e54:	f7ff f900 	bl	8001058 <DISP_GotoXY>
              DISP_WriteString("Wendy 3x5");
 8001e58:	486d      	ldr	r0, [pc, #436]	; (8002010 <main+0x328>)
 8001e5a:	f7ff f955 	bl	8001108 <DISP_WriteString>
              break;
 8001e5e:	e01b      	b.n	8001e98 <main+0x1b0>
              DISP_GotoXY(0, 0);
              DISP_WriteString("NewBasec 3x6");
              break;
              */
            case stateBoxes:
              boxColor = true;
 8001e60:	2301      	movs	r3, #1
 8001e62:	70fb      	strb	r3, [r7, #3]
              boxCount = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	607b      	str	r3, [r7, #4]
              intervalAction = 1000;
 8001e68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e6c:	60fb      	str	r3, [r7, #12]
              break;
 8001e6e:	e013      	b.n	8001e98 <main+0x1b0>
            case stateCircles:
              boxColor = true;
 8001e70:	2301      	movs	r3, #1
 8001e72:	70fb      	strb	r3, [r7, #3]
              boxCount = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	607b      	str	r3, [r7, #4]
              intervalAction = 1000;
 8001e78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e7c:	60fb      	str	r3, [r7, #12]
              break;
 8001e7e:	e00b      	b.n	8001e98 <main+0x1b0>
            case stateCube:
              rotateY3D(15);
 8001e80:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001e84:	f7ff fd48 	bl	8001918 <rotateY3D>
              rotateX3D(5);
 8001e88:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001e8c:	f7ff fddc 	bl	8001a48 <rotateX3D>
              intervalAction = 100;
 8001e90:	2364      	movs	r3, #100	; 0x64
 8001e92:	60fb      	str	r3, [r7, #12]
              break;
 8001e94:	e000      	b.n	8001e98 <main+0x1b0>
            case stateLast:
            default:
              break;
 8001e96:	bf00      	nop
          }
        }
      }
    }

    if (CUR_TICKS > tmAction)
 8001e98:	4b58      	ldr	r3, [pc, #352]	; (8001ffc <main+0x314>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	f240 8084 	bls.w	8001fac <main+0x2c4>
    {
      tmAction = CUR_TICKS + intervalAction;
 8001ea4:	4b55      	ldr	r3, [pc, #340]	; (8001ffc <main+0x314>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]

      putchar('*');
 8001eae:	4b4e      	ldr	r3, [pc, #312]	; (8001fe8 <main+0x300>)
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	4b4d      	ldr	r3, [pc, #308]	; (8001fe8 <main+0x300>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	212a      	movs	r1, #42	; 0x2a
 8001ebc:	f7ff fc64 	bl	8001788 <__sputc_r>

      switch(state)
 8001ec0:	7abb      	ldrb	r3, [r7, #10]
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d86b      	bhi.n	8001f9e <main+0x2b6>
 8001ec6:	a201      	add	r2, pc, #4	; (adr r2, 8001ecc <main+0x1e4>)
 8001ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ecc:	08001f9f 	.word	0x08001f9f
 8001ed0:	08001f9f 	.word	0x08001f9f
 8001ed4:	08001f9f 	.word	0x08001f9f
 8001ed8:	08001f9f 	.word	0x08001f9f
 8001edc:	08001ee9 	.word	0x08001ee9
 8001ee0:	08001f43 	.word	0x08001f43
 8001ee4:	08001f87 	.word	0x08001f87
        case stateText5x7:
        case stateText3x5:
//        case stateText3x6:
          break;
        case stateBoxes:
          DISP_DrawRect(
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	1898      	adds	r0, r3, r2
              boxCount * 5, boxCount,
              OLED_WIDTH_PIX - boxCount * 10 - 1, OLED_HEIGHT_PIX - 2 * boxCount - 1,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f06f 0209 	mvn.w	r2, #9
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
          DISP_DrawRect(
 8001efa:	f103 027f 	add.w	r2, r3, #127	; 0x7f
              OLED_WIDTH_PIX - boxCount * 10 - 1, OLED_HEIGHT_PIX - 2 * boxCount - 1,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f1c3 0310 	rsb	r3, r3, #16
 8001f04:	005b      	lsls	r3, r3, #1
          DISP_DrawRect(
 8001f06:	1e59      	subs	r1, r3, #1
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	f7ff faa0 	bl	8001454 <DISP_DrawRect>
              boxColor);
          boxCount += 2;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3302      	adds	r3, #2
 8001f18:	607b      	str	r3, [r7, #4]
          if (boxCount >= 10)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b09      	cmp	r3, #9
 8001f1e:	dd40      	ble.n	8001fa2 <main+0x2ba>
          {
            boxCount = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	607b      	str	r3, [r7, #4]
            boxColor = !boxColor;
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	bf14      	ite	ne
 8001f2a:	2301      	movne	r3, #1
 8001f2c:	2300      	moveq	r3, #0
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	f083 0301 	eor.w	r3, r3, #1
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	70fb      	strb	r3, [r7, #3]
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	70fb      	strb	r3, [r7, #3]
          }

          break;
 8001f40:	e02f      	b.n	8001fa2 <main+0x2ba>
        case stateCircles:
          DISP_DrawCircle(
              boxCount * 5 + OLED_HEIGHT_PIX / 2, OLED_HEIGHT_PIX / 2,
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
          DISP_DrawCircle(
 8001f4a:	f103 0010 	add.w	r0, r3, #16
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	220f      	movs	r2, #15
 8001f52:	2110      	movs	r1, #16
 8001f54:	f7ff fabc 	bl	80014d0 <DISP_DrawCircle>
              OLED_HEIGHT_PIX / 2 - 1,
              boxColor);
          boxCount += 2;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	607b      	str	r3, [r7, #4]
          if (boxCount >= 10)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b09      	cmp	r3, #9
 8001f62:	dd20      	ble.n	8001fa6 <main+0x2be>
          {
            boxCount = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	607b      	str	r3, [r7, #4]
            boxColor = !boxColor;
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	bf14      	ite	ne
 8001f6e:	2301      	movne	r3, #1
 8001f70:	2300      	moveq	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f083 0301 	eor.w	r3, r3, #1
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	70fb      	strb	r3, [r7, #3]
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	70fb      	strb	r3, [r7, #3]
          }

          break;
 8001f84:	e00f      	b.n	8001fa6 <main+0x2be>
        case stateCube:
          if (autoRotate)
 8001f86:	78bb      	ldrb	r3, [r7, #2]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00e      	beq.n	8001faa <main+0x2c2>
          {
            RedrawCube(5, 0, 15);
 8001f8c:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
 8001f90:	eddf 0a20 	vldr	s1, [pc, #128]	; 8002014 <main+0x32c>
 8001f94:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001f98:	f7ff fe72 	bl	8001c80 <RedrawCube>
          }
          break;
 8001f9c:	e005      	b.n	8001faa <main+0x2c2>
        case stateLast:
        default:
          break;
 8001f9e:	bf00      	nop
 8001fa0:	e004      	b.n	8001fac <main+0x2c4>
          break;
 8001fa2:	bf00      	nop
 8001fa4:	e002      	b.n	8001fac <main+0x2c4>
          break;
 8001fa6:	bf00      	nop
 8001fa8:	e000      	b.n	8001fac <main+0x2c4>
          break;
 8001faa:	bf00      	nop
      }
    }

    if (isCharRecv())
 8001fac:	f000 fd12 	bl	80029d4 <isCharRecv>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f43f aee9 	beq.w	8001d8a <main+0xa2>
    {
      char c = getchar();
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <main+0x300>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	3a01      	subs	r2, #1
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	da26      	bge.n	8002018 <main+0x330>
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <main+0x300>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <main+0x300>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	f001 fb7a 	bl	80036d0 <__srget_r>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	e021      	b.n	8002026 <main+0x33e>
 8001fe2:	bf00      	nop
 8001fe4:	40020000 	.word	0x40020000
 8001fe8:	20000128 	.word	0x20000128
 8001fec:	080085e0 	.word	0x080085e0
 8001ff0:	20000120 	.word	0x20000120
 8001ff4:	08008610 	.word	0x08008610
 8001ff8:	08008620 	.word	0x08008620
 8001ffc:	20000c00 	.word	0x20000c00
 8002000:	08008634 	.word	0x08008634
 8002004:	08008644 	.word	0x08008644
 8002008:	08008650 	.word	0x08008650
 800200c:	0800865c 	.word	0x0800865c
 8002010:	08008668 	.word	0x08008668
 8002014:	00000000 	.word	0x00000000
 8002018:	4b9b      	ldr	r3, [pc, #620]	; (8002288 <main+0x5a0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	6813      	ldr	r3, [r2, #0]
 8002020:	1c59      	adds	r1, r3, #1
 8002022:	6011      	str	r1, [r2, #0]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	703b      	strb	r3, [r7, #0]

      switch (state)
 8002028:	7abb      	ldrb	r3, [r7, #10]
 800202a:	2b06      	cmp	r3, #6
 800202c:	f040 810e 	bne.w	800224c <main+0x564>
      {
        case stateCube:
          if (c == ' ')
 8002030:	783b      	ldrb	r3, [r7, #0]
 8002032:	2b20      	cmp	r3, #32
 8002034:	d10d      	bne.n	8002052 <main+0x36a>
            autoRotate = !autoRotate;
 8002036:	78bb      	ldrb	r3, [r7, #2]
 8002038:	2b00      	cmp	r3, #0
 800203a:	bf14      	ite	ne
 800203c:	2301      	movne	r3, #1
 800203e:	2300      	moveq	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	f083 0301 	eor.w	r3, r3, #1
 8002046:	b2db      	uxtb	r3, r3
 8002048:	70bb      	strb	r3, [r7, #2]
 800204a:	78bb      	ldrb	r3, [r7, #2]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	70bb      	strb	r3, [r7, #2]

          if (!autoRotate)
 8002052:	78bb      	ldrb	r3, [r7, #2]
 8002054:	f083 0301 	eor.w	r3, r3, #1
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 80a6 	beq.w	80021ac <main+0x4c4>
          {
            switch(c)
 8002060:	783b      	ldrb	r3, [r7, #0]
 8002062:	3b41      	subs	r3, #65	; 0x41
 8002064:	2b36      	cmp	r3, #54	; 0x36
 8002066:	f200 80a1 	bhi.w	80021ac <main+0x4c4>
 800206a:	a201      	add	r2, pc, #4	; (adr r2, 8002070 <main+0x388>)
 800206c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002070:	0800214d 	.word	0x0800214d
 8002074:	080021ad 	.word	0x080021ad
 8002078:	080021ad 	.word	0x080021ad
 800207c:	08002165 	.word	0x08002165
 8002080:	080021ad 	.word	0x080021ad
 8002084:	080021ad 	.word	0x080021ad
 8002088:	080021ad 	.word	0x080021ad
 800208c:	080021ad 	.word	0x080021ad
 8002090:	080021ad 	.word	0x080021ad
 8002094:	080021ad 	.word	0x080021ad
 8002098:	080021ad 	.word	0x080021ad
 800209c:	080021ad 	.word	0x080021ad
 80020a0:	080021ad 	.word	0x080021ad
 80020a4:	080021ad 	.word	0x080021ad
 80020a8:	080021ad 	.word	0x080021ad
 80020ac:	080021ad 	.word	0x080021ad
 80020b0:	080021ad 	.word	0x080021ad
 80020b4:	080021ad 	.word	0x080021ad
 80020b8:	0800217d 	.word	0x0800217d
 80020bc:	080021ad 	.word	0x080021ad
 80020c0:	080021ad 	.word	0x080021ad
 80020c4:	080021ad 	.word	0x080021ad
 80020c8:	08002195 	.word	0x08002195
 80020cc:	080021ad 	.word	0x080021ad
 80020d0:	080021ad 	.word	0x080021ad
 80020d4:	080021ad 	.word	0x080021ad
 80020d8:	080021ad 	.word	0x080021ad
 80020dc:	080021ad 	.word	0x080021ad
 80020e0:	080021ad 	.word	0x080021ad
 80020e4:	080021ad 	.word	0x080021ad
 80020e8:	080021ad 	.word	0x080021ad
 80020ec:	080021ad 	.word	0x080021ad
 80020f0:	0800214d 	.word	0x0800214d
 80020f4:	080021ad 	.word	0x080021ad
 80020f8:	080021ad 	.word	0x080021ad
 80020fc:	08002165 	.word	0x08002165
 8002100:	080021ad 	.word	0x080021ad
 8002104:	080021ad 	.word	0x080021ad
 8002108:	080021ad 	.word	0x080021ad
 800210c:	080021ad 	.word	0x080021ad
 8002110:	080021ad 	.word	0x080021ad
 8002114:	080021ad 	.word	0x080021ad
 8002118:	080021ad 	.word	0x080021ad
 800211c:	080021ad 	.word	0x080021ad
 8002120:	080021ad 	.word	0x080021ad
 8002124:	080021ad 	.word	0x080021ad
 8002128:	080021ad 	.word	0x080021ad
 800212c:	080021ad 	.word	0x080021ad
 8002130:	080021ad 	.word	0x080021ad
 8002134:	080021ad 	.word	0x080021ad
 8002138:	0800217d 	.word	0x0800217d
 800213c:	080021ad 	.word	0x080021ad
 8002140:	080021ad 	.word	0x080021ad
 8002144:	080021ad 	.word	0x080021ad
 8002148:	08002195 	.word	0x08002195
            {
              case 'a':
              case 'A':
                puts("Left");
 800214c:	484f      	ldr	r0, [pc, #316]	; (800228c <main+0x5a4>)
 800214e:	f001 fab7 	bl	80036c0 <puts>
                RedrawCube(0, 5, 0);
 8002152:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 8002290 <main+0x5a8>
 8002156:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800215a:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8002290 <main+0x5a8>
 800215e:	f7ff fd8f 	bl	8001c80 <RedrawCube>
                break;
 8002162:	e023      	b.n	80021ac <main+0x4c4>
              case 'd':
              case 'D':
                puts("Right");
 8002164:	484b      	ldr	r0, [pc, #300]	; (8002294 <main+0x5ac>)
 8002166:	f001 faab 	bl	80036c0 <puts>
                RedrawCube(0, -5, 0);
 800216a:	ed9f 1a49 	vldr	s2, [pc, #292]	; 8002290 <main+0x5a8>
 800216e:	eef9 0a04 	vmov.f32	s1, #148	; 0xc0a00000 -5.0
 8002172:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8002290 <main+0x5a8>
 8002176:	f7ff fd83 	bl	8001c80 <RedrawCube>
                break;
 800217a:	e017      	b.n	80021ac <main+0x4c4>
              case 's':
              case 'S':
                puts("Down");
 800217c:	4846      	ldr	r0, [pc, #280]	; (8002298 <main+0x5b0>)
 800217e:	f001 fa9f 	bl	80036c0 <puts>
                RedrawCube(5, 0, 0);
 8002182:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8002290 <main+0x5a8>
 8002186:	eddf 0a42 	vldr	s1, [pc, #264]	; 8002290 <main+0x5a8>
 800218a:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800218e:	f7ff fd77 	bl	8001c80 <RedrawCube>
                break;
 8002192:	e00b      	b.n	80021ac <main+0x4c4>
              case 'w':
              case 'W':
                puts("Up");
 8002194:	4841      	ldr	r0, [pc, #260]	; (800229c <main+0x5b4>)
 8002196:	f001 fa93 	bl	80036c0 <puts>
                RedrawCube(-5, 0, 0);
 800219a:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 8002290 <main+0x5a8>
 800219e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8002290 <main+0x5a8>
 80021a2:	eeb9 0a04 	vmov.f32	s0, #148	; 0xc0a00000 -5.0
 80021a6:	f7ff fd6b 	bl	8001c80 <RedrawCube>
                break;
 80021aa:	bf00      	nop
            }
          }

          switch(c)
 80021ac:	783b      	ldrb	r3, [r7, #0]
 80021ae:	2b51      	cmp	r3, #81	; 0x51
 80021b0:	d009      	beq.n	80021c6 <main+0x4de>
 80021b2:	2b51      	cmp	r3, #81	; 0x51
 80021b4:	dc02      	bgt.n	80021bc <main+0x4d4>
 80021b6:	2b45      	cmp	r3, #69	; 0x45
 80021b8:	d026      	beq.n	8002208 <main+0x520>
              if (center[0] > 1400)
                center[0] = 1400;
              DrawCube(true);
              break;
          }
          break;
 80021ba:	e064      	b.n	8002286 <main+0x59e>
          switch(c)
 80021bc:	2b65      	cmp	r3, #101	; 0x65
 80021be:	d023      	beq.n	8002208 <main+0x520>
 80021c0:	2b71      	cmp	r3, #113	; 0x71
 80021c2:	d000      	beq.n	80021c6 <main+0x4de>
          break;
 80021c4:	e05f      	b.n	8002286 <main+0x59e>
              puts("Move Left");
 80021c6:	4836      	ldr	r0, [pc, #216]	; (80022a0 <main+0x5b8>)
 80021c8:	f001 fa7a 	bl	80036c0 <puts>
              DrawCube(false);
 80021cc:	2000      	movs	r0, #0
 80021ce:	f7ff fcd3 	bl	8001b78 <DrawCube>
              center[0] -= 100;
 80021d2:	4b34      	ldr	r3, [pc, #208]	; (80022a4 <main+0x5bc>)
 80021d4:	edd3 7a00 	vldr	s15, [r3]
 80021d8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80022a8 <main+0x5c0>
 80021dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021e0:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <main+0x5bc>)
 80021e2:	edc3 7a00 	vstr	s15, [r3]
              if (center[0] < 200)
 80021e6:	4b2f      	ldr	r3, [pc, #188]	; (80022a4 <main+0x5bc>)
 80021e8:	edd3 7a00 	vldr	s15, [r3]
 80021ec:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80022ac <main+0x5c4>
 80021f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f8:	d502      	bpl.n	8002200 <main+0x518>
                center[0] = 200;
 80021fa:	4b2a      	ldr	r3, [pc, #168]	; (80022a4 <main+0x5bc>)
 80021fc:	4a2c      	ldr	r2, [pc, #176]	; (80022b0 <main+0x5c8>)
 80021fe:	601a      	str	r2, [r3, #0]
              DrawCube(true);
 8002200:	2001      	movs	r0, #1
 8002202:	f7ff fcb9 	bl	8001b78 <DrawCube>
              break;
 8002206:	e020      	b.n	800224a <main+0x562>
              puts("Move Right");
 8002208:	482a      	ldr	r0, [pc, #168]	; (80022b4 <main+0x5cc>)
 800220a:	f001 fa59 	bl	80036c0 <puts>
              DrawCube(false);
 800220e:	2000      	movs	r0, #0
 8002210:	f7ff fcb2 	bl	8001b78 <DrawCube>
              center[0] += 100;
 8002214:	4b23      	ldr	r3, [pc, #140]	; (80022a4 <main+0x5bc>)
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80022a8 <main+0x5c0>
 800221e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <main+0x5bc>)
 8002224:	edc3 7a00 	vstr	s15, [r3]
              if (center[0] > 1400)
 8002228:	4b1e      	ldr	r3, [pc, #120]	; (80022a4 <main+0x5bc>)
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80022b8 <main+0x5d0>
 8002232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223a:	dd02      	ble.n	8002242 <main+0x55a>
                center[0] = 1400;
 800223c:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <main+0x5bc>)
 800223e:	4a1f      	ldr	r2, [pc, #124]	; (80022bc <main+0x5d4>)
 8002240:	601a      	str	r2, [r3, #0]
              DrawCube(true);
 8002242:	2001      	movs	r0, #1
 8002244:	f7ff fc98 	bl	8001b78 <DrawCube>
              break;
 8002248:	bf00      	nop
          break;
 800224a:	e01c      	b.n	8002286 <main+0x59e>
        default:
          switch(c)
          {
            default:
              if ((c >= 0) && (c <= 127))
 800224c:	f997 3000 	ldrsb.w	r3, [r7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0d      	blt.n	8002270 <main+0x588>
              {
                putchar(c);
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <main+0x5a0>)
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	7839      	ldrb	r1, [r7, #0]
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <main+0x5a0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	461a      	mov	r2, r3
 8002262:	f7ff fa91 	bl	8001788 <__sputc_r>
                DISP_WriteChar(c);
 8002266:	783b      	ldrb	r3, [r7, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe ff0b 	bl	8001084 <DISP_WriteChar>
              }
              else
                putchar('?');
              break;
 800226e:	e008      	b.n	8002282 <main+0x59a>
                putchar('?');
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <main+0x5a0>)
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	4b04      	ldr	r3, [pc, #16]	; (8002288 <main+0x5a0>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	461a      	mov	r2, r3
 800227c:	213f      	movs	r1, #63	; 0x3f
 800227e:	f7ff fa83 	bl	8001788 <__sputc_r>
              break;
 8002282:	bf00      	nop
          }
          break;
 8002284:	bf00      	nop
    if (CUR_TICKS > tmBtn)
 8002286:	e580      	b.n	8001d8a <main+0xa2>
 8002288:	20000128 	.word	0x20000128
 800228c:	08008674 	.word	0x08008674
 8002290:	00000000 	.word	0x00000000
 8002294:	0800867c 	.word	0x0800867c
 8002298:	08008684 	.word	0x08008684
 800229c:	0800868c 	.word	0x0800868c
 80022a0:	08008690 	.word	0x08008690
 80022a4:	20000080 	.word	0x20000080
 80022a8:	42c80000 	.word	0x42c80000
 80022ac:	43480000 	.word	0x43480000
 80022b0:	43480000 	.word	0x43480000
 80022b4:	0800869c 	.word	0x0800869c
 80022b8:	44af0000 	.word	0x44af0000
 80022bc:	44af0000 	.word	0x44af0000

080022c0 <SystemClock_100MHz>:
 */

#include "nucleo_core.h"

void SystemClock_100MHz(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  RCC->CR |= RCC_CR_HSION;            // pro jistotu zapnout HSI
 80022c4:	4a40      	ldr	r2, [pc, #256]	; (80023c8 <SystemClock_100MHz+0x108>)
 80022c6:	4b40      	ldr	r3, [pc, #256]	; (80023c8 <SystemClock_100MHz+0x108>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6013      	str	r3, [r2, #0]
  while(!(RCC->CR & RCC_CR_HSIRDY))   // cekej na zapnuti
 80022d0:	bf00      	nop
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <SystemClock_100MHz+0x108>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f9      	beq.n	80022d2 <SystemClock_100MHz+0x12>
    ;

  RCC->CFGR &= ~RCC_CFGR_SW;      // HSI as clock (kombinace 00)
 80022de:	4a3a      	ldr	r2, [pc, #232]	; (80023c8 <SystemClock_100MHz+0x108>)
 80022e0:	4b39      	ldr	r3, [pc, #228]	; (80023c8 <SystemClock_100MHz+0x108>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f023 0303 	bic.w	r3, r3, #3
 80022e8:	6093      	str	r3, [r2, #8]
  RCC->CR &= ~RCC_CR_PLLON;       // vypnout PLL, pokud by byla z HSE
 80022ea:	4a37      	ldr	r2, [pc, #220]	; (80023c8 <SystemClock_100MHz+0x108>)
 80022ec:	4b36      	ldr	r3, [pc, #216]	; (80023c8 <SystemClock_100MHz+0x108>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022f4:	6013      	str	r3, [r2, #0]
  RCC->CR = 0x81;                 // vypnout vse krome HSI, nejspis totiz bylo HSE
 80022f6:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <SystemClock_100MHz+0x108>)
 80022f8:	2281      	movs	r2, #129	; 0x81
 80022fa:	601a      	str	r2, [r3, #0]
                                  // HSI TRIM reset state - bits [7..3]

  RCC->APB1ENR |= RCC_APB1ENR_PWREN;  // zapnout PWR blok
 80022fc:	4a32      	ldr	r2, [pc, #200]	; (80023c8 <SystemClock_100MHz+0x108>)
 80022fe:	4b32      	ldr	r3, [pc, #200]	; (80023c8 <SystemClock_100MHz+0x108>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002306:	6413      	str	r3, [r2, #64]	; 0x40
  PWR->CR = (PWR->CR & ~PWR_CR_VOS) | PWR_CR_VOS_0 | PWR_CR_VOS_1;  // scale mode 1
 8002308:	4a30      	ldr	r2, [pc, #192]	; (80023cc <SystemClock_100MHz+0x10c>)
 800230a:	4b30      	ldr	r3, [pc, #192]	; (80023cc <SystemClock_100MHz+0x10c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002312:	6013      	str	r3, [r2, #0]

  RCC->CR |= RCC_CR_HSEON;
 8002314:	4a2c      	ldr	r2, [pc, #176]	; (80023c8 <SystemClock_100MHz+0x108>)
 8002316:	4b2c      	ldr	r3, [pc, #176]	; (80023c8 <SystemClock_100MHz+0x108>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231e:	6013      	str	r3, [r2, #0]
  while(!(RCC->CR & RCC_CR_HSERDY))   //TODO - timeout a prip. zustat na HSI
 8002320:	bf00      	nop
 8002322:	4b29      	ldr	r3, [pc, #164]	; (80023c8 <SystemClock_100MHz+0x108>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f9      	beq.n	8002322 <SystemClock_100MHz+0x62>
    ;

  RCC->PLLCFGR = RCC_PLLCFGR_PLLSRC_HSE;  // a ostatni vynulovat
 800232e:	4b26      	ldr	r3, [pc, #152]	; (80023c8 <SystemClock_100MHz+0x108>)
 8002330:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002334:	605a      	str	r2, [r3, #4]

  // Cube: HSE 8M, CLK 100M - /M = 4, PLL: N = 100x, P = /2
  // AHB = /1, APB1 = /2, APB2 = /1

  RCC->PLLCFGR |= 100 << 6;   // N 100x = 001100100 na [14..6]
 8002336:	4a24      	ldr	r2, [pc, #144]	; (80023c8 <SystemClock_100MHz+0x108>)
 8002338:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <SystemClock_100MHz+0x108>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8002340:	6053      	str	r3, [r2, #4]
  RCC->PLLCFGR |= 4;          // M   /4 = 000100    na [5..0]
 8002342:	4a21      	ldr	r2, [pc, #132]	; (80023c8 <SystemClock_100MHz+0x108>)
 8002344:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <SystemClock_100MHz+0x108>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f043 0304 	orr.w	r3, r3, #4
 800234c:	6053      	str	r3, [r2, #4]
                              // P   /2 = 00        na [17..16]

  RCC->CFGR &= ~RCC_CFGR_HPRE;   // 0xxx = not divided
 800234e:	4a1e      	ldr	r2, [pc, #120]	; (80023c8 <SystemClock_100MHz+0x108>)
 8002350:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <SystemClock_100MHz+0x108>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002358:	6093      	str	r3, [r2, #8]
  RCC->CFGR &= ~RCC_CFGR_PPRE1;  // 0xx = not divided
 800235a:	4a1b      	ldr	r2, [pc, #108]	; (80023c8 <SystemClock_100MHz+0x108>)
 800235c:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <SystemClock_100MHz+0x108>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002364:	6093      	str	r3, [r2, #8]
//  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;  // 100 = /2
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;  // 100 = /4 - podle Cube sice max. 50MHz, ale omezuje to I2C max. 42
 8002366:	4a18      	ldr	r2, [pc, #96]	; (80023c8 <SystemClock_100MHz+0x108>)
 8002368:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <SystemClock_100MHz+0x108>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002370:	6093      	str	r3, [r2, #8]
  RCC->CFGR &= ~RCC_CFGR_PPRE2;  // 0xx = not divided
 8002372:	4a15      	ldr	r2, [pc, #84]	; (80023c8 <SystemClock_100MHz+0x108>)
 8002374:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <SystemClock_100MHz+0x108>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800237c:	6093      	str	r3, [r2, #8]

  RCC->CR |= RCC_CR_PLLON;
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <SystemClock_100MHz+0x108>)
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <SystemClock_100MHz+0x108>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002388:	6013      	str	r3, [r2, #0]
  while(!(RCC->CR & RCC_CR_PLLRDY))
 800238a:	bf00      	nop
 800238c:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <SystemClock_100MHz+0x108>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f9      	beq.n	800238c <SystemClock_100MHz+0xcc>
    ;

  FLASH->ACR &= ~FLASH_ACR_LATENCY;    // dle RM 3.4.1, Table 5
 8002398:	4a0d      	ldr	r2, [pc, #52]	; (80023d0 <SystemClock_100MHz+0x110>)
 800239a:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <SystemClock_100MHz+0x110>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 030f 	bic.w	r3, r3, #15
 80023a2:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 80023a4:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <SystemClock_100MHz+0x110>)
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <SystemClock_100MHz+0x110>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f043 0303 	orr.w	r3, r3, #3
 80023ae:	6013      	str	r3, [r2, #0]

  RCC->CFGR |= RCC_CFGR_SW_PLL;    // a jede se z PLL
 80023b0:	4a05      	ldr	r2, [pc, #20]	; (80023c8 <SystemClock_100MHz+0x108>)
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <SystemClock_100MHz+0x108>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f043 0302 	orr.w	r3, r3, #2
 80023ba:	6093      	str	r3, [r2, #8]
  //TODO test SWS - clock status
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40007000 	.word	0x40007000
 80023d0:	40023c00 	.word	0x40023c00

080023d4 <Nucleo_SetPinGPIO>:

bool Nucleo_SetPinGPIO(GPIO_TypeDef *gpio, uint32_t bitnum, nucleoPinAttribute typ)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	4613      	mov	r3, r2
 80023e0:	71fb      	strb	r3, [r7, #7]
  uint32_t enr_mask = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  uint32_t rstr_mask = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]

  switch((uint32_t)gpio)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4a85      	ldr	r2, [pc, #532]	; (8002604 <Nucleo_SetPinGPIO+0x230>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d01d      	beq.n	800242e <Nucleo_SetPinGPIO+0x5a>
 80023f2:	4a84      	ldr	r2, [pc, #528]	; (8002604 <Nucleo_SetPinGPIO+0x230>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d806      	bhi.n	8002406 <Nucleo_SetPinGPIO+0x32>
 80023f8:	4a83      	ldr	r2, [pc, #524]	; (8002608 <Nucleo_SetPinGPIO+0x234>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00d      	beq.n	800241a <Nucleo_SetPinGPIO+0x46>
 80023fe:	4a83      	ldr	r2, [pc, #524]	; (800260c <Nucleo_SetPinGPIO+0x238>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d00f      	beq.n	8002424 <Nucleo_SetPinGPIO+0x50>
 8002404:	e027      	b.n	8002456 <Nucleo_SetPinGPIO+0x82>
 8002406:	4a82      	ldr	r2, [pc, #520]	; (8002610 <Nucleo_SetPinGPIO+0x23c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d01a      	beq.n	8002442 <Nucleo_SetPinGPIO+0x6e>
 800240c:	4a81      	ldr	r2, [pc, #516]	; (8002614 <Nucleo_SetPinGPIO+0x240>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d01c      	beq.n	800244c <Nucleo_SetPinGPIO+0x78>
 8002412:	4a81      	ldr	r2, [pc, #516]	; (8002618 <Nucleo_SetPinGPIO+0x244>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d00f      	beq.n	8002438 <Nucleo_SetPinGPIO+0x64>
 8002418:	e01d      	b.n	8002456 <Nucleo_SetPinGPIO+0x82>
  {
    case (uint32_t)GPIOA:
      enr_mask = RCC_AHB1ENR_GPIOAEN;
 800241a:	2301      	movs	r3, #1
 800241c:	617b      	str	r3, [r7, #20]
      rstr_mask = RCC_AHB1RSTR_GPIOARST;
 800241e:	2301      	movs	r3, #1
 8002420:	613b      	str	r3, [r7, #16]
      break;
 8002422:	e01a      	b.n	800245a <Nucleo_SetPinGPIO+0x86>
    case (uint32_t)GPIOB:
      enr_mask = RCC_AHB1ENR_GPIOBEN;
 8002424:	2302      	movs	r3, #2
 8002426:	617b      	str	r3, [r7, #20]
      rstr_mask = RCC_AHB1RSTR_GPIOBRST;
 8002428:	2302      	movs	r3, #2
 800242a:	613b      	str	r3, [r7, #16]
      break;
 800242c:	e015      	b.n	800245a <Nucleo_SetPinGPIO+0x86>
    case (uint32_t)GPIOC:
      enr_mask = RCC_AHB1ENR_GPIOCEN;
 800242e:	2304      	movs	r3, #4
 8002430:	617b      	str	r3, [r7, #20]
      rstr_mask = RCC_AHB1RSTR_GPIOCRST;
 8002432:	2304      	movs	r3, #4
 8002434:	613b      	str	r3, [r7, #16]
      break;
 8002436:	e010      	b.n	800245a <Nucleo_SetPinGPIO+0x86>
    case (uint32_t)GPIOD:
      enr_mask = RCC_AHB1ENR_GPIODEN;
 8002438:	2308      	movs	r3, #8
 800243a:	617b      	str	r3, [r7, #20]
      rstr_mask = RCC_AHB1RSTR_GPIODRST;
 800243c:	2308      	movs	r3, #8
 800243e:	613b      	str	r3, [r7, #16]
      break;
 8002440:	e00b      	b.n	800245a <Nucleo_SetPinGPIO+0x86>
    case (uint32_t)GPIOE:
      enr_mask = RCC_AHB1ENR_GPIOEEN;
 8002442:	2310      	movs	r3, #16
 8002444:	617b      	str	r3, [r7, #20]
      rstr_mask = RCC_AHB1RSTR_GPIOERST;
 8002446:	2310      	movs	r3, #16
 8002448:	613b      	str	r3, [r7, #16]
      break;
 800244a:	e006      	b.n	800245a <Nucleo_SetPinGPIO+0x86>
      enr_mask = RCC_AHB1ENR_GPIOGEN;
      rstr_mask = RCC_AHB1RSTR_GPIOGRST;
      break;
      */
    case (uint32_t)GPIOH:
      enr_mask = RCC_AHB1ENR_GPIOHEN;
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	617b      	str	r3, [r7, #20]
      rstr_mask = RCC_AHB1RSTR_GPIOHRST;
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	613b      	str	r3, [r7, #16]
      break;
 8002454:	e001      	b.n	800245a <Nucleo_SetPinGPIO+0x86>
    default:
      return false;
 8002456:	2300      	movs	r3, #0
 8002458:	e0cd      	b.n	80025f6 <Nucleo_SetPinGPIO+0x222>
  }

  if (!(RCC->AHB1ENR & enr_mask))     // not set yet ?
 800245a:	4b70      	ldr	r3, [pc, #448]	; (800261c <Nucleo_SetPinGPIO+0x248>)
 800245c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d112      	bne.n	800248c <Nucleo_SetPinGPIO+0xb8>
  {
    RCC->AHB1ENR |= enr_mask;         // enable peripheral clock
 8002466:	496d      	ldr	r1, [pc, #436]	; (800261c <Nucleo_SetPinGPIO+0x248>)
 8002468:	4b6c      	ldr	r3, [pc, #432]	; (800261c <Nucleo_SetPinGPIO+0x248>)
 800246a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	4313      	orrs	r3, r2
 8002470:	630b      	str	r3, [r1, #48]	; 0x30
    RCC->AHB1RSTR |= rstr_mask;       // reset peripheral
 8002472:	496a      	ldr	r1, [pc, #424]	; (800261c <Nucleo_SetPinGPIO+0x248>)
 8002474:	4b69      	ldr	r3, [pc, #420]	; (800261c <Nucleo_SetPinGPIO+0x248>)
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	610b      	str	r3, [r1, #16]
    RCC->AHB1RSTR &= ~rstr_mask;
 800247e:	4967      	ldr	r1, [pc, #412]	; (800261c <Nucleo_SetPinGPIO+0x248>)
 8002480:	4b66      	ldr	r3, [pc, #408]	; (800261c <Nucleo_SetPinGPIO+0x248>)
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	43db      	mvns	r3, r3
 8002488:	4013      	ands	r3, r2
 800248a:	610b      	str	r3, [r1, #16]
  }

  gpio->MODER &= ~(0x00000003 << (2 * bitnum));    // clear 2 bits
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	0052      	lsls	r2, r2, #1
 8002494:	2103      	movs	r1, #3
 8002496:	fa01 f202 	lsl.w	r2, r1, r2
 800249a:	43d2      	mvns	r2, r2
 800249c:	401a      	ands	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	601a      	str	r2, [r3, #0]
  switch(typ)
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	f200 80a2 	bhi.w	80025f0 <Nucleo_SetPinGPIO+0x21c>
 80024ac:	a201      	add	r2, pc, #4	; (adr r2, 80024b4 <Nucleo_SetPinGPIO+0xe0>)
 80024ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b2:	bf00      	nop
 80024b4:	080024fd 	.word	0x080024fd
 80024b8:	080024d1 	.word	0x080024d1
 80024bc:	08002515 	.word	0x08002515
 80024c0:	08002515 	.word	0x08002515
 80024c4:	080025db 	.word	0x080025db
 80024c8:	08002583 	.word	0x08002583
 80024cc:	08002583 	.word	0x08002583
  {
    case input_pullup:
      gpio->PUPDR &= ~(0x00000003 << (2 * bitnum)); // 01 = pull-up
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	0052      	lsls	r2, r2, #1
 80024d8:	2103      	movs	r1, #3
 80024da:	fa01 f202 	lsl.w	r2, r1, r2
 80024de:	43d2      	mvns	r2, r2
 80024e0:	401a      	ands	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	60da      	str	r2, [r3, #12]
      gpio->PUPDR |= 0x00000001 << (2 * bitnum);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	0052      	lsls	r2, r2, #1
 80024ee:	2101      	movs	r1, #1
 80024f0:	fa01 f202 	lsl.w	r2, r1, r2
 80024f4:	431a      	orrs	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	60da      	str	r2, [r3, #12]
      break;
 80024fa:	e07b      	b.n	80025f4 <Nucleo_SetPinGPIO+0x220>
    case input:     // 00 = input mode, nothing to do
      gpio->PUPDR &= ~(0x00000003 << (2 * bitnum)); // 00 = no pull-up/dn
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	0052      	lsls	r2, r2, #1
 8002504:	2103      	movs	r1, #3
 8002506:	fa01 f202 	lsl.w	r2, r1, r2
 800250a:	43d2      	mvns	r2, r2
 800250c:	401a      	ands	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	60da      	str	r2, [r3, #12]
      break;
 8002512:	e06f      	b.n	80025f4 <Nucleo_SetPinGPIO+0x220>
    case output:    // 01 = output mode
    case output_open:
      gpio->MODER |= 0x00000001 << (2 * bitnum);    // set bits
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	0052      	lsls	r2, r2, #1
 800251c:	2101      	movs	r1, #1
 800251e:	fa01 f202 	lsl.w	r2, r1, r2
 8002522:	431a      	orrs	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	601a      	str	r2, [r3, #0]

      if (typ == output_open)
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	2b04      	cmp	r3, #4
 800252c:	d109      	bne.n	8002542 <Nucleo_SetPinGPIO+0x16e>
        gpio->OTYPER |= 0x00000001 << bitnum;      // 1 = open-drain, one bit per GPIO
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2101      	movs	r1, #1
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	fa01 f202 	lsl.w	r2, r1, r2
 800253a:	431a      	orrs	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	605a      	str	r2, [r3, #4]
 8002540:	e009      	b.n	8002556 <Nucleo_SetPinGPIO+0x182>
      else
        gpio->OTYPER &= ~(0x00000001 << bitnum);      // 0 = push-pull, one bit per GPIO
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2101      	movs	r1, #1
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	fa01 f202 	lsl.w	r2, r1, r2
 800254e:	43d2      	mvns	r2, r2
 8002550:	401a      	ands	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	605a      	str	r2, [r3, #4]

      gpio->OSPEEDR |= 0x00000003 << (2 * bitnum);  // high-speed = 11
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	0052      	lsls	r2, r2, #1
 800255e:	2103      	movs	r1, #3
 8002560:	fa01 f202 	lsl.w	r2, r1, r2
 8002564:	431a      	orrs	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	609a      	str	r2, [r3, #8]

      gpio->PUPDR &= ~(0x00000003 << (2 * bitnum)); // 00 = no pull-up/pull-down
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	0052      	lsls	r2, r2, #1
 8002572:	2103      	movs	r1, #3
 8002574:	fa01 f202 	lsl.w	r2, r1, r2
 8002578:	43d2      	mvns	r2, r2
 800257a:	401a      	ands	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	60da      	str	r2, [r3, #12]
      break;
 8002580:	e038      	b.n	80025f4 <Nucleo_SetPinGPIO+0x220>
    case alter:     // 10 = AF
    case alter_open:
      gpio->MODER |= 0x00000002 << (2 * bitnum);    // set bits
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	0052      	lsls	r2, r2, #1
 800258a:	2102      	movs	r1, #2
 800258c:	fa01 f202 	lsl.w	r2, r1, r2
 8002590:	431a      	orrs	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	601a      	str	r2, [r3, #0]
        // don't forget set AFR registers !!!
      if (typ == alter_open)
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	2b07      	cmp	r3, #7
 800259a:	d109      	bne.n	80025b0 <Nucleo_SetPinGPIO+0x1dc>
        gpio->OTYPER |= 0x00000001 << bitnum;      // 1 = open-drain, one bit per GPIO
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2101      	movs	r1, #1
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	fa01 f202 	lsl.w	r2, r1, r2
 80025a8:	431a      	orrs	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	e009      	b.n	80025c4 <Nucleo_SetPinGPIO+0x1f0>
      else
        gpio->OTYPER &= ~(0x00000001 << bitnum);      // 0 = push-pull, one bit per GPIO
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2101      	movs	r1, #1
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	fa01 f202 	lsl.w	r2, r1, r2
 80025bc:	43d2      	mvns	r2, r2
 80025be:	401a      	ands	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	605a      	str	r2, [r3, #4]

      gpio->OSPEEDR |= 0x00000003 << (2 * bitnum);  // high-speed = 11
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	0052      	lsls	r2, r2, #1
 80025cc:	2103      	movs	r1, #3
 80025ce:	fa01 f202 	lsl.w	r2, r1, r2
 80025d2:	431a      	orrs	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	609a      	str	r2, [r3, #8]
      break;
 80025d8:	e00c      	b.n	80025f4 <Nucleo_SetPinGPIO+0x220>
    case analog:    // 11 - analog mode
      gpio->MODER |= 0x00000003 << (2 * bitnum);    // set bits
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	0052      	lsls	r2, r2, #1
 80025e2:	2103      	movs	r1, #3
 80025e4:	fa01 f202 	lsl.w	r2, r1, r2
 80025e8:	431a      	orrs	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	601a      	str	r2, [r3, #0]
      break;
 80025ee:	e001      	b.n	80025f4 <Nucleo_SetPinGPIO+0x220>
    default:
      return false;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e000      	b.n	80025f6 <Nucleo_SetPinGPIO+0x222>
  }

  return true;
 80025f4:	2301      	movs	r3, #1
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	371c      	adds	r7, #28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40020800 	.word	0x40020800
 8002608:	40020000 	.word	0x40020000
 800260c:	40020400 	.word	0x40020400
 8002610:	40021000 	.word	0x40021000
 8002614:	40021c00 	.word	0x40021c00
 8002618:	40020c00 	.word	0x40020c00
 800261c:	40023800 	.word	0x40023800

08002620 <Nucleo_SetPinAFGPIO>:

bool Nucleo_SetPinAFGPIO(GPIO_TypeDef *gpio, uint32_t bitnum, uint32_t afValue)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  gpio->AFR[(bitnum < 8) ? 0 : 1] &= ~(0x0000000f << (4 * (bitnum & 0x7)));    // clear 4 bits
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b07      	cmp	r3, #7
 8002630:	bf8c      	ite	hi
 8002632:	2301      	movhi	r3, #1
 8002634:	2300      	movls	r3, #0
 8002636:	b2db      	uxtb	r3, r3
 8002638:	4618      	mov	r0, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2b07      	cmp	r3, #7
 800263e:	bf8c      	ite	hi
 8002640:	2301      	movhi	r3, #1
 8002642:	2300      	movls	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	3208      	adds	r2, #8
 800264c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	f002 0207 	and.w	r2, r2, #7
 8002656:	0092      	lsls	r2, r2, #2
 8002658:	210f      	movs	r1, #15
 800265a:	fa01 f202 	lsl.w	r2, r1, r2
 800265e:	43d2      	mvns	r2, r2
 8002660:	ea03 0102 	and.w	r1, r3, r2
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f100 0208 	add.w	r2, r0, #8
 800266a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  gpio->AFR[(bitnum < 8) ? 0 : 1] |= (afValue << (4 * (bitnum & 0x7)));        // set AF bits
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b07      	cmp	r3, #7
 8002672:	bf8c      	ite	hi
 8002674:	2301      	movhi	r3, #1
 8002676:	2300      	movls	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	4618      	mov	r0, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b07      	cmp	r3, #7
 8002680:	bf8c      	ite	hi
 8002682:	2301      	movhi	r3, #1
 8002684:	2300      	movls	r3, #0
 8002686:	b2db      	uxtb	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	3208      	adds	r2, #8
 800268e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	ea42 0103 	orr.w	r1, r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f100 0208 	add.w	r2, r0, #8
 80026aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  return true;
 80026ae:	2301      	movs	r3, #1
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <GetTimerClock>:

uint32_t GetTimerClock(int timerNum)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t apbdiv = 0, timerClock = SystemCoreClock;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	4b26      	ldr	r3, [pc, #152]	; (8002764 <GetTimerClock+0xa8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60bb      	str	r3, [r7, #8]

  switch(timerNum)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	2b0a      	cmp	r3, #10
 80026d4:	d82a      	bhi.n	800272c <GetTimerClock+0x70>
 80026d6:	a201      	add	r2, pc, #4	; (adr r2, 80026dc <GetTimerClock+0x20>)
 80026d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026dc:	08002709 	.word	0x08002709
 80026e0:	0800271b 	.word	0x0800271b
 80026e4:	0800271b 	.word	0x0800271b
 80026e8:	0800271b 	.word	0x0800271b
 80026ec:	0800271b 	.word	0x0800271b
 80026f0:	0800272d 	.word	0x0800272d
 80026f4:	0800272d 	.word	0x0800272d
 80026f8:	0800272d 	.word	0x0800272d
 80026fc:	08002709 	.word	0x08002709
 8002700:	08002709 	.word	0x08002709
 8002704:	08002709 	.word	0x08002709
  {
    case 1:
    case 9:
    case 10:
    case 11:
      apbdiv = RCC->CFGR & RCC_CFGR_PPRE2;   // 0x0000E000 - [15..13]
 8002708:	4b17      	ldr	r3, [pc, #92]	; (8002768 <GetTimerClock+0xac>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002710:	60fb      	str	r3, [r7, #12]
      apbdiv >>= 13;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	0b5b      	lsrs	r3, r3, #13
 8002716:	60fb      	str	r3, [r7, #12]
      break;
 8002718:	e00a      	b.n	8002730 <GetTimerClock+0x74>
    case 2:
    case 3:
    case 4:
    case 5:
      apbdiv = RCC->CFGR & RCC_CFGR_PPRE1;   // 0x00001C00 - zachovej bity 12:10, zbytek zahodit
 800271a:	4b13      	ldr	r3, [pc, #76]	; (8002768 <GetTimerClock+0xac>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002722:	60fb      	str	r3, [r7, #12]
      apbdiv >>= 10;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	0a9b      	lsrs	r3, r3, #10
 8002728:	60fb      	str	r3, [r7, #12]
      break;
 800272a:	e001      	b.n	8002730 <GetTimerClock+0x74>
    default:
      return 0;
 800272c:	2300      	movs	r3, #0
 800272e:	e013      	b.n	8002758 <GetTimerClock+0x9c>
  }

  if ((apbdiv & 0x04) == 0)       // nejvyssi bit z tech 3 == 0 ?
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b00      	cmp	r3, #0
 8002738:	d103      	bne.n	8002742 <GetTimerClock+0x86>
    timerClock = SystemCoreClock;   // not divided, x1
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <GetTimerClock+0xa8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	e009      	b.n	8002756 <GetTimerClock+0x9a>
  else
    timerClock = 2 * (SystemCoreClock >> ((apbdiv & 0x03) + 1));   // spodni 2 bity
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <GetTimerClock+0xa8>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	3301      	adds	r3, #1
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	60bb      	str	r3, [r7, #8]

  return timerClock;
 8002756:	68bb      	ldr	r3, [r7, #8]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	20000120 	.word	0x20000120
 8002768:	40023800 	.word	0x40023800

0800276c <Nucleo_StartUart2>:
 */

#include "nucleo_uart.h"

bool Nucleo_StartUart2(uint32_t baudrate)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  Nucleo_SetPinGPIO(GPIOA, 2, alter);
  Nucleo_SetPinAFGPIO(GPIOA, 2, 7);
  Nucleo_SetPinGPIO(GPIOA, 3, alter);
  Nucleo_SetPinAFGPIO(GPIOA, 3, 7);
#else
  if (!(RCC->AHB1ENR & RCC_AHB1ENR_GPIOAEN))
 8002774:	4b73      	ldr	r3, [pc, #460]	; (8002944 <Nucleo_StartUart2+0x1d8>)
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d111      	bne.n	80027a4 <Nucleo_StartUart2+0x38>
  {
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8002780:	4a70      	ldr	r2, [pc, #448]	; (8002944 <Nucleo_StartUart2+0x1d8>)
 8002782:	4b70      	ldr	r3, [pc, #448]	; (8002944 <Nucleo_StartUart2+0x1d8>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1RSTR |= RCC_AHB1RSTR_GPIOARST;
 800278c:	4a6d      	ldr	r2, [pc, #436]	; (8002944 <Nucleo_StartUart2+0x1d8>)
 800278e:	4b6d      	ldr	r3, [pc, #436]	; (8002944 <Nucleo_StartUart2+0x1d8>)
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	6113      	str	r3, [r2, #16]
    RCC->AHB1RSTR &= ~RCC_AHB1RSTR_GPIOARST;
 8002798:	4a6a      	ldr	r2, [pc, #424]	; (8002944 <Nucleo_StartUart2+0x1d8>)
 800279a:	4b6a      	ldr	r3, [pc, #424]	; (8002944 <Nucleo_StartUart2+0x1d8>)
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	6113      	str	r3, [r2, #16]
  }

  GPIOA->MODER |= 0x02 << (2 * 2);  // 10 = AF
 80027a4:	4a68      	ldr	r2, [pc, #416]	; (8002948 <Nucleo_StartUart2+0x1dc>)
 80027a6:	4b68      	ldr	r3, [pc, #416]	; (8002948 <Nucleo_StartUart2+0x1dc>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f043 0320 	orr.w	r3, r3, #32
 80027ae:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= 0x02 << (3 * 2);  // 10 = AF
 80027b0:	4a65      	ldr	r2, [pc, #404]	; (8002948 <Nucleo_StartUart2+0x1dc>)
 80027b2:	4b65      	ldr	r3, [pc, #404]	; (8002948 <Nucleo_StartUart2+0x1dc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ba:	6013      	str	r3, [r2, #0]

  GPIOA->OSPEEDR |= 0x03 << (2 * 2);  // 11 = high-speed
 80027bc:	4a62      	ldr	r2, [pc, #392]	; (8002948 <Nucleo_StartUart2+0x1dc>)
 80027be:	4b62      	ldr	r3, [pc, #392]	; (8002948 <Nucleo_StartUart2+0x1dc>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80027c6:	6093      	str	r3, [r2, #8]
  GPIOA->OSPEEDR |= 0x03 << (3 * 2);  // 11 = high-speed
 80027c8:	4a5f      	ldr	r2, [pc, #380]	; (8002948 <Nucleo_StartUart2+0x1dc>)
 80027ca:	4b5f      	ldr	r3, [pc, #380]	; (8002948 <Nucleo_StartUart2+0x1dc>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027d2:	6093      	str	r3, [r2, #8]

  GPIOA->AFR[0] &= ~(0x0f << (2 * 4));  // clear AF code
 80027d4:	4a5c      	ldr	r2, [pc, #368]	; (8002948 <Nucleo_StartUart2+0x1dc>)
 80027d6:	4b5c      	ldr	r3, [pc, #368]	; (8002948 <Nucleo_StartUart2+0x1dc>)
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027de:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[0] |= 0x07 << (2 * 4);  // AF code
 80027e0:	4a59      	ldr	r2, [pc, #356]	; (8002948 <Nucleo_StartUart2+0x1dc>)
 80027e2:	4b59      	ldr	r3, [pc, #356]	; (8002948 <Nucleo_StartUart2+0x1dc>)
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027ea:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[0] &= ~(0x0f << (3 * 4));  // clear AF code
 80027ec:	4a56      	ldr	r2, [pc, #344]	; (8002948 <Nucleo_StartUart2+0x1dc>)
 80027ee:	4b56      	ldr	r3, [pc, #344]	; (8002948 <Nucleo_StartUart2+0x1dc>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027f6:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[0] |= 0x07 << (3 * 4);
 80027f8:	4a53      	ldr	r2, [pc, #332]	; (8002948 <Nucleo_StartUart2+0x1dc>)
 80027fa:	4b53      	ldr	r3, [pc, #332]	; (8002948 <Nucleo_StartUart2+0x1dc>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002802:	6213      	str	r3, [r2, #32]
#endif

  if (!(RCC->APB1ENR & RCC_APB1ENR_USART2EN))     // not running yet ?
 8002804:	4b4f      	ldr	r3, [pc, #316]	; (8002944 <Nucleo_StartUart2+0x1d8>)
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d111      	bne.n	8002834 <Nucleo_StartUart2+0xc8>
  {
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8002810:	4a4c      	ldr	r2, [pc, #304]	; (8002944 <Nucleo_StartUart2+0x1d8>)
 8002812:	4b4c      	ldr	r3, [pc, #304]	; (8002944 <Nucleo_StartUart2+0x1d8>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800281a:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->APB1RSTR |= RCC_APB1RSTR_USART2RST;
 800281c:	4a49      	ldr	r2, [pc, #292]	; (8002944 <Nucleo_StartUart2+0x1d8>)
 800281e:	4b49      	ldr	r3, [pc, #292]	; (8002944 <Nucleo_StartUart2+0x1d8>)
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002826:	6213      	str	r3, [r2, #32]
    RCC->APB1RSTR &= ~RCC_APB1RSTR_USART2RST;
 8002828:	4a46      	ldr	r2, [pc, #280]	; (8002944 <Nucleo_StartUart2+0x1d8>)
 800282a:	4b46      	ldr	r3, [pc, #280]	; (8002944 <Nucleo_StartUart2+0x1d8>)
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002832:	6213      	str	r3, [r2, #32]
  }

  USART2->CR1 = USART_CR1_RE | USART_CR1_TE;
 8002834:	4b45      	ldr	r3, [pc, #276]	; (800294c <Nucleo_StartUart2+0x1e0>)
 8002836:	220c      	movs	r2, #12
 8002838:	60da      	str	r2, [r3, #12]
  USART2->CR2 = 0;
 800283a:	4b44      	ldr	r3, [pc, #272]	; (800294c <Nucleo_StartUart2+0x1e0>)
 800283c:	2200      	movs	r2, #0
 800283e:	611a      	str	r2, [r3, #16]
  USART2->CR3 = 0;
 8002840:	4b42      	ldr	r3, [pc, #264]	; (800294c <Nucleo_StartUart2+0x1e0>)
 8002842:	2200      	movs	r2, #0
 8002844:	615a      	str	r2, [r3, #20]

  {  //---------------------------- USART BRR Configuration -----------------------
    uint32_t tmpreg = 0x00, apbclock = 0x00;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
    uint32_t integerdivider = 0x00;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
    uint32_t fractionaldivider = 0x00;
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]

    apbclock = RCC->CFGR & RCC_CFGR_PPRE1;   // zachovej bity 12:10, zbytek zahodit
 8002856:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <Nucleo_StartUart2+0x1d8>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800285e:	613b      	str	r3, [r7, #16]
    apbclock >>= 10;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	0a9b      	lsrs	r3, r3, #10
 8002864:	613b      	str	r3, [r7, #16]
100: AHB clock divided by 2
101: AHB clock divided by 4
110: AHB clock divided by 8
111: AHB clock divided by 16
*/
    if ((apbclock & 0x04) == 0)
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d103      	bne.n	8002878 <Nucleo_StartUart2+0x10c>
      apbclock = SystemCoreClock;
 8002870:	4b37      	ldr	r3, [pc, #220]	; (8002950 <Nucleo_StartUart2+0x1e4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	e008      	b.n	800288a <Nucleo_StartUart2+0x11e>
    else
      apbclock = SystemCoreClock >> ((apbclock & 0x03) + 1);   // spodni 2 bity
 8002878:	4b35      	ldr	r3, [pc, #212]	; (8002950 <Nucleo_StartUart2+0x1e4>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	3301      	adds	r3, #1
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
 8002888:	613b      	str	r3, [r7, #16]

    if ((USART2->CR1 & USART_CR1_OVER8) != 0)  // Determine the integer part
 800288a:	4b30      	ldr	r3, [pc, #192]	; (800294c <Nucleo_StartUart2+0x1e0>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00b      	beq.n	80028ae <Nucleo_StartUart2+0x142>
    {
      /* Integer part computing in case Oversampling mode is 8 Samples */
      integerdivider = ((25 * apbclock) / (2 * baudrate));
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	009a      	lsls	r2, r3, #2
 80028a0:	441a      	add	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	e00a      	b.n	80028c4 <Nucleo_StartUart2+0x158>
    }
    else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
    {
      /* Integer part computing in case Oversampling mode is 16 Samples */
      integerdivider = ((25 * apbclock) / (4 * baudrate));
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	009a      	lsls	r2, r3, #2
 80028b8:	441a      	add	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c2:	60fb      	str	r3, [r7, #12]
    }
    tmpreg = (integerdivider / 100) << 4;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4a23      	ldr	r2, [pc, #140]	; (8002954 <Nucleo_StartUart2+0x1e8>)
 80028c8:	fba2 2303 	umull	r2, r3, r2, r3
 80028cc:	095b      	lsrs	r3, r3, #5
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	617b      	str	r3, [r7, #20]

    /* Determine the fractional part */
    fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	2264      	movs	r2, #100	; 0x64
 80028d8:	fb02 f303 	mul.w	r3, r2, r3
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	60bb      	str	r3, [r7, #8]

    /* Implement the fractional part in the register */
    if ((USART2->CR1 & USART_CR1_OVER8) != 0)
 80028e2:	4b1a      	ldr	r3, [pc, #104]	; (800294c <Nucleo_StartUart2+0x1e0>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00c      	beq.n	8002908 <Nucleo_StartUart2+0x19c>
    {
      tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	3332      	adds	r3, #50	; 0x32
 80028f4:	4a17      	ldr	r2, [pc, #92]	; (8002954 <Nucleo_StartUart2+0x1e8>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	e00b      	b.n	8002920 <Nucleo_StartUart2+0x1b4>
    }
    else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
    {
      tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	3332      	adds	r3, #50	; 0x32
 800290e:	4a11      	ldr	r2, [pc, #68]	; (8002954 <Nucleo_StartUart2+0x1e8>)
 8002910:	fba2 2303 	umull	r2, r3, r2, r3
 8002914:	095b      	lsrs	r3, r3, #5
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4313      	orrs	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
    }

    /* Write to USART BRR register */
    USART2->BRR = (uint16_t)tmpreg;
 8002920:	4b0a      	ldr	r3, [pc, #40]	; (800294c <Nucleo_StartUart2+0x1e0>)
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	b292      	uxth	r2, r2
 8002926:	609a      	str	r2, [r3, #8]
  }

  USART2->CR1 |= USART_CR1_UE;
 8002928:	4a08      	ldr	r2, [pc, #32]	; (800294c <Nucleo_StartUart2+0x1e0>)
 800292a:	4b08      	ldr	r3, [pc, #32]	; (800294c <Nucleo_StartUart2+0x1e0>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002932:	60d3      	str	r3, [r2, #12]
  // pozor, bez tohoto nefunguje putchar a musel by byt fputc(.., stdout)
  setvbuf(stdout,NULL,_IONBF,0);
  setvbuf(stdin,NULL,_IONBF,0);
#endif

  return true;
 8002934:	2301      	movs	r3, #1
}
 8002936:	4618      	mov	r0, r3
 8002938:	371c      	adds	r7, #28
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	40020000 	.word	0x40020000
 800294c:	40004400 	.word	0x40004400
 8002950:	20000120 	.word	0x20000120
 8002954:	51eb851f 	.word	0x51eb851f

08002958 <usart2_putc>:

static volatile bool _addCRtoLF = true;

int usart2_putc(int ch)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  while(!(USART2->SR & USART_SR_TXE))       // Wait for transmit buffer empty
 8002960:	bf00      	nop
 8002962:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <usart2_putc+0x50>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f9      	beq.n	8002962 <usart2_putc+0xa>
    ;

  if (_addCRtoLF && (ch == '\n'))
 800296e:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <usart2_putc+0x54>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00e      	beq.n	8002996 <usart2_putc+0x3e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b0a      	cmp	r3, #10
 800297c:	d10b      	bne.n	8002996 <usart2_putc+0x3e>
  {
    USART2->DR = ch;
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <usart2_putc+0x50>)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6053      	str	r3, [r2, #4]

    while(!(USART2->SR & USART_SR_TXE))       // Wait for transmit buffer empty
 8002984:	bf00      	nop
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <usart2_putc+0x50>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f9      	beq.n	8002986 <usart2_putc+0x2e>
      ;

    ch = '\r';
 8002992:	230d      	movs	r3, #13
 8002994:	607b      	str	r3, [r7, #4]
  }

  return USART2->DR = ch;
 8002996:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <usart2_putc+0x50>)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6053      	str	r3, [r2, #4]
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	40004400 	.word	0x40004400
 80029ac:	20000118 	.word	0x20000118

080029b0 <usart2_getc>:

int usart2_getc(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  while(!(USART2->SR & USART_SR_RXNE))  // Wait for receive buffer not empty
 80029b4:	bf00      	nop
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <usart2_getc+0x20>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f9      	beq.n	80029b6 <usart2_getc+0x6>
    ;
  return USART2->DR;                    // Return received character
 80029c2:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <usart2_getc+0x20>)
 80029c4:	685b      	ldr	r3, [r3, #4]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	40004400 	.word	0x40004400

080029d4 <isCharRecv>:

unsigned char isCharRecv(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return (USART2->SR & USART_SR_RXNE);  // log 1 = something in recv buffer
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <isCharRecv+0x1c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	b2db      	uxtb	r3, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40004400 	.word	0x40004400

080029f4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80029fe:	4909      	ldr	r1, [pc, #36]	; (8002a24 <NVIC_EnableIRQ+0x30>)
 8002a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a04:	095b      	lsrs	r3, r3, #5
 8002a06:	79fa      	ldrb	r2, [r7, #7]
 8002a08:	f002 021f 	and.w	r2, r2, #31
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	e000e100 	.word	0xe000e100

08002a28 <OLEDInit_HW>:
#define SPI_IS_BUSY(SPIx) (((SPIx)->SR & (SPI_SR_TXE | SPI_SR_RXNE)) == 0 || ((SPIx)->SR & SPI_SR_BSY))
#define SPI_WAIT(SPIx)            while (SPI_IS_BUSY(SPIx))
#endif

void OLEDInit_HW(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  if (!(RCC->APB2ENR & RCC_APB2ENR_SPI1EN))
 8002a2c:	4b31      	ldr	r3, [pc, #196]	; (8002af4 <OLEDInit_HW+0xcc>)
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d111      	bne.n	8002a5c <OLEDInit_HW+0x34>
  {
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8002a38:	4a2e      	ldr	r2, [pc, #184]	; (8002af4 <OLEDInit_HW+0xcc>)
 8002a3a:	4b2e      	ldr	r3, [pc, #184]	; (8002af4 <OLEDInit_HW+0xcc>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a42:	6453      	str	r3, [r2, #68]	; 0x44
    RCC->APB2RSTR |= RCC_APB2RSTR_SPI1RST;
 8002a44:	4a2b      	ldr	r2, [pc, #172]	; (8002af4 <OLEDInit_HW+0xcc>)
 8002a46:	4b2b      	ldr	r3, [pc, #172]	; (8002af4 <OLEDInit_HW+0xcc>)
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a4e:	6253      	str	r3, [r2, #36]	; 0x24
    RCC->APB2RSTR &= ~RCC_APB2RSTR_SPI1RST;
 8002a50:	4a28      	ldr	r2, [pc, #160]	; (8002af4 <OLEDInit_HW+0xcc>)
 8002a52:	4b28      	ldr	r3, [pc, #160]	; (8002af4 <OLEDInit_HW+0xcc>)
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a5a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  SPI1->CR1 = SPI_CR1_BR_1 | SPI_CR1_BR_0;      // 011 = clk/16 - z APB2 (100MHz), LCD max. 10MHz
 8002a5c:	4b26      	ldr	r3, [pc, #152]	; (8002af8 <OLEDInit_HW+0xd0>)
 8002a5e:	2218      	movs	r2, #24
 8002a60:	601a      	str	r2, [r3, #0]
  SPI1->CR1 |= SPI_CR1_MSTR;
 8002a62:	4a25      	ldr	r2, [pc, #148]	; (8002af8 <OLEDInit_HW+0xd0>)
 8002a64:	4b24      	ldr	r3, [pc, #144]	; (8002af8 <OLEDInit_HW+0xd0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f043 0304 	orr.w	r3, r3, #4
 8002a6c:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_SSI | SPI_CR1_SSM;
 8002a6e:	4a22      	ldr	r2, [pc, #136]	; (8002af8 <OLEDInit_HW+0xd0>)
 8002a70:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <OLEDInit_HW+0xd0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002a78:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CPHA | SPI_CR1_CPOL; // viz. RM0383 pg. 555/836 (rev 1)
 8002a7a:	4a1f      	ldr	r2, [pc, #124]	; (8002af8 <OLEDInit_HW+0xd0>)
 8002a7c:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <OLEDInit_HW+0xd0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f043 0303 	orr.w	r3, r3, #3
 8002a84:	6013      	str	r3, [r2, #0]
  SPI1->CR2 = 0;
 8002a86:	4b1c      	ldr	r3, [pc, #112]	; (8002af8 <OLEDInit_HW+0xd0>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	605a      	str	r2, [r3, #4]

  SPI1->CR1 |= SPI_CR1_SPE;
 8002a8c:	4a1a      	ldr	r2, [pc, #104]	; (8002af8 <OLEDInit_HW+0xd0>)
 8002a8e:	4b1a      	ldr	r3, [pc, #104]	; (8002af8 <OLEDInit_HW+0xd0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a96:	6013      	str	r3, [r2, #0]

  Nucleo_SetPinGPIO(GPIOA, 5, alter);   // D13 - SPI1 - SCK, OLED - SCK
 8002a98:	2206      	movs	r2, #6
 8002a9a:	2105      	movs	r1, #5
 8002a9c:	4817      	ldr	r0, [pc, #92]	; (8002afc <OLEDInit_HW+0xd4>)
 8002a9e:	f7ff fc99 	bl	80023d4 <Nucleo_SetPinGPIO>
  Nucleo_SetPinAFGPIO(GPIOA, 5, 5);
 8002aa2:	2205      	movs	r2, #5
 8002aa4:	2105      	movs	r1, #5
 8002aa6:	4815      	ldr	r0, [pc, #84]	; (8002afc <OLEDInit_HW+0xd4>)
 8002aa8:	f7ff fdba 	bl	8002620 <Nucleo_SetPinAFGPIO>
//  Nucleo_SetPinGPIO(GPIOA, 6, alter);   // SPI1 - MISO, LCD - SDO
//  Nucleo_SetPinAFGPIO(GPIOA, 6, 5);
  Nucleo_SetPinGPIO(GPIOA, 7, alter);   // D11 - SPI1 - MOSI, OLED - MOSI
 8002aac:	2206      	movs	r2, #6
 8002aae:	2107      	movs	r1, #7
 8002ab0:	4812      	ldr	r0, [pc, #72]	; (8002afc <OLEDInit_HW+0xd4>)
 8002ab2:	f7ff fc8f 	bl	80023d4 <Nucleo_SetPinGPIO>
  Nucleo_SetPinAFGPIO(GPIOA, 7, 5);
 8002ab6:	2205      	movs	r2, #5
 8002ab8:	2107      	movs	r1, #7
 8002aba:	4810      	ldr	r0, [pc, #64]	; (8002afc <OLEDInit_HW+0xd4>)
 8002abc:	f7ff fdb0 	bl	8002620 <Nucleo_SetPinAFGPIO>

  Nucleo_SetPinGPIO(GPIOC, 0, output); // D10 - OLED - CS
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	480e      	ldr	r0, [pc, #56]	; (8002b00 <OLEDInit_HW+0xd8>)
 8002ac6:	f7ff fc85 	bl	80023d4 <Nucleo_SetPinGPIO>
  GPIO_WRITE(GPIOC, 0, 1);
 8002aca:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <OLEDInit_HW+0xd8>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	619a      	str	r2, [r3, #24]
  Nucleo_SetPinGPIO(GPIOB, 5, output);  // D6 - OLED - RES
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	2105      	movs	r1, #5
 8002ad4:	480b      	ldr	r0, [pc, #44]	; (8002b04 <OLEDInit_HW+0xdc>)
 8002ad6:	f7ff fc7d 	bl	80023d4 <Nucleo_SetPinGPIO>
  GPIO_WRITE(GPIOB, 5, 1);
 8002ada:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <OLEDInit_HW+0xdc>)
 8002adc:	2220      	movs	r2, #32
 8002ade:	619a      	str	r2, [r3, #24]
  Nucleo_SetPinGPIO(GPIOB, 4, output);  // D7 - OLED - D/C
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	2104      	movs	r1, #4
 8002ae4:	4807      	ldr	r0, [pc, #28]	; (8002b04 <OLEDInit_HW+0xdc>)
 8002ae6:	f7ff fc75 	bl	80023d4 <Nucleo_SetPinGPIO>
  GPIO_WRITE(GPIOB, 4, 1);
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <OLEDInit_HW+0xdc>)
 8002aec:	2210      	movs	r2, #16
 8002aee:	619a      	str	r2, [r3, #24]
}
 8002af0:	bf00      	nop
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40013000 	.word	0x40013000
 8002afc:	40020000 	.word	0x40020000
 8002b00:	40020800 	.word	0x40020800
 8002b04:	40020400 	.word	0x40020400

08002b08 <OLED_Write8>:
static volatile int refreshDMAStageSPI = -1;   // first is MEM, second is SPI lines

static volatile bool refreshInProgess = false;

void OLED_Write8(uint8_t b)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71fb      	strb	r3, [r7, #7]
  SPI1->DR = b;
 8002b12:	4a0b      	ldr	r2, [pc, #44]	; (8002b40 <OLED_Write8+0x38>)
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	60d3      	str	r3, [r2, #12]
//  while(!(SPI1->SR & SPI_SR_BSY))  // wait for finish
  SPI_WAIT(SPI1)
 8002b18:	bf00      	nop
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <OLED_Write8+0x38>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f9      	beq.n	8002b1a <OLED_Write8+0x12>
 8002b26:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <OLED_Write8+0x38>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f3      	bne.n	8002b1a <OLED_Write8+0x12>
    ;
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40013000 	.word	0x40013000

08002b44 <OLED_WriteCmd>:

void OLED_WriteCmd(uint8_t cmd)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71fb      	strb	r3, [r7, #7]
  OLED_DC_LOW;
 8002b4e:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <OLED_WriteCmd+0x30>)
 8002b50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b54:	619a      	str	r2, [r3, #24]
  OLED_CS_LOW;
 8002b56:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <OLED_WriteCmd+0x34>)
 8002b58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b5c:	619a      	str	r2, [r3, #24]

  OLED_Write8(cmd);
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ffd1 	bl	8002b08 <OLED_Write8>

  OLED_CS_HIGH;
 8002b66:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <OLED_WriteCmd+0x34>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	619a      	str	r2, [r3, #24]
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40020400 	.word	0x40020400
 8002b78:	40020800 	.word	0x40020800

08002b7c <OLEDInit_SW>:

void OLEDInit_SW(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
  uint32_t tm = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	607b      	str	r3, [r7, #4]

  OLED_RESET_LOW;
 8002b86:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <OLEDInit_SW+0x78>)
 8002b88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b8c:	619a      	str	r2, [r3, #24]
  for(tm = 0; tm < 50000; tm++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	607b      	str	r3, [r7, #4]
 8002b92:	e003      	b.n	8002b9c <OLEDInit_SW+0x20>
    asm("nop");
 8002b94:	bf00      	nop
  for(tm = 0; tm < 50000; tm++)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	607b      	str	r3, [r7, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d9f6      	bls.n	8002b94 <OLEDInit_SW+0x18>

  OLED_RESET_HIGH;
 8002ba6:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <OLEDInit_SW+0x78>)
 8002ba8:	2220      	movs	r2, #32
 8002baa:	619a      	str	r2, [r3, #24]
  for(tm = 0; tm < 10000; tm++)
 8002bac:	2300      	movs	r3, #0
 8002bae:	607b      	str	r3, [r7, #4]
 8002bb0:	e003      	b.n	8002bba <OLEDInit_SW+0x3e>
    asm("nop");
 8002bb2:	bf00      	nop
  for(tm = 0; tm < 10000; tm++)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	607b      	str	r3, [r7, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f242 720f 	movw	r2, #9999	; 0x270f
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d9f6      	bls.n	8002bb2 <OLEDInit_SW+0x36>

  OLED_DC_LOW;
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <OLEDInit_SW+0x78>)
 8002bc6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002bca:	619a      	str	r2, [r3, #24]
  OLED_CS_LOW;
 8002bcc:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <OLEDInit_SW+0x7c>)
 8002bce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bd2:	619a      	str	r2, [r3, #24]

  OLED_Write8(SSD1305_MEMORYMODE);
 8002bd4:	2020      	movs	r0, #32
 8002bd6:	f7ff ff97 	bl	8002b08 <OLED_Write8>
  OLED_Write8(0x00);
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f7ff ff94 	bl	8002b08 <OLED_Write8>

  OLED_CS_HIGH;
 8002be0:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <OLEDInit_SW+0x7c>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	619a      	str	r2, [r3, #24]

  OLED_WriteCmd(SSD1305_DISPLAYON);
 8002be6:	20af      	movs	r0, #175	; 0xaf
 8002be8:	f7ff ffac 	bl	8002b44 <OLED_WriteCmd>
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40020400 	.word	0x40020400
 8002bf8:	40020800 	.word	0x40020800

08002bfc <OLED_SetPage>:

void OLED_SetPage(int pg)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  OLED_DC_LOW;
 8002c04:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <OLED_SetPage+0x5c>)
 8002c06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c0a:	619a      	str	r2, [r3, #24]
  OLED_CS_LOW;
 8002c0c:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <OLED_SetPage+0x60>)
 8002c0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c12:	619a      	str	r2, [r3, #24]

  OLED_Write8(SSD1305_SETPAGEADDR);
 8002c14:	2022      	movs	r0, #34	; 0x22
 8002c16:	f7ff ff77 	bl	8002b08 <OLED_Write8>
  OLED_Write8(pg % 4);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	425a      	negs	r2, r3
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	f002 0203 	and.w	r2, r2, #3
 8002c26:	bf58      	it	pl
 8002c28:	4253      	negpl	r3, r2
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff6b 	bl	8002b08 <OLED_Write8>
  OLED_Write8(pg % 4);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	425a      	negs	r2, r3
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	f002 0203 	and.w	r2, r2, #3
 8002c3e:	bf58      	it	pl
 8002c40:	4253      	negpl	r3, r2
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ff5f 	bl	8002b08 <OLED_Write8>

  OLED_CS_HIGH;
 8002c4a:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <OLED_SetPage+0x60>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	619a      	str	r2, [r3, #24]
}
 8002c50:	bf00      	nop
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40020400 	.word	0x40020400
 8002c5c:	40020800 	.word	0x40020800

08002c60 <OLED_SetAllRow>:

void OLED_SetAllRow(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  OLED_DC_LOW;
 8002c64:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <OLED_SetAllRow+0x30>)
 8002c66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c6a:	619a      	str	r2, [r3, #24]
  OLED_CS_LOW;
 8002c6c:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <OLED_SetAllRow+0x34>)
 8002c6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c72:	619a      	str	r2, [r3, #24]

  OLED_Write8(SSD1305_SETCOLADDR);
 8002c74:	2021      	movs	r0, #33	; 0x21
 8002c76:	f7ff ff47 	bl	8002b08 <OLED_Write8>
  OLED_Write8(0);
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f7ff ff44 	bl	8002b08 <OLED_Write8>
  OLED_Write8(OLED_WIDTH_BYTES);
 8002c80:	2084      	movs	r0, #132	; 0x84
 8002c82:	f7ff ff41 	bl	8002b08 <OLED_Write8>

  OLED_CS_HIGH;
 8002c86:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <OLED_SetAllRow+0x34>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	619a      	str	r2, [r3, #24]
}
 8002c8c:	bf00      	nop
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40020400 	.word	0x40020400
 8002c94:	40020800 	.word	0x40020800

08002c98 <OLED_Refresh>:

void OLED_Refresh(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
  if (refreshInProgess)
 8002c9e:	4b49      	ldr	r3, [pc, #292]	; (8002dc4 <OLED_Refresh+0x12c>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f040 8088 	bne.w	8002dba <OLED_Refresh+0x122>
  {
    //TODO show error
    return;
  }

  refreshInProgess = true;
 8002caa:	4b46      	ldr	r3, [pc, #280]	; (8002dc4 <OLED_Refresh+0x12c>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	701a      	strb	r2, [r3, #0]

  if (refreshDMA)
 8002cb0:	4b45      	ldr	r3, [pc, #276]	; (8002dc8 <OLED_Refresh+0x130>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d023      	beq.n	8002d02 <OLED_Refresh+0x6a>
  {
    DMA2_Stream3->CR &= ~DMA_SxCR_EN;
 8002cba:	4a44      	ldr	r2, [pc, #272]	; (8002dcc <OLED_Refresh+0x134>)
 8002cbc:	4b43      	ldr	r3, [pc, #268]	; (8002dcc <OLED_Refresh+0x134>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f023 0301 	bic.w	r3, r3, #1
 8002cc4:	6013      	str	r3, [r2, #0]

    DMA2->LIFCR |= (DMA_LIFCR_CTEIF3 | DMA_LIFCR_CHTIF3 | DMA_LIFCR_CTCIF3 | DMA_LIFCR_CDMEIF3);
 8002cc6:	4a42      	ldr	r2, [pc, #264]	; (8002dd0 <OLED_Refresh+0x138>)
 8002cc8:	4b41      	ldr	r3, [pc, #260]	; (8002dd0 <OLED_Refresh+0x138>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8002cd0:	6093      	str	r3, [r2, #8]
      | DMA_CCR3_DIR
        // PL = 00 = low priority
      | DMA_CCR3_TCIE
      ;
    */
    DMA2_Stream3->CR = 0
 8002cd2:	4b3e      	ldr	r3, [pc, #248]	; (8002dcc <OLED_Refresh+0x134>)
 8002cd4:	4a3f      	ldr	r2, [pc, #252]	; (8002dd4 <OLED_Refresh+0x13c>)
 8002cd6:	601a      	str	r2, [r3, #0]
       | DMA_SxCR_MINC
       | DMA_SxCR_PINC
       | DMA_SxCR_TCIE   // irq "complete" fire          DMA_CCR3_MINC
       ;

    DMA2_Stream3->PAR = (uint32_t)oledBuffer;       // SRC
 8002cd8:	4b3c      	ldr	r3, [pc, #240]	; (8002dcc <OLED_Refresh+0x134>)
 8002cda:	4a3f      	ldr	r2, [pc, #252]	; (8002dd8 <OLED_Refresh+0x140>)
 8002cdc:	609a      	str	r2, [r3, #8]
    DMA2_Stream3->M0AR = (uint32_t)oledSendBuffer;          // DEST
 8002cde:	4b3b      	ldr	r3, [pc, #236]	; (8002dcc <OLED_Refresh+0x134>)
 8002ce0:	4a3e      	ldr	r2, [pc, #248]	; (8002ddc <OLED_Refresh+0x144>)
 8002ce2:	60da      	str	r2, [r3, #12]

    DMA2_Stream3->NDTR = OLED_WIDTH_BYTES * OLED_HEIGHT_BYTES;   // nutno plnit vzdy, po prenosu ukazuje pocet zbyvajicich, tedy 0
 8002ce4:	4b39      	ldr	r3, [pc, #228]	; (8002dcc <OLED_Refresh+0x134>)
 8002ce6:	f44f 7204 	mov.w	r2, #528	; 0x210
 8002cea:	605a      	str	r2, [r3, #4]

    refreshDMAStageSPI = -1;                            // start stage: MEM
 8002cec:	4b3c      	ldr	r3, [pc, #240]	; (8002de0 <OLED_Refresh+0x148>)
 8002cee:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf2:	601a      	str	r2, [r3, #0]
    DMA2_Stream3->CR |= DMA_SxCR_EN;                    // go
 8002cf4:	4a35      	ldr	r2, [pc, #212]	; (8002dcc <OLED_Refresh+0x134>)
 8002cf6:	4b35      	ldr	r3, [pc, #212]	; (8002dcc <OLED_Refresh+0x134>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	e05c      	b.n	8002dbc <OLED_Refresh+0x124>
  }
  else
  {
    uint y, x;

    for(y = 0; y < OLED_HEIGHT_BYTES; y++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	e021      	b.n	8002d4c <OLED_Refresh+0xb4>
      for(x = 0; x < OLED_WIDTH_BYTES; x++)
 8002d08:	2300      	movs	r3, #0
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	e018      	b.n	8002d40 <OLED_Refresh+0xa8>
        oledSendBuffer[y][x] = oledBuffer[y][x];
 8002d0e:	4932      	ldr	r1, [pc, #200]	; (8002dd8 <OLED_Refresh+0x140>)
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	015b      	lsls	r3, r3, #5
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	18ca      	adds	r2, r1, r3
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4413      	add	r3, r2
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	b2d8      	uxtb	r0, r3
 8002d24:	492d      	ldr	r1, [pc, #180]	; (8002ddc <OLED_Refresh+0x144>)
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	015b      	lsls	r3, r3, #5
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	18ca      	adds	r2, r1, r3
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	4413      	add	r3, r2
 8002d36:	4602      	mov	r2, r0
 8002d38:	701a      	strb	r2, [r3, #0]
      for(x = 0; x < OLED_WIDTH_BYTES; x++)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	2b83      	cmp	r3, #131	; 0x83
 8002d44:	d9e3      	bls.n	8002d0e <OLED_Refresh+0x76>
    for(y = 0; y < OLED_HEIGHT_BYTES; y++)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	607b      	str	r3, [r7, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d9da      	bls.n	8002d08 <OLED_Refresh+0x70>

    for(y = 0; y < OLED_HEIGHT_BYTES; y++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	e029      	b.n	8002dac <OLED_Refresh+0x114>
    {
      OLED_SetPage(y);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff ff4e 	bl	8002bfc <OLED_SetPage>
      OLED_SetAllRow();
 8002d60:	f7ff ff7e 	bl	8002c60 <OLED_SetAllRow>

      OLED_DC_HIGH;
 8002d64:	4b1f      	ldr	r3, [pc, #124]	; (8002de4 <OLED_Refresh+0x14c>)
 8002d66:	2210      	movs	r2, #16
 8002d68:	619a      	str	r2, [r3, #24]
      OLED_CS_LOW;
 8002d6a:	4b1f      	ldr	r3, [pc, #124]	; (8002de8 <OLED_Refresh+0x150>)
 8002d6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d70:	619a      	str	r2, [r3, #24]

      for(x = 0; x < OLED_WIDTH_BYTES; x++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	e010      	b.n	8002d9a <OLED_Refresh+0x102>
        OLED_Write8(oledSendBuffer[y][x]);
 8002d78:	4918      	ldr	r1, [pc, #96]	; (8002ddc <OLED_Refresh+0x144>)
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	015b      	lsls	r3, r3, #5
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	18ca      	adds	r2, r1, r3
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	4413      	add	r3, r2
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff feba 	bl	8002b08 <OLED_Write8>
      for(x = 0; x < OLED_WIDTH_BYTES; x++)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	3301      	adds	r3, #1
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b83      	cmp	r3, #131	; 0x83
 8002d9e:	d9eb      	bls.n	8002d78 <OLED_Refresh+0xe0>

      OLED_CS_HIGH;
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <OLED_Refresh+0x150>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	619a      	str	r2, [r3, #24]
    for(y = 0; y < OLED_HEIGHT_BYTES; y++)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3301      	adds	r3, #1
 8002daa:	607b      	str	r3, [r7, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d9d2      	bls.n	8002d58 <OLED_Refresh+0xc0>
    }

    refreshInProgess = false;
 8002db2:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <OLED_Refresh+0x12c>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	701a      	strb	r2, [r3, #0]
 8002db8:	e000      	b.n	8002dbc <OLED_Refresh+0x124>
    return;
 8002dba:	bf00      	nop
  }
}
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000bf8 	.word	0x20000bf8
 8002dc8:	2000011a 	.word	0x2000011a
 8002dcc:	40026458 	.word	0x40026458
 8002dd0:	40026400 	.word	0x40026400
 8002dd4:	06000690 	.word	0x06000690
 8002dd8:	200007d8 	.word	0x200007d8
 8002ddc:	200009e8 	.word	0x200009e8
 8002de0:	2000011c 	.word	0x2000011c
 8002de4:	40020400 	.word	0x40020400
 8002de8:	40020800 	.word	0x40020800

08002dec <OLED_DrawPixel>:

static void OLED_DrawPixel(uint8_t x, uint8_t y, bool hilite)
{
 8002dec:	b4b0      	push	{r4, r5, r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	71fb      	strb	r3, [r7, #7]
 8002df6:	460b      	mov	r3, r1
 8002df8:	71bb      	strb	r3, [r7, #6]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	717b      	strb	r3, [r7, #5]
  if ((x < OLED_WIDTH_PIX) && (y < OLED_HEIGHT_PIX))
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	db50      	blt.n	8002ea8 <OLED_DrawPixel+0xbc>
 8002e06:	79bb      	ldrb	r3, [r7, #6]
 8002e08:	2b1f      	cmp	r3, #31
 8002e0a:	d84d      	bhi.n	8002ea8 <OLED_DrawPixel+0xbc>
  {
    if (hilite)
 8002e0c:	797b      	ldrb	r3, [r7, #5]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d024      	beq.n	8002e5c <OLED_DrawPixel+0x70>
      oledBuffer[y / 8][x] |= 1 << (y & 0x07);   // snad rychlejsi nez y % 8
 8002e12:	79bb      	ldrb	r3, [r7, #6]
 8002e14:	08db      	lsrs	r3, r3, #3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	461c      	mov	r4, r3
 8002e1a:	79fa      	ldrb	r2, [r7, #7]
 8002e1c:	461d      	mov	r5, r3
 8002e1e:	79f9      	ldrb	r1, [r7, #7]
 8002e20:	4824      	ldr	r0, [pc, #144]	; (8002eb4 <OLED_DrawPixel+0xc8>)
 8002e22:	462b      	mov	r3, r5
 8002e24:	015b      	lsls	r3, r3, #5
 8002e26:	442b      	add	r3, r5
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4403      	add	r3, r0
 8002e2c:	440b      	add	r3, r1
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	b259      	sxtb	r1, r3
 8002e34:	79bb      	ldrb	r3, [r7, #6]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	2001      	movs	r0, #1
 8002e3c:	fa00 f303 	lsl.w	r3, r0, r3
 8002e40:	b25b      	sxtb	r3, r3
 8002e42:	430b      	orrs	r3, r1
 8002e44:	b25b      	sxtb	r3, r3
 8002e46:	b2d8      	uxtb	r0, r3
 8002e48:	491a      	ldr	r1, [pc, #104]	; (8002eb4 <OLED_DrawPixel+0xc8>)
 8002e4a:	4623      	mov	r3, r4
 8002e4c:	015b      	lsls	r3, r3, #5
 8002e4e:	4423      	add	r3, r4
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	4413      	add	r3, r2
 8002e56:	4602      	mov	r2, r0
 8002e58:	701a      	strb	r2, [r3, #0]
    else
      oledBuffer[y / 8][x] &= ~(1 << (y & 0x07));
  }
}
 8002e5a:	e025      	b.n	8002ea8 <OLED_DrawPixel+0xbc>
      oledBuffer[y / 8][x] &= ~(1 << (y & 0x07));
 8002e5c:	79bb      	ldrb	r3, [r7, #6]
 8002e5e:	08db      	lsrs	r3, r3, #3
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461c      	mov	r4, r3
 8002e64:	79fa      	ldrb	r2, [r7, #7]
 8002e66:	461d      	mov	r5, r3
 8002e68:	79f9      	ldrb	r1, [r7, #7]
 8002e6a:	4812      	ldr	r0, [pc, #72]	; (8002eb4 <OLED_DrawPixel+0xc8>)
 8002e6c:	462b      	mov	r3, r5
 8002e6e:	015b      	lsls	r3, r3, #5
 8002e70:	442b      	add	r3, r5
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4403      	add	r3, r0
 8002e76:	440b      	add	r3, r1
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	b259      	sxtb	r1, r3
 8002e7e:	79bb      	ldrb	r3, [r7, #6]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	2001      	movs	r0, #1
 8002e86:	fa00 f303 	lsl.w	r3, r0, r3
 8002e8a:	b25b      	sxtb	r3, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	b25b      	sxtb	r3, r3
 8002e90:	400b      	ands	r3, r1
 8002e92:	b25b      	sxtb	r3, r3
 8002e94:	b2d8      	uxtb	r0, r3
 8002e96:	4907      	ldr	r1, [pc, #28]	; (8002eb4 <OLED_DrawPixel+0xc8>)
 8002e98:	4623      	mov	r3, r4
 8002e9a:	015b      	lsls	r3, r3, #5
 8002e9c:	4423      	add	r3, r4
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	701a      	strb	r2, [r3, #0]
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bcb0      	pop	{r4, r5, r7}
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	200007d8 	.word	0x200007d8

08002eb8 <OLED_SetByte>:

static void OLED_SetByte(int x, int row, uint8_t val)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	71fb      	strb	r3, [r7, #7]
  oledBuffer[row][x] = val;
 8002ec6:	4908      	ldr	r1, [pc, #32]	; (8002ee8 <OLED_SetByte+0x30>)
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	015b      	lsls	r3, r3, #5
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	18ca      	adds	r2, r1, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	79fa      	ldrb	r2, [r7, #7]
 8002eda:	701a      	strb	r2, [r3, #0]
}
 8002edc:	bf00      	nop
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	200007d8 	.word	0x200007d8

08002eec <OLED_Init>:
// nechce se mi to cele includovat ... #include "disp_hilevel.h"
void SetHiLevelDisp(int pixWidth, int pixHeight,
    void *ptrDrawPixel, void *ptrSetByte, void *ptrSetBytes);

bool OLED_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af02      	add	r7, sp, #8
  bool bbRet = true;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t apb = GetTimerClock(REFRESH_TIMER);
 8002ef6:	2003      	movs	r0, #3
 8002ef8:	f7ff fbe0 	bl	80026bc <GetTimerClock>
 8002efc:	60b8      	str	r0, [r7, #8]

  OLEDInit_HW();
 8002efe:	f7ff fd93 	bl	8002a28 <OLEDInit_HW>
  OLEDInit_SW();
 8002f02:	f7ff fe3b 	bl	8002b7c <OLEDInit_SW>

  SetHiLevelDisp(OLED_WIDTH_PIX, OLED_HEIGHT_PIX,
 8002f06:	2300      	movs	r3, #0
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	4b3d      	ldr	r3, [pc, #244]	; (8003000 <OLED_Init+0x114>)
 8002f0c:	4a3d      	ldr	r2, [pc, #244]	; (8003004 <OLED_Init+0x118>)
 8002f0e:	2120      	movs	r1, #32
 8002f10:	2080      	movs	r0, #128	; 0x80
 8002f12:	f7fe f825 	bl	8000f60 <SetHiLevelDisp>
      OLED_DrawPixel, OLED_SetByte, NULL);

  bbUseDMA = false;
 8002f16:	4b3c      	ldr	r3, [pc, #240]	; (8003008 <OLED_Init+0x11c>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]

  if (apb == 0)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d102      	bne.n	8002f28 <OLED_Init+0x3c>
    bbRet = false;
 8002f22:	2300      	movs	r3, #0
 8002f24:	73fb      	strb	r3, [r7, #15]
 8002f26:	e065      	b.n	8002ff4 <OLED_Init+0x108>
  else
  {
    TIM_TypeDef *timPtr = NULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	607b      	str	r3, [r7, #4]
    IRQn_Type irqN = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	70fb      	strb	r3, [r7, #3]
    switch(REFRESH_TIMER)
    {
      case 3:
        if (!(RCC->APB1ENR & RCC_APB1ENR_TIM3EN))
 8002f30:	4b36      	ldr	r3, [pc, #216]	; (800300c <OLED_Init+0x120>)
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d111      	bne.n	8002f60 <OLED_Init+0x74>
        {
          RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002f3c:	4a33      	ldr	r2, [pc, #204]	; (800300c <OLED_Init+0x120>)
 8002f3e:	4b33      	ldr	r3, [pc, #204]	; (800300c <OLED_Init+0x120>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f043 0302 	orr.w	r3, r3, #2
 8002f46:	6413      	str	r3, [r2, #64]	; 0x40
          RCC->APB1RSTR |= RCC_APB1RSTR_TIM3RST;
 8002f48:	4a30      	ldr	r2, [pc, #192]	; (800300c <OLED_Init+0x120>)
 8002f4a:	4b30      	ldr	r3, [pc, #192]	; (800300c <OLED_Init+0x120>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f043 0302 	orr.w	r3, r3, #2
 8002f52:	6213      	str	r3, [r2, #32]
          RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM3RST;
 8002f54:	4a2d      	ldr	r2, [pc, #180]	; (800300c <OLED_Init+0x120>)
 8002f56:	4b2d      	ldr	r3, [pc, #180]	; (800300c <OLED_Init+0x120>)
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	f023 0302 	bic.w	r3, r3, #2
 8002f5e:	6213      	str	r3, [r2, #32]
        }

        timPtr = TIM3;
 8002f60:	4b2b      	ldr	r3, [pc, #172]	; (8003010 <OLED_Init+0x124>)
 8002f62:	607b      	str	r3, [r7, #4]
        irqN = TIM3_IRQn;
 8002f64:	231d      	movs	r3, #29
 8002f66:	70fb      	strb	r3, [r7, #3]
        break;
 8002f68:	bf00      	nop
        //TODO maji jine citace jine registry ?
      default:
        return false;
    }

    timPtr->CR1 = TIM_CR1_URS;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	601a      	str	r2, [r3, #0]
    timPtr->CR2 = 0;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	605a      	str	r2, [r3, #4]
    //    TIM3->EGR = TIM_EGR_UG;

    timPtr->PSC = apb / 1000000 - 1;   // 1us = 1000kHz
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	4a26      	ldr	r2, [pc, #152]	; (8003014 <OLED_Init+0x128>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	0c9b      	lsrs	r3, r3, #18
 8002f80:	1e5a      	subs	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	629a      	str	r2, [r3, #40]	; 0x28
    timPtr->ARR = 1000;             // reload, tedy zde 1ms
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f8c:	62da      	str	r2, [r3, #44]	; 0x2c

    timPtr->CR1 |= TIM_CR1_CEN;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f043 0201 	orr.w	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	601a      	str	r2, [r3, #0]

    if (irqN > 0)
 8002f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	dd28      	ble.n	8002ff4 <OLED_Init+0x108>
    {
      timPtr->DIER |= TIM_DIER_UIE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f043 0201 	orr.w	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	60da      	str	r2, [r3, #12]
      NVIC_EnableIRQ(irqN);
 8002fae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fd1e 	bl	80029f4 <NVIC_EnableIRQ>

      if (!(RCC->AHB1ENR & RCC_AHB1ENR_DMA2EN))
 8002fb8:	4b14      	ldr	r3, [pc, #80]	; (800300c <OLED_Init+0x120>)
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d111      	bne.n	8002fe8 <OLED_Init+0xfc>
      {
        RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8002fc4:	4a11      	ldr	r2, [pc, #68]	; (800300c <OLED_Init+0x120>)
 8002fc6:	4b11      	ldr	r3, [pc, #68]	; (800300c <OLED_Init+0x120>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fce:	6313      	str	r3, [r2, #48]	; 0x30
        RCC->AHB1RSTR |= RCC_AHB1RSTR_DMA2RST;
 8002fd0:	4a0e      	ldr	r2, [pc, #56]	; (800300c <OLED_Init+0x120>)
 8002fd2:	4b0e      	ldr	r3, [pc, #56]	; (800300c <OLED_Init+0x120>)
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fda:	6113      	str	r3, [r2, #16]
        RCC->AHB1RSTR &= ~RCC_AHB1RSTR_DMA2RST;
 8002fdc:	4a0b      	ldr	r2, [pc, #44]	; (800300c <OLED_Init+0x120>)
 8002fde:	4b0b      	ldr	r3, [pc, #44]	; (800300c <OLED_Init+0x120>)
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002fe6:	6113      	str	r3, [r2, #16]
      }

      NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002fe8:	203b      	movs	r0, #59	; 0x3b
 8002fea:	f7ff fd03 	bl	80029f4 <NVIC_EnableIRQ>

      bbUseDMA = true;
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <OLED_Init+0x11c>)
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	701a      	strb	r2, [r3, #0]
    }
  }

  return bbRet;
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	08002eb9 	.word	0x08002eb9
 8003004:	08002ded 	.word	0x08002ded
 8003008:	20000119 	.word	0x20000119
 800300c:	40023800 	.word	0x40023800
 8003010:	40000400 	.word	0x40000400
 8003014:	431bde83 	.word	0x431bde83

08003018 <TIM3_IRQHandler>:

#if (REFRESH_TIMER == 3)
void TIM3_IRQHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  TIM3->SR &= ~TIM_SR_UIF;  // viz. 15.4.5
 800301c:	4a07      	ldr	r2, [pc, #28]	; (800303c <TIM3_IRQHandler+0x24>)
 800301e:	4b07      	ldr	r3, [pc, #28]	; (800303c <TIM3_IRQHandler+0x24>)
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	6113      	str	r3, [r2, #16]

  if (bbUseDMA)    // any setted ?
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <TIM3_IRQHandler+0x28>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <TIM3_IRQHandler+0x1e>
    OLED_Refresh();
 8003032:	f7ff fe31 	bl	8002c98 <OLED_Refresh>
}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40000400 	.word	0x40000400
 8003040:	20000119 	.word	0x20000119

08003044 <DMA2_Stream3_IRQHandler>:
//TODO  reagovat na to, ze to chybi
#error Invalid REFRESH_TIMER settings
#endif

void DMA2_Stream3_IRQHandler(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  if (DMA2->LISR & DMA_LISR_TCIF3)
 8003048:	4b39      	ldr	r3, [pc, #228]	; (8003130 <DMA2_Stream3_IRQHandler+0xec>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d06b      	beq.n	800312c <DMA2_Stream3_IRQHandler+0xe8>
  {
    DMA2->LIFCR |= DMA_LIFCR_CTCIF3;
 8003054:	4a36      	ldr	r2, [pc, #216]	; (8003130 <DMA2_Stream3_IRQHandler+0xec>)
 8003056:	4b36      	ldr	r3, [pc, #216]	; (8003130 <DMA2_Stream3_IRQHandler+0xec>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800305e:	6093      	str	r3, [r2, #8]

    if (refreshDMAStageSPI >= 0)      // nebude se delat pro M2M, ktery je -1
 8003060:	4b34      	ldr	r3, [pc, #208]	; (8003134 <DMA2_Stream3_IRQHandler+0xf0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	db09      	blt.n	800307c <DMA2_Stream3_IRQHandler+0x38>
    {
      while(SPI1->SR & SPI_SR_BSY)    // dokud se jeste odesila
 8003068:	bf00      	nop
 800306a:	4b33      	ldr	r3, [pc, #204]	; (8003138 <DMA2_Stream3_IRQHandler+0xf4>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f9      	bne.n	800306a <DMA2_Stream3_IRQHandler+0x26>
        ;

      OLED_CS_HIGH;   // musim cekat na doodeslani (viz. Figure 205. Transmission using DMA - pg.572/836 RM F411)
 8003076:	4b31      	ldr	r3, [pc, #196]	; (800313c <DMA2_Stream3_IRQHandler+0xf8>)
 8003078:	2201      	movs	r2, #1
 800307a:	619a      	str	r2, [r3, #24]
                      // i kdyz posilam 132 bajtu, ale zobrazuje se pouze 128
    }

    refreshDMAStageSPI++;
 800307c:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <DMA2_Stream3_IRQHandler+0xf0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3301      	adds	r3, #1
 8003082:	4a2c      	ldr	r2, [pc, #176]	; (8003134 <DMA2_Stream3_IRQHandler+0xf0>)
 8003084:	6013      	str	r3, [r2, #0]
    if (refreshDMAStageSPI > 3)
 8003086:	4b2b      	ldr	r3, [pc, #172]	; (8003134 <DMA2_Stream3_IRQHandler+0xf0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b03      	cmp	r3, #3
 800308c:	dd0f      	ble.n	80030ae <DMA2_Stream3_IRQHandler+0x6a>
    {
      DMA2_Stream3->CR &= ~(DMA_SxCR_EN | DMA_SxCR_TCIE);   // stop and dis. irq
 800308e:	4a2c      	ldr	r2, [pc, #176]	; (8003140 <DMA2_Stream3_IRQHandler+0xfc>)
 8003090:	4b2b      	ldr	r3, [pc, #172]	; (8003140 <DMA2_Stream3_IRQHandler+0xfc>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f023 0311 	bic.w	r3, r3, #17
 8003098:	6013      	str	r3, [r2, #0]

      SPI1->CR2 &= ~SPI_CR2_TXDMAEN;
 800309a:	4a27      	ldr	r2, [pc, #156]	; (8003138 <DMA2_Stream3_IRQHandler+0xf4>)
 800309c:	4b26      	ldr	r3, [pc, #152]	; (8003138 <DMA2_Stream3_IRQHandler+0xf4>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f023 0302 	bic.w	r3, r3, #2
 80030a4:	6053      	str	r3, [r2, #4]
      refreshInProgess = false;
 80030a6:	4b27      	ldr	r3, [pc, #156]	; (8003144 <DMA2_Stream3_IRQHandler+0x100>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]
      OLED_CS_LOW;

      DMA2_Stream3->CR |= DMA_SxCR_EN;        // go
    }
  }
}
 80030ac:	e03e      	b.n	800312c <DMA2_Stream3_IRQHandler+0xe8>
      DMA2_Stream3->CR &= ~DMA_SxCR_EN;
 80030ae:	4a24      	ldr	r2, [pc, #144]	; (8003140 <DMA2_Stream3_IRQHandler+0xfc>)
 80030b0:	4b23      	ldr	r3, [pc, #140]	; (8003140 <DMA2_Stream3_IRQHandler+0xfc>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 0301 	bic.w	r3, r3, #1
 80030b8:	6013      	str	r3, [r2, #0]
      DMA2->LIFCR |= (DMA_LIFCR_CTEIF3 | DMA_LIFCR_CHTIF3 | DMA_LIFCR_CTCIF3 | DMA_LIFCR_CDMEIF3);
 80030ba:	4a1d      	ldr	r2, [pc, #116]	; (8003130 <DMA2_Stream3_IRQHandler+0xec>)
 80030bc:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <DMA2_Stream3_IRQHandler+0xec>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80030c4:	6093      	str	r3, [r2, #8]
      SPI1->CR2 &= ~SPI_CR2_TXDMAEN;
 80030c6:	4a1c      	ldr	r2, [pc, #112]	; (8003138 <DMA2_Stream3_IRQHandler+0xf4>)
 80030c8:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <DMA2_Stream3_IRQHandler+0xf4>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f023 0302 	bic.w	r3, r3, #2
 80030d0:	6053      	str	r3, [r2, #4]
      OLED_SetPage(refreshDMAStageSPI);
 80030d2:	4b18      	ldr	r3, [pc, #96]	; (8003134 <DMA2_Stream3_IRQHandler+0xf0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fd90 	bl	8002bfc <OLED_SetPage>
      OLED_SetAllRow();
 80030dc:	f7ff fdc0 	bl	8002c60 <OLED_SetAllRow>
      DMA2_Stream3->CR = 0
 80030e0:	4b17      	ldr	r3, [pc, #92]	; (8003140 <DMA2_Stream3_IRQHandler+0xfc>)
 80030e2:	4a19      	ldr	r2, [pc, #100]	; (8003148 <DMA2_Stream3_IRQHandler+0x104>)
 80030e4:	601a      	str	r2, [r3, #0]
      DMA2_Stream3->PAR = (uint32_t)&(SPI1->DR);      // DEST
 80030e6:	4b16      	ldr	r3, [pc, #88]	; (8003140 <DMA2_Stream3_IRQHandler+0xfc>)
 80030e8:	4a18      	ldr	r2, [pc, #96]	; (800314c <DMA2_Stream3_IRQHandler+0x108>)
 80030ea:	609a      	str	r2, [r3, #8]
      DMA2_Stream3->M0AR = (uint32_t)&(oledSendBuffer[refreshDMAStageSPI][0]);       // SRC
 80030ec:	4914      	ldr	r1, [pc, #80]	; (8003140 <DMA2_Stream3_IRQHandler+0xfc>)
 80030ee:	4b11      	ldr	r3, [pc, #68]	; (8003134 <DMA2_Stream3_IRQHandler+0xf0>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	4613      	mov	r3, r2
 80030f4:	015b      	lsls	r3, r3, #5
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4a15      	ldr	r2, [pc, #84]	; (8003150 <DMA2_Stream3_IRQHandler+0x10c>)
 80030fc:	4413      	add	r3, r2
 80030fe:	60cb      	str	r3, [r1, #12]
      DMA2_Stream3->NDTR = OLED_WIDTH_BYTES;   // nutno plnit vzdy, po prenosu ukazuje pocet zbyvajicich, tedy 0
 8003100:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <DMA2_Stream3_IRQHandler+0xfc>)
 8003102:	2284      	movs	r2, #132	; 0x84
 8003104:	605a      	str	r2, [r3, #4]
      SPI1->CR2 |= SPI_CR2_TXDMAEN;
 8003106:	4a0c      	ldr	r2, [pc, #48]	; (8003138 <DMA2_Stream3_IRQHandler+0xf4>)
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <DMA2_Stream3_IRQHandler+0xf4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f043 0302 	orr.w	r3, r3, #2
 8003110:	6053      	str	r3, [r2, #4]
      OLED_DC_HIGH;
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <DMA2_Stream3_IRQHandler+0x110>)
 8003114:	2210      	movs	r2, #16
 8003116:	619a      	str	r2, [r3, #24]
      OLED_CS_LOW;
 8003118:	4b08      	ldr	r3, [pc, #32]	; (800313c <DMA2_Stream3_IRQHandler+0xf8>)
 800311a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800311e:	619a      	str	r2, [r3, #24]
      DMA2_Stream3->CR |= DMA_SxCR_EN;        // go
 8003120:	4a07      	ldr	r2, [pc, #28]	; (8003140 <DMA2_Stream3_IRQHandler+0xfc>)
 8003122:	4b07      	ldr	r3, [pc, #28]	; (8003140 <DMA2_Stream3_IRQHandler+0xfc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	6013      	str	r3, [r2, #0]
}
 800312c:	bf00      	nop
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40026400 	.word	0x40026400
 8003134:	2000011c 	.word	0x2000011c
 8003138:	40013000 	.word	0x40013000
 800313c:	40020800 	.word	0x40020800
 8003140:	40026458 	.word	0x40026458
 8003144:	20000bf8 	.word	0x20000bf8
 8003148:	06000450 	.word	0x06000450
 800314c:	4001300c 	.word	0x4001300c
 8003150:	200009e8 	.word	0x200009e8
 8003154:	40020400 	.word	0x40020400

08003158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003190 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800315c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800315e:	e003      	b.n	8003168 <LoopCopyDataInit>

08003160 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003160:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003162:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003164:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003166:	3104      	adds	r1, #4

08003168 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003168:	480b      	ldr	r0, [pc, #44]	; (8003198 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800316a:	4b0c      	ldr	r3, [pc, #48]	; (800319c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800316c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800316e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003170:	d3f6      	bcc.n	8003160 <CopyDataInit>
  ldr  r2, =_sbss
 8003172:	4a0b      	ldr	r2, [pc, #44]	; (80031a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003174:	e002      	b.n	800317c <LoopFillZerobss>

08003176 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003176:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003178:	f842 3b04 	str.w	r3, [r2], #4

0800317c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800317c:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800317e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003180:	d3f9      	bcc.n	8003176 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003182:	f000 f8b3 	bl	80032ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003186:	f000 f9ff 	bl	8003588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800318a:	f7fe fdad 	bl	8001ce8 <main>
  bx  lr    
 800318e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003190:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003194:	080096b8 	.word	0x080096b8
  ldr  r0, =_sdata
 8003198:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800319c:	20000798 	.word	0x20000798
  ldr  r2, =_sbss
 80031a0:	20000798 	.word	0x20000798
  ldr  r3, = _ebss
 80031a4:	20000c48 	.word	0x20000c48

080031a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031a8:	e7fe      	b.n	80031a8 <ADC_IRQHandler>
	...

080031ac <_write>:

int usart2_putc(int ch);
int usart2_getc(void);

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  int32_t x = len;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	617b      	str	r3, [r7, #20]
  while(x)
 80031bc:	e00a      	b.n	80031d4 <_write+0x28>
  {
    usart2_putc(*ptr);
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fbc8 	bl	8002958 <usart2_putc>
    ptr++;
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	3301      	adds	r3, #1
 80031cc:	60bb      	str	r3, [r7, #8]
    x--;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	617b      	str	r3, [r7, #20]
  while(x)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f1      	bne.n	80031be <_write+0x12>
  }
  errno = 0;   // OK
 80031da:	4b04      	ldr	r3, [pc, #16]	; (80031ec <_write+0x40>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
  return len;
 80031e0:	687b      	ldr	r3, [r7, #4]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000c38 	.word	0x20000c38

080031f0 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  *ptr = usart2_getc();
 80031fc:	f7ff fbd8 	bl	80029b0 <usart2_getc>
 8003200:	4603      	mov	r3, r0
 8003202:	b2da      	uxtb	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	701a      	strb	r2, [r3, #0]
  errno = 0;   // OK
 8003208:	4b03      	ldr	r3, [pc, #12]	; (8003218 <_read+0x28>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
  return 1;
 800320e:	2301      	movs	r3, #1
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20000c38 	.word	0x20000c38

0800321c <_sbrk>:

void * _sbrk(int32_t incr)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8003224:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <_sbrk+0x38>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d102      	bne.n	8003232 <_sbrk+0x16>
		heap_end = & end;
 800322c:	4b09      	ldr	r3, [pc, #36]	; (8003254 <_sbrk+0x38>)
 800322e:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <_sbrk+0x3c>)
 8003230:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8003232:	4b08      	ldr	r3, [pc, #32]	; (8003254 <_sbrk+0x38>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <_sbrk+0x38>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4413      	add	r3, r2
 8003240:	4a04      	ldr	r2, [pc, #16]	; (8003254 <_sbrk+0x38>)
 8003242:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8003244:	68fb      	ldr	r3, [r7, #12]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20000bfc 	.word	0x20000bfc
 8003258:	20000c48 	.word	0x20000c48

0800325c <_close>:

int _close(int32_t file)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <_close+0x20>)
 8003266:	2258      	movs	r2, #88	; 0x58
 8003268:	601a      	str	r2, [r3, #0]
	return -1;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800326e:	4618      	mov	r0, r3
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	20000c38 	.word	0x20000c38

08003280 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 800328a:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <_fstat+0x20>)
 800328c:	2258      	movs	r2, #88	; 0x58
 800328e:	601a      	str	r2, [r3, #0]
	return -1;
 8003290:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	20000c38 	.word	0x20000c38

080032a4 <_isatty>:

int _isatty(int32_t file)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 80032ac:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <_isatty+0x1c>)
 80032ae:	2258      	movs	r2, #88	; 0x58
 80032b0:	601a      	str	r2, [r3, #0]
	return 0;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	20000c38 	.word	0x20000c38

080032c4 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <_lseek+0x24>)
 80032d2:	2258      	movs	r2, #88	; 0x58
 80032d4:	601a      	str	r2, [r3, #0]
	return -1;
 80032d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	20000c38 	.word	0x20000c38

080032ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032f0:	4a16      	ldr	r2, [pc, #88]	; (800334c <SystemInit+0x60>)
 80032f2:	4b16      	ldr	r3, [pc, #88]	; (800334c <SystemInit+0x60>)
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003300:	4a13      	ldr	r2, [pc, #76]	; (8003350 <SystemInit+0x64>)
 8003302:	4b13      	ldr	r3, [pc, #76]	; (8003350 <SystemInit+0x64>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800330c:	4b10      	ldr	r3, [pc, #64]	; (8003350 <SystemInit+0x64>)
 800330e:	2200      	movs	r2, #0
 8003310:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003312:	4a0f      	ldr	r2, [pc, #60]	; (8003350 <SystemInit+0x64>)
 8003314:	4b0e      	ldr	r3, [pc, #56]	; (8003350 <SystemInit+0x64>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800331c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003320:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003322:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <SystemInit+0x64>)
 8003324:	4a0b      	ldr	r2, [pc, #44]	; (8003354 <SystemInit+0x68>)
 8003326:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003328:	4a09      	ldr	r2, [pc, #36]	; (8003350 <SystemInit+0x64>)
 800332a:	4b09      	ldr	r3, [pc, #36]	; (8003350 <SystemInit+0x64>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003332:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003334:	4b06      	ldr	r3, [pc, #24]	; (8003350 <SystemInit+0x64>)
 8003336:	2200      	movs	r2, #0
 8003338:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800333a:	4b04      	ldr	r3, [pc, #16]	; (800334c <SystemInit+0x60>)
 800333c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003340:	609a      	str	r2, [r3, #8]
#endif
}
 8003342:	bf00      	nop
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000ed00 	.word	0xe000ed00
 8003350:	40023800 	.word	0x40023800
 8003354:	24003010 	.word	0x24003010

08003358 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800335e:	2300      	movs	r3, #0
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	2302      	movs	r3, #2
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	2300      	movs	r3, #0
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	2302      	movs	r3, #2
 8003370:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003372:	4b31      	ldr	r3, [pc, #196]	; (8003438 <SystemCoreClockUpdate+0xe0>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	2b04      	cmp	r3, #4
 8003380:	d007      	beq.n	8003392 <SystemCoreClockUpdate+0x3a>
 8003382:	2b08      	cmp	r3, #8
 8003384:	d009      	beq.n	800339a <SystemCoreClockUpdate+0x42>
 8003386:	2b00      	cmp	r3, #0
 8003388:	d13d      	bne.n	8003406 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800338a:	4b2c      	ldr	r3, [pc, #176]	; (800343c <SystemCoreClockUpdate+0xe4>)
 800338c:	4a2c      	ldr	r2, [pc, #176]	; (8003440 <SystemCoreClockUpdate+0xe8>)
 800338e:	601a      	str	r2, [r3, #0]
      break;
 8003390:	e03d      	b.n	800340e <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003392:	4b2a      	ldr	r3, [pc, #168]	; (800343c <SystemCoreClockUpdate+0xe4>)
 8003394:	4a2b      	ldr	r2, [pc, #172]	; (8003444 <SystemCoreClockUpdate+0xec>)
 8003396:	601a      	str	r2, [r3, #0]
      break;
 8003398:	e039      	b.n	800340e <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800339a:	4b27      	ldr	r3, [pc, #156]	; (8003438 <SystemCoreClockUpdate+0xe0>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	0d9b      	lsrs	r3, r3, #22
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a6:	4b24      	ldr	r3, [pc, #144]	; (8003438 <SystemCoreClockUpdate+0xe0>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ae:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00c      	beq.n	80033d0 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80033b6:	4a23      	ldr	r2, [pc, #140]	; (8003444 <SystemCoreClockUpdate+0xec>)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80033be:	4a1e      	ldr	r2, [pc, #120]	; (8003438 <SystemCoreClockUpdate+0xe0>)
 80033c0:	6852      	ldr	r2, [r2, #4]
 80033c2:	0992      	lsrs	r2, r2, #6
 80033c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033c8:	fb02 f303 	mul.w	r3, r2, r3
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	e00b      	b.n	80033e8 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80033d0:	4a1b      	ldr	r2, [pc, #108]	; (8003440 <SystemCoreClockUpdate+0xe8>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d8:	4a17      	ldr	r2, [pc, #92]	; (8003438 <SystemCoreClockUpdate+0xe0>)
 80033da:	6852      	ldr	r2, [r2, #4]
 80033dc:	0992      	lsrs	r2, r2, #6
 80033de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80033e8:	4b13      	ldr	r3, [pc, #76]	; (8003438 <SystemCoreClockUpdate+0xe0>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	0c1b      	lsrs	r3, r3, #16
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	3301      	adds	r3, #1
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	4a0e      	ldr	r2, [pc, #56]	; (800343c <SystemCoreClockUpdate+0xe4>)
 8003402:	6013      	str	r3, [r2, #0]
      break;
 8003404:	e003      	b.n	800340e <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8003406:	4b0d      	ldr	r3, [pc, #52]	; (800343c <SystemCoreClockUpdate+0xe4>)
 8003408:	4a0d      	ldr	r2, [pc, #52]	; (8003440 <SystemCoreClockUpdate+0xe8>)
 800340a:	601a      	str	r2, [r3, #0]
      break;
 800340c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800340e:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <SystemCoreClockUpdate+0xe0>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	4a0b      	ldr	r2, [pc, #44]	; (8003448 <SystemCoreClockUpdate+0xf0>)
 800341a:	5cd3      	ldrb	r3, [r2, r3]
 800341c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800341e:	4b07      	ldr	r3, [pc, #28]	; (800343c <SystemCoreClockUpdate+0xe4>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
 8003428:	4a04      	ldr	r2, [pc, #16]	; (800343c <SystemCoreClockUpdate+0xe4>)
 800342a:	6013      	str	r3, [r2, #0]
}
 800342c:	bf00      	nop
 800342e:	371c      	adds	r7, #28
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	40023800 	.word	0x40023800
 800343c:	20000120 	.word	0x20000120
 8003440:	00f42400 	.word	0x00f42400
 8003444:	007a1200 	.word	0x007a1200
 8003448:	080091ec 	.word	0x080091ec

0800344c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	6039      	str	r1, [r7, #0]
 8003456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345c:	2b00      	cmp	r3, #0
 800345e:	da0b      	bge.n	8003478 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003460:	490d      	ldr	r1, [pc, #52]	; (8003498 <NVIC_SetPriority+0x4c>)
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	3b04      	subs	r3, #4
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	0112      	lsls	r2, r2, #4
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	440b      	add	r3, r1
 8003474:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003476:	e009      	b.n	800348c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003478:	4908      	ldr	r1, [pc, #32]	; (800349c <NVIC_SetPriority+0x50>)
 800347a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	0112      	lsls	r2, r2, #4
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	440b      	add	r3, r1
 8003488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	e000ed00 	.word	0xe000ed00
 800349c:	e000e100 	.word	0xe000e100

080034a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034b0:	d301      	bcc.n	80034b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034b2:	2301      	movs	r3, #1
 80034b4:	e00f      	b.n	80034d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034b6:	4a0a      	ldr	r2, [pc, #40]	; (80034e0 <SysTick_Config+0x40>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034be:	210f      	movs	r1, #15
 80034c0:	f04f 30ff 	mov.w	r0, #4294967295
 80034c4:	f7ff ffc2 	bl	800344c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <SysTick_Config+0x40>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ce:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <SysTick_Config+0x40>)
 80034d0:	2207      	movs	r2, #7
 80034d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	e000e010 	.word	0xe000e010

080034e4 <SysTick_Handler>:

volatile uint32_t _ticks = 0;
volatile uint32_t _interval = 1;

void SysTick_Handler(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  _ticks += _interval;
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <SysTick_Handler+0x1c>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <SysTick_Handler+0x20>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4413      	add	r3, r2
 80034f2:	4a04      	ldr	r2, [pc, #16]	; (8003504 <SysTick_Handler+0x20>)
 80034f4:	6013      	str	r3, [r2, #0]
}
 80034f6:	bf00      	nop
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	20000124 	.word	0x20000124
 8003504:	20000c00 	.word	0x20000c00

08003508 <WaitMs>:

void WaitMs(uint32_t ms)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  ms += _ticks;
 8003510:	4b08      	ldr	r3, [pc, #32]	; (8003534 <WaitMs+0x2c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	4413      	add	r3, r2
 8003518:	607b      	str	r3, [r7, #4]
  while(_ticks < ms)
 800351a:	bf00      	nop
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <WaitMs+0x2c>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	429a      	cmp	r2, r3
 8003524:	d3fa      	bcc.n	800351c <WaitMs+0x14>
    ;
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000c00 	.word	0x20000c00

08003538 <InitSystickDefault>:

void InitSystickDefault(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  InitSystick(1);
 800353c:	2001      	movs	r0, #1
 800353e:	f000 f803 	bl	8003548 <InitSystick>
}
 8003542:	bf00      	nop
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <InitSystick>:

void InitSystick(uint32_t intervalMs)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  SystemCoreClockUpdate();               // for safe
 8003550:	f7ff ff02 	bl	8003358 <SystemCoreClockUpdate>
  
  _interval = intervalMs;                // save for waiting calculation 
 8003554:	4a09      	ldr	r2, [pc, #36]	; (800357c <InitSystick+0x34>)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6013      	str	r3, [r2, #0]
  SysTick_Config(SystemCoreClock / 1000 / _interval);  // Generate interrupt every X ms
 800355a:	4b09      	ldr	r3, [pc, #36]	; (8003580 <InitSystick+0x38>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a09      	ldr	r2, [pc, #36]	; (8003584 <InitSystick+0x3c>)
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	099a      	lsrs	r2, r3, #6
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <InitSystick+0x34>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	fbb2 f3f3 	udiv	r3, r2, r3
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff ff96 	bl	80034a0 <SysTick_Config>
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	20000124 	.word	0x20000124
 8003580:	20000120 	.word	0x20000120
 8003584:	10624dd3 	.word	0x10624dd3

08003588 <__libc_init_array>:
 8003588:	b570      	push	{r4, r5, r6, lr}
 800358a:	4e0d      	ldr	r6, [pc, #52]	; (80035c0 <__libc_init_array+0x38>)
 800358c:	4c0d      	ldr	r4, [pc, #52]	; (80035c4 <__libc_init_array+0x3c>)
 800358e:	1ba4      	subs	r4, r4, r6
 8003590:	10a4      	asrs	r4, r4, #2
 8003592:	2500      	movs	r5, #0
 8003594:	42a5      	cmp	r5, r4
 8003596:	d109      	bne.n	80035ac <__libc_init_array+0x24>
 8003598:	4e0b      	ldr	r6, [pc, #44]	; (80035c8 <__libc_init_array+0x40>)
 800359a:	4c0c      	ldr	r4, [pc, #48]	; (80035cc <__libc_init_array+0x44>)
 800359c:	f005 f814 	bl	80085c8 <_init>
 80035a0:	1ba4      	subs	r4, r4, r6
 80035a2:	10a4      	asrs	r4, r4, #2
 80035a4:	2500      	movs	r5, #0
 80035a6:	42a5      	cmp	r5, r4
 80035a8:	d105      	bne.n	80035b6 <__libc_init_array+0x2e>
 80035aa:	bd70      	pop	{r4, r5, r6, pc}
 80035ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035b0:	4798      	blx	r3
 80035b2:	3501      	adds	r5, #1
 80035b4:	e7ee      	b.n	8003594 <__libc_init_array+0xc>
 80035b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035ba:	4798      	blx	r3
 80035bc:	3501      	adds	r5, #1
 80035be:	e7f2      	b.n	80035a6 <__libc_init_array+0x1e>
 80035c0:	080096b0 	.word	0x080096b0
 80035c4:	080096b0 	.word	0x080096b0
 80035c8:	080096b0 	.word	0x080096b0
 80035cc:	080096b4 	.word	0x080096b4

080035d0 <printf>:
 80035d0:	b40f      	push	{r0, r1, r2, r3}
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <printf+0x2c>)
 80035d4:	b513      	push	{r0, r1, r4, lr}
 80035d6:	681c      	ldr	r4, [r3, #0]
 80035d8:	b124      	cbz	r4, 80035e4 <printf+0x14>
 80035da:	69a3      	ldr	r3, [r4, #24]
 80035dc:	b913      	cbnz	r3, 80035e4 <printf+0x14>
 80035de:	4620      	mov	r0, r4
 80035e0:	f002 fa48 	bl	8005a74 <__sinit>
 80035e4:	ab05      	add	r3, sp, #20
 80035e6:	9a04      	ldr	r2, [sp, #16]
 80035e8:	68a1      	ldr	r1, [r4, #8]
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	4620      	mov	r0, r4
 80035ee:	f000 f967 	bl	80038c0 <_vfprintf_r>
 80035f2:	b002      	add	sp, #8
 80035f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035f8:	b004      	add	sp, #16
 80035fa:	4770      	bx	lr
 80035fc:	20000128 	.word	0x20000128

08003600 <_puts_r>:
 8003600:	b530      	push	{r4, r5, lr}
 8003602:	4605      	mov	r5, r0
 8003604:	b089      	sub	sp, #36	; 0x24
 8003606:	4608      	mov	r0, r1
 8003608:	460c      	mov	r4, r1
 800360a:	f7fc fde9 	bl	80001e0 <strlen>
 800360e:	4b28      	ldr	r3, [pc, #160]	; (80036b0 <_puts_r+0xb0>)
 8003610:	9306      	str	r3, [sp, #24]
 8003612:	2301      	movs	r3, #1
 8003614:	9005      	str	r0, [sp, #20]
 8003616:	9307      	str	r3, [sp, #28]
 8003618:	4418      	add	r0, r3
 800361a:	ab04      	add	r3, sp, #16
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	2302      	movs	r3, #2
 8003620:	9404      	str	r4, [sp, #16]
 8003622:	9003      	str	r0, [sp, #12]
 8003624:	9302      	str	r3, [sp, #8]
 8003626:	b125      	cbz	r5, 8003632 <_puts_r+0x32>
 8003628:	69ab      	ldr	r3, [r5, #24]
 800362a:	b913      	cbnz	r3, 8003632 <_puts_r+0x32>
 800362c:	4628      	mov	r0, r5
 800362e:	f002 fa21 	bl	8005a74 <__sinit>
 8003632:	69ab      	ldr	r3, [r5, #24]
 8003634:	68ac      	ldr	r4, [r5, #8]
 8003636:	b913      	cbnz	r3, 800363e <_puts_r+0x3e>
 8003638:	4628      	mov	r0, r5
 800363a:	f002 fa1b 	bl	8005a74 <__sinit>
 800363e:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <_puts_r+0xb4>)
 8003640:	429c      	cmp	r4, r3
 8003642:	d12a      	bne.n	800369a <_puts_r+0x9a>
 8003644:	686c      	ldr	r4, [r5, #4]
 8003646:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003648:	07db      	lsls	r3, r3, #31
 800364a:	d405      	bmi.n	8003658 <_puts_r+0x58>
 800364c:	89a3      	ldrh	r3, [r4, #12]
 800364e:	0598      	lsls	r0, r3, #22
 8003650:	d402      	bmi.n	8003658 <_puts_r+0x58>
 8003652:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003654:	f002 fd38 	bl	80060c8 <__retarget_lock_acquire_recursive>
 8003658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800365c:	0499      	lsls	r1, r3, #18
 800365e:	d406      	bmi.n	800366e <_puts_r+0x6e>
 8003660:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003664:	81a3      	strh	r3, [r4, #12]
 8003666:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003668:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800366c:	6663      	str	r3, [r4, #100]	; 0x64
 800366e:	4628      	mov	r0, r5
 8003670:	aa01      	add	r2, sp, #4
 8003672:	4621      	mov	r1, r4
 8003674:	f002 fb90 	bl	8005d98 <__sfvwrite_r>
 8003678:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800367a:	2800      	cmp	r0, #0
 800367c:	bf14      	ite	ne
 800367e:	f04f 35ff 	movne.w	r5, #4294967295
 8003682:	250a      	moveq	r5, #10
 8003684:	07da      	lsls	r2, r3, #31
 8003686:	d405      	bmi.n	8003694 <_puts_r+0x94>
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	059b      	lsls	r3, r3, #22
 800368c:	d402      	bmi.n	8003694 <_puts_r+0x94>
 800368e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003690:	f002 fd1b 	bl	80060ca <__retarget_lock_release_recursive>
 8003694:	4628      	mov	r0, r5
 8003696:	b009      	add	sp, #36	; 0x24
 8003698:	bd30      	pop	{r4, r5, pc}
 800369a:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <_puts_r+0xb8>)
 800369c:	429c      	cmp	r4, r3
 800369e:	d101      	bne.n	80036a4 <_puts_r+0xa4>
 80036a0:	68ac      	ldr	r4, [r5, #8]
 80036a2:	e7d0      	b.n	8003646 <_puts_r+0x46>
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <_puts_r+0xbc>)
 80036a6:	429c      	cmp	r4, r3
 80036a8:	bf08      	it	eq
 80036aa:	68ec      	ldreq	r4, [r5, #12]
 80036ac:	e7cb      	b.n	8003646 <_puts_r+0x46>
 80036ae:	bf00      	nop
 80036b0:	08009200 	.word	0x08009200
 80036b4:	08009284 	.word	0x08009284
 80036b8:	080092a4 	.word	0x080092a4
 80036bc:	08009264 	.word	0x08009264

080036c0 <puts>:
 80036c0:	4b02      	ldr	r3, [pc, #8]	; (80036cc <puts+0xc>)
 80036c2:	4601      	mov	r1, r0
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	f7ff bf9b 	b.w	8003600 <_puts_r>
 80036ca:	bf00      	nop
 80036cc:	20000128 	.word	0x20000128

080036d0 <__srget_r>:
 80036d0:	b538      	push	{r3, r4, r5, lr}
 80036d2:	460c      	mov	r4, r1
 80036d4:	4605      	mov	r5, r0
 80036d6:	b118      	cbz	r0, 80036e0 <__srget_r+0x10>
 80036d8:	6983      	ldr	r3, [r0, #24]
 80036da:	b90b      	cbnz	r3, 80036e0 <__srget_r+0x10>
 80036dc:	f002 f9ca 	bl	8005a74 <__sinit>
 80036e0:	4b0e      	ldr	r3, [pc, #56]	; (800371c <__srget_r+0x4c>)
 80036e2:	429c      	cmp	r4, r3
 80036e4:	d10d      	bne.n	8003702 <__srget_r+0x32>
 80036e6:	686c      	ldr	r4, [r5, #4]
 80036e8:	4621      	mov	r1, r4
 80036ea:	4628      	mov	r0, r5
 80036ec:	f003 fc04 	bl	8006ef8 <__srefill_r>
 80036f0:	b988      	cbnz	r0, 8003716 <__srget_r+0x46>
 80036f2:	6863      	ldr	r3, [r4, #4]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	6063      	str	r3, [r4, #4]
 80036f8:	6823      	ldr	r3, [r4, #0]
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	6022      	str	r2, [r4, #0]
 80036fe:	7818      	ldrb	r0, [r3, #0]
 8003700:	bd38      	pop	{r3, r4, r5, pc}
 8003702:	4b07      	ldr	r3, [pc, #28]	; (8003720 <__srget_r+0x50>)
 8003704:	429c      	cmp	r4, r3
 8003706:	d101      	bne.n	800370c <__srget_r+0x3c>
 8003708:	68ac      	ldr	r4, [r5, #8]
 800370a:	e7ed      	b.n	80036e8 <__srget_r+0x18>
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <__srget_r+0x54>)
 800370e:	429c      	cmp	r4, r3
 8003710:	bf08      	it	eq
 8003712:	68ec      	ldreq	r4, [r5, #12]
 8003714:	e7e8      	b.n	80036e8 <__srget_r+0x18>
 8003716:	f04f 30ff 	mov.w	r0, #4294967295
 800371a:	bd38      	pop	{r3, r4, r5, pc}
 800371c:	08009284 	.word	0x08009284
 8003720:	080092a4 	.word	0x080092a4
 8003724:	08009264 	.word	0x08009264

08003728 <setvbuf>:
 8003728:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800372c:	461d      	mov	r5, r3
 800372e:	4b60      	ldr	r3, [pc, #384]	; (80038b0 <setvbuf+0x188>)
 8003730:	681e      	ldr	r6, [r3, #0]
 8003732:	4604      	mov	r4, r0
 8003734:	460f      	mov	r7, r1
 8003736:	4690      	mov	r8, r2
 8003738:	b126      	cbz	r6, 8003744 <setvbuf+0x1c>
 800373a:	69b3      	ldr	r3, [r6, #24]
 800373c:	b913      	cbnz	r3, 8003744 <setvbuf+0x1c>
 800373e:	4630      	mov	r0, r6
 8003740:	f002 f998 	bl	8005a74 <__sinit>
 8003744:	4b5b      	ldr	r3, [pc, #364]	; (80038b4 <setvbuf+0x18c>)
 8003746:	429c      	cmp	r4, r3
 8003748:	d166      	bne.n	8003818 <setvbuf+0xf0>
 800374a:	6874      	ldr	r4, [r6, #4]
 800374c:	f1b8 0f02 	cmp.w	r8, #2
 8003750:	d006      	beq.n	8003760 <setvbuf+0x38>
 8003752:	f1b8 0f01 	cmp.w	r8, #1
 8003756:	f200 80a7 	bhi.w	80038a8 <setvbuf+0x180>
 800375a:	2d00      	cmp	r5, #0
 800375c:	f2c0 80a4 	blt.w	80038a8 <setvbuf+0x180>
 8003760:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003762:	07da      	lsls	r2, r3, #31
 8003764:	d405      	bmi.n	8003772 <setvbuf+0x4a>
 8003766:	89a3      	ldrh	r3, [r4, #12]
 8003768:	059b      	lsls	r3, r3, #22
 800376a:	d402      	bmi.n	8003772 <setvbuf+0x4a>
 800376c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800376e:	f002 fcab 	bl	80060c8 <__retarget_lock_acquire_recursive>
 8003772:	4621      	mov	r1, r4
 8003774:	4630      	mov	r0, r6
 8003776:	f002 f8d7 	bl	8005928 <_fflush_r>
 800377a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800377c:	b141      	cbz	r1, 8003790 <setvbuf+0x68>
 800377e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003782:	4299      	cmp	r1, r3
 8003784:	d002      	beq.n	800378c <setvbuf+0x64>
 8003786:	4630      	mov	r0, r6
 8003788:	f002 fa4a 	bl	8005c20 <_free_r>
 800378c:	2300      	movs	r3, #0
 800378e:	6363      	str	r3, [r4, #52]	; 0x34
 8003790:	2300      	movs	r3, #0
 8003792:	61a3      	str	r3, [r4, #24]
 8003794:	6063      	str	r3, [r4, #4]
 8003796:	89a3      	ldrh	r3, [r4, #12]
 8003798:	0618      	lsls	r0, r3, #24
 800379a:	d503      	bpl.n	80037a4 <setvbuf+0x7c>
 800379c:	6921      	ldr	r1, [r4, #16]
 800379e:	4630      	mov	r0, r6
 80037a0:	f002 fa3e 	bl	8005c20 <_free_r>
 80037a4:	89a3      	ldrh	r3, [r4, #12]
 80037a6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80037aa:	f023 0303 	bic.w	r3, r3, #3
 80037ae:	f1b8 0f02 	cmp.w	r8, #2
 80037b2:	81a3      	strh	r3, [r4, #12]
 80037b4:	d072      	beq.n	800389c <setvbuf+0x174>
 80037b6:	ab01      	add	r3, sp, #4
 80037b8:	466a      	mov	r2, sp
 80037ba:	4621      	mov	r1, r4
 80037bc:	4630      	mov	r0, r6
 80037be:	f002 fc85 	bl	80060cc <__swhatbuf_r>
 80037c2:	89a3      	ldrh	r3, [r4, #12]
 80037c4:	4318      	orrs	r0, r3
 80037c6:	81a0      	strh	r0, [r4, #12]
 80037c8:	2d00      	cmp	r5, #0
 80037ca:	d12f      	bne.n	800382c <setvbuf+0x104>
 80037cc:	9d00      	ldr	r5, [sp, #0]
 80037ce:	4628      	mov	r0, r5
 80037d0:	f002 fce8 	bl	80061a4 <malloc>
 80037d4:	4607      	mov	r7, r0
 80037d6:	2800      	cmp	r0, #0
 80037d8:	d162      	bne.n	80038a0 <setvbuf+0x178>
 80037da:	f8dd 9000 	ldr.w	r9, [sp]
 80037de:	45a9      	cmp	r9, r5
 80037e0:	d150      	bne.n	8003884 <setvbuf+0x15c>
 80037e2:	f04f 35ff 	mov.w	r5, #4294967295
 80037e6:	2200      	movs	r2, #0
 80037e8:	60a2      	str	r2, [r4, #8]
 80037ea:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80037ee:	6022      	str	r2, [r4, #0]
 80037f0:	6122      	str	r2, [r4, #16]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037f8:	6162      	str	r2, [r4, #20]
 80037fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80037fc:	f043 0302 	orr.w	r3, r3, #2
 8003800:	07d1      	lsls	r1, r2, #31
 8003802:	81a3      	strh	r3, [r4, #12]
 8003804:	d404      	bmi.n	8003810 <setvbuf+0xe8>
 8003806:	059b      	lsls	r3, r3, #22
 8003808:	d402      	bmi.n	8003810 <setvbuf+0xe8>
 800380a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800380c:	f002 fc5d 	bl	80060ca <__retarget_lock_release_recursive>
 8003810:	4628      	mov	r0, r5
 8003812:	b003      	add	sp, #12
 8003814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003818:	4b27      	ldr	r3, [pc, #156]	; (80038b8 <setvbuf+0x190>)
 800381a:	429c      	cmp	r4, r3
 800381c:	d101      	bne.n	8003822 <setvbuf+0xfa>
 800381e:	68b4      	ldr	r4, [r6, #8]
 8003820:	e794      	b.n	800374c <setvbuf+0x24>
 8003822:	4b26      	ldr	r3, [pc, #152]	; (80038bc <setvbuf+0x194>)
 8003824:	429c      	cmp	r4, r3
 8003826:	bf08      	it	eq
 8003828:	68f4      	ldreq	r4, [r6, #12]
 800382a:	e78f      	b.n	800374c <setvbuf+0x24>
 800382c:	2f00      	cmp	r7, #0
 800382e:	d0ce      	beq.n	80037ce <setvbuf+0xa6>
 8003830:	69b3      	ldr	r3, [r6, #24]
 8003832:	b913      	cbnz	r3, 800383a <setvbuf+0x112>
 8003834:	4630      	mov	r0, r6
 8003836:	f002 f91d 	bl	8005a74 <__sinit>
 800383a:	9b00      	ldr	r3, [sp, #0]
 800383c:	6127      	str	r7, [r4, #16]
 800383e:	429d      	cmp	r5, r3
 8003840:	bf18      	it	ne
 8003842:	89a3      	ldrhne	r3, [r4, #12]
 8003844:	6027      	str	r7, [r4, #0]
 8003846:	bf1c      	itt	ne
 8003848:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 800384c:	81a3      	strhne	r3, [r4, #12]
 800384e:	f1b8 0f01 	cmp.w	r8, #1
 8003852:	bf08      	it	eq
 8003854:	89a3      	ldrheq	r3, [r4, #12]
 8003856:	6165      	str	r5, [r4, #20]
 8003858:	bf04      	itt	eq
 800385a:	f043 0301 	orreq.w	r3, r3, #1
 800385e:	81a3      	strheq	r3, [r4, #12]
 8003860:	89a3      	ldrh	r3, [r4, #12]
 8003862:	f013 0208 	ands.w	r2, r3, #8
 8003866:	d01d      	beq.n	80038a4 <setvbuf+0x17c>
 8003868:	07da      	lsls	r2, r3, #31
 800386a:	bf41      	itttt	mi
 800386c:	2200      	movmi	r2, #0
 800386e:	426d      	negmi	r5, r5
 8003870:	60a2      	strmi	r2, [r4, #8]
 8003872:	61a5      	strmi	r5, [r4, #24]
 8003874:	bf58      	it	pl
 8003876:	60a5      	strpl	r5, [r4, #8]
 8003878:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800387a:	f015 0501 	ands.w	r5, r5, #1
 800387e:	d0c2      	beq.n	8003806 <setvbuf+0xde>
 8003880:	2500      	movs	r5, #0
 8003882:	e7c5      	b.n	8003810 <setvbuf+0xe8>
 8003884:	4648      	mov	r0, r9
 8003886:	f002 fc8d 	bl	80061a4 <malloc>
 800388a:	4607      	mov	r7, r0
 800388c:	2800      	cmp	r0, #0
 800388e:	d0a8      	beq.n	80037e2 <setvbuf+0xba>
 8003890:	89a3      	ldrh	r3, [r4, #12]
 8003892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003896:	81a3      	strh	r3, [r4, #12]
 8003898:	464d      	mov	r5, r9
 800389a:	e7c9      	b.n	8003830 <setvbuf+0x108>
 800389c:	2500      	movs	r5, #0
 800389e:	e7a2      	b.n	80037e6 <setvbuf+0xbe>
 80038a0:	46a9      	mov	r9, r5
 80038a2:	e7f5      	b.n	8003890 <setvbuf+0x168>
 80038a4:	60a2      	str	r2, [r4, #8]
 80038a6:	e7e7      	b.n	8003878 <setvbuf+0x150>
 80038a8:	f04f 35ff 	mov.w	r5, #4294967295
 80038ac:	e7b0      	b.n	8003810 <setvbuf+0xe8>
 80038ae:	bf00      	nop
 80038b0:	20000128 	.word	0x20000128
 80038b4:	08009284 	.word	0x08009284
 80038b8:	080092a4 	.word	0x080092a4
 80038bc:	08009264 	.word	0x08009264

080038c0 <_vfprintf_r>:
 80038c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c4:	b0bd      	sub	sp, #244	; 0xf4
 80038c6:	4688      	mov	r8, r1
 80038c8:	4615      	mov	r5, r2
 80038ca:	461c      	mov	r4, r3
 80038cc:	461f      	mov	r7, r3
 80038ce:	4683      	mov	fp, r0
 80038d0:	f002 fbea 	bl	80060a8 <_localeconv_r>
 80038d4:	6803      	ldr	r3, [r0, #0]
 80038d6:	930d      	str	r3, [sp, #52]	; 0x34
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fc fc81 	bl	80001e0 <strlen>
 80038de:	9009      	str	r0, [sp, #36]	; 0x24
 80038e0:	f1bb 0f00 	cmp.w	fp, #0
 80038e4:	d005      	beq.n	80038f2 <_vfprintf_r+0x32>
 80038e6:	f8db 3018 	ldr.w	r3, [fp, #24]
 80038ea:	b913      	cbnz	r3, 80038f2 <_vfprintf_r+0x32>
 80038ec:	4658      	mov	r0, fp
 80038ee:	f002 f8c1 	bl	8005a74 <__sinit>
 80038f2:	4b99      	ldr	r3, [pc, #612]	; (8003b58 <_vfprintf_r+0x298>)
 80038f4:	4598      	cmp	r8, r3
 80038f6:	d137      	bne.n	8003968 <_vfprintf_r+0xa8>
 80038f8:	f8db 8004 	ldr.w	r8, [fp, #4]
 80038fc:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8003900:	07d8      	lsls	r0, r3, #31
 8003902:	d407      	bmi.n	8003914 <_vfprintf_r+0x54>
 8003904:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003908:	0599      	lsls	r1, r3, #22
 800390a:	d403      	bmi.n	8003914 <_vfprintf_r+0x54>
 800390c:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8003910:	f002 fbda 	bl	80060c8 <__retarget_lock_acquire_recursive>
 8003914:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 8003918:	049a      	lsls	r2, r3, #18
 800391a:	d409      	bmi.n	8003930 <_vfprintf_r+0x70>
 800391c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003920:	f8a8 300c 	strh.w	r3, [r8, #12]
 8003924:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8003928:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800392c:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 8003930:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003934:	071e      	lsls	r6, r3, #28
 8003936:	d502      	bpl.n	800393e <_vfprintf_r+0x7e>
 8003938:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800393c:	bb03      	cbnz	r3, 8003980 <_vfprintf_r+0xc0>
 800393e:	4641      	mov	r1, r8
 8003940:	4658      	mov	r0, fp
 8003942:	f001 f897 	bl	8004a74 <__swsetup_r>
 8003946:	b1d8      	cbz	r0, 8003980 <_vfprintf_r+0xc0>
 8003948:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800394c:	07dd      	lsls	r5, r3, #31
 800394e:	d407      	bmi.n	8003960 <_vfprintf_r+0xa0>
 8003950:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003954:	059c      	lsls	r4, r3, #22
 8003956:	d403      	bmi.n	8003960 <_vfprintf_r+0xa0>
 8003958:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800395c:	f002 fbb5 	bl	80060ca <__retarget_lock_release_recursive>
 8003960:	f04f 33ff 	mov.w	r3, #4294967295
 8003964:	930a      	str	r3, [sp, #40]	; 0x28
 8003966:	e026      	b.n	80039b6 <_vfprintf_r+0xf6>
 8003968:	4b7c      	ldr	r3, [pc, #496]	; (8003b5c <_vfprintf_r+0x29c>)
 800396a:	4598      	cmp	r8, r3
 800396c:	d102      	bne.n	8003974 <_vfprintf_r+0xb4>
 800396e:	f8db 8008 	ldr.w	r8, [fp, #8]
 8003972:	e7c3      	b.n	80038fc <_vfprintf_r+0x3c>
 8003974:	4b7a      	ldr	r3, [pc, #488]	; (8003b60 <_vfprintf_r+0x2a0>)
 8003976:	4598      	cmp	r8, r3
 8003978:	bf08      	it	eq
 800397a:	f8db 800c 	ldreq.w	r8, [fp, #12]
 800397e:	e7bd      	b.n	80038fc <_vfprintf_r+0x3c>
 8003980:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003984:	f003 021a 	and.w	r2, r3, #26
 8003988:	2a0a      	cmp	r2, #10
 800398a:	d118      	bne.n	80039be <_vfprintf_r+0xfe>
 800398c:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 8003990:	2a00      	cmp	r2, #0
 8003992:	db14      	blt.n	80039be <_vfprintf_r+0xfe>
 8003994:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 8003998:	07d0      	lsls	r0, r2, #31
 800399a:	d405      	bmi.n	80039a8 <_vfprintf_r+0xe8>
 800399c:	0599      	lsls	r1, r3, #22
 800399e:	d403      	bmi.n	80039a8 <_vfprintf_r+0xe8>
 80039a0:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 80039a4:	f002 fb91 	bl	80060ca <__retarget_lock_release_recursive>
 80039a8:	4623      	mov	r3, r4
 80039aa:	462a      	mov	r2, r5
 80039ac:	4641      	mov	r1, r8
 80039ae:	4658      	mov	r0, fp
 80039b0:	f000 ffc2 	bl	8004938 <__sbprintf>
 80039b4:	900a      	str	r0, [sp, #40]	; 0x28
 80039b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80039b8:	b03d      	add	sp, #244	; 0xf4
 80039ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039be:	ed9f 7b64 	vldr	d7, [pc, #400]	; 8003b50 <_vfprintf_r+0x290>
 80039c2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80039c6:	2300      	movs	r3, #0
 80039c8:	ac2c      	add	r4, sp, #176	; 0xb0
 80039ca:	941f      	str	r4, [sp, #124]	; 0x7c
 80039cc:	9321      	str	r3, [sp, #132]	; 0x84
 80039ce:	9320      	str	r3, [sp, #128]	; 0x80
 80039d0:	9505      	str	r5, [sp, #20]
 80039d2:	9303      	str	r3, [sp, #12]
 80039d4:	9311      	str	r3, [sp, #68]	; 0x44
 80039d6:	9310      	str	r3, [sp, #64]	; 0x40
 80039d8:	930a      	str	r3, [sp, #40]	; 0x28
 80039da:	9d05      	ldr	r5, [sp, #20]
 80039dc:	462b      	mov	r3, r5
 80039de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039e2:	b112      	cbz	r2, 80039ea <_vfprintf_r+0x12a>
 80039e4:	2a25      	cmp	r2, #37	; 0x25
 80039e6:	f040 8083 	bne.w	8003af0 <_vfprintf_r+0x230>
 80039ea:	9b05      	ldr	r3, [sp, #20]
 80039ec:	1aee      	subs	r6, r5, r3
 80039ee:	d00d      	beq.n	8003a0c <_vfprintf_r+0x14c>
 80039f0:	e884 0048 	stmia.w	r4, {r3, r6}
 80039f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039f6:	4433      	add	r3, r6
 80039f8:	9321      	str	r3, [sp, #132]	; 0x84
 80039fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80039fc:	3301      	adds	r3, #1
 80039fe:	2b07      	cmp	r3, #7
 8003a00:	9320      	str	r3, [sp, #128]	; 0x80
 8003a02:	dc77      	bgt.n	8003af4 <_vfprintf_r+0x234>
 8003a04:	3408      	adds	r4, #8
 8003a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a08:	4433      	add	r3, r6
 8003a0a:	930a      	str	r3, [sp, #40]	; 0x28
 8003a0c:	782b      	ldrb	r3, [r5, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 8739 	beq.w	8004886 <_vfprintf_r+0xfc6>
 8003a14:	2300      	movs	r3, #0
 8003a16:	1c69      	adds	r1, r5, #1
 8003a18:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	f04f 3aff 	mov.w	sl, #4294967295
 8003a22:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a24:	461d      	mov	r5, r3
 8003a26:	200a      	movs	r0, #10
 8003a28:	1c4e      	adds	r6, r1, #1
 8003a2a:	7809      	ldrb	r1, [r1, #0]
 8003a2c:	9605      	str	r6, [sp, #20]
 8003a2e:	9102      	str	r1, [sp, #8]
 8003a30:	9902      	ldr	r1, [sp, #8]
 8003a32:	3920      	subs	r1, #32
 8003a34:	2958      	cmp	r1, #88	; 0x58
 8003a36:	f200 841d 	bhi.w	8004274 <_vfprintf_r+0x9b4>
 8003a3a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003a3e:	00b3      	.short	0x00b3
 8003a40:	041b041b 	.word	0x041b041b
 8003a44:	041b00b8 	.word	0x041b00b8
 8003a48:	041b041b 	.word	0x041b041b
 8003a4c:	041b041b 	.word	0x041b041b
 8003a50:	00bb041b 	.word	0x00bb041b
 8003a54:	041b0065 	.word	0x041b0065
 8003a58:	00c700c4 	.word	0x00c700c4
 8003a5c:	00e4041b 	.word	0x00e4041b
 8003a60:	00e700e7 	.word	0x00e700e7
 8003a64:	00e700e7 	.word	0x00e700e7
 8003a68:	00e700e7 	.word	0x00e700e7
 8003a6c:	00e700e7 	.word	0x00e700e7
 8003a70:	041b00e7 	.word	0x041b00e7
 8003a74:	041b041b 	.word	0x041b041b
 8003a78:	041b041b 	.word	0x041b041b
 8003a7c:	041b041b 	.word	0x041b041b
 8003a80:	041b041b 	.word	0x041b041b
 8003a84:	011b041b 	.word	0x011b041b
 8003a88:	041b0131 	.word	0x041b0131
 8003a8c:	041b0131 	.word	0x041b0131
 8003a90:	041b041b 	.word	0x041b041b
 8003a94:	00fa041b 	.word	0x00fa041b
 8003a98:	041b041b 	.word	0x041b041b
 8003a9c:	041b0346 	.word	0x041b0346
 8003aa0:	041b041b 	.word	0x041b041b
 8003aa4:	041b041b 	.word	0x041b041b
 8003aa8:	041b03ad 	.word	0x041b03ad
 8003aac:	0093041b 	.word	0x0093041b
 8003ab0:	041b041b 	.word	0x041b041b
 8003ab4:	041b041b 	.word	0x041b041b
 8003ab8:	041b041b 	.word	0x041b041b
 8003abc:	041b041b 	.word	0x041b041b
 8003ac0:	041b041b 	.word	0x041b041b
 8003ac4:	006b010d 	.word	0x006b010d
 8003ac8:	01310131 	.word	0x01310131
 8003acc:	00fd0131 	.word	0x00fd0131
 8003ad0:	041b006b 	.word	0x041b006b
 8003ad4:	0100041b 	.word	0x0100041b
 8003ad8:	0328041b 	.word	0x0328041b
 8003adc:	037c0348 	.word	0x037c0348
 8003ae0:	041b0107 	.word	0x041b0107
 8003ae4:	041b038d 	.word	0x041b038d
 8003ae8:	041b03af 	.word	0x041b03af
 8003aec:	03c7041b 	.word	0x03c7041b
 8003af0:	461d      	mov	r5, r3
 8003af2:	e773      	b.n	80039dc <_vfprintf_r+0x11c>
 8003af4:	aa1f      	add	r2, sp, #124	; 0x7c
 8003af6:	4641      	mov	r1, r8
 8003af8:	4658      	mov	r0, fp
 8003afa:	f003 fae6 	bl	80070ca <__sprint_r>
 8003afe:	2800      	cmp	r0, #0
 8003b00:	f040 8699 	bne.w	8004836 <_vfprintf_r+0xf76>
 8003b04:	ac2c      	add	r4, sp, #176	; 0xb0
 8003b06:	e77e      	b.n	8003a06 <_vfprintf_r+0x146>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	222b      	movs	r2, #43	; 0x2b
 8003b0c:	9905      	ldr	r1, [sp, #20]
 8003b0e:	e78b      	b.n	8003a28 <_vfprintf_r+0x168>
 8003b10:	460f      	mov	r7, r1
 8003b12:	e7fb      	b.n	8003b0c <_vfprintf_r+0x24c>
 8003b14:	b10b      	cbz	r3, 8003b1a <_vfprintf_r+0x25a>
 8003b16:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003b1a:	06aa      	lsls	r2, r5, #26
 8003b1c:	f140 80b0 	bpl.w	8003c80 <_vfprintf_r+0x3c0>
 8003b20:	3707      	adds	r7, #7
 8003b22:	f027 0707 	bic.w	r7, r7, #7
 8003b26:	f107 0308 	add.w	r3, r7, #8
 8003b2a:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003b2e:	9304      	str	r3, [sp, #16]
 8003b30:	2e00      	cmp	r6, #0
 8003b32:	f177 0300 	sbcs.w	r3, r7, #0
 8003b36:	da06      	bge.n	8003b46 <_vfprintf_r+0x286>
 8003b38:	4276      	negs	r6, r6
 8003b3a:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8003b3e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8003b42:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003b46:	2301      	movs	r3, #1
 8003b48:	e2d0      	b.n	80040ec <_vfprintf_r+0x82c>
 8003b4a:	bf00      	nop
 8003b4c:	f3af 8000 	nop.w
	...
 8003b58:	08009284 	.word	0x08009284
 8003b5c:	080092a4 	.word	0x080092a4
 8003b60:	08009264 	.word	0x08009264
 8003b64:	b10b      	cbz	r3, 8003b6a <_vfprintf_r+0x2aa>
 8003b66:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003b6a:	4ba2      	ldr	r3, [pc, #648]	; (8003df4 <_vfprintf_r+0x534>)
 8003b6c:	9311      	str	r3, [sp, #68]	; 0x44
 8003b6e:	06a9      	lsls	r1, r5, #26
 8003b70:	f140 8331 	bpl.w	80041d6 <_vfprintf_r+0x916>
 8003b74:	3707      	adds	r7, #7
 8003b76:	f027 0707 	bic.w	r7, r7, #7
 8003b7a:	f107 0308 	add.w	r3, r7, #8
 8003b7e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003b82:	9304      	str	r3, [sp, #16]
 8003b84:	07eb      	lsls	r3, r5, #31
 8003b86:	d50b      	bpl.n	8003ba0 <_vfprintf_r+0x2e0>
 8003b88:	ea56 0307 	orrs.w	r3, r6, r7
 8003b8c:	d008      	beq.n	8003ba0 <_vfprintf_r+0x2e0>
 8003b8e:	2330      	movs	r3, #48	; 0x30
 8003b90:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8003b94:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003b98:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8003b9c:	f045 0502 	orr.w	r5, r5, #2
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e2a0      	b.n	80040e6 <_vfprintf_r+0x826>
 8003ba4:	2a00      	cmp	r2, #0
 8003ba6:	d1b1      	bne.n	8003b0c <_vfprintf_r+0x24c>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	2220      	movs	r2, #32
 8003bac:	e7ae      	b.n	8003b0c <_vfprintf_r+0x24c>
 8003bae:	f045 0501 	orr.w	r5, r5, #1
 8003bb2:	e7ab      	b.n	8003b0c <_vfprintf_r+0x24c>
 8003bb4:	683e      	ldr	r6, [r7, #0]
 8003bb6:	960b      	str	r6, [sp, #44]	; 0x2c
 8003bb8:	2e00      	cmp	r6, #0
 8003bba:	f107 0104 	add.w	r1, r7, #4
 8003bbe:	daa7      	bge.n	8003b10 <_vfprintf_r+0x250>
 8003bc0:	4276      	negs	r6, r6
 8003bc2:	960b      	str	r6, [sp, #44]	; 0x2c
 8003bc4:	460f      	mov	r7, r1
 8003bc6:	f045 0504 	orr.w	r5, r5, #4
 8003bca:	e79f      	b.n	8003b0c <_vfprintf_r+0x24c>
 8003bcc:	9905      	ldr	r1, [sp, #20]
 8003bce:	1c4e      	adds	r6, r1, #1
 8003bd0:	7809      	ldrb	r1, [r1, #0]
 8003bd2:	9102      	str	r1, [sp, #8]
 8003bd4:	292a      	cmp	r1, #42	; 0x2a
 8003bd6:	d010      	beq.n	8003bfa <_vfprintf_r+0x33a>
 8003bd8:	f04f 0a00 	mov.w	sl, #0
 8003bdc:	9605      	str	r6, [sp, #20]
 8003bde:	9902      	ldr	r1, [sp, #8]
 8003be0:	3930      	subs	r1, #48	; 0x30
 8003be2:	2909      	cmp	r1, #9
 8003be4:	f63f af24 	bhi.w	8003a30 <_vfprintf_r+0x170>
 8003be8:	fb00 1a0a 	mla	sl, r0, sl, r1
 8003bec:	9905      	ldr	r1, [sp, #20]
 8003bee:	460e      	mov	r6, r1
 8003bf0:	f816 1b01 	ldrb.w	r1, [r6], #1
 8003bf4:	9102      	str	r1, [sp, #8]
 8003bf6:	9605      	str	r6, [sp, #20]
 8003bf8:	e7f1      	b.n	8003bde <_vfprintf_r+0x31e>
 8003bfa:	6839      	ldr	r1, [r7, #0]
 8003bfc:	9605      	str	r6, [sp, #20]
 8003bfe:	ea41 7ae1 	orr.w	sl, r1, r1, asr #31
 8003c02:	3704      	adds	r7, #4
 8003c04:	e782      	b.n	8003b0c <_vfprintf_r+0x24c>
 8003c06:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003c0a:	e77f      	b.n	8003b0c <_vfprintf_r+0x24c>
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	910b      	str	r1, [sp, #44]	; 0x2c
 8003c10:	9902      	ldr	r1, [sp, #8]
 8003c12:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003c14:	3930      	subs	r1, #48	; 0x30
 8003c16:	fb00 1106 	mla	r1, r0, r6, r1
 8003c1a:	910b      	str	r1, [sp, #44]	; 0x2c
 8003c1c:	9905      	ldr	r1, [sp, #20]
 8003c1e:	460e      	mov	r6, r1
 8003c20:	f816 1b01 	ldrb.w	r1, [r6], #1
 8003c24:	9102      	str	r1, [sp, #8]
 8003c26:	9902      	ldr	r1, [sp, #8]
 8003c28:	9605      	str	r6, [sp, #20]
 8003c2a:	3930      	subs	r1, #48	; 0x30
 8003c2c:	2909      	cmp	r1, #9
 8003c2e:	d9ef      	bls.n	8003c10 <_vfprintf_r+0x350>
 8003c30:	e6fe      	b.n	8003a30 <_vfprintf_r+0x170>
 8003c32:	f045 0508 	orr.w	r5, r5, #8
 8003c36:	e769      	b.n	8003b0c <_vfprintf_r+0x24c>
 8003c38:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8003c3c:	e766      	b.n	8003b0c <_vfprintf_r+0x24c>
 8003c3e:	9905      	ldr	r1, [sp, #20]
 8003c40:	7809      	ldrb	r1, [r1, #0]
 8003c42:	296c      	cmp	r1, #108	; 0x6c
 8003c44:	d105      	bne.n	8003c52 <_vfprintf_r+0x392>
 8003c46:	9905      	ldr	r1, [sp, #20]
 8003c48:	3101      	adds	r1, #1
 8003c4a:	9105      	str	r1, [sp, #20]
 8003c4c:	f045 0520 	orr.w	r5, r5, #32
 8003c50:	e75c      	b.n	8003b0c <_vfprintf_r+0x24c>
 8003c52:	f045 0510 	orr.w	r5, r5, #16
 8003c56:	e759      	b.n	8003b0c <_vfprintf_r+0x24c>
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	9304      	str	r3, [sp, #16]
 8003c5c:	2600      	movs	r6, #0
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8003c64:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003c68:	f04f 0a01 	mov.w	sl, #1
 8003c6c:	9608      	str	r6, [sp, #32]
 8003c6e:	f10d 0988 	add.w	r9, sp, #136	; 0x88
 8003c72:	e11e      	b.n	8003eb2 <_vfprintf_r+0x5f2>
 8003c74:	b10b      	cbz	r3, 8003c7a <_vfprintf_r+0x3ba>
 8003c76:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003c7a:	f045 0510 	orr.w	r5, r5, #16
 8003c7e:	e74c      	b.n	8003b1a <_vfprintf_r+0x25a>
 8003c80:	f015 0f10 	tst.w	r5, #16
 8003c84:	f107 0304 	add.w	r3, r7, #4
 8003c88:	d003      	beq.n	8003c92 <_vfprintf_r+0x3d2>
 8003c8a:	683e      	ldr	r6, [r7, #0]
 8003c8c:	9304      	str	r3, [sp, #16]
 8003c8e:	17f7      	asrs	r7, r6, #31
 8003c90:	e74e      	b.n	8003b30 <_vfprintf_r+0x270>
 8003c92:	683e      	ldr	r6, [r7, #0]
 8003c94:	9304      	str	r3, [sp, #16]
 8003c96:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003c9a:	bf18      	it	ne
 8003c9c:	b236      	sxthne	r6, r6
 8003c9e:	e7f6      	b.n	8003c8e <_vfprintf_r+0x3ce>
 8003ca0:	b10b      	cbz	r3, 8003ca6 <_vfprintf_r+0x3e6>
 8003ca2:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003ca6:	3707      	adds	r7, #7
 8003ca8:	f027 0707 	bic.w	r7, r7, #7
 8003cac:	f107 0308 	add.w	r3, r7, #8
 8003cb0:	9304      	str	r3, [sp, #16]
 8003cb2:	ed97 7b00 	vldr	d7, [r7]
 8003cb6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003cba:	9b06      	ldr	r3, [sp, #24]
 8003cbc:	9312      	str	r3, [sp, #72]	; 0x48
 8003cbe:	9b07      	ldr	r3, [sp, #28]
 8003cc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8003cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cca:	4b4b      	ldr	r3, [pc, #300]	; (8003df8 <_vfprintf_r+0x538>)
 8003ccc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003cd0:	f7fc ff30 	bl	8000b34 <__aeabi_dcmpun>
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	f040 85e3 	bne.w	80048a0 <_vfprintf_r+0xfe0>
 8003cda:	f04f 32ff 	mov.w	r2, #4294967295
 8003cde:	4b46      	ldr	r3, [pc, #280]	; (8003df8 <_vfprintf_r+0x538>)
 8003ce0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003ce4:	f7fc ff08 	bl	8000af8 <__aeabi_dcmple>
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	f040 85d9 	bne.w	80048a0 <_vfprintf_r+0xfe0>
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cf6:	f7fc fef5 	bl	8000ae4 <__aeabi_dcmplt>
 8003cfa:	b110      	cbz	r0, 8003d02 <_vfprintf_r+0x442>
 8003cfc:	232d      	movs	r3, #45	; 0x2d
 8003cfe:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003d02:	4b3e      	ldr	r3, [pc, #248]	; (8003dfc <_vfprintf_r+0x53c>)
 8003d04:	4a3e      	ldr	r2, [pc, #248]	; (8003e00 <_vfprintf_r+0x540>)
 8003d06:	9902      	ldr	r1, [sp, #8]
 8003d08:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8003d0c:	2947      	cmp	r1, #71	; 0x47
 8003d0e:	bfcc      	ite	gt
 8003d10:	4691      	movgt	r9, r2
 8003d12:	4699      	movle	r9, r3
 8003d14:	f04f 0a03 	mov.w	sl, #3
 8003d18:	2600      	movs	r6, #0
 8003d1a:	9608      	str	r6, [sp, #32]
 8003d1c:	e0c9      	b.n	8003eb2 <_vfprintf_r+0x5f2>
 8003d1e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003d22:	d022      	beq.n	8003d6a <_vfprintf_r+0x4aa>
 8003d24:	9b02      	ldr	r3, [sp, #8]
 8003d26:	f023 0320 	bic.w	r3, r3, #32
 8003d2a:	2b47      	cmp	r3, #71	; 0x47
 8003d2c:	d104      	bne.n	8003d38 <_vfprintf_r+0x478>
 8003d2e:	f1ba 0f00 	cmp.w	sl, #0
 8003d32:	bf08      	it	eq
 8003d34:	f04f 0a01 	moveq.w	sl, #1
 8003d38:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8003d3c:	9314      	str	r3, [sp, #80]	; 0x50
 8003d3e:	9b07      	ldr	r3, [sp, #28]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	da15      	bge.n	8003d70 <_vfprintf_r+0x4b0>
 8003d44:	9b06      	ldr	r3, [sp, #24]
 8003d46:	930e      	str	r3, [sp, #56]	; 0x38
 8003d48:	9b07      	ldr	r3, [sp, #28]
 8003d4a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003d4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003d50:	232d      	movs	r3, #45	; 0x2d
 8003d52:	930c      	str	r3, [sp, #48]	; 0x30
 8003d54:	9b02      	ldr	r3, [sp, #8]
 8003d56:	f023 0720 	bic.w	r7, r3, #32
 8003d5a:	2f46      	cmp	r7, #70	; 0x46
 8003d5c:	d00e      	beq.n	8003d7c <_vfprintf_r+0x4bc>
 8003d5e:	2f45      	cmp	r7, #69	; 0x45
 8003d60:	d146      	bne.n	8003df0 <_vfprintf_r+0x530>
 8003d62:	f10a 0601 	add.w	r6, sl, #1
 8003d66:	2102      	movs	r1, #2
 8003d68:	e00a      	b.n	8003d80 <_vfprintf_r+0x4c0>
 8003d6a:	f04f 0a06 	mov.w	sl, #6
 8003d6e:	e7e3      	b.n	8003d38 <_vfprintf_r+0x478>
 8003d70:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003d74:	2300      	movs	r3, #0
 8003d76:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003d7a:	e7ea      	b.n	8003d52 <_vfprintf_r+0x492>
 8003d7c:	4656      	mov	r6, sl
 8003d7e:	2103      	movs	r1, #3
 8003d80:	ab1d      	add	r3, sp, #116	; 0x74
 8003d82:	9301      	str	r3, [sp, #4]
 8003d84:	ab1a      	add	r3, sp, #104	; 0x68
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	4632      	mov	r2, r6
 8003d8a:	ab19      	add	r3, sp, #100	; 0x64
 8003d8c:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8003d90:	4658      	mov	r0, fp
 8003d92:	f000 ff69 	bl	8004c68 <_dtoa_r>
 8003d96:	2f47      	cmp	r7, #71	; 0x47
 8003d98:	4681      	mov	r9, r0
 8003d9a:	d102      	bne.n	8003da2 <_vfprintf_r+0x4e2>
 8003d9c:	07eb      	lsls	r3, r5, #31
 8003d9e:	f140 858c 	bpl.w	80048ba <_vfprintf_r+0xffa>
 8003da2:	eb09 0306 	add.w	r3, r9, r6
 8003da6:	2f46      	cmp	r7, #70	; 0x46
 8003da8:	9303      	str	r3, [sp, #12]
 8003daa:	d111      	bne.n	8003dd0 <_vfprintf_r+0x510>
 8003dac:	f899 3000 	ldrb.w	r3, [r9]
 8003db0:	2b30      	cmp	r3, #48	; 0x30
 8003db2:	d109      	bne.n	8003dc8 <_vfprintf_r+0x508>
 8003db4:	2200      	movs	r2, #0
 8003db6:	2300      	movs	r3, #0
 8003db8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003dbc:	f7fc fe88 	bl	8000ad0 <__aeabi_dcmpeq>
 8003dc0:	b910      	cbnz	r0, 8003dc8 <_vfprintf_r+0x508>
 8003dc2:	f1c6 0601 	rsb	r6, r6, #1
 8003dc6:	9619      	str	r6, [sp, #100]	; 0x64
 8003dc8:	9a03      	ldr	r2, [sp, #12]
 8003dca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003dcc:	441a      	add	r2, r3
 8003dce:	9203      	str	r2, [sp, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003dd8:	f7fc fe7a 	bl	8000ad0 <__aeabi_dcmpeq>
 8003ddc:	b990      	cbnz	r0, 8003e04 <_vfprintf_r+0x544>
 8003dde:	2230      	movs	r2, #48	; 0x30
 8003de0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003de2:	9903      	ldr	r1, [sp, #12]
 8003de4:	4299      	cmp	r1, r3
 8003de6:	d90f      	bls.n	8003e08 <_vfprintf_r+0x548>
 8003de8:	1c59      	adds	r1, r3, #1
 8003dea:	911d      	str	r1, [sp, #116]	; 0x74
 8003dec:	701a      	strb	r2, [r3, #0]
 8003dee:	e7f7      	b.n	8003de0 <_vfprintf_r+0x520>
 8003df0:	4656      	mov	r6, sl
 8003df2:	e7b8      	b.n	8003d66 <_vfprintf_r+0x4a6>
 8003df4:	08009212 	.word	0x08009212
 8003df8:	7fefffff 	.word	0x7fefffff
 8003dfc:	08009202 	.word	0x08009202
 8003e00:	08009206 	.word	0x08009206
 8003e04:	9b03      	ldr	r3, [sp, #12]
 8003e06:	931d      	str	r3, [sp, #116]	; 0x74
 8003e08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003e0a:	2f47      	cmp	r7, #71	; 0x47
 8003e0c:	eba3 0309 	sub.w	r3, r3, r9
 8003e10:	9303      	str	r3, [sp, #12]
 8003e12:	f040 80f8 	bne.w	8004006 <_vfprintf_r+0x746>
 8003e16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003e18:	1cdf      	adds	r7, r3, #3
 8003e1a:	db02      	blt.n	8003e22 <_vfprintf_r+0x562>
 8003e1c:	459a      	cmp	sl, r3
 8003e1e:	f280 811f 	bge.w	8004060 <_vfprintf_r+0x7a0>
 8003e22:	9b02      	ldr	r3, [sp, #8]
 8003e24:	3b02      	subs	r3, #2
 8003e26:	9302      	str	r3, [sp, #8]
 8003e28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003e2a:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8003e2e:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8003e32:	1e53      	subs	r3, r2, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	9319      	str	r3, [sp, #100]	; 0x64
 8003e38:	bfb6      	itet	lt
 8003e3a:	f1c2 0301 	rsblt	r3, r2, #1
 8003e3e:	222b      	movge	r2, #43	; 0x2b
 8003e40:	222d      	movlt	r2, #45	; 0x2d
 8003e42:	2b09      	cmp	r3, #9
 8003e44:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8003e48:	f340 80fa 	ble.w	8004040 <_vfprintf_r+0x780>
 8003e4c:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8003e50:	260a      	movs	r6, #10
 8003e52:	fb93 f0f6 	sdiv	r0, r3, r6
 8003e56:	fb06 3310 	mls	r3, r6, r0, r3
 8003e5a:	3330      	adds	r3, #48	; 0x30
 8003e5c:	2809      	cmp	r0, #9
 8003e5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003e62:	f102 31ff 	add.w	r1, r2, #4294967295
 8003e66:	4603      	mov	r3, r0
 8003e68:	f300 80e3 	bgt.w	8004032 <_vfprintf_r+0x772>
 8003e6c:	3330      	adds	r3, #48	; 0x30
 8003e6e:	f801 3c01 	strb.w	r3, [r1, #-1]
 8003e72:	3a02      	subs	r2, #2
 8003e74:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8003e78:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8003e7c:	4282      	cmp	r2, r0
 8003e7e:	4619      	mov	r1, r3
 8003e80:	f0c0 80d9 	bcc.w	8004036 <_vfprintf_r+0x776>
 8003e84:	9a03      	ldr	r2, [sp, #12]
 8003e86:	ab1b      	add	r3, sp, #108	; 0x6c
 8003e88:	1acb      	subs	r3, r1, r3
 8003e8a:	2a01      	cmp	r2, #1
 8003e8c:	9310      	str	r3, [sp, #64]	; 0x40
 8003e8e:	eb03 0a02 	add.w	sl, r3, r2
 8003e92:	dc03      	bgt.n	8003e9c <_vfprintf_r+0x5dc>
 8003e94:	f015 0301 	ands.w	r3, r5, #1
 8003e98:	9308      	str	r3, [sp, #32]
 8003e9a:	d003      	beq.n	8003ea4 <_vfprintf_r+0x5e4>
 8003e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e9e:	449a      	add	sl, r3
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	9308      	str	r3, [sp, #32]
 8003ea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ea6:	b113      	cbz	r3, 8003eae <_vfprintf_r+0x5ee>
 8003ea8:	232d      	movs	r3, #45	; 0x2d
 8003eaa:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003eae:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003eb0:	2600      	movs	r6, #0
 8003eb2:	4556      	cmp	r6, sl
 8003eb4:	4633      	mov	r3, r6
 8003eb6:	bfb8      	it	lt
 8003eb8:	4653      	movlt	r3, sl
 8003eba:	930c      	str	r3, [sp, #48]	; 0x30
 8003ebc:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8003ec0:	b113      	cbz	r3, 8003ec8 <_vfprintf_r+0x608>
 8003ec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	930c      	str	r3, [sp, #48]	; 0x30
 8003ec8:	f015 0302 	ands.w	r3, r5, #2
 8003ecc:	9314      	str	r3, [sp, #80]	; 0x50
 8003ece:	bf1e      	ittt	ne
 8003ed0:	9b0c      	ldrne	r3, [sp, #48]	; 0x30
 8003ed2:	3302      	addne	r3, #2
 8003ed4:	930c      	strne	r3, [sp, #48]	; 0x30
 8003ed6:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8003eda:	9315      	str	r3, [sp, #84]	; 0x54
 8003edc:	d114      	bne.n	8003f08 <_vfprintf_r+0x648>
 8003ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ee0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ee2:	1a9f      	subs	r7, r3, r2
 8003ee4:	2f00      	cmp	r7, #0
 8003ee6:	dd0f      	ble.n	8003f08 <_vfprintf_r+0x648>
 8003ee8:	4ba8      	ldr	r3, [pc, #672]	; (800418c <_vfprintf_r+0x8cc>)
 8003eea:	6023      	str	r3, [r4, #0]
 8003eec:	2f10      	cmp	r7, #16
 8003eee:	f300 81d3 	bgt.w	8004298 <_vfprintf_r+0x9d8>
 8003ef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ef4:	6067      	str	r7, [r4, #4]
 8003ef6:	441f      	add	r7, r3
 8003ef8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003efa:	9721      	str	r7, [sp, #132]	; 0x84
 8003efc:	3301      	adds	r3, #1
 8003efe:	2b07      	cmp	r3, #7
 8003f00:	9320      	str	r3, [sp, #128]	; 0x80
 8003f02:	f300 81e0 	bgt.w	80042c6 <_vfprintf_r+0xa06>
 8003f06:	3408      	adds	r4, #8
 8003f08:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8003f0c:	b173      	cbz	r3, 8003f2c <_vfprintf_r+0x66c>
 8003f0e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8003f12:	6023      	str	r3, [r4, #0]
 8003f14:	2301      	movs	r3, #1
 8003f16:	6063      	str	r3, [r4, #4]
 8003f18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	9321      	str	r3, [sp, #132]	; 0x84
 8003f1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f20:	3301      	adds	r3, #1
 8003f22:	2b07      	cmp	r3, #7
 8003f24:	9320      	str	r3, [sp, #128]	; 0x80
 8003f26:	f300 81d8 	bgt.w	80042da <_vfprintf_r+0xa1a>
 8003f2a:	3408      	adds	r4, #8
 8003f2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003f2e:	b16b      	cbz	r3, 8003f4c <_vfprintf_r+0x68c>
 8003f30:	ab18      	add	r3, sp, #96	; 0x60
 8003f32:	6023      	str	r3, [r4, #0]
 8003f34:	2302      	movs	r3, #2
 8003f36:	6063      	str	r3, [r4, #4]
 8003f38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f3a:	3302      	adds	r3, #2
 8003f3c:	9321      	str	r3, [sp, #132]	; 0x84
 8003f3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f40:	3301      	adds	r3, #1
 8003f42:	2b07      	cmp	r3, #7
 8003f44:	9320      	str	r3, [sp, #128]	; 0x80
 8003f46:	f300 81d2 	bgt.w	80042ee <_vfprintf_r+0xa2e>
 8003f4a:	3408      	adds	r4, #8
 8003f4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003f4e:	2b80      	cmp	r3, #128	; 0x80
 8003f50:	d114      	bne.n	8003f7c <_vfprintf_r+0x6bc>
 8003f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f56:	1a9f      	subs	r7, r3, r2
 8003f58:	2f00      	cmp	r7, #0
 8003f5a:	dd0f      	ble.n	8003f7c <_vfprintf_r+0x6bc>
 8003f5c:	4b8c      	ldr	r3, [pc, #560]	; (8004190 <_vfprintf_r+0x8d0>)
 8003f5e:	6023      	str	r3, [r4, #0]
 8003f60:	2f10      	cmp	r7, #16
 8003f62:	f300 81ce 	bgt.w	8004302 <_vfprintf_r+0xa42>
 8003f66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f68:	6067      	str	r7, [r4, #4]
 8003f6a:	441f      	add	r7, r3
 8003f6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f6e:	9721      	str	r7, [sp, #132]	; 0x84
 8003f70:	3301      	adds	r3, #1
 8003f72:	2b07      	cmp	r3, #7
 8003f74:	9320      	str	r3, [sp, #128]	; 0x80
 8003f76:	f300 81dd 	bgt.w	8004334 <_vfprintf_r+0xa74>
 8003f7a:	3408      	adds	r4, #8
 8003f7c:	eba6 060a 	sub.w	r6, r6, sl
 8003f80:	2e00      	cmp	r6, #0
 8003f82:	dd0f      	ble.n	8003fa4 <_vfprintf_r+0x6e4>
 8003f84:	4f82      	ldr	r7, [pc, #520]	; (8004190 <_vfprintf_r+0x8d0>)
 8003f86:	6027      	str	r7, [r4, #0]
 8003f88:	2e10      	cmp	r6, #16
 8003f8a:	f300 81dd 	bgt.w	8004348 <_vfprintf_r+0xa88>
 8003f8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f90:	9821      	ldr	r0, [sp, #132]	; 0x84
 8003f92:	6066      	str	r6, [r4, #4]
 8003f94:	3301      	adds	r3, #1
 8003f96:	4406      	add	r6, r0
 8003f98:	2b07      	cmp	r3, #7
 8003f9a:	9621      	str	r6, [sp, #132]	; 0x84
 8003f9c:	9320      	str	r3, [sp, #128]	; 0x80
 8003f9e:	f300 81ea 	bgt.w	8004376 <_vfprintf_r+0xab6>
 8003fa2:	3408      	adds	r4, #8
 8003fa4:	05e9      	lsls	r1, r5, #23
 8003fa6:	f100 81f0 	bmi.w	800438a <_vfprintf_r+0xaca>
 8003faa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003fac:	e884 0600 	stmia.w	r4, {r9, sl}
 8003fb0:	4453      	add	r3, sl
 8003fb2:	9321      	str	r3, [sp, #132]	; 0x84
 8003fb4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	2b07      	cmp	r3, #7
 8003fba:	9320      	str	r3, [sp, #128]	; 0x80
 8003fbc:	f340 841b 	ble.w	80047f6 <_vfprintf_r+0xf36>
 8003fc0:	aa1f      	add	r2, sp, #124	; 0x7c
 8003fc2:	4641      	mov	r1, r8
 8003fc4:	4658      	mov	r0, fp
 8003fc6:	f003 f880 	bl	80070ca <__sprint_r>
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	f040 8433 	bne.w	8004836 <_vfprintf_r+0xf76>
 8003fd0:	ac2c      	add	r4, sp, #176	; 0xb0
 8003fd2:	0768      	lsls	r0, r5, #29
 8003fd4:	f100 8412 	bmi.w	80047fc <_vfprintf_r+0xf3c>
 8003fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003fdc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fde:	428a      	cmp	r2, r1
 8003fe0:	bfac      	ite	ge
 8003fe2:	189b      	addge	r3, r3, r2
 8003fe4:	185b      	addlt	r3, r3, r1
 8003fe6:	930a      	str	r3, [sp, #40]	; 0x28
 8003fe8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003fea:	b13b      	cbz	r3, 8003ffc <_vfprintf_r+0x73c>
 8003fec:	aa1f      	add	r2, sp, #124	; 0x7c
 8003fee:	4641      	mov	r1, r8
 8003ff0:	4658      	mov	r0, fp
 8003ff2:	f003 f86a 	bl	80070ca <__sprint_r>
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	f040 841d 	bne.w	8004836 <_vfprintf_r+0xf76>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	9320      	str	r3, [sp, #128]	; 0x80
 8004000:	9f04      	ldr	r7, [sp, #16]
 8004002:	ac2c      	add	r4, sp, #176	; 0xb0
 8004004:	e4e9      	b.n	80039da <_vfprintf_r+0x11a>
 8004006:	9b02      	ldr	r3, [sp, #8]
 8004008:	2b65      	cmp	r3, #101	; 0x65
 800400a:	f77f af0d 	ble.w	8003e28 <_vfprintf_r+0x568>
 800400e:	9b02      	ldr	r3, [sp, #8]
 8004010:	2b66      	cmp	r3, #102	; 0x66
 8004012:	d125      	bne.n	8004060 <_vfprintf_r+0x7a0>
 8004014:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004016:	2b00      	cmp	r3, #0
 8004018:	dd1a      	ble.n	8004050 <_vfprintf_r+0x790>
 800401a:	f1ba 0f00 	cmp.w	sl, #0
 800401e:	d101      	bne.n	8004024 <_vfprintf_r+0x764>
 8004020:	07ee      	lsls	r6, r5, #31
 8004022:	d502      	bpl.n	800402a <_vfprintf_r+0x76a>
 8004024:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004026:	4413      	add	r3, r2
 8004028:	4453      	add	r3, sl
 800402a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800402c:	9208      	str	r2, [sp, #32]
 800402e:	469a      	mov	sl, r3
 8004030:	e738      	b.n	8003ea4 <_vfprintf_r+0x5e4>
 8004032:	460a      	mov	r2, r1
 8004034:	e70d      	b.n	8003e52 <_vfprintf_r+0x592>
 8004036:	f812 1b01 	ldrb.w	r1, [r2], #1
 800403a:	f803 1b01 	strb.w	r1, [r3], #1
 800403e:	e71d      	b.n	8003e7c <_vfprintf_r+0x5bc>
 8004040:	2230      	movs	r2, #48	; 0x30
 8004042:	4413      	add	r3, r2
 8004044:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8004048:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800404c:	a91c      	add	r1, sp, #112	; 0x70
 800404e:	e719      	b.n	8003e84 <_vfprintf_r+0x5c4>
 8004050:	f1ba 0f00 	cmp.w	sl, #0
 8004054:	d101      	bne.n	800405a <_vfprintf_r+0x79a>
 8004056:	07ed      	lsls	r5, r5, #31
 8004058:	d515      	bpl.n	8004086 <_vfprintf_r+0x7c6>
 800405a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800405c:	3301      	adds	r3, #1
 800405e:	e7e3      	b.n	8004028 <_vfprintf_r+0x768>
 8004060:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004062:	9b03      	ldr	r3, [sp, #12]
 8004064:	429a      	cmp	r2, r3
 8004066:	db06      	blt.n	8004076 <_vfprintf_r+0x7b6>
 8004068:	07e8      	lsls	r0, r5, #31
 800406a:	d50e      	bpl.n	800408a <_vfprintf_r+0x7ca>
 800406c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800406e:	4413      	add	r3, r2
 8004070:	2267      	movs	r2, #103	; 0x67
 8004072:	9202      	str	r2, [sp, #8]
 8004074:	e7d9      	b.n	800402a <_vfprintf_r+0x76a>
 8004076:	9b03      	ldr	r3, [sp, #12]
 8004078:	9909      	ldr	r1, [sp, #36]	; 0x24
 800407a:	2a00      	cmp	r2, #0
 800407c:	440b      	add	r3, r1
 800407e:	dcf7      	bgt.n	8004070 <_vfprintf_r+0x7b0>
 8004080:	f1c2 0201 	rsb	r2, r2, #1
 8004084:	e7f3      	b.n	800406e <_vfprintf_r+0x7ae>
 8004086:	2301      	movs	r3, #1
 8004088:	e7cf      	b.n	800402a <_vfprintf_r+0x76a>
 800408a:	4613      	mov	r3, r2
 800408c:	e7f0      	b.n	8004070 <_vfprintf_r+0x7b0>
 800408e:	b10b      	cbz	r3, 8004094 <_vfprintf_r+0x7d4>
 8004090:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004094:	f015 0f20 	tst.w	r5, #32
 8004098:	f107 0304 	add.w	r3, r7, #4
 800409c:	d008      	beq.n	80040b0 <_vfprintf_r+0x7f0>
 800409e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	17ce      	asrs	r6, r1, #31
 80040a4:	4608      	mov	r0, r1
 80040a6:	4631      	mov	r1, r6
 80040a8:	e9c2 0100 	strd	r0, r1, [r2]
 80040ac:	461f      	mov	r7, r3
 80040ae:	e494      	b.n	80039da <_vfprintf_r+0x11a>
 80040b0:	06e9      	lsls	r1, r5, #27
 80040b2:	d503      	bpl.n	80040bc <_vfprintf_r+0x7fc>
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80040b8:	6011      	str	r1, [r2, #0]
 80040ba:	e7f7      	b.n	80040ac <_vfprintf_r+0x7ec>
 80040bc:	066a      	lsls	r2, r5, #25
 80040be:	d5f9      	bpl.n	80040b4 <_vfprintf_r+0x7f4>
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80040c6:	8011      	strh	r1, [r2, #0]
 80040c8:	e7f0      	b.n	80040ac <_vfprintf_r+0x7ec>
 80040ca:	f045 0510 	orr.w	r5, r5, #16
 80040ce:	f015 0320 	ands.w	r3, r5, #32
 80040d2:	d022      	beq.n	800411a <_vfprintf_r+0x85a>
 80040d4:	3707      	adds	r7, #7
 80040d6:	f027 0707 	bic.w	r7, r7, #7
 80040da:	f107 0308 	add.w	r3, r7, #8
 80040de:	e9d7 6700 	ldrd	r6, r7, [r7]
 80040e2:	9304      	str	r3, [sp, #16]
 80040e4:	2300      	movs	r3, #0
 80040e6:	2200      	movs	r2, #0
 80040e8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80040ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 80040f0:	f000 83e8 	beq.w	80048c4 <_vfprintf_r+0x1004>
 80040f4:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80040f8:	9208      	str	r2, [sp, #32]
 80040fa:	ea56 0207 	orrs.w	r2, r6, r7
 80040fe:	f040 83e6 	bne.w	80048ce <_vfprintf_r+0x100e>
 8004102:	f1ba 0f00 	cmp.w	sl, #0
 8004106:	f000 80a9 	beq.w	800425c <_vfprintf_r+0x99c>
 800410a:	2b01      	cmp	r3, #1
 800410c:	d075      	beq.n	80041fa <_vfprintf_r+0x93a>
 800410e:	2b02      	cmp	r3, #2
 8004110:	f000 8090 	beq.w	8004234 <_vfprintf_r+0x974>
 8004114:	2600      	movs	r6, #0
 8004116:	2700      	movs	r7, #0
 8004118:	e3df      	b.n	80048da <_vfprintf_r+0x101a>
 800411a:	1d3a      	adds	r2, r7, #4
 800411c:	f015 0110 	ands.w	r1, r5, #16
 8004120:	9204      	str	r2, [sp, #16]
 8004122:	d002      	beq.n	800412a <_vfprintf_r+0x86a>
 8004124:	683e      	ldr	r6, [r7, #0]
 8004126:	2700      	movs	r7, #0
 8004128:	e7dd      	b.n	80040e6 <_vfprintf_r+0x826>
 800412a:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800412e:	d0f9      	beq.n	8004124 <_vfprintf_r+0x864>
 8004130:	883e      	ldrh	r6, [r7, #0]
 8004132:	2700      	movs	r7, #0
 8004134:	e7d6      	b.n	80040e4 <_vfprintf_r+0x824>
 8004136:	1d3b      	adds	r3, r7, #4
 8004138:	9304      	str	r3, [sp, #16]
 800413a:	2330      	movs	r3, #48	; 0x30
 800413c:	2278      	movs	r2, #120	; 0x78
 800413e:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8004142:	4b14      	ldr	r3, [pc, #80]	; (8004194 <_vfprintf_r+0x8d4>)
 8004144:	683e      	ldr	r6, [r7, #0]
 8004146:	9311      	str	r3, [sp, #68]	; 0x44
 8004148:	2700      	movs	r7, #0
 800414a:	f045 0502 	orr.w	r5, r5, #2
 800414e:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8004152:	2302      	movs	r3, #2
 8004154:	9202      	str	r2, [sp, #8]
 8004156:	e7c6      	b.n	80040e6 <_vfprintf_r+0x826>
 8004158:	1d3b      	adds	r3, r7, #4
 800415a:	2600      	movs	r6, #0
 800415c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004160:	9304      	str	r3, [sp, #16]
 8004162:	f8d7 9000 	ldr.w	r9, [r7]
 8004166:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800416a:	d00a      	beq.n	8004182 <_vfprintf_r+0x8c2>
 800416c:	4652      	mov	r2, sl
 800416e:	4631      	mov	r1, r6
 8004170:	4648      	mov	r0, r9
 8004172:	f7fc f83d 	bl	80001f0 <memchr>
 8004176:	2800      	cmp	r0, #0
 8004178:	f000 808c 	beq.w	8004294 <_vfprintf_r+0x9d4>
 800417c:	eba0 0a09 	sub.w	sl, r0, r9
 8004180:	e5cb      	b.n	8003d1a <_vfprintf_r+0x45a>
 8004182:	4648      	mov	r0, r9
 8004184:	f7fc f82c 	bl	80001e0 <strlen>
 8004188:	4682      	mov	sl, r0
 800418a:	e5c6      	b.n	8003d1a <_vfprintf_r+0x45a>
 800418c:	08009236 	.word	0x08009236
 8004190:	08009246 	.word	0x08009246
 8004194:	08009223 	.word	0x08009223
 8004198:	f045 0510 	orr.w	r5, r5, #16
 800419c:	06ae      	lsls	r6, r5, #26
 800419e:	d509      	bpl.n	80041b4 <_vfprintf_r+0x8f4>
 80041a0:	3707      	adds	r7, #7
 80041a2:	f027 0707 	bic.w	r7, r7, #7
 80041a6:	f107 0308 	add.w	r3, r7, #8
 80041aa:	e9d7 6700 	ldrd	r6, r7, [r7]
 80041ae:	9304      	str	r3, [sp, #16]
 80041b0:	2301      	movs	r3, #1
 80041b2:	e798      	b.n	80040e6 <_vfprintf_r+0x826>
 80041b4:	1d3b      	adds	r3, r7, #4
 80041b6:	f015 0f10 	tst.w	r5, #16
 80041ba:	9304      	str	r3, [sp, #16]
 80041bc:	d001      	beq.n	80041c2 <_vfprintf_r+0x902>
 80041be:	683e      	ldr	r6, [r7, #0]
 80041c0:	e002      	b.n	80041c8 <_vfprintf_r+0x908>
 80041c2:	0668      	lsls	r0, r5, #25
 80041c4:	d5fb      	bpl.n	80041be <_vfprintf_r+0x8fe>
 80041c6:	883e      	ldrh	r6, [r7, #0]
 80041c8:	2700      	movs	r7, #0
 80041ca:	e7f1      	b.n	80041b0 <_vfprintf_r+0x8f0>
 80041cc:	b10b      	cbz	r3, 80041d2 <_vfprintf_r+0x912>
 80041ce:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80041d2:	4ba2      	ldr	r3, [pc, #648]	; (800445c <_vfprintf_r+0xb9c>)
 80041d4:	e4ca      	b.n	8003b6c <_vfprintf_r+0x2ac>
 80041d6:	1d3b      	adds	r3, r7, #4
 80041d8:	f015 0f10 	tst.w	r5, #16
 80041dc:	9304      	str	r3, [sp, #16]
 80041de:	d001      	beq.n	80041e4 <_vfprintf_r+0x924>
 80041e0:	683e      	ldr	r6, [r7, #0]
 80041e2:	e002      	b.n	80041ea <_vfprintf_r+0x92a>
 80041e4:	066a      	lsls	r2, r5, #25
 80041e6:	d5fb      	bpl.n	80041e0 <_vfprintf_r+0x920>
 80041e8:	883e      	ldrh	r6, [r7, #0]
 80041ea:	2700      	movs	r7, #0
 80041ec:	e4ca      	b.n	8003b84 <_vfprintf_r+0x2c4>
 80041ee:	464b      	mov	r3, r9
 80041f0:	e374      	b.n	80048dc <_vfprintf_r+0x101c>
 80041f2:	2f00      	cmp	r7, #0
 80041f4:	bf08      	it	eq
 80041f6:	2e0a      	cmpeq	r6, #10
 80041f8:	d205      	bcs.n	8004206 <_vfprintf_r+0x946>
 80041fa:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 80041fe:	3630      	adds	r6, #48	; 0x30
 8004200:	f809 6d41 	strb.w	r6, [r9, #-65]!
 8004204:	e385      	b.n	8004912 <_vfprintf_r+0x1052>
 8004206:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800420a:	4630      	mov	r0, r6
 800420c:	4639      	mov	r1, r7
 800420e:	220a      	movs	r2, #10
 8004210:	2300      	movs	r3, #0
 8004212:	f7fc fd1d 	bl	8000c50 <__aeabi_uldivmod>
 8004216:	3230      	adds	r2, #48	; 0x30
 8004218:	f809 2d01 	strb.w	r2, [r9, #-1]!
 800421c:	2300      	movs	r3, #0
 800421e:	4630      	mov	r0, r6
 8004220:	4639      	mov	r1, r7
 8004222:	220a      	movs	r2, #10
 8004224:	f7fc fd14 	bl	8000c50 <__aeabi_uldivmod>
 8004228:	4606      	mov	r6, r0
 800422a:	460f      	mov	r7, r1
 800422c:	ea56 0307 	orrs.w	r3, r6, r7
 8004230:	d1eb      	bne.n	800420a <_vfprintf_r+0x94a>
 8004232:	e36e      	b.n	8004912 <_vfprintf_r+0x1052>
 8004234:	2600      	movs	r6, #0
 8004236:	2700      	movs	r7, #0
 8004238:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800423c:	f006 030f 	and.w	r3, r6, #15
 8004240:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004242:	5cd3      	ldrb	r3, [r2, r3]
 8004244:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8004248:	0933      	lsrs	r3, r6, #4
 800424a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800424e:	093a      	lsrs	r2, r7, #4
 8004250:	461e      	mov	r6, r3
 8004252:	4617      	mov	r7, r2
 8004254:	ea56 0307 	orrs.w	r3, r6, r7
 8004258:	d1f0      	bne.n	800423c <_vfprintf_r+0x97c>
 800425a:	e35a      	b.n	8004912 <_vfprintf_r+0x1052>
 800425c:	b93b      	cbnz	r3, 800426e <_vfprintf_r+0x9ae>
 800425e:	07e8      	lsls	r0, r5, #31
 8004260:	d505      	bpl.n	800426e <_vfprintf_r+0x9ae>
 8004262:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 8004266:	2330      	movs	r3, #48	; 0x30
 8004268:	f809 3d41 	strb.w	r3, [r9, #-65]!
 800426c:	e351      	b.n	8004912 <_vfprintf_r+0x1052>
 800426e:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8004272:	e34e      	b.n	8004912 <_vfprintf_r+0x1052>
 8004274:	b10b      	cbz	r3, 800427a <_vfprintf_r+0x9ba>
 8004276:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800427a:	9b02      	ldr	r3, [sp, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 8302 	beq.w	8004886 <_vfprintf_r+0xfc6>
 8004282:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004286:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800428a:	2600      	movs	r6, #0
 800428c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004290:	9704      	str	r7, [sp, #16]
 8004292:	e4e9      	b.n	8003c68 <_vfprintf_r+0x3a8>
 8004294:	4606      	mov	r6, r0
 8004296:	e540      	b.n	8003d1a <_vfprintf_r+0x45a>
 8004298:	2310      	movs	r3, #16
 800429a:	6063      	str	r3, [r4, #4]
 800429c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800429e:	3310      	adds	r3, #16
 80042a0:	9321      	str	r3, [sp, #132]	; 0x84
 80042a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80042a4:	3301      	adds	r3, #1
 80042a6:	2b07      	cmp	r3, #7
 80042a8:	9320      	str	r3, [sp, #128]	; 0x80
 80042aa:	dc02      	bgt.n	80042b2 <_vfprintf_r+0x9f2>
 80042ac:	3408      	adds	r4, #8
 80042ae:	3f10      	subs	r7, #16
 80042b0:	e61a      	b.n	8003ee8 <_vfprintf_r+0x628>
 80042b2:	aa1f      	add	r2, sp, #124	; 0x7c
 80042b4:	4641      	mov	r1, r8
 80042b6:	4658      	mov	r0, fp
 80042b8:	f002 ff07 	bl	80070ca <__sprint_r>
 80042bc:	2800      	cmp	r0, #0
 80042be:	f040 82ba 	bne.w	8004836 <_vfprintf_r+0xf76>
 80042c2:	ac2c      	add	r4, sp, #176	; 0xb0
 80042c4:	e7f3      	b.n	80042ae <_vfprintf_r+0x9ee>
 80042c6:	aa1f      	add	r2, sp, #124	; 0x7c
 80042c8:	4641      	mov	r1, r8
 80042ca:	4658      	mov	r0, fp
 80042cc:	f002 fefd 	bl	80070ca <__sprint_r>
 80042d0:	2800      	cmp	r0, #0
 80042d2:	f040 82b0 	bne.w	8004836 <_vfprintf_r+0xf76>
 80042d6:	ac2c      	add	r4, sp, #176	; 0xb0
 80042d8:	e616      	b.n	8003f08 <_vfprintf_r+0x648>
 80042da:	aa1f      	add	r2, sp, #124	; 0x7c
 80042dc:	4641      	mov	r1, r8
 80042de:	4658      	mov	r0, fp
 80042e0:	f002 fef3 	bl	80070ca <__sprint_r>
 80042e4:	2800      	cmp	r0, #0
 80042e6:	f040 82a6 	bne.w	8004836 <_vfprintf_r+0xf76>
 80042ea:	ac2c      	add	r4, sp, #176	; 0xb0
 80042ec:	e61e      	b.n	8003f2c <_vfprintf_r+0x66c>
 80042ee:	aa1f      	add	r2, sp, #124	; 0x7c
 80042f0:	4641      	mov	r1, r8
 80042f2:	4658      	mov	r0, fp
 80042f4:	f002 fee9 	bl	80070ca <__sprint_r>
 80042f8:	2800      	cmp	r0, #0
 80042fa:	f040 829c 	bne.w	8004836 <_vfprintf_r+0xf76>
 80042fe:	ac2c      	add	r4, sp, #176	; 0xb0
 8004300:	e624      	b.n	8003f4c <_vfprintf_r+0x68c>
 8004302:	2210      	movs	r2, #16
 8004304:	6062      	str	r2, [r4, #4]
 8004306:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004308:	3210      	adds	r2, #16
 800430a:	9221      	str	r2, [sp, #132]	; 0x84
 800430c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800430e:	3201      	adds	r2, #1
 8004310:	2a07      	cmp	r2, #7
 8004312:	9220      	str	r2, [sp, #128]	; 0x80
 8004314:	dc02      	bgt.n	800431c <_vfprintf_r+0xa5c>
 8004316:	3408      	adds	r4, #8
 8004318:	3f10      	subs	r7, #16
 800431a:	e620      	b.n	8003f5e <_vfprintf_r+0x69e>
 800431c:	aa1f      	add	r2, sp, #124	; 0x7c
 800431e:	4641      	mov	r1, r8
 8004320:	4658      	mov	r0, fp
 8004322:	9314      	str	r3, [sp, #80]	; 0x50
 8004324:	f002 fed1 	bl	80070ca <__sprint_r>
 8004328:	2800      	cmp	r0, #0
 800432a:	f040 8284 	bne.w	8004836 <_vfprintf_r+0xf76>
 800432e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004330:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004332:	e7f1      	b.n	8004318 <_vfprintf_r+0xa58>
 8004334:	aa1f      	add	r2, sp, #124	; 0x7c
 8004336:	4641      	mov	r1, r8
 8004338:	4658      	mov	r0, fp
 800433a:	f002 fec6 	bl	80070ca <__sprint_r>
 800433e:	2800      	cmp	r0, #0
 8004340:	f040 8279 	bne.w	8004836 <_vfprintf_r+0xf76>
 8004344:	ac2c      	add	r4, sp, #176	; 0xb0
 8004346:	e619      	b.n	8003f7c <_vfprintf_r+0x6bc>
 8004348:	2310      	movs	r3, #16
 800434a:	6063      	str	r3, [r4, #4]
 800434c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800434e:	3310      	adds	r3, #16
 8004350:	9321      	str	r3, [sp, #132]	; 0x84
 8004352:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004354:	3301      	adds	r3, #1
 8004356:	2b07      	cmp	r3, #7
 8004358:	9320      	str	r3, [sp, #128]	; 0x80
 800435a:	dc02      	bgt.n	8004362 <_vfprintf_r+0xaa2>
 800435c:	3408      	adds	r4, #8
 800435e:	3e10      	subs	r6, #16
 8004360:	e611      	b.n	8003f86 <_vfprintf_r+0x6c6>
 8004362:	aa1f      	add	r2, sp, #124	; 0x7c
 8004364:	4641      	mov	r1, r8
 8004366:	4658      	mov	r0, fp
 8004368:	f002 feaf 	bl	80070ca <__sprint_r>
 800436c:	2800      	cmp	r0, #0
 800436e:	f040 8262 	bne.w	8004836 <_vfprintf_r+0xf76>
 8004372:	ac2c      	add	r4, sp, #176	; 0xb0
 8004374:	e7f3      	b.n	800435e <_vfprintf_r+0xa9e>
 8004376:	aa1f      	add	r2, sp, #124	; 0x7c
 8004378:	4641      	mov	r1, r8
 800437a:	4658      	mov	r0, fp
 800437c:	f002 fea5 	bl	80070ca <__sprint_r>
 8004380:	2800      	cmp	r0, #0
 8004382:	f040 8258 	bne.w	8004836 <_vfprintf_r+0xf76>
 8004386:	ac2c      	add	r4, sp, #176	; 0xb0
 8004388:	e60c      	b.n	8003fa4 <_vfprintf_r+0x6e4>
 800438a:	9b02      	ldr	r3, [sp, #8]
 800438c:	2b65      	cmp	r3, #101	; 0x65
 800438e:	f340 81ad 	ble.w	80046ec <_vfprintf_r+0xe2c>
 8004392:	2200      	movs	r2, #0
 8004394:	2300      	movs	r3, #0
 8004396:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800439a:	f7fc fb99 	bl	8000ad0 <__aeabi_dcmpeq>
 800439e:	2800      	cmp	r0, #0
 80043a0:	d062      	beq.n	8004468 <_vfprintf_r+0xba8>
 80043a2:	4b2f      	ldr	r3, [pc, #188]	; (8004460 <_vfprintf_r+0xba0>)
 80043a4:	6023      	str	r3, [r4, #0]
 80043a6:	2301      	movs	r3, #1
 80043a8:	6063      	str	r3, [r4, #4]
 80043aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043ac:	3301      	adds	r3, #1
 80043ae:	9321      	str	r3, [sp, #132]	; 0x84
 80043b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80043b2:	3301      	adds	r3, #1
 80043b4:	2b07      	cmp	r3, #7
 80043b6:	9320      	str	r3, [sp, #128]	; 0x80
 80043b8:	dc25      	bgt.n	8004406 <_vfprintf_r+0xb46>
 80043ba:	3408      	adds	r4, #8
 80043bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80043be:	9a03      	ldr	r2, [sp, #12]
 80043c0:	4293      	cmp	r3, r2
 80043c2:	db02      	blt.n	80043ca <_vfprintf_r+0xb0a>
 80043c4:	07ea      	lsls	r2, r5, #31
 80043c6:	f57f ae04 	bpl.w	8003fd2 <_vfprintf_r+0x712>
 80043ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043cc:	6023      	str	r3, [r4, #0]
 80043ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043d0:	6063      	str	r3, [r4, #4]
 80043d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043d6:	4413      	add	r3, r2
 80043d8:	9321      	str	r3, [sp, #132]	; 0x84
 80043da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80043dc:	3301      	adds	r3, #1
 80043de:	2b07      	cmp	r3, #7
 80043e0:	9320      	str	r3, [sp, #128]	; 0x80
 80043e2:	dc1a      	bgt.n	800441a <_vfprintf_r+0xb5a>
 80043e4:	3408      	adds	r4, #8
 80043e6:	9b03      	ldr	r3, [sp, #12]
 80043e8:	1e5e      	subs	r6, r3, #1
 80043ea:	2e00      	cmp	r6, #0
 80043ec:	f77f adf1 	ble.w	8003fd2 <_vfprintf_r+0x712>
 80043f0:	4f1c      	ldr	r7, [pc, #112]	; (8004464 <_vfprintf_r+0xba4>)
 80043f2:	f04f 0910 	mov.w	r9, #16
 80043f6:	2e10      	cmp	r6, #16
 80043f8:	6027      	str	r7, [r4, #0]
 80043fa:	dc18      	bgt.n	800442e <_vfprintf_r+0xb6e>
 80043fc:	6066      	str	r6, [r4, #4]
 80043fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004400:	441e      	add	r6, r3
 8004402:	9621      	str	r6, [sp, #132]	; 0x84
 8004404:	e5d6      	b.n	8003fb4 <_vfprintf_r+0x6f4>
 8004406:	aa1f      	add	r2, sp, #124	; 0x7c
 8004408:	4641      	mov	r1, r8
 800440a:	4658      	mov	r0, fp
 800440c:	f002 fe5d 	bl	80070ca <__sprint_r>
 8004410:	2800      	cmp	r0, #0
 8004412:	f040 8210 	bne.w	8004836 <_vfprintf_r+0xf76>
 8004416:	ac2c      	add	r4, sp, #176	; 0xb0
 8004418:	e7d0      	b.n	80043bc <_vfprintf_r+0xafc>
 800441a:	aa1f      	add	r2, sp, #124	; 0x7c
 800441c:	4641      	mov	r1, r8
 800441e:	4658      	mov	r0, fp
 8004420:	f002 fe53 	bl	80070ca <__sprint_r>
 8004424:	2800      	cmp	r0, #0
 8004426:	f040 8206 	bne.w	8004836 <_vfprintf_r+0xf76>
 800442a:	ac2c      	add	r4, sp, #176	; 0xb0
 800442c:	e7db      	b.n	80043e6 <_vfprintf_r+0xb26>
 800442e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004430:	f8c4 9004 	str.w	r9, [r4, #4]
 8004434:	3310      	adds	r3, #16
 8004436:	9321      	str	r3, [sp, #132]	; 0x84
 8004438:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800443a:	3301      	adds	r3, #1
 800443c:	2b07      	cmp	r3, #7
 800443e:	9320      	str	r3, [sp, #128]	; 0x80
 8004440:	dc02      	bgt.n	8004448 <_vfprintf_r+0xb88>
 8004442:	3408      	adds	r4, #8
 8004444:	3e10      	subs	r6, #16
 8004446:	e7d6      	b.n	80043f6 <_vfprintf_r+0xb36>
 8004448:	aa1f      	add	r2, sp, #124	; 0x7c
 800444a:	4641      	mov	r1, r8
 800444c:	4658      	mov	r0, fp
 800444e:	f002 fe3c 	bl	80070ca <__sprint_r>
 8004452:	2800      	cmp	r0, #0
 8004454:	f040 81ef 	bne.w	8004836 <_vfprintf_r+0xf76>
 8004458:	ac2c      	add	r4, sp, #176	; 0xb0
 800445a:	e7f3      	b.n	8004444 <_vfprintf_r+0xb84>
 800445c:	08009223 	.word	0x08009223
 8004460:	08009234 	.word	0x08009234
 8004464:	08009246 	.word	0x08009246
 8004468:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800446a:	2b00      	cmp	r3, #0
 800446c:	dc7a      	bgt.n	8004564 <_vfprintf_r+0xca4>
 800446e:	4b9d      	ldr	r3, [pc, #628]	; (80046e4 <_vfprintf_r+0xe24>)
 8004470:	6023      	str	r3, [r4, #0]
 8004472:	2301      	movs	r3, #1
 8004474:	6063      	str	r3, [r4, #4]
 8004476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004478:	3301      	adds	r3, #1
 800447a:	9321      	str	r3, [sp, #132]	; 0x84
 800447c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800447e:	3301      	adds	r3, #1
 8004480:	2b07      	cmp	r3, #7
 8004482:	9320      	str	r3, [sp, #128]	; 0x80
 8004484:	dc44      	bgt.n	8004510 <_vfprintf_r+0xc50>
 8004486:	3408      	adds	r4, #8
 8004488:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800448a:	b923      	cbnz	r3, 8004496 <_vfprintf_r+0xbd6>
 800448c:	9b03      	ldr	r3, [sp, #12]
 800448e:	b913      	cbnz	r3, 8004496 <_vfprintf_r+0xbd6>
 8004490:	07eb      	lsls	r3, r5, #31
 8004492:	f57f ad9e 	bpl.w	8003fd2 <_vfprintf_r+0x712>
 8004496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004498:	6023      	str	r3, [r4, #0]
 800449a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800449c:	6063      	str	r3, [r4, #4]
 800449e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044a2:	4413      	add	r3, r2
 80044a4:	9321      	str	r3, [sp, #132]	; 0x84
 80044a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80044a8:	3301      	adds	r3, #1
 80044aa:	2b07      	cmp	r3, #7
 80044ac:	9320      	str	r3, [sp, #128]	; 0x80
 80044ae:	dc39      	bgt.n	8004524 <_vfprintf_r+0xc64>
 80044b0:	f104 0308 	add.w	r3, r4, #8
 80044b4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80044b6:	2e00      	cmp	r6, #0
 80044b8:	da19      	bge.n	80044ee <_vfprintf_r+0xc2e>
 80044ba:	4f8b      	ldr	r7, [pc, #556]	; (80046e8 <_vfprintf_r+0xe28>)
 80044bc:	4276      	negs	r6, r6
 80044be:	2410      	movs	r4, #16
 80044c0:	2e10      	cmp	r6, #16
 80044c2:	601f      	str	r7, [r3, #0]
 80044c4:	dc38      	bgt.n	8004538 <_vfprintf_r+0xc78>
 80044c6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80044c8:	605e      	str	r6, [r3, #4]
 80044ca:	4416      	add	r6, r2
 80044cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80044ce:	9621      	str	r6, [sp, #132]	; 0x84
 80044d0:	3201      	adds	r2, #1
 80044d2:	2a07      	cmp	r2, #7
 80044d4:	f103 0308 	add.w	r3, r3, #8
 80044d8:	9220      	str	r2, [sp, #128]	; 0x80
 80044da:	dd08      	ble.n	80044ee <_vfprintf_r+0xc2e>
 80044dc:	aa1f      	add	r2, sp, #124	; 0x7c
 80044de:	4641      	mov	r1, r8
 80044e0:	4658      	mov	r0, fp
 80044e2:	f002 fdf2 	bl	80070ca <__sprint_r>
 80044e6:	2800      	cmp	r0, #0
 80044e8:	f040 81a5 	bne.w	8004836 <_vfprintf_r+0xf76>
 80044ec:	ab2c      	add	r3, sp, #176	; 0xb0
 80044ee:	9a03      	ldr	r2, [sp, #12]
 80044f0:	605a      	str	r2, [r3, #4]
 80044f2:	9903      	ldr	r1, [sp, #12]
 80044f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80044f6:	f8c3 9000 	str.w	r9, [r3]
 80044fa:	440a      	add	r2, r1
 80044fc:	9221      	str	r2, [sp, #132]	; 0x84
 80044fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004500:	3201      	adds	r2, #1
 8004502:	2a07      	cmp	r2, #7
 8004504:	9220      	str	r2, [sp, #128]	; 0x80
 8004506:	f73f ad5b 	bgt.w	8003fc0 <_vfprintf_r+0x700>
 800450a:	f103 0408 	add.w	r4, r3, #8
 800450e:	e560      	b.n	8003fd2 <_vfprintf_r+0x712>
 8004510:	aa1f      	add	r2, sp, #124	; 0x7c
 8004512:	4641      	mov	r1, r8
 8004514:	4658      	mov	r0, fp
 8004516:	f002 fdd8 	bl	80070ca <__sprint_r>
 800451a:	2800      	cmp	r0, #0
 800451c:	f040 818b 	bne.w	8004836 <_vfprintf_r+0xf76>
 8004520:	ac2c      	add	r4, sp, #176	; 0xb0
 8004522:	e7b1      	b.n	8004488 <_vfprintf_r+0xbc8>
 8004524:	aa1f      	add	r2, sp, #124	; 0x7c
 8004526:	4641      	mov	r1, r8
 8004528:	4658      	mov	r0, fp
 800452a:	f002 fdce 	bl	80070ca <__sprint_r>
 800452e:	2800      	cmp	r0, #0
 8004530:	f040 8181 	bne.w	8004836 <_vfprintf_r+0xf76>
 8004534:	ab2c      	add	r3, sp, #176	; 0xb0
 8004536:	e7bd      	b.n	80044b4 <_vfprintf_r+0xbf4>
 8004538:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800453a:	605c      	str	r4, [r3, #4]
 800453c:	3210      	adds	r2, #16
 800453e:	9221      	str	r2, [sp, #132]	; 0x84
 8004540:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004542:	3201      	adds	r2, #1
 8004544:	2a07      	cmp	r2, #7
 8004546:	9220      	str	r2, [sp, #128]	; 0x80
 8004548:	dc02      	bgt.n	8004550 <_vfprintf_r+0xc90>
 800454a:	3308      	adds	r3, #8
 800454c:	3e10      	subs	r6, #16
 800454e:	e7b7      	b.n	80044c0 <_vfprintf_r+0xc00>
 8004550:	aa1f      	add	r2, sp, #124	; 0x7c
 8004552:	4641      	mov	r1, r8
 8004554:	4658      	mov	r0, fp
 8004556:	f002 fdb8 	bl	80070ca <__sprint_r>
 800455a:	2800      	cmp	r0, #0
 800455c:	f040 816b 	bne.w	8004836 <_vfprintf_r+0xf76>
 8004560:	ab2c      	add	r3, sp, #176	; 0xb0
 8004562:	e7f3      	b.n	800454c <_vfprintf_r+0xc8c>
 8004564:	9b08      	ldr	r3, [sp, #32]
 8004566:	9a03      	ldr	r2, [sp, #12]
 8004568:	4293      	cmp	r3, r2
 800456a:	bfa8      	it	ge
 800456c:	4613      	movge	r3, r2
 800456e:	2b00      	cmp	r3, #0
 8004570:	461e      	mov	r6, r3
 8004572:	dd0b      	ble.n	800458c <_vfprintf_r+0xccc>
 8004574:	6063      	str	r3, [r4, #4]
 8004576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004578:	f8c4 9000 	str.w	r9, [r4]
 800457c:	4433      	add	r3, r6
 800457e:	9321      	str	r3, [sp, #132]	; 0x84
 8004580:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004582:	3301      	adds	r3, #1
 8004584:	2b07      	cmp	r3, #7
 8004586:	9320      	str	r3, [sp, #128]	; 0x80
 8004588:	dc62      	bgt.n	8004650 <_vfprintf_r+0xd90>
 800458a:	3408      	adds	r4, #8
 800458c:	9b08      	ldr	r3, [sp, #32]
 800458e:	2e00      	cmp	r6, #0
 8004590:	bfa8      	it	ge
 8004592:	1b9b      	subge	r3, r3, r6
 8004594:	2b00      	cmp	r3, #0
 8004596:	461e      	mov	r6, r3
 8004598:	dd0f      	ble.n	80045ba <_vfprintf_r+0xcfa>
 800459a:	4f53      	ldr	r7, [pc, #332]	; (80046e8 <_vfprintf_r+0xe28>)
 800459c:	f04f 0a10 	mov.w	sl, #16
 80045a0:	2e10      	cmp	r6, #16
 80045a2:	6027      	str	r7, [r4, #0]
 80045a4:	dc5e      	bgt.n	8004664 <_vfprintf_r+0xda4>
 80045a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045a8:	6066      	str	r6, [r4, #4]
 80045aa:	441e      	add	r6, r3
 80045ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80045ae:	9621      	str	r6, [sp, #132]	; 0x84
 80045b0:	3301      	adds	r3, #1
 80045b2:	2b07      	cmp	r3, #7
 80045b4:	9320      	str	r3, [sp, #128]	; 0x80
 80045b6:	dc6c      	bgt.n	8004692 <_vfprintf_r+0xdd2>
 80045b8:	3408      	adds	r4, #8
 80045ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80045bc:	9a03      	ldr	r2, [sp, #12]
 80045be:	4293      	cmp	r3, r2
 80045c0:	db01      	blt.n	80045c6 <_vfprintf_r+0xd06>
 80045c2:	07ef      	lsls	r7, r5, #31
 80045c4:	d50d      	bpl.n	80045e2 <_vfprintf_r+0xd22>
 80045c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045c8:	6023      	str	r3, [r4, #0]
 80045ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045cc:	6063      	str	r3, [r4, #4]
 80045ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045d2:	4413      	add	r3, r2
 80045d4:	9321      	str	r3, [sp, #132]	; 0x84
 80045d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80045d8:	3301      	adds	r3, #1
 80045da:	2b07      	cmp	r3, #7
 80045dc:	9320      	str	r3, [sp, #128]	; 0x80
 80045de:	dc62      	bgt.n	80046a6 <_vfprintf_r+0xde6>
 80045e0:	3408      	adds	r4, #8
 80045e2:	9b03      	ldr	r3, [sp, #12]
 80045e4:	9a08      	ldr	r2, [sp, #32]
 80045e6:	1a9e      	subs	r6, r3, r2
 80045e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80045ea:	9a03      	ldr	r2, [sp, #12]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	429e      	cmp	r6, r3
 80045f0:	bfa8      	it	ge
 80045f2:	461e      	movge	r6, r3
 80045f4:	2e00      	cmp	r6, #0
 80045f6:	dd0c      	ble.n	8004612 <_vfprintf_r+0xd52>
 80045f8:	9b08      	ldr	r3, [sp, #32]
 80045fa:	444b      	add	r3, r9
 80045fc:	e884 0048 	stmia.w	r4, {r3, r6}
 8004600:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004602:	4433      	add	r3, r6
 8004604:	9321      	str	r3, [sp, #132]	; 0x84
 8004606:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004608:	3301      	adds	r3, #1
 800460a:	2b07      	cmp	r3, #7
 800460c:	9320      	str	r3, [sp, #128]	; 0x80
 800460e:	dc54      	bgt.n	80046ba <_vfprintf_r+0xdfa>
 8004610:	3408      	adds	r4, #8
 8004612:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004614:	9a03      	ldr	r2, [sp, #12]
 8004616:	2e00      	cmp	r6, #0
 8004618:	eba2 0303 	sub.w	r3, r2, r3
 800461c:	bfac      	ite	ge
 800461e:	1b9e      	subge	r6, r3, r6
 8004620:	461e      	movlt	r6, r3
 8004622:	2e00      	cmp	r6, #0
 8004624:	f77f acd5 	ble.w	8003fd2 <_vfprintf_r+0x712>
 8004628:	4f2f      	ldr	r7, [pc, #188]	; (80046e8 <_vfprintf_r+0xe28>)
 800462a:	f04f 0910 	mov.w	r9, #16
 800462e:	2e10      	cmp	r6, #16
 8004630:	6027      	str	r7, [r4, #0]
 8004632:	f77f aee3 	ble.w	80043fc <_vfprintf_r+0xb3c>
 8004636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004638:	f8c4 9004 	str.w	r9, [r4, #4]
 800463c:	3310      	adds	r3, #16
 800463e:	9321      	str	r3, [sp, #132]	; 0x84
 8004640:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004642:	3301      	adds	r3, #1
 8004644:	2b07      	cmp	r3, #7
 8004646:	9320      	str	r3, [sp, #128]	; 0x80
 8004648:	dc41      	bgt.n	80046ce <_vfprintf_r+0xe0e>
 800464a:	3408      	adds	r4, #8
 800464c:	3e10      	subs	r6, #16
 800464e:	e7ee      	b.n	800462e <_vfprintf_r+0xd6e>
 8004650:	aa1f      	add	r2, sp, #124	; 0x7c
 8004652:	4641      	mov	r1, r8
 8004654:	4658      	mov	r0, fp
 8004656:	f002 fd38 	bl	80070ca <__sprint_r>
 800465a:	2800      	cmp	r0, #0
 800465c:	f040 80eb 	bne.w	8004836 <_vfprintf_r+0xf76>
 8004660:	ac2c      	add	r4, sp, #176	; 0xb0
 8004662:	e793      	b.n	800458c <_vfprintf_r+0xccc>
 8004664:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004666:	f8c4 a004 	str.w	sl, [r4, #4]
 800466a:	3310      	adds	r3, #16
 800466c:	9321      	str	r3, [sp, #132]	; 0x84
 800466e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004670:	3301      	adds	r3, #1
 8004672:	2b07      	cmp	r3, #7
 8004674:	9320      	str	r3, [sp, #128]	; 0x80
 8004676:	dc02      	bgt.n	800467e <_vfprintf_r+0xdbe>
 8004678:	3408      	adds	r4, #8
 800467a:	3e10      	subs	r6, #16
 800467c:	e790      	b.n	80045a0 <_vfprintf_r+0xce0>
 800467e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004680:	4641      	mov	r1, r8
 8004682:	4658      	mov	r0, fp
 8004684:	f002 fd21 	bl	80070ca <__sprint_r>
 8004688:	2800      	cmp	r0, #0
 800468a:	f040 80d4 	bne.w	8004836 <_vfprintf_r+0xf76>
 800468e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004690:	e7f3      	b.n	800467a <_vfprintf_r+0xdba>
 8004692:	aa1f      	add	r2, sp, #124	; 0x7c
 8004694:	4641      	mov	r1, r8
 8004696:	4658      	mov	r0, fp
 8004698:	f002 fd17 	bl	80070ca <__sprint_r>
 800469c:	2800      	cmp	r0, #0
 800469e:	f040 80ca 	bne.w	8004836 <_vfprintf_r+0xf76>
 80046a2:	ac2c      	add	r4, sp, #176	; 0xb0
 80046a4:	e789      	b.n	80045ba <_vfprintf_r+0xcfa>
 80046a6:	aa1f      	add	r2, sp, #124	; 0x7c
 80046a8:	4641      	mov	r1, r8
 80046aa:	4658      	mov	r0, fp
 80046ac:	f002 fd0d 	bl	80070ca <__sprint_r>
 80046b0:	2800      	cmp	r0, #0
 80046b2:	f040 80c0 	bne.w	8004836 <_vfprintf_r+0xf76>
 80046b6:	ac2c      	add	r4, sp, #176	; 0xb0
 80046b8:	e793      	b.n	80045e2 <_vfprintf_r+0xd22>
 80046ba:	aa1f      	add	r2, sp, #124	; 0x7c
 80046bc:	4641      	mov	r1, r8
 80046be:	4658      	mov	r0, fp
 80046c0:	f002 fd03 	bl	80070ca <__sprint_r>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	f040 80b6 	bne.w	8004836 <_vfprintf_r+0xf76>
 80046ca:	ac2c      	add	r4, sp, #176	; 0xb0
 80046cc:	e7a1      	b.n	8004612 <_vfprintf_r+0xd52>
 80046ce:	aa1f      	add	r2, sp, #124	; 0x7c
 80046d0:	4641      	mov	r1, r8
 80046d2:	4658      	mov	r0, fp
 80046d4:	f002 fcf9 	bl	80070ca <__sprint_r>
 80046d8:	2800      	cmp	r0, #0
 80046da:	f040 80ac 	bne.w	8004836 <_vfprintf_r+0xf76>
 80046de:	ac2c      	add	r4, sp, #176	; 0xb0
 80046e0:	e7b4      	b.n	800464c <_vfprintf_r+0xd8c>
 80046e2:	bf00      	nop
 80046e4:	08009234 	.word	0x08009234
 80046e8:	08009246 	.word	0x08009246
 80046ec:	9b03      	ldr	r3, [sp, #12]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	dc01      	bgt.n	80046f6 <_vfprintf_r+0xe36>
 80046f2:	07ee      	lsls	r6, r5, #31
 80046f4:	d576      	bpl.n	80047e4 <_vfprintf_r+0xf24>
 80046f6:	2301      	movs	r3, #1
 80046f8:	6063      	str	r3, [r4, #4]
 80046fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80046fc:	f8c4 9000 	str.w	r9, [r4]
 8004700:	3301      	adds	r3, #1
 8004702:	9321      	str	r3, [sp, #132]	; 0x84
 8004704:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004706:	3301      	adds	r3, #1
 8004708:	2b07      	cmp	r3, #7
 800470a:	9320      	str	r3, [sp, #128]	; 0x80
 800470c:	dc36      	bgt.n	800477c <_vfprintf_r+0xebc>
 800470e:	3408      	adds	r4, #8
 8004710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004712:	6023      	str	r3, [r4, #0]
 8004714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004716:	6063      	str	r3, [r4, #4]
 8004718:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800471a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800471c:	4413      	add	r3, r2
 800471e:	9321      	str	r3, [sp, #132]	; 0x84
 8004720:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004722:	3301      	adds	r3, #1
 8004724:	2b07      	cmp	r3, #7
 8004726:	9320      	str	r3, [sp, #128]	; 0x80
 8004728:	dc31      	bgt.n	800478e <_vfprintf_r+0xece>
 800472a:	3408      	adds	r4, #8
 800472c:	2300      	movs	r3, #0
 800472e:	2200      	movs	r2, #0
 8004730:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004734:	f7fc f9cc 	bl	8000ad0 <__aeabi_dcmpeq>
 8004738:	9b03      	ldr	r3, [sp, #12]
 800473a:	1e5e      	subs	r6, r3, #1
 800473c:	2800      	cmp	r0, #0
 800473e:	d12f      	bne.n	80047a0 <_vfprintf_r+0xee0>
 8004740:	f109 0301 	add.w	r3, r9, #1
 8004744:	e884 0048 	stmia.w	r4, {r3, r6}
 8004748:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800474a:	9a03      	ldr	r2, [sp, #12]
 800474c:	3b01      	subs	r3, #1
 800474e:	4413      	add	r3, r2
 8004750:	9321      	str	r3, [sp, #132]	; 0x84
 8004752:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004754:	3301      	adds	r3, #1
 8004756:	2b07      	cmp	r3, #7
 8004758:	9320      	str	r3, [sp, #128]	; 0x80
 800475a:	dd4a      	ble.n	80047f2 <_vfprintf_r+0xf32>
 800475c:	aa1f      	add	r2, sp, #124	; 0x7c
 800475e:	4641      	mov	r1, r8
 8004760:	4658      	mov	r0, fp
 8004762:	f002 fcb2 	bl	80070ca <__sprint_r>
 8004766:	2800      	cmp	r0, #0
 8004768:	d165      	bne.n	8004836 <_vfprintf_r+0xf76>
 800476a:	ac2c      	add	r4, sp, #176	; 0xb0
 800476c:	ab1b      	add	r3, sp, #108	; 0x6c
 800476e:	6023      	str	r3, [r4, #0]
 8004770:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004772:	6063      	str	r3, [r4, #4]
 8004774:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004778:	4413      	add	r3, r2
 800477a:	e41a      	b.n	8003fb2 <_vfprintf_r+0x6f2>
 800477c:	aa1f      	add	r2, sp, #124	; 0x7c
 800477e:	4641      	mov	r1, r8
 8004780:	4658      	mov	r0, fp
 8004782:	f002 fca2 	bl	80070ca <__sprint_r>
 8004786:	2800      	cmp	r0, #0
 8004788:	d155      	bne.n	8004836 <_vfprintf_r+0xf76>
 800478a:	ac2c      	add	r4, sp, #176	; 0xb0
 800478c:	e7c0      	b.n	8004710 <_vfprintf_r+0xe50>
 800478e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004790:	4641      	mov	r1, r8
 8004792:	4658      	mov	r0, fp
 8004794:	f002 fc99 	bl	80070ca <__sprint_r>
 8004798:	2800      	cmp	r0, #0
 800479a:	d14c      	bne.n	8004836 <_vfprintf_r+0xf76>
 800479c:	ac2c      	add	r4, sp, #176	; 0xb0
 800479e:	e7c5      	b.n	800472c <_vfprintf_r+0xe6c>
 80047a0:	2e00      	cmp	r6, #0
 80047a2:	dde3      	ble.n	800476c <_vfprintf_r+0xeac>
 80047a4:	4f60      	ldr	r7, [pc, #384]	; (8004928 <_vfprintf_r+0x1068>)
 80047a6:	f04f 0910 	mov.w	r9, #16
 80047aa:	2e10      	cmp	r6, #16
 80047ac:	6027      	str	r7, [r4, #0]
 80047ae:	dc04      	bgt.n	80047ba <_vfprintf_r+0xefa>
 80047b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047b2:	6066      	str	r6, [r4, #4]
 80047b4:	441e      	add	r6, r3
 80047b6:	9621      	str	r6, [sp, #132]	; 0x84
 80047b8:	e7cb      	b.n	8004752 <_vfprintf_r+0xe92>
 80047ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047bc:	f8c4 9004 	str.w	r9, [r4, #4]
 80047c0:	3310      	adds	r3, #16
 80047c2:	9321      	str	r3, [sp, #132]	; 0x84
 80047c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80047c6:	3301      	adds	r3, #1
 80047c8:	2b07      	cmp	r3, #7
 80047ca:	9320      	str	r3, [sp, #128]	; 0x80
 80047cc:	dc02      	bgt.n	80047d4 <_vfprintf_r+0xf14>
 80047ce:	3408      	adds	r4, #8
 80047d0:	3e10      	subs	r6, #16
 80047d2:	e7ea      	b.n	80047aa <_vfprintf_r+0xeea>
 80047d4:	aa1f      	add	r2, sp, #124	; 0x7c
 80047d6:	4641      	mov	r1, r8
 80047d8:	4658      	mov	r0, fp
 80047da:	f002 fc76 	bl	80070ca <__sprint_r>
 80047de:	bb50      	cbnz	r0, 8004836 <_vfprintf_r+0xf76>
 80047e0:	ac2c      	add	r4, sp, #176	; 0xb0
 80047e2:	e7f5      	b.n	80047d0 <_vfprintf_r+0xf10>
 80047e4:	2301      	movs	r3, #1
 80047e6:	6063      	str	r3, [r4, #4]
 80047e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047ea:	f8c4 9000 	str.w	r9, [r4]
 80047ee:	3301      	adds	r3, #1
 80047f0:	e7ae      	b.n	8004750 <_vfprintf_r+0xe90>
 80047f2:	3408      	adds	r4, #8
 80047f4:	e7ba      	b.n	800476c <_vfprintf_r+0xeac>
 80047f6:	3408      	adds	r4, #8
 80047f8:	f7ff bbeb 	b.w	8003fd2 <_vfprintf_r+0x712>
 80047fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004800:	1a9d      	subs	r5, r3, r2
 8004802:	2d00      	cmp	r5, #0
 8004804:	f77f abe8 	ble.w	8003fd8 <_vfprintf_r+0x718>
 8004808:	2610      	movs	r6, #16
 800480a:	4b48      	ldr	r3, [pc, #288]	; (800492c <_vfprintf_r+0x106c>)
 800480c:	6023      	str	r3, [r4, #0]
 800480e:	2d10      	cmp	r5, #16
 8004810:	dc24      	bgt.n	800485c <_vfprintf_r+0xf9c>
 8004812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004814:	6065      	str	r5, [r4, #4]
 8004816:	441d      	add	r5, r3
 8004818:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800481a:	9521      	str	r5, [sp, #132]	; 0x84
 800481c:	3301      	adds	r3, #1
 800481e:	2b07      	cmp	r3, #7
 8004820:	9320      	str	r3, [sp, #128]	; 0x80
 8004822:	f77f abd9 	ble.w	8003fd8 <_vfprintf_r+0x718>
 8004826:	aa1f      	add	r2, sp, #124	; 0x7c
 8004828:	4641      	mov	r1, r8
 800482a:	4658      	mov	r0, fp
 800482c:	f002 fc4d 	bl	80070ca <__sprint_r>
 8004830:	2800      	cmp	r0, #0
 8004832:	f43f abd1 	beq.w	8003fd8 <_vfprintf_r+0x718>
 8004836:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800483a:	07d9      	lsls	r1, r3, #31
 800483c:	d407      	bmi.n	800484e <_vfprintf_r+0xf8e>
 800483e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004842:	059a      	lsls	r2, r3, #22
 8004844:	d403      	bmi.n	800484e <_vfprintf_r+0xf8e>
 8004846:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800484a:	f001 fc3e 	bl	80060ca <__retarget_lock_release_recursive>
 800484e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004852:	065b      	lsls	r3, r3, #25
 8004854:	f57f a8af 	bpl.w	80039b6 <_vfprintf_r+0xf6>
 8004858:	f7ff b882 	b.w	8003960 <_vfprintf_r+0xa0>
 800485c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800485e:	6066      	str	r6, [r4, #4]
 8004860:	3310      	adds	r3, #16
 8004862:	9321      	str	r3, [sp, #132]	; 0x84
 8004864:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004866:	3301      	adds	r3, #1
 8004868:	2b07      	cmp	r3, #7
 800486a:	9320      	str	r3, [sp, #128]	; 0x80
 800486c:	dc02      	bgt.n	8004874 <_vfprintf_r+0xfb4>
 800486e:	3408      	adds	r4, #8
 8004870:	3d10      	subs	r5, #16
 8004872:	e7ca      	b.n	800480a <_vfprintf_r+0xf4a>
 8004874:	aa1f      	add	r2, sp, #124	; 0x7c
 8004876:	4641      	mov	r1, r8
 8004878:	4658      	mov	r0, fp
 800487a:	f002 fc26 	bl	80070ca <__sprint_r>
 800487e:	2800      	cmp	r0, #0
 8004880:	d1d9      	bne.n	8004836 <_vfprintf_r+0xf76>
 8004882:	ac2c      	add	r4, sp, #176	; 0xb0
 8004884:	e7f4      	b.n	8004870 <_vfprintf_r+0xfb0>
 8004886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004888:	b913      	cbnz	r3, 8004890 <_vfprintf_r+0xfd0>
 800488a:	2300      	movs	r3, #0
 800488c:	9320      	str	r3, [sp, #128]	; 0x80
 800488e:	e7d2      	b.n	8004836 <_vfprintf_r+0xf76>
 8004890:	aa1f      	add	r2, sp, #124	; 0x7c
 8004892:	4641      	mov	r1, r8
 8004894:	4658      	mov	r0, fp
 8004896:	f002 fc18 	bl	80070ca <__sprint_r>
 800489a:	2800      	cmp	r0, #0
 800489c:	d0f5      	beq.n	800488a <_vfprintf_r+0xfca>
 800489e:	e7ca      	b.n	8004836 <_vfprintf_r+0xf76>
 80048a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048a4:	4610      	mov	r0, r2
 80048a6:	4619      	mov	r1, r3
 80048a8:	f7fc f944 	bl	8000b34 <__aeabi_dcmpun>
 80048ac:	2800      	cmp	r0, #0
 80048ae:	f43f aa36 	beq.w	8003d1e <_vfprintf_r+0x45e>
 80048b2:	4b1f      	ldr	r3, [pc, #124]	; (8004930 <_vfprintf_r+0x1070>)
 80048b4:	4a1f      	ldr	r2, [pc, #124]	; (8004934 <_vfprintf_r+0x1074>)
 80048b6:	f7ff ba26 	b.w	8003d06 <_vfprintf_r+0x446>
 80048ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80048bc:	1a1b      	subs	r3, r3, r0
 80048be:	9303      	str	r3, [sp, #12]
 80048c0:	f7ff baa9 	b.w	8003e16 <_vfprintf_r+0x556>
 80048c4:	ea56 0207 	orrs.w	r2, r6, r7
 80048c8:	9508      	str	r5, [sp, #32]
 80048ca:	f43f ac1e 	beq.w	800410a <_vfprintf_r+0x84a>
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	f43f ac8f 	beq.w	80041f2 <_vfprintf_r+0x932>
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	f43f acaf 	beq.w	8004238 <_vfprintf_r+0x978>
 80048da:	ab2c      	add	r3, sp, #176	; 0xb0
 80048dc:	08f1      	lsrs	r1, r6, #3
 80048de:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80048e2:	08f8      	lsrs	r0, r7, #3
 80048e4:	f006 0207 	and.w	r2, r6, #7
 80048e8:	4607      	mov	r7, r0
 80048ea:	460e      	mov	r6, r1
 80048ec:	3230      	adds	r2, #48	; 0x30
 80048ee:	ea56 0107 	orrs.w	r1, r6, r7
 80048f2:	f103 39ff 	add.w	r9, r3, #4294967295
 80048f6:	f803 2c01 	strb.w	r2, [r3, #-1]
 80048fa:	f47f ac78 	bne.w	80041ee <_vfprintf_r+0x92e>
 80048fe:	9908      	ldr	r1, [sp, #32]
 8004900:	07cd      	lsls	r5, r1, #31
 8004902:	d506      	bpl.n	8004912 <_vfprintf_r+0x1052>
 8004904:	2a30      	cmp	r2, #48	; 0x30
 8004906:	d004      	beq.n	8004912 <_vfprintf_r+0x1052>
 8004908:	2230      	movs	r2, #48	; 0x30
 800490a:	f809 2c01 	strb.w	r2, [r9, #-1]
 800490e:	f1a3 0902 	sub.w	r9, r3, #2
 8004912:	4656      	mov	r6, sl
 8004914:	2300      	movs	r3, #0
 8004916:	f10d 0ab0 	add.w	sl, sp, #176	; 0xb0
 800491a:	9d08      	ldr	r5, [sp, #32]
 800491c:	9308      	str	r3, [sp, #32]
 800491e:	ebaa 0a09 	sub.w	sl, sl, r9
 8004922:	f7ff bac6 	b.w	8003eb2 <_vfprintf_r+0x5f2>
 8004926:	bf00      	nop
 8004928:	08009246 	.word	0x08009246
 800492c:	08009236 	.word	0x08009236
 8004930:	0800920a 	.word	0x0800920a
 8004934:	0800920e 	.word	0x0800920e

08004938 <__sbprintf>:
 8004938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800493a:	460c      	mov	r4, r1
 800493c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8004940:	461f      	mov	r7, r3
 8004942:	8989      	ldrh	r1, [r1, #12]
 8004944:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004946:	9319      	str	r3, [sp, #100]	; 0x64
 8004948:	89e3      	ldrh	r3, [r4, #14]
 800494a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800494e:	f021 0102 	bic.w	r1, r1, #2
 8004952:	6a23      	ldr	r3, [r4, #32]
 8004954:	f8ad 100c 	strh.w	r1, [sp, #12]
 8004958:	9308      	str	r3, [sp, #32]
 800495a:	a91a      	add	r1, sp, #104	; 0x68
 800495c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800495e:	930a      	str	r3, [sp, #40]	; 0x28
 8004960:	4615      	mov	r5, r2
 8004962:	2300      	movs	r3, #0
 8004964:	4606      	mov	r6, r0
 8004966:	9100      	str	r1, [sp, #0]
 8004968:	9104      	str	r1, [sp, #16]
 800496a:	a816      	add	r0, sp, #88	; 0x58
 800496c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004970:	9102      	str	r1, [sp, #8]
 8004972:	9105      	str	r1, [sp, #20]
 8004974:	9306      	str	r3, [sp, #24]
 8004976:	f001 fba5 	bl	80060c4 <__retarget_lock_init_recursive>
 800497a:	462a      	mov	r2, r5
 800497c:	463b      	mov	r3, r7
 800497e:	4669      	mov	r1, sp
 8004980:	4630      	mov	r0, r6
 8004982:	f7fe ff9d 	bl	80038c0 <_vfprintf_r>
 8004986:	1e05      	subs	r5, r0, #0
 8004988:	db07      	blt.n	800499a <__sbprintf+0x62>
 800498a:	4669      	mov	r1, sp
 800498c:	4630      	mov	r0, r6
 800498e:	f000 ffcb 	bl	8005928 <_fflush_r>
 8004992:	2800      	cmp	r0, #0
 8004994:	bf18      	it	ne
 8004996:	f04f 35ff 	movne.w	r5, #4294967295
 800499a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800499e:	9816      	ldr	r0, [sp, #88]	; 0x58
 80049a0:	065b      	lsls	r3, r3, #25
 80049a2:	bf42      	ittt	mi
 80049a4:	89a3      	ldrhmi	r3, [r4, #12]
 80049a6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80049aa:	81a3      	strhmi	r3, [r4, #12]
 80049ac:	f001 fb8b 	bl	80060c6 <__retarget_lock_close_recursive>
 80049b0:	4628      	mov	r0, r5
 80049b2:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 80049b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049b8 <__swbuf_r>:
 80049b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ba:	460e      	mov	r6, r1
 80049bc:	4614      	mov	r4, r2
 80049be:	4605      	mov	r5, r0
 80049c0:	b118      	cbz	r0, 80049ca <__swbuf_r+0x12>
 80049c2:	6983      	ldr	r3, [r0, #24]
 80049c4:	b90b      	cbnz	r3, 80049ca <__swbuf_r+0x12>
 80049c6:	f001 f855 	bl	8005a74 <__sinit>
 80049ca:	4b27      	ldr	r3, [pc, #156]	; (8004a68 <__swbuf_r+0xb0>)
 80049cc:	429c      	cmp	r4, r3
 80049ce:	d12f      	bne.n	8004a30 <__swbuf_r+0x78>
 80049d0:	686c      	ldr	r4, [r5, #4]
 80049d2:	69a3      	ldr	r3, [r4, #24]
 80049d4:	60a3      	str	r3, [r4, #8]
 80049d6:	89a3      	ldrh	r3, [r4, #12]
 80049d8:	0719      	lsls	r1, r3, #28
 80049da:	d533      	bpl.n	8004a44 <__swbuf_r+0x8c>
 80049dc:	6923      	ldr	r3, [r4, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d030      	beq.n	8004a44 <__swbuf_r+0x8c>
 80049e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049e6:	b2f6      	uxtb	r6, r6
 80049e8:	049a      	lsls	r2, r3, #18
 80049ea:	4637      	mov	r7, r6
 80049ec:	d534      	bpl.n	8004a58 <__swbuf_r+0xa0>
 80049ee:	6923      	ldr	r3, [r4, #16]
 80049f0:	6820      	ldr	r0, [r4, #0]
 80049f2:	1ac0      	subs	r0, r0, r3
 80049f4:	6963      	ldr	r3, [r4, #20]
 80049f6:	4298      	cmp	r0, r3
 80049f8:	db04      	blt.n	8004a04 <__swbuf_r+0x4c>
 80049fa:	4621      	mov	r1, r4
 80049fc:	4628      	mov	r0, r5
 80049fe:	f000 ff93 	bl	8005928 <_fflush_r>
 8004a02:	bb28      	cbnz	r0, 8004a50 <__swbuf_r+0x98>
 8004a04:	68a3      	ldr	r3, [r4, #8]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	60a3      	str	r3, [r4, #8]
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	6022      	str	r2, [r4, #0]
 8004a10:	701e      	strb	r6, [r3, #0]
 8004a12:	6963      	ldr	r3, [r4, #20]
 8004a14:	3001      	adds	r0, #1
 8004a16:	4298      	cmp	r0, r3
 8004a18:	d004      	beq.n	8004a24 <__swbuf_r+0x6c>
 8004a1a:	89a3      	ldrh	r3, [r4, #12]
 8004a1c:	07db      	lsls	r3, r3, #31
 8004a1e:	d519      	bpl.n	8004a54 <__swbuf_r+0x9c>
 8004a20:	2e0a      	cmp	r6, #10
 8004a22:	d117      	bne.n	8004a54 <__swbuf_r+0x9c>
 8004a24:	4621      	mov	r1, r4
 8004a26:	4628      	mov	r0, r5
 8004a28:	f000 ff7e 	bl	8005928 <_fflush_r>
 8004a2c:	b190      	cbz	r0, 8004a54 <__swbuf_r+0x9c>
 8004a2e:	e00f      	b.n	8004a50 <__swbuf_r+0x98>
 8004a30:	4b0e      	ldr	r3, [pc, #56]	; (8004a6c <__swbuf_r+0xb4>)
 8004a32:	429c      	cmp	r4, r3
 8004a34:	d101      	bne.n	8004a3a <__swbuf_r+0x82>
 8004a36:	68ac      	ldr	r4, [r5, #8]
 8004a38:	e7cb      	b.n	80049d2 <__swbuf_r+0x1a>
 8004a3a:	4b0d      	ldr	r3, [pc, #52]	; (8004a70 <__swbuf_r+0xb8>)
 8004a3c:	429c      	cmp	r4, r3
 8004a3e:	bf08      	it	eq
 8004a40:	68ec      	ldreq	r4, [r5, #12]
 8004a42:	e7c6      	b.n	80049d2 <__swbuf_r+0x1a>
 8004a44:	4621      	mov	r1, r4
 8004a46:	4628      	mov	r0, r5
 8004a48:	f000 f814 	bl	8004a74 <__swsetup_r>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	d0c8      	beq.n	80049e2 <__swbuf_r+0x2a>
 8004a50:	f04f 37ff 	mov.w	r7, #4294967295
 8004a54:	4638      	mov	r0, r7
 8004a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a5c:	81a3      	strh	r3, [r4, #12]
 8004a5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a64:	6663      	str	r3, [r4, #100]	; 0x64
 8004a66:	e7c2      	b.n	80049ee <__swbuf_r+0x36>
 8004a68:	08009284 	.word	0x08009284
 8004a6c:	080092a4 	.word	0x080092a4
 8004a70:	08009264 	.word	0x08009264

08004a74 <__swsetup_r>:
 8004a74:	4b32      	ldr	r3, [pc, #200]	; (8004b40 <__swsetup_r+0xcc>)
 8004a76:	b570      	push	{r4, r5, r6, lr}
 8004a78:	681d      	ldr	r5, [r3, #0]
 8004a7a:	4606      	mov	r6, r0
 8004a7c:	460c      	mov	r4, r1
 8004a7e:	b125      	cbz	r5, 8004a8a <__swsetup_r+0x16>
 8004a80:	69ab      	ldr	r3, [r5, #24]
 8004a82:	b913      	cbnz	r3, 8004a8a <__swsetup_r+0x16>
 8004a84:	4628      	mov	r0, r5
 8004a86:	f000 fff5 	bl	8005a74 <__sinit>
 8004a8a:	4b2e      	ldr	r3, [pc, #184]	; (8004b44 <__swsetup_r+0xd0>)
 8004a8c:	429c      	cmp	r4, r3
 8004a8e:	d10f      	bne.n	8004ab0 <__swsetup_r+0x3c>
 8004a90:	686c      	ldr	r4, [r5, #4]
 8004a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	0715      	lsls	r5, r2, #28
 8004a9a:	d42c      	bmi.n	8004af6 <__swsetup_r+0x82>
 8004a9c:	06d0      	lsls	r0, r2, #27
 8004a9e:	d411      	bmi.n	8004ac4 <__swsetup_r+0x50>
 8004aa0:	2209      	movs	r2, #9
 8004aa2:	6032      	str	r2, [r6, #0]
 8004aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aa8:	81a3      	strh	r3, [r4, #12]
 8004aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8004aae:	bd70      	pop	{r4, r5, r6, pc}
 8004ab0:	4b25      	ldr	r3, [pc, #148]	; (8004b48 <__swsetup_r+0xd4>)
 8004ab2:	429c      	cmp	r4, r3
 8004ab4:	d101      	bne.n	8004aba <__swsetup_r+0x46>
 8004ab6:	68ac      	ldr	r4, [r5, #8]
 8004ab8:	e7eb      	b.n	8004a92 <__swsetup_r+0x1e>
 8004aba:	4b24      	ldr	r3, [pc, #144]	; (8004b4c <__swsetup_r+0xd8>)
 8004abc:	429c      	cmp	r4, r3
 8004abe:	bf08      	it	eq
 8004ac0:	68ec      	ldreq	r4, [r5, #12]
 8004ac2:	e7e6      	b.n	8004a92 <__swsetup_r+0x1e>
 8004ac4:	0751      	lsls	r1, r2, #29
 8004ac6:	d512      	bpl.n	8004aee <__swsetup_r+0x7a>
 8004ac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004aca:	b141      	cbz	r1, 8004ade <__swsetup_r+0x6a>
 8004acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ad0:	4299      	cmp	r1, r3
 8004ad2:	d002      	beq.n	8004ada <__swsetup_r+0x66>
 8004ad4:	4630      	mov	r0, r6
 8004ad6:	f001 f8a3 	bl	8005c20 <_free_r>
 8004ada:	2300      	movs	r3, #0
 8004adc:	6363      	str	r3, [r4, #52]	; 0x34
 8004ade:	89a3      	ldrh	r3, [r4, #12]
 8004ae0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ae4:	81a3      	strh	r3, [r4, #12]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	6063      	str	r3, [r4, #4]
 8004aea:	6923      	ldr	r3, [r4, #16]
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	89a3      	ldrh	r3, [r4, #12]
 8004af0:	f043 0308 	orr.w	r3, r3, #8
 8004af4:	81a3      	strh	r3, [r4, #12]
 8004af6:	6923      	ldr	r3, [r4, #16]
 8004af8:	b94b      	cbnz	r3, 8004b0e <__swsetup_r+0x9a>
 8004afa:	89a3      	ldrh	r3, [r4, #12]
 8004afc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b04:	d003      	beq.n	8004b0e <__swsetup_r+0x9a>
 8004b06:	4621      	mov	r1, r4
 8004b08:	4630      	mov	r0, r6
 8004b0a:	f001 fb0b 	bl	8006124 <__smakebuf_r>
 8004b0e:	89a2      	ldrh	r2, [r4, #12]
 8004b10:	f012 0301 	ands.w	r3, r2, #1
 8004b14:	d00c      	beq.n	8004b30 <__swsetup_r+0xbc>
 8004b16:	2300      	movs	r3, #0
 8004b18:	60a3      	str	r3, [r4, #8]
 8004b1a:	6963      	ldr	r3, [r4, #20]
 8004b1c:	425b      	negs	r3, r3
 8004b1e:	61a3      	str	r3, [r4, #24]
 8004b20:	6923      	ldr	r3, [r4, #16]
 8004b22:	b953      	cbnz	r3, 8004b3a <__swsetup_r+0xc6>
 8004b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b28:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004b2c:	d1ba      	bne.n	8004aa4 <__swsetup_r+0x30>
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}
 8004b30:	0792      	lsls	r2, r2, #30
 8004b32:	bf58      	it	pl
 8004b34:	6963      	ldrpl	r3, [r4, #20]
 8004b36:	60a3      	str	r3, [r4, #8]
 8004b38:	e7f2      	b.n	8004b20 <__swsetup_r+0xac>
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	e7f7      	b.n	8004b2e <__swsetup_r+0xba>
 8004b3e:	bf00      	nop
 8004b40:	20000128 	.word	0x20000128
 8004b44:	08009284 	.word	0x08009284
 8004b48:	080092a4 	.word	0x080092a4
 8004b4c:	08009264 	.word	0x08009264

08004b50 <quorem>:
 8004b50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b54:	6903      	ldr	r3, [r0, #16]
 8004b56:	690c      	ldr	r4, [r1, #16]
 8004b58:	429c      	cmp	r4, r3
 8004b5a:	4680      	mov	r8, r0
 8004b5c:	f300 8082 	bgt.w	8004c64 <quorem+0x114>
 8004b60:	3c01      	subs	r4, #1
 8004b62:	f101 0714 	add.w	r7, r1, #20
 8004b66:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004b6a:	f100 0614 	add.w	r6, r0, #20
 8004b6e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004b72:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004b76:	eb06 030e 	add.w	r3, r6, lr
 8004b7a:	3501      	adds	r5, #1
 8004b7c:	eb07 090e 	add.w	r9, r7, lr
 8004b80:	9301      	str	r3, [sp, #4]
 8004b82:	fbb0 f5f5 	udiv	r5, r0, r5
 8004b86:	b395      	cbz	r5, 8004bee <quorem+0x9e>
 8004b88:	f04f 0a00 	mov.w	sl, #0
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	46b4      	mov	ip, r6
 8004b90:	46d3      	mov	fp, sl
 8004b92:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b96:	b293      	uxth	r3, r2
 8004b98:	fb05 a303 	mla	r3, r5, r3, sl
 8004b9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	ebab 0303 	sub.w	r3, fp, r3
 8004ba6:	0c12      	lsrs	r2, r2, #16
 8004ba8:	f8bc b000 	ldrh.w	fp, [ip]
 8004bac:	fb05 a202 	mla	r2, r5, r2, sl
 8004bb0:	fa13 f38b 	uxtah	r3, r3, fp
 8004bb4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004bb8:	fa1f fb82 	uxth.w	fp, r2
 8004bbc:	f8dc 2000 	ldr.w	r2, [ip]
 8004bc0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004bc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bce:	4581      	cmp	r9, r0
 8004bd0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004bd4:	f84c 3b04 	str.w	r3, [ip], #4
 8004bd8:	d2db      	bcs.n	8004b92 <quorem+0x42>
 8004bda:	f856 300e 	ldr.w	r3, [r6, lr]
 8004bde:	b933      	cbnz	r3, 8004bee <quorem+0x9e>
 8004be0:	9b01      	ldr	r3, [sp, #4]
 8004be2:	3b04      	subs	r3, #4
 8004be4:	429e      	cmp	r6, r3
 8004be6:	461a      	mov	r2, r3
 8004be8:	d330      	bcc.n	8004c4c <quorem+0xfc>
 8004bea:	f8c8 4010 	str.w	r4, [r8, #16]
 8004bee:	4640      	mov	r0, r8
 8004bf0:	f001 ff31 	bl	8006a56 <__mcmp>
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	db25      	blt.n	8004c44 <quorem+0xf4>
 8004bf8:	3501      	adds	r5, #1
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	f04f 0e00 	mov.w	lr, #0
 8004c00:	f857 2b04 	ldr.w	r2, [r7], #4
 8004c04:	f8d0 c000 	ldr.w	ip, [r0]
 8004c08:	b293      	uxth	r3, r2
 8004c0a:	ebae 0303 	sub.w	r3, lr, r3
 8004c0e:	0c12      	lsrs	r2, r2, #16
 8004c10:	fa13 f38c 	uxtah	r3, r3, ip
 8004c14:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004c18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c22:	45b9      	cmp	r9, r7
 8004c24:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004c28:	f840 3b04 	str.w	r3, [r0], #4
 8004c2c:	d2e8      	bcs.n	8004c00 <quorem+0xb0>
 8004c2e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004c32:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004c36:	b92a      	cbnz	r2, 8004c44 <quorem+0xf4>
 8004c38:	3b04      	subs	r3, #4
 8004c3a:	429e      	cmp	r6, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	d30b      	bcc.n	8004c58 <quorem+0x108>
 8004c40:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c44:	4628      	mov	r0, r5
 8004c46:	b003      	add	sp, #12
 8004c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c4c:	6812      	ldr	r2, [r2, #0]
 8004c4e:	3b04      	subs	r3, #4
 8004c50:	2a00      	cmp	r2, #0
 8004c52:	d1ca      	bne.n	8004bea <quorem+0x9a>
 8004c54:	3c01      	subs	r4, #1
 8004c56:	e7c5      	b.n	8004be4 <quorem+0x94>
 8004c58:	6812      	ldr	r2, [r2, #0]
 8004c5a:	3b04      	subs	r3, #4
 8004c5c:	2a00      	cmp	r2, #0
 8004c5e:	d1ef      	bne.n	8004c40 <quorem+0xf0>
 8004c60:	3c01      	subs	r4, #1
 8004c62:	e7ea      	b.n	8004c3a <quorem+0xea>
 8004c64:	2000      	movs	r0, #0
 8004c66:	e7ee      	b.n	8004c46 <quorem+0xf6>

08004c68 <_dtoa_r>:
 8004c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6c:	ec57 6b10 	vmov	r6, r7, d0
 8004c70:	b097      	sub	sp, #92	; 0x5c
 8004c72:	e9cd 6700 	strd	r6, r7, [sp]
 8004c76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004c78:	9107      	str	r1, [sp, #28]
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	920a      	str	r2, [sp, #40]	; 0x28
 8004c7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c80:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004c82:	b93e      	cbnz	r6, 8004c94 <_dtoa_r+0x2c>
 8004c84:	2010      	movs	r0, #16
 8004c86:	f001 fa8d 	bl	80061a4 <malloc>
 8004c8a:	6260      	str	r0, [r4, #36]	; 0x24
 8004c8c:	6046      	str	r6, [r0, #4]
 8004c8e:	6086      	str	r6, [r0, #8]
 8004c90:	6006      	str	r6, [r0, #0]
 8004c92:	60c6      	str	r6, [r0, #12]
 8004c94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c96:	6819      	ldr	r1, [r3, #0]
 8004c98:	b151      	cbz	r1, 8004cb0 <_dtoa_r+0x48>
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	604a      	str	r2, [r1, #4]
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	4093      	lsls	r3, r2
 8004ca2:	608b      	str	r3, [r1, #8]
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f001 fd01 	bl	80066ac <_Bfree>
 8004caa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	9b01      	ldr	r3, [sp, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	bfbf      	itttt	lt
 8004cb6:	2301      	movlt	r3, #1
 8004cb8:	602b      	strlt	r3, [r5, #0]
 8004cba:	9b01      	ldrlt	r3, [sp, #4]
 8004cbc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004cc0:	bfb2      	itee	lt
 8004cc2:	9301      	strlt	r3, [sp, #4]
 8004cc4:	2300      	movge	r3, #0
 8004cc6:	602b      	strge	r3, [r5, #0]
 8004cc8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004ccc:	4ba8      	ldr	r3, [pc, #672]	; (8004f70 <_dtoa_r+0x308>)
 8004cce:	ea33 0308 	bics.w	r3, r3, r8
 8004cd2:	d11b      	bne.n	8004d0c <_dtoa_r+0xa4>
 8004cd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004cd6:	f242 730f 	movw	r3, #9999	; 0x270f
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	9b00      	ldr	r3, [sp, #0]
 8004cde:	b923      	cbnz	r3, 8004cea <_dtoa_r+0x82>
 8004ce0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	f000 8578 	beq.w	80057da <_dtoa_r+0xb72>
 8004cea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cec:	b953      	cbnz	r3, 8004d04 <_dtoa_r+0x9c>
 8004cee:	4ba1      	ldr	r3, [pc, #644]	; (8004f74 <_dtoa_r+0x30c>)
 8004cf0:	e021      	b.n	8004d36 <_dtoa_r+0xce>
 8004cf2:	4ba1      	ldr	r3, [pc, #644]	; (8004f78 <_dtoa_r+0x310>)
 8004cf4:	9302      	str	r3, [sp, #8]
 8004cf6:	3308      	adds	r3, #8
 8004cf8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	9802      	ldr	r0, [sp, #8]
 8004cfe:	b017      	add	sp, #92	; 0x5c
 8004d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d04:	4b9b      	ldr	r3, [pc, #620]	; (8004f74 <_dtoa_r+0x30c>)
 8004d06:	9302      	str	r3, [sp, #8]
 8004d08:	3303      	adds	r3, #3
 8004d0a:	e7f5      	b.n	8004cf8 <_dtoa_r+0x90>
 8004d0c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004d10:	2200      	movs	r2, #0
 8004d12:	2300      	movs	r3, #0
 8004d14:	4630      	mov	r0, r6
 8004d16:	4639      	mov	r1, r7
 8004d18:	f7fb feda 	bl	8000ad0 <__aeabi_dcmpeq>
 8004d1c:	4681      	mov	r9, r0
 8004d1e:	b160      	cbz	r0, 8004d3a <_dtoa_r+0xd2>
 8004d20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d22:	2301      	movs	r3, #1
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8553 	beq.w	80057d4 <_dtoa_r+0xb6c>
 8004d2e:	4b93      	ldr	r3, [pc, #588]	; (8004f7c <_dtoa_r+0x314>)
 8004d30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	9302      	str	r3, [sp, #8]
 8004d38:	e7e0      	b.n	8004cfc <_dtoa_r+0x94>
 8004d3a:	aa14      	add	r2, sp, #80	; 0x50
 8004d3c:	a915      	add	r1, sp, #84	; 0x54
 8004d3e:	ec47 6b10 	vmov	d0, r6, r7
 8004d42:	4620      	mov	r0, r4
 8004d44:	f001 feff 	bl	8006b46 <__d2b>
 8004d48:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004d4c:	4682      	mov	sl, r0
 8004d4e:	2d00      	cmp	r5, #0
 8004d50:	d07e      	beq.n	8004e50 <_dtoa_r+0x1e8>
 8004d52:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004d56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004d60:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d64:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8004d68:	2200      	movs	r2, #0
 8004d6a:	4b85      	ldr	r3, [pc, #532]	; (8004f80 <_dtoa_r+0x318>)
 8004d6c:	f7fb fa94 	bl	8000298 <__aeabi_dsub>
 8004d70:	a379      	add	r3, pc, #484	; (adr r3, 8004f58 <_dtoa_r+0x2f0>)
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	f7fb fc43 	bl	8000600 <__aeabi_dmul>
 8004d7a:	a379      	add	r3, pc, #484	; (adr r3, 8004f60 <_dtoa_r+0x2f8>)
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	f7fb fa8c 	bl	800029c <__adddf3>
 8004d84:	4606      	mov	r6, r0
 8004d86:	4628      	mov	r0, r5
 8004d88:	460f      	mov	r7, r1
 8004d8a:	f7fb fbd3 	bl	8000534 <__aeabi_i2d>
 8004d8e:	a376      	add	r3, pc, #472	; (adr r3, 8004f68 <_dtoa_r+0x300>)
 8004d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d94:	f7fb fc34 	bl	8000600 <__aeabi_dmul>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4630      	mov	r0, r6
 8004d9e:	4639      	mov	r1, r7
 8004da0:	f7fb fa7c 	bl	800029c <__adddf3>
 8004da4:	4606      	mov	r6, r0
 8004da6:	460f      	mov	r7, r1
 8004da8:	f7fb feda 	bl	8000b60 <__aeabi_d2iz>
 8004dac:	2200      	movs	r2, #0
 8004dae:	4683      	mov	fp, r0
 8004db0:	2300      	movs	r3, #0
 8004db2:	4630      	mov	r0, r6
 8004db4:	4639      	mov	r1, r7
 8004db6:	f7fb fe95 	bl	8000ae4 <__aeabi_dcmplt>
 8004dba:	b158      	cbz	r0, 8004dd4 <_dtoa_r+0x16c>
 8004dbc:	4658      	mov	r0, fp
 8004dbe:	f7fb fbb9 	bl	8000534 <__aeabi_i2d>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	4639      	mov	r1, r7
 8004dca:	f7fb fe81 	bl	8000ad0 <__aeabi_dcmpeq>
 8004dce:	b908      	cbnz	r0, 8004dd4 <_dtoa_r+0x16c>
 8004dd0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004dd4:	f1bb 0f16 	cmp.w	fp, #22
 8004dd8:	d859      	bhi.n	8004e8e <_dtoa_r+0x226>
 8004dda:	496a      	ldr	r1, [pc, #424]	; (8004f84 <_dtoa_r+0x31c>)
 8004ddc:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004de0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004de4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004de8:	f7fb fe9a 	bl	8000b20 <__aeabi_dcmpgt>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	d050      	beq.n	8004e92 <_dtoa_r+0x22a>
 8004df0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004df4:	2300      	movs	r3, #0
 8004df6:	930e      	str	r3, [sp, #56]	; 0x38
 8004df8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004dfa:	1b5d      	subs	r5, r3, r5
 8004dfc:	1e6b      	subs	r3, r5, #1
 8004dfe:	9306      	str	r3, [sp, #24]
 8004e00:	bf45      	ittet	mi
 8004e02:	f1c5 0301 	rsbmi	r3, r5, #1
 8004e06:	9305      	strmi	r3, [sp, #20]
 8004e08:	2300      	movpl	r3, #0
 8004e0a:	2300      	movmi	r3, #0
 8004e0c:	bf4c      	ite	mi
 8004e0e:	9306      	strmi	r3, [sp, #24]
 8004e10:	9305      	strpl	r3, [sp, #20]
 8004e12:	f1bb 0f00 	cmp.w	fp, #0
 8004e16:	db3e      	blt.n	8004e96 <_dtoa_r+0x22e>
 8004e18:	9b06      	ldr	r3, [sp, #24]
 8004e1a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004e1e:	445b      	add	r3, fp
 8004e20:	9306      	str	r3, [sp, #24]
 8004e22:	2300      	movs	r3, #0
 8004e24:	9308      	str	r3, [sp, #32]
 8004e26:	9b07      	ldr	r3, [sp, #28]
 8004e28:	2b09      	cmp	r3, #9
 8004e2a:	f200 80af 	bhi.w	8004f8c <_dtoa_r+0x324>
 8004e2e:	2b05      	cmp	r3, #5
 8004e30:	bfc4      	itt	gt
 8004e32:	3b04      	subgt	r3, #4
 8004e34:	9307      	strgt	r3, [sp, #28]
 8004e36:	9b07      	ldr	r3, [sp, #28]
 8004e38:	f1a3 0302 	sub.w	r3, r3, #2
 8004e3c:	bfcc      	ite	gt
 8004e3e:	2600      	movgt	r6, #0
 8004e40:	2601      	movle	r6, #1
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	f200 80ae 	bhi.w	8004fa4 <_dtoa_r+0x33c>
 8004e48:	e8df f003 	tbb	[pc, r3]
 8004e4c:	772f8482 	.word	0x772f8482
 8004e50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e52:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8004e54:	441d      	add	r5, r3
 8004e56:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004e5a:	2b20      	cmp	r3, #32
 8004e5c:	dd11      	ble.n	8004e82 <_dtoa_r+0x21a>
 8004e5e:	9a00      	ldr	r2, [sp, #0]
 8004e60:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004e64:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004e68:	fa22 f000 	lsr.w	r0, r2, r0
 8004e6c:	fa08 f303 	lsl.w	r3, r8, r3
 8004e70:	4318      	orrs	r0, r3
 8004e72:	f7fb fb4f 	bl	8000514 <__aeabi_ui2d>
 8004e76:	2301      	movs	r3, #1
 8004e78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004e7c:	3d01      	subs	r5, #1
 8004e7e:	9312      	str	r3, [sp, #72]	; 0x48
 8004e80:	e772      	b.n	8004d68 <_dtoa_r+0x100>
 8004e82:	f1c3 0020 	rsb	r0, r3, #32
 8004e86:	9b00      	ldr	r3, [sp, #0]
 8004e88:	fa03 f000 	lsl.w	r0, r3, r0
 8004e8c:	e7f1      	b.n	8004e72 <_dtoa_r+0x20a>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e7b1      	b.n	8004df6 <_dtoa_r+0x18e>
 8004e92:	900e      	str	r0, [sp, #56]	; 0x38
 8004e94:	e7b0      	b.n	8004df8 <_dtoa_r+0x190>
 8004e96:	9b05      	ldr	r3, [sp, #20]
 8004e98:	eba3 030b 	sub.w	r3, r3, fp
 8004e9c:	9305      	str	r3, [sp, #20]
 8004e9e:	f1cb 0300 	rsb	r3, fp, #0
 8004ea2:	9308      	str	r3, [sp, #32]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ea8:	e7bd      	b.n	8004e26 <_dtoa_r+0x1be>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	9309      	str	r3, [sp, #36]	; 0x24
 8004eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	dd7a      	ble.n	8004faa <_dtoa_r+0x342>
 8004eb4:	9304      	str	r3, [sp, #16]
 8004eb6:	9303      	str	r3, [sp, #12]
 8004eb8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004eba:	2200      	movs	r2, #0
 8004ebc:	606a      	str	r2, [r5, #4]
 8004ebe:	2104      	movs	r1, #4
 8004ec0:	f101 0214 	add.w	r2, r1, #20
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d975      	bls.n	8004fb4 <_dtoa_r+0x34c>
 8004ec8:	6869      	ldr	r1, [r5, #4]
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f001 fbba 	bl	8006644 <_Balloc>
 8004ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ed2:	6028      	str	r0, [r5, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	9302      	str	r3, [sp, #8]
 8004ed8:	9b03      	ldr	r3, [sp, #12]
 8004eda:	2b0e      	cmp	r3, #14
 8004edc:	f200 80e5 	bhi.w	80050aa <_dtoa_r+0x442>
 8004ee0:	2e00      	cmp	r6, #0
 8004ee2:	f000 80e2 	beq.w	80050aa <_dtoa_r+0x442>
 8004ee6:	ed9d 7b00 	vldr	d7, [sp]
 8004eea:	f1bb 0f00 	cmp.w	fp, #0
 8004eee:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004ef2:	dd74      	ble.n	8004fde <_dtoa_r+0x376>
 8004ef4:	4a23      	ldr	r2, [pc, #140]	; (8004f84 <_dtoa_r+0x31c>)
 8004ef6:	f00b 030f 	and.w	r3, fp, #15
 8004efa:	ea4f 162b 	mov.w	r6, fp, asr #4
 8004efe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f02:	06f0      	lsls	r0, r6, #27
 8004f04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f08:	d559      	bpl.n	8004fbe <_dtoa_r+0x356>
 8004f0a:	4b1f      	ldr	r3, [pc, #124]	; (8004f88 <_dtoa_r+0x320>)
 8004f0c:	ec51 0b17 	vmov	r0, r1, d7
 8004f10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f14:	f7fb fc9e 	bl	8000854 <__aeabi_ddiv>
 8004f18:	e9cd 0100 	strd	r0, r1, [sp]
 8004f1c:	f006 060f 	and.w	r6, r6, #15
 8004f20:	2503      	movs	r5, #3
 8004f22:	4f19      	ldr	r7, [pc, #100]	; (8004f88 <_dtoa_r+0x320>)
 8004f24:	2e00      	cmp	r6, #0
 8004f26:	d14c      	bne.n	8004fc2 <_dtoa_r+0x35a>
 8004f28:	4642      	mov	r2, r8
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f30:	f7fb fc90 	bl	8000854 <__aeabi_ddiv>
 8004f34:	e9cd 0100 	strd	r0, r1, [sp]
 8004f38:	e06a      	b.n	8005010 <_dtoa_r+0x3a8>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f40:	445b      	add	r3, fp
 8004f42:	9304      	str	r3, [sp, #16]
 8004f44:	3301      	adds	r3, #1
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	9303      	str	r3, [sp, #12]
 8004f4a:	bfb8      	it	lt
 8004f4c:	2301      	movlt	r3, #1
 8004f4e:	e7b3      	b.n	8004eb8 <_dtoa_r+0x250>
 8004f50:	2300      	movs	r3, #0
 8004f52:	e7ab      	b.n	8004eac <_dtoa_r+0x244>
 8004f54:	2300      	movs	r3, #0
 8004f56:	e7f1      	b.n	8004f3c <_dtoa_r+0x2d4>
 8004f58:	636f4361 	.word	0x636f4361
 8004f5c:	3fd287a7 	.word	0x3fd287a7
 8004f60:	8b60c8b3 	.word	0x8b60c8b3
 8004f64:	3fc68a28 	.word	0x3fc68a28
 8004f68:	509f79fb 	.word	0x509f79fb
 8004f6c:	3fd34413 	.word	0x3fd34413
 8004f70:	7ff00000 	.word	0x7ff00000
 8004f74:	0800925f 	.word	0x0800925f
 8004f78:	08009256 	.word	0x08009256
 8004f7c:	08009235 	.word	0x08009235
 8004f80:	3ff80000 	.word	0x3ff80000
 8004f84:	080092f0 	.word	0x080092f0
 8004f88:	080092c8 	.word	0x080092c8
 8004f8c:	2601      	movs	r6, #1
 8004f8e:	2300      	movs	r3, #0
 8004f90:	9307      	str	r3, [sp, #28]
 8004f92:	9609      	str	r6, [sp, #36]	; 0x24
 8004f94:	f04f 33ff 	mov.w	r3, #4294967295
 8004f98:	9304      	str	r3, [sp, #16]
 8004f9a:	9303      	str	r3, [sp, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2312      	movs	r3, #18
 8004fa0:	920a      	str	r2, [sp, #40]	; 0x28
 8004fa2:	e789      	b.n	8004eb8 <_dtoa_r+0x250>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa8:	e7f4      	b.n	8004f94 <_dtoa_r+0x32c>
 8004faa:	2301      	movs	r3, #1
 8004fac:	9304      	str	r3, [sp, #16]
 8004fae:	9303      	str	r3, [sp, #12]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	e7f5      	b.n	8004fa0 <_dtoa_r+0x338>
 8004fb4:	686a      	ldr	r2, [r5, #4]
 8004fb6:	3201      	adds	r2, #1
 8004fb8:	606a      	str	r2, [r5, #4]
 8004fba:	0049      	lsls	r1, r1, #1
 8004fbc:	e780      	b.n	8004ec0 <_dtoa_r+0x258>
 8004fbe:	2502      	movs	r5, #2
 8004fc0:	e7af      	b.n	8004f22 <_dtoa_r+0x2ba>
 8004fc2:	07f1      	lsls	r1, r6, #31
 8004fc4:	d508      	bpl.n	8004fd8 <_dtoa_r+0x370>
 8004fc6:	4640      	mov	r0, r8
 8004fc8:	4649      	mov	r1, r9
 8004fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fce:	f7fb fb17 	bl	8000600 <__aeabi_dmul>
 8004fd2:	3501      	adds	r5, #1
 8004fd4:	4680      	mov	r8, r0
 8004fd6:	4689      	mov	r9, r1
 8004fd8:	1076      	asrs	r6, r6, #1
 8004fda:	3708      	adds	r7, #8
 8004fdc:	e7a2      	b.n	8004f24 <_dtoa_r+0x2bc>
 8004fde:	f000 809d 	beq.w	800511c <_dtoa_r+0x4b4>
 8004fe2:	f1cb 0600 	rsb	r6, fp, #0
 8004fe6:	4b9f      	ldr	r3, [pc, #636]	; (8005264 <_dtoa_r+0x5fc>)
 8004fe8:	4f9f      	ldr	r7, [pc, #636]	; (8005268 <_dtoa_r+0x600>)
 8004fea:	f006 020f 	and.w	r2, r6, #15
 8004fee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ffa:	f7fb fb01 	bl	8000600 <__aeabi_dmul>
 8004ffe:	e9cd 0100 	strd	r0, r1, [sp]
 8005002:	1136      	asrs	r6, r6, #4
 8005004:	2300      	movs	r3, #0
 8005006:	2502      	movs	r5, #2
 8005008:	2e00      	cmp	r6, #0
 800500a:	d17c      	bne.n	8005106 <_dtoa_r+0x49e>
 800500c:	2b00      	cmp	r3, #0
 800500e:	d191      	bne.n	8004f34 <_dtoa_r+0x2cc>
 8005010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 8084 	beq.w	8005120 <_dtoa_r+0x4b8>
 8005018:	e9dd 8900 	ldrd	r8, r9, [sp]
 800501c:	2200      	movs	r2, #0
 800501e:	4b93      	ldr	r3, [pc, #588]	; (800526c <_dtoa_r+0x604>)
 8005020:	4640      	mov	r0, r8
 8005022:	4649      	mov	r1, r9
 8005024:	f7fb fd5e 	bl	8000ae4 <__aeabi_dcmplt>
 8005028:	2800      	cmp	r0, #0
 800502a:	d079      	beq.n	8005120 <_dtoa_r+0x4b8>
 800502c:	9b03      	ldr	r3, [sp, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d076      	beq.n	8005120 <_dtoa_r+0x4b8>
 8005032:	9b04      	ldr	r3, [sp, #16]
 8005034:	2b00      	cmp	r3, #0
 8005036:	dd34      	ble.n	80050a2 <_dtoa_r+0x43a>
 8005038:	2200      	movs	r2, #0
 800503a:	4b8d      	ldr	r3, [pc, #564]	; (8005270 <_dtoa_r+0x608>)
 800503c:	4640      	mov	r0, r8
 800503e:	4649      	mov	r1, r9
 8005040:	f7fb fade 	bl	8000600 <__aeabi_dmul>
 8005044:	e9cd 0100 	strd	r0, r1, [sp]
 8005048:	9e04      	ldr	r6, [sp, #16]
 800504a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800504e:	3501      	adds	r5, #1
 8005050:	4628      	mov	r0, r5
 8005052:	f7fb fa6f 	bl	8000534 <__aeabi_i2d>
 8005056:	e9dd 2300 	ldrd	r2, r3, [sp]
 800505a:	f7fb fad1 	bl	8000600 <__aeabi_dmul>
 800505e:	2200      	movs	r2, #0
 8005060:	4b84      	ldr	r3, [pc, #528]	; (8005274 <_dtoa_r+0x60c>)
 8005062:	f7fb f91b 	bl	800029c <__adddf3>
 8005066:	4680      	mov	r8, r0
 8005068:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800506c:	2e00      	cmp	r6, #0
 800506e:	d15a      	bne.n	8005126 <_dtoa_r+0x4be>
 8005070:	2200      	movs	r2, #0
 8005072:	4b81      	ldr	r3, [pc, #516]	; (8005278 <_dtoa_r+0x610>)
 8005074:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005078:	f7fb f90e 	bl	8000298 <__aeabi_dsub>
 800507c:	4642      	mov	r2, r8
 800507e:	464b      	mov	r3, r9
 8005080:	e9cd 0100 	strd	r0, r1, [sp]
 8005084:	f7fb fd4c 	bl	8000b20 <__aeabi_dcmpgt>
 8005088:	2800      	cmp	r0, #0
 800508a:	f040 829b 	bne.w	80055c4 <_dtoa_r+0x95c>
 800508e:	4642      	mov	r2, r8
 8005090:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005094:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005098:	f7fb fd24 	bl	8000ae4 <__aeabi_dcmplt>
 800509c:	2800      	cmp	r0, #0
 800509e:	f040 828f 	bne.w	80055c0 <_dtoa_r+0x958>
 80050a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80050a6:	e9cd 2300 	strd	r2, r3, [sp]
 80050aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f2c0 8150 	blt.w	8005352 <_dtoa_r+0x6ea>
 80050b2:	f1bb 0f0e 	cmp.w	fp, #14
 80050b6:	f300 814c 	bgt.w	8005352 <_dtoa_r+0x6ea>
 80050ba:	4b6a      	ldr	r3, [pc, #424]	; (8005264 <_dtoa_r+0x5fc>)
 80050bc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80050c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f280 80da 	bge.w	8005280 <_dtoa_r+0x618>
 80050cc:	9b03      	ldr	r3, [sp, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f300 80d6 	bgt.w	8005280 <_dtoa_r+0x618>
 80050d4:	f040 8273 	bne.w	80055be <_dtoa_r+0x956>
 80050d8:	2200      	movs	r2, #0
 80050da:	4b67      	ldr	r3, [pc, #412]	; (8005278 <_dtoa_r+0x610>)
 80050dc:	4640      	mov	r0, r8
 80050de:	4649      	mov	r1, r9
 80050e0:	f7fb fa8e 	bl	8000600 <__aeabi_dmul>
 80050e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050e8:	f7fb fd10 	bl	8000b0c <__aeabi_dcmpge>
 80050ec:	9e03      	ldr	r6, [sp, #12]
 80050ee:	4637      	mov	r7, r6
 80050f0:	2800      	cmp	r0, #0
 80050f2:	f040 824a 	bne.w	800558a <_dtoa_r+0x922>
 80050f6:	9b02      	ldr	r3, [sp, #8]
 80050f8:	9a02      	ldr	r2, [sp, #8]
 80050fa:	1c5d      	adds	r5, r3, #1
 80050fc:	2331      	movs	r3, #49	; 0x31
 80050fe:	7013      	strb	r3, [r2, #0]
 8005100:	f10b 0b01 	add.w	fp, fp, #1
 8005104:	e245      	b.n	8005592 <_dtoa_r+0x92a>
 8005106:	07f2      	lsls	r2, r6, #31
 8005108:	d505      	bpl.n	8005116 <_dtoa_r+0x4ae>
 800510a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800510e:	f7fb fa77 	bl	8000600 <__aeabi_dmul>
 8005112:	3501      	adds	r5, #1
 8005114:	2301      	movs	r3, #1
 8005116:	1076      	asrs	r6, r6, #1
 8005118:	3708      	adds	r7, #8
 800511a:	e775      	b.n	8005008 <_dtoa_r+0x3a0>
 800511c:	2502      	movs	r5, #2
 800511e:	e777      	b.n	8005010 <_dtoa_r+0x3a8>
 8005120:	465f      	mov	r7, fp
 8005122:	9e03      	ldr	r6, [sp, #12]
 8005124:	e794      	b.n	8005050 <_dtoa_r+0x3e8>
 8005126:	9a02      	ldr	r2, [sp, #8]
 8005128:	4b4e      	ldr	r3, [pc, #312]	; (8005264 <_dtoa_r+0x5fc>)
 800512a:	4432      	add	r2, r6
 800512c:	9213      	str	r2, [sp, #76]	; 0x4c
 800512e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005130:	1e71      	subs	r1, r6, #1
 8005132:	2a00      	cmp	r2, #0
 8005134:	d048      	beq.n	80051c8 <_dtoa_r+0x560>
 8005136:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800513a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513e:	2000      	movs	r0, #0
 8005140:	494e      	ldr	r1, [pc, #312]	; (800527c <_dtoa_r+0x614>)
 8005142:	f7fb fb87 	bl	8000854 <__aeabi_ddiv>
 8005146:	4642      	mov	r2, r8
 8005148:	464b      	mov	r3, r9
 800514a:	f7fb f8a5 	bl	8000298 <__aeabi_dsub>
 800514e:	9d02      	ldr	r5, [sp, #8]
 8005150:	4680      	mov	r8, r0
 8005152:	4689      	mov	r9, r1
 8005154:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005158:	f7fb fd02 	bl	8000b60 <__aeabi_d2iz>
 800515c:	4606      	mov	r6, r0
 800515e:	f7fb f9e9 	bl	8000534 <__aeabi_i2d>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	e9dd 0100 	ldrd	r0, r1, [sp]
 800516a:	f7fb f895 	bl	8000298 <__aeabi_dsub>
 800516e:	3630      	adds	r6, #48	; 0x30
 8005170:	f805 6b01 	strb.w	r6, [r5], #1
 8005174:	4642      	mov	r2, r8
 8005176:	464b      	mov	r3, r9
 8005178:	e9cd 0100 	strd	r0, r1, [sp]
 800517c:	f7fb fcb2 	bl	8000ae4 <__aeabi_dcmplt>
 8005180:	2800      	cmp	r0, #0
 8005182:	d165      	bne.n	8005250 <_dtoa_r+0x5e8>
 8005184:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005188:	2000      	movs	r0, #0
 800518a:	4938      	ldr	r1, [pc, #224]	; (800526c <_dtoa_r+0x604>)
 800518c:	f7fb f884 	bl	8000298 <__aeabi_dsub>
 8005190:	4642      	mov	r2, r8
 8005192:	464b      	mov	r3, r9
 8005194:	f7fb fca6 	bl	8000ae4 <__aeabi_dcmplt>
 8005198:	2800      	cmp	r0, #0
 800519a:	f040 80ba 	bne.w	8005312 <_dtoa_r+0x6aa>
 800519e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80051a0:	429d      	cmp	r5, r3
 80051a2:	f43f af7e 	beq.w	80050a2 <_dtoa_r+0x43a>
 80051a6:	2200      	movs	r2, #0
 80051a8:	4b31      	ldr	r3, [pc, #196]	; (8005270 <_dtoa_r+0x608>)
 80051aa:	4640      	mov	r0, r8
 80051ac:	4649      	mov	r1, r9
 80051ae:	f7fb fa27 	bl	8000600 <__aeabi_dmul>
 80051b2:	2200      	movs	r2, #0
 80051b4:	4680      	mov	r8, r0
 80051b6:	4689      	mov	r9, r1
 80051b8:	4b2d      	ldr	r3, [pc, #180]	; (8005270 <_dtoa_r+0x608>)
 80051ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051be:	f7fb fa1f 	bl	8000600 <__aeabi_dmul>
 80051c2:	e9cd 0100 	strd	r0, r1, [sp]
 80051c6:	e7c5      	b.n	8005154 <_dtoa_r+0x4ec>
 80051c8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80051cc:	4642      	mov	r2, r8
 80051ce:	464b      	mov	r3, r9
 80051d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051d4:	f7fb fa14 	bl	8000600 <__aeabi_dmul>
 80051d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051dc:	9d02      	ldr	r5, [sp, #8]
 80051de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051e2:	f7fb fcbd 	bl	8000b60 <__aeabi_d2iz>
 80051e6:	4606      	mov	r6, r0
 80051e8:	f7fb f9a4 	bl	8000534 <__aeabi_i2d>
 80051ec:	3630      	adds	r6, #48	; 0x30
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051f6:	f7fb f84f 	bl	8000298 <__aeabi_dsub>
 80051fa:	f805 6b01 	strb.w	r6, [r5], #1
 80051fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005200:	42ab      	cmp	r3, r5
 8005202:	4680      	mov	r8, r0
 8005204:	4689      	mov	r9, r1
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	d125      	bne.n	8005258 <_dtoa_r+0x5f0>
 800520c:	4b1b      	ldr	r3, [pc, #108]	; (800527c <_dtoa_r+0x614>)
 800520e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005212:	f7fb f843 	bl	800029c <__adddf3>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4640      	mov	r0, r8
 800521c:	4649      	mov	r1, r9
 800521e:	f7fb fc7f 	bl	8000b20 <__aeabi_dcmpgt>
 8005222:	2800      	cmp	r0, #0
 8005224:	d175      	bne.n	8005312 <_dtoa_r+0x6aa>
 8005226:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800522a:	2000      	movs	r0, #0
 800522c:	4913      	ldr	r1, [pc, #76]	; (800527c <_dtoa_r+0x614>)
 800522e:	f7fb f833 	bl	8000298 <__aeabi_dsub>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	4640      	mov	r0, r8
 8005238:	4649      	mov	r1, r9
 800523a:	f7fb fc53 	bl	8000ae4 <__aeabi_dcmplt>
 800523e:	2800      	cmp	r0, #0
 8005240:	f43f af2f 	beq.w	80050a2 <_dtoa_r+0x43a>
 8005244:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005248:	2b30      	cmp	r3, #48	; 0x30
 800524a:	f105 32ff 	add.w	r2, r5, #4294967295
 800524e:	d001      	beq.n	8005254 <_dtoa_r+0x5ec>
 8005250:	46bb      	mov	fp, r7
 8005252:	e04d      	b.n	80052f0 <_dtoa_r+0x688>
 8005254:	4615      	mov	r5, r2
 8005256:	e7f5      	b.n	8005244 <_dtoa_r+0x5dc>
 8005258:	4b05      	ldr	r3, [pc, #20]	; (8005270 <_dtoa_r+0x608>)
 800525a:	f7fb f9d1 	bl	8000600 <__aeabi_dmul>
 800525e:	e9cd 0100 	strd	r0, r1, [sp]
 8005262:	e7bc      	b.n	80051de <_dtoa_r+0x576>
 8005264:	080092f0 	.word	0x080092f0
 8005268:	080092c8 	.word	0x080092c8
 800526c:	3ff00000 	.word	0x3ff00000
 8005270:	40240000 	.word	0x40240000
 8005274:	401c0000 	.word	0x401c0000
 8005278:	40140000 	.word	0x40140000
 800527c:	3fe00000 	.word	0x3fe00000
 8005280:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005284:	9d02      	ldr	r5, [sp, #8]
 8005286:	4642      	mov	r2, r8
 8005288:	464b      	mov	r3, r9
 800528a:	4630      	mov	r0, r6
 800528c:	4639      	mov	r1, r7
 800528e:	f7fb fae1 	bl	8000854 <__aeabi_ddiv>
 8005292:	f7fb fc65 	bl	8000b60 <__aeabi_d2iz>
 8005296:	9000      	str	r0, [sp, #0]
 8005298:	f7fb f94c 	bl	8000534 <__aeabi_i2d>
 800529c:	4642      	mov	r2, r8
 800529e:	464b      	mov	r3, r9
 80052a0:	f7fb f9ae 	bl	8000600 <__aeabi_dmul>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4630      	mov	r0, r6
 80052aa:	4639      	mov	r1, r7
 80052ac:	f7fa fff4 	bl	8000298 <__aeabi_dsub>
 80052b0:	9e00      	ldr	r6, [sp, #0]
 80052b2:	9f03      	ldr	r7, [sp, #12]
 80052b4:	3630      	adds	r6, #48	; 0x30
 80052b6:	f805 6b01 	strb.w	r6, [r5], #1
 80052ba:	9e02      	ldr	r6, [sp, #8]
 80052bc:	1bae      	subs	r6, r5, r6
 80052be:	42b7      	cmp	r7, r6
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	d138      	bne.n	8005338 <_dtoa_r+0x6d0>
 80052c6:	f7fa ffe9 	bl	800029c <__adddf3>
 80052ca:	4606      	mov	r6, r0
 80052cc:	460f      	mov	r7, r1
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	4640      	mov	r0, r8
 80052d4:	4649      	mov	r1, r9
 80052d6:	f7fb fc05 	bl	8000ae4 <__aeabi_dcmplt>
 80052da:	b9c8      	cbnz	r0, 8005310 <_dtoa_r+0x6a8>
 80052dc:	4632      	mov	r2, r6
 80052de:	463b      	mov	r3, r7
 80052e0:	4640      	mov	r0, r8
 80052e2:	4649      	mov	r1, r9
 80052e4:	f7fb fbf4 	bl	8000ad0 <__aeabi_dcmpeq>
 80052e8:	b110      	cbz	r0, 80052f0 <_dtoa_r+0x688>
 80052ea:	9b00      	ldr	r3, [sp, #0]
 80052ec:	07db      	lsls	r3, r3, #31
 80052ee:	d40f      	bmi.n	8005310 <_dtoa_r+0x6a8>
 80052f0:	4651      	mov	r1, sl
 80052f2:	4620      	mov	r0, r4
 80052f4:	f001 f9da 	bl	80066ac <_Bfree>
 80052f8:	2300      	movs	r3, #0
 80052fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80052fc:	702b      	strb	r3, [r5, #0]
 80052fe:	f10b 0301 	add.w	r3, fp, #1
 8005302:	6013      	str	r3, [r2, #0]
 8005304:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005306:	2b00      	cmp	r3, #0
 8005308:	f43f acf8 	beq.w	8004cfc <_dtoa_r+0x94>
 800530c:	601d      	str	r5, [r3, #0]
 800530e:	e4f5      	b.n	8004cfc <_dtoa_r+0x94>
 8005310:	465f      	mov	r7, fp
 8005312:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005316:	2a39      	cmp	r2, #57	; 0x39
 8005318:	f105 33ff 	add.w	r3, r5, #4294967295
 800531c:	d106      	bne.n	800532c <_dtoa_r+0x6c4>
 800531e:	9a02      	ldr	r2, [sp, #8]
 8005320:	429a      	cmp	r2, r3
 8005322:	d107      	bne.n	8005334 <_dtoa_r+0x6cc>
 8005324:	2330      	movs	r3, #48	; 0x30
 8005326:	7013      	strb	r3, [r2, #0]
 8005328:	3701      	adds	r7, #1
 800532a:	4613      	mov	r3, r2
 800532c:	781a      	ldrb	r2, [r3, #0]
 800532e:	3201      	adds	r2, #1
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	e78d      	b.n	8005250 <_dtoa_r+0x5e8>
 8005334:	461d      	mov	r5, r3
 8005336:	e7ec      	b.n	8005312 <_dtoa_r+0x6aa>
 8005338:	2200      	movs	r2, #0
 800533a:	4ba4      	ldr	r3, [pc, #656]	; (80055cc <_dtoa_r+0x964>)
 800533c:	f7fb f960 	bl	8000600 <__aeabi_dmul>
 8005340:	2200      	movs	r2, #0
 8005342:	2300      	movs	r3, #0
 8005344:	4606      	mov	r6, r0
 8005346:	460f      	mov	r7, r1
 8005348:	f7fb fbc2 	bl	8000ad0 <__aeabi_dcmpeq>
 800534c:	2800      	cmp	r0, #0
 800534e:	d09a      	beq.n	8005286 <_dtoa_r+0x61e>
 8005350:	e7ce      	b.n	80052f0 <_dtoa_r+0x688>
 8005352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005354:	2a00      	cmp	r2, #0
 8005356:	f000 80cd 	beq.w	80054f4 <_dtoa_r+0x88c>
 800535a:	9a07      	ldr	r2, [sp, #28]
 800535c:	2a01      	cmp	r2, #1
 800535e:	f300 80af 	bgt.w	80054c0 <_dtoa_r+0x858>
 8005362:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005364:	2a00      	cmp	r2, #0
 8005366:	f000 80a7 	beq.w	80054b8 <_dtoa_r+0x850>
 800536a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800536e:	9e08      	ldr	r6, [sp, #32]
 8005370:	9d05      	ldr	r5, [sp, #20]
 8005372:	9a05      	ldr	r2, [sp, #20]
 8005374:	441a      	add	r2, r3
 8005376:	9205      	str	r2, [sp, #20]
 8005378:	9a06      	ldr	r2, [sp, #24]
 800537a:	2101      	movs	r1, #1
 800537c:	441a      	add	r2, r3
 800537e:	4620      	mov	r0, r4
 8005380:	9206      	str	r2, [sp, #24]
 8005382:	f001 fa33 	bl	80067ec <__i2b>
 8005386:	4607      	mov	r7, r0
 8005388:	2d00      	cmp	r5, #0
 800538a:	dd0c      	ble.n	80053a6 <_dtoa_r+0x73e>
 800538c:	9b06      	ldr	r3, [sp, #24]
 800538e:	2b00      	cmp	r3, #0
 8005390:	dd09      	ble.n	80053a6 <_dtoa_r+0x73e>
 8005392:	42ab      	cmp	r3, r5
 8005394:	9a05      	ldr	r2, [sp, #20]
 8005396:	bfa8      	it	ge
 8005398:	462b      	movge	r3, r5
 800539a:	1ad2      	subs	r2, r2, r3
 800539c:	9205      	str	r2, [sp, #20]
 800539e:	9a06      	ldr	r2, [sp, #24]
 80053a0:	1aed      	subs	r5, r5, r3
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	9306      	str	r3, [sp, #24]
 80053a6:	9b08      	ldr	r3, [sp, #32]
 80053a8:	b1f3      	cbz	r3, 80053e8 <_dtoa_r+0x780>
 80053aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 80a5 	beq.w	80054fc <_dtoa_r+0x894>
 80053b2:	2e00      	cmp	r6, #0
 80053b4:	dd10      	ble.n	80053d8 <_dtoa_r+0x770>
 80053b6:	4639      	mov	r1, r7
 80053b8:	4632      	mov	r2, r6
 80053ba:	4620      	mov	r0, r4
 80053bc:	f001 faac 	bl	8006918 <__pow5mult>
 80053c0:	4652      	mov	r2, sl
 80053c2:	4601      	mov	r1, r0
 80053c4:	4607      	mov	r7, r0
 80053c6:	4620      	mov	r0, r4
 80053c8:	f001 fa19 	bl	80067fe <__multiply>
 80053cc:	4651      	mov	r1, sl
 80053ce:	4680      	mov	r8, r0
 80053d0:	4620      	mov	r0, r4
 80053d2:	f001 f96b 	bl	80066ac <_Bfree>
 80053d6:	46c2      	mov	sl, r8
 80053d8:	9b08      	ldr	r3, [sp, #32]
 80053da:	1b9a      	subs	r2, r3, r6
 80053dc:	d004      	beq.n	80053e8 <_dtoa_r+0x780>
 80053de:	4651      	mov	r1, sl
 80053e0:	4620      	mov	r0, r4
 80053e2:	f001 fa99 	bl	8006918 <__pow5mult>
 80053e6:	4682      	mov	sl, r0
 80053e8:	2101      	movs	r1, #1
 80053ea:	4620      	mov	r0, r4
 80053ec:	f001 f9fe 	bl	80067ec <__i2b>
 80053f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	4606      	mov	r6, r0
 80053f6:	f340 8083 	ble.w	8005500 <_dtoa_r+0x898>
 80053fa:	461a      	mov	r2, r3
 80053fc:	4601      	mov	r1, r0
 80053fe:	4620      	mov	r0, r4
 8005400:	f001 fa8a 	bl	8006918 <__pow5mult>
 8005404:	9b07      	ldr	r3, [sp, #28]
 8005406:	2b01      	cmp	r3, #1
 8005408:	4606      	mov	r6, r0
 800540a:	dd7c      	ble.n	8005506 <_dtoa_r+0x89e>
 800540c:	f04f 0800 	mov.w	r8, #0
 8005410:	6933      	ldr	r3, [r6, #16]
 8005412:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005416:	6918      	ldr	r0, [r3, #16]
 8005418:	f001 f99a 	bl	8006750 <__hi0bits>
 800541c:	f1c0 0020 	rsb	r0, r0, #32
 8005420:	9b06      	ldr	r3, [sp, #24]
 8005422:	4418      	add	r0, r3
 8005424:	f010 001f 	ands.w	r0, r0, #31
 8005428:	f000 8096 	beq.w	8005558 <_dtoa_r+0x8f0>
 800542c:	f1c0 0320 	rsb	r3, r0, #32
 8005430:	2b04      	cmp	r3, #4
 8005432:	f340 8087 	ble.w	8005544 <_dtoa_r+0x8dc>
 8005436:	9b05      	ldr	r3, [sp, #20]
 8005438:	f1c0 001c 	rsb	r0, r0, #28
 800543c:	4403      	add	r3, r0
 800543e:	9305      	str	r3, [sp, #20]
 8005440:	9b06      	ldr	r3, [sp, #24]
 8005442:	4405      	add	r5, r0
 8005444:	4403      	add	r3, r0
 8005446:	9306      	str	r3, [sp, #24]
 8005448:	9b05      	ldr	r3, [sp, #20]
 800544a:	2b00      	cmp	r3, #0
 800544c:	dd05      	ble.n	800545a <_dtoa_r+0x7f2>
 800544e:	4651      	mov	r1, sl
 8005450:	461a      	mov	r2, r3
 8005452:	4620      	mov	r0, r4
 8005454:	f001 faae 	bl	80069b4 <__lshift>
 8005458:	4682      	mov	sl, r0
 800545a:	9b06      	ldr	r3, [sp, #24]
 800545c:	2b00      	cmp	r3, #0
 800545e:	dd05      	ble.n	800546c <_dtoa_r+0x804>
 8005460:	4631      	mov	r1, r6
 8005462:	461a      	mov	r2, r3
 8005464:	4620      	mov	r0, r4
 8005466:	f001 faa5 	bl	80069b4 <__lshift>
 800546a:	4606      	mov	r6, r0
 800546c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800546e:	2b00      	cmp	r3, #0
 8005470:	d074      	beq.n	800555c <_dtoa_r+0x8f4>
 8005472:	4631      	mov	r1, r6
 8005474:	4650      	mov	r0, sl
 8005476:	f001 faee 	bl	8006a56 <__mcmp>
 800547a:	2800      	cmp	r0, #0
 800547c:	da6e      	bge.n	800555c <_dtoa_r+0x8f4>
 800547e:	2300      	movs	r3, #0
 8005480:	4651      	mov	r1, sl
 8005482:	220a      	movs	r2, #10
 8005484:	4620      	mov	r0, r4
 8005486:	f001 f928 	bl	80066da <__multadd>
 800548a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800548c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005490:	4682      	mov	sl, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 81a8 	beq.w	80057e8 <_dtoa_r+0xb80>
 8005498:	2300      	movs	r3, #0
 800549a:	4639      	mov	r1, r7
 800549c:	220a      	movs	r2, #10
 800549e:	4620      	mov	r0, r4
 80054a0:	f001 f91b 	bl	80066da <__multadd>
 80054a4:	9b04      	ldr	r3, [sp, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	4607      	mov	r7, r0
 80054aa:	f300 80c8 	bgt.w	800563e <_dtoa_r+0x9d6>
 80054ae:	9b07      	ldr	r3, [sp, #28]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	f340 80c4 	ble.w	800563e <_dtoa_r+0x9d6>
 80054b6:	e059      	b.n	800556c <_dtoa_r+0x904>
 80054b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80054ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80054be:	e756      	b.n	800536e <_dtoa_r+0x706>
 80054c0:	9b03      	ldr	r3, [sp, #12]
 80054c2:	1e5e      	subs	r6, r3, #1
 80054c4:	9b08      	ldr	r3, [sp, #32]
 80054c6:	42b3      	cmp	r3, r6
 80054c8:	bfbf      	itttt	lt
 80054ca:	9b08      	ldrlt	r3, [sp, #32]
 80054cc:	9608      	strlt	r6, [sp, #32]
 80054ce:	1af2      	sublt	r2, r6, r3
 80054d0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80054d2:	bfb6      	itet	lt
 80054d4:	189b      	addlt	r3, r3, r2
 80054d6:	1b9e      	subge	r6, r3, r6
 80054d8:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80054da:	9b03      	ldr	r3, [sp, #12]
 80054dc:	bfb8      	it	lt
 80054de:	2600      	movlt	r6, #0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	bfb9      	ittee	lt
 80054e4:	9b05      	ldrlt	r3, [sp, #20]
 80054e6:	9a03      	ldrlt	r2, [sp, #12]
 80054e8:	9d05      	ldrge	r5, [sp, #20]
 80054ea:	9b03      	ldrge	r3, [sp, #12]
 80054ec:	bfbc      	itt	lt
 80054ee:	1a9d      	sublt	r5, r3, r2
 80054f0:	2300      	movlt	r3, #0
 80054f2:	e73e      	b.n	8005372 <_dtoa_r+0x70a>
 80054f4:	9e08      	ldr	r6, [sp, #32]
 80054f6:	9d05      	ldr	r5, [sp, #20]
 80054f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80054fa:	e745      	b.n	8005388 <_dtoa_r+0x720>
 80054fc:	9a08      	ldr	r2, [sp, #32]
 80054fe:	e76e      	b.n	80053de <_dtoa_r+0x776>
 8005500:	9b07      	ldr	r3, [sp, #28]
 8005502:	2b01      	cmp	r3, #1
 8005504:	dc19      	bgt.n	800553a <_dtoa_r+0x8d2>
 8005506:	9b00      	ldr	r3, [sp, #0]
 8005508:	b9bb      	cbnz	r3, 800553a <_dtoa_r+0x8d2>
 800550a:	9b01      	ldr	r3, [sp, #4]
 800550c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005510:	b99b      	cbnz	r3, 800553a <_dtoa_r+0x8d2>
 8005512:	9b01      	ldr	r3, [sp, #4]
 8005514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005518:	0d1b      	lsrs	r3, r3, #20
 800551a:	051b      	lsls	r3, r3, #20
 800551c:	b183      	cbz	r3, 8005540 <_dtoa_r+0x8d8>
 800551e:	9b05      	ldr	r3, [sp, #20]
 8005520:	3301      	adds	r3, #1
 8005522:	9305      	str	r3, [sp, #20]
 8005524:	9b06      	ldr	r3, [sp, #24]
 8005526:	3301      	adds	r3, #1
 8005528:	9306      	str	r3, [sp, #24]
 800552a:	f04f 0801 	mov.w	r8, #1
 800552e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005530:	2b00      	cmp	r3, #0
 8005532:	f47f af6d 	bne.w	8005410 <_dtoa_r+0x7a8>
 8005536:	2001      	movs	r0, #1
 8005538:	e772      	b.n	8005420 <_dtoa_r+0x7b8>
 800553a:	f04f 0800 	mov.w	r8, #0
 800553e:	e7f6      	b.n	800552e <_dtoa_r+0x8c6>
 8005540:	4698      	mov	r8, r3
 8005542:	e7f4      	b.n	800552e <_dtoa_r+0x8c6>
 8005544:	d080      	beq.n	8005448 <_dtoa_r+0x7e0>
 8005546:	9a05      	ldr	r2, [sp, #20]
 8005548:	331c      	adds	r3, #28
 800554a:	441a      	add	r2, r3
 800554c:	9205      	str	r2, [sp, #20]
 800554e:	9a06      	ldr	r2, [sp, #24]
 8005550:	441a      	add	r2, r3
 8005552:	441d      	add	r5, r3
 8005554:	4613      	mov	r3, r2
 8005556:	e776      	b.n	8005446 <_dtoa_r+0x7de>
 8005558:	4603      	mov	r3, r0
 800555a:	e7f4      	b.n	8005546 <_dtoa_r+0x8de>
 800555c:	9b03      	ldr	r3, [sp, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	dc36      	bgt.n	80055d0 <_dtoa_r+0x968>
 8005562:	9b07      	ldr	r3, [sp, #28]
 8005564:	2b02      	cmp	r3, #2
 8005566:	dd33      	ble.n	80055d0 <_dtoa_r+0x968>
 8005568:	9b03      	ldr	r3, [sp, #12]
 800556a:	9304      	str	r3, [sp, #16]
 800556c:	9b04      	ldr	r3, [sp, #16]
 800556e:	b963      	cbnz	r3, 800558a <_dtoa_r+0x922>
 8005570:	4631      	mov	r1, r6
 8005572:	2205      	movs	r2, #5
 8005574:	4620      	mov	r0, r4
 8005576:	f001 f8b0 	bl	80066da <__multadd>
 800557a:	4601      	mov	r1, r0
 800557c:	4606      	mov	r6, r0
 800557e:	4650      	mov	r0, sl
 8005580:	f001 fa69 	bl	8006a56 <__mcmp>
 8005584:	2800      	cmp	r0, #0
 8005586:	f73f adb6 	bgt.w	80050f6 <_dtoa_r+0x48e>
 800558a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800558c:	9d02      	ldr	r5, [sp, #8]
 800558e:	ea6f 0b03 	mvn.w	fp, r3
 8005592:	2300      	movs	r3, #0
 8005594:	9303      	str	r3, [sp, #12]
 8005596:	4631      	mov	r1, r6
 8005598:	4620      	mov	r0, r4
 800559a:	f001 f887 	bl	80066ac <_Bfree>
 800559e:	2f00      	cmp	r7, #0
 80055a0:	f43f aea6 	beq.w	80052f0 <_dtoa_r+0x688>
 80055a4:	9b03      	ldr	r3, [sp, #12]
 80055a6:	b12b      	cbz	r3, 80055b4 <_dtoa_r+0x94c>
 80055a8:	42bb      	cmp	r3, r7
 80055aa:	d003      	beq.n	80055b4 <_dtoa_r+0x94c>
 80055ac:	4619      	mov	r1, r3
 80055ae:	4620      	mov	r0, r4
 80055b0:	f001 f87c 	bl	80066ac <_Bfree>
 80055b4:	4639      	mov	r1, r7
 80055b6:	4620      	mov	r0, r4
 80055b8:	f001 f878 	bl	80066ac <_Bfree>
 80055bc:	e698      	b.n	80052f0 <_dtoa_r+0x688>
 80055be:	2600      	movs	r6, #0
 80055c0:	4637      	mov	r7, r6
 80055c2:	e7e2      	b.n	800558a <_dtoa_r+0x922>
 80055c4:	46bb      	mov	fp, r7
 80055c6:	4637      	mov	r7, r6
 80055c8:	e595      	b.n	80050f6 <_dtoa_r+0x48e>
 80055ca:	bf00      	nop
 80055cc:	40240000 	.word	0x40240000
 80055d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d2:	bb93      	cbnz	r3, 800563a <_dtoa_r+0x9d2>
 80055d4:	9b03      	ldr	r3, [sp, #12]
 80055d6:	9304      	str	r3, [sp, #16]
 80055d8:	9d02      	ldr	r5, [sp, #8]
 80055da:	4631      	mov	r1, r6
 80055dc:	4650      	mov	r0, sl
 80055de:	f7ff fab7 	bl	8004b50 <quorem>
 80055e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80055e6:	f805 9b01 	strb.w	r9, [r5], #1
 80055ea:	9b02      	ldr	r3, [sp, #8]
 80055ec:	9a04      	ldr	r2, [sp, #16]
 80055ee:	1aeb      	subs	r3, r5, r3
 80055f0:	429a      	cmp	r2, r3
 80055f2:	f300 80dc 	bgt.w	80057ae <_dtoa_r+0xb46>
 80055f6:	9b02      	ldr	r3, [sp, #8]
 80055f8:	2a01      	cmp	r2, #1
 80055fa:	bfac      	ite	ge
 80055fc:	189b      	addge	r3, r3, r2
 80055fe:	3301      	addlt	r3, #1
 8005600:	4698      	mov	r8, r3
 8005602:	2300      	movs	r3, #0
 8005604:	9303      	str	r3, [sp, #12]
 8005606:	4651      	mov	r1, sl
 8005608:	2201      	movs	r2, #1
 800560a:	4620      	mov	r0, r4
 800560c:	f001 f9d2 	bl	80069b4 <__lshift>
 8005610:	4631      	mov	r1, r6
 8005612:	4682      	mov	sl, r0
 8005614:	f001 fa1f 	bl	8006a56 <__mcmp>
 8005618:	2800      	cmp	r0, #0
 800561a:	f300 808d 	bgt.w	8005738 <_dtoa_r+0xad0>
 800561e:	d103      	bne.n	8005628 <_dtoa_r+0x9c0>
 8005620:	f019 0f01 	tst.w	r9, #1
 8005624:	f040 8088 	bne.w	8005738 <_dtoa_r+0xad0>
 8005628:	4645      	mov	r5, r8
 800562a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800562e:	2b30      	cmp	r3, #48	; 0x30
 8005630:	f105 32ff 	add.w	r2, r5, #4294967295
 8005634:	d1af      	bne.n	8005596 <_dtoa_r+0x92e>
 8005636:	4615      	mov	r5, r2
 8005638:	e7f7      	b.n	800562a <_dtoa_r+0x9c2>
 800563a:	9b03      	ldr	r3, [sp, #12]
 800563c:	9304      	str	r3, [sp, #16]
 800563e:	2d00      	cmp	r5, #0
 8005640:	dd05      	ble.n	800564e <_dtoa_r+0x9e6>
 8005642:	4639      	mov	r1, r7
 8005644:	462a      	mov	r2, r5
 8005646:	4620      	mov	r0, r4
 8005648:	f001 f9b4 	bl	80069b4 <__lshift>
 800564c:	4607      	mov	r7, r0
 800564e:	f1b8 0f00 	cmp.w	r8, #0
 8005652:	d04c      	beq.n	80056ee <_dtoa_r+0xa86>
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	4620      	mov	r0, r4
 8005658:	f000 fff4 	bl	8006644 <_Balloc>
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	3202      	adds	r2, #2
 8005660:	4605      	mov	r5, r0
 8005662:	0092      	lsls	r2, r2, #2
 8005664:	f107 010c 	add.w	r1, r7, #12
 8005668:	300c      	adds	r0, #12
 800566a:	f000 ffb1 	bl	80065d0 <memcpy>
 800566e:	2201      	movs	r2, #1
 8005670:	4629      	mov	r1, r5
 8005672:	4620      	mov	r0, r4
 8005674:	f001 f99e 	bl	80069b4 <__lshift>
 8005678:	9b00      	ldr	r3, [sp, #0]
 800567a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800567e:	9703      	str	r7, [sp, #12]
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	4607      	mov	r7, r0
 8005686:	9305      	str	r3, [sp, #20]
 8005688:	4631      	mov	r1, r6
 800568a:	4650      	mov	r0, sl
 800568c:	f7ff fa60 	bl	8004b50 <quorem>
 8005690:	9903      	ldr	r1, [sp, #12]
 8005692:	4605      	mov	r5, r0
 8005694:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005698:	4650      	mov	r0, sl
 800569a:	f001 f9dc 	bl	8006a56 <__mcmp>
 800569e:	463a      	mov	r2, r7
 80056a0:	9000      	str	r0, [sp, #0]
 80056a2:	4631      	mov	r1, r6
 80056a4:	4620      	mov	r0, r4
 80056a6:	f001 f9f0 	bl	8006a8a <__mdiff>
 80056aa:	68c3      	ldr	r3, [r0, #12]
 80056ac:	4602      	mov	r2, r0
 80056ae:	bb03      	cbnz	r3, 80056f2 <_dtoa_r+0xa8a>
 80056b0:	4601      	mov	r1, r0
 80056b2:	9006      	str	r0, [sp, #24]
 80056b4:	4650      	mov	r0, sl
 80056b6:	f001 f9ce 	bl	8006a56 <__mcmp>
 80056ba:	9a06      	ldr	r2, [sp, #24]
 80056bc:	4603      	mov	r3, r0
 80056be:	4611      	mov	r1, r2
 80056c0:	4620      	mov	r0, r4
 80056c2:	9306      	str	r3, [sp, #24]
 80056c4:	f000 fff2 	bl	80066ac <_Bfree>
 80056c8:	9b06      	ldr	r3, [sp, #24]
 80056ca:	b9a3      	cbnz	r3, 80056f6 <_dtoa_r+0xa8e>
 80056cc:	9a07      	ldr	r2, [sp, #28]
 80056ce:	b992      	cbnz	r2, 80056f6 <_dtoa_r+0xa8e>
 80056d0:	9a05      	ldr	r2, [sp, #20]
 80056d2:	b982      	cbnz	r2, 80056f6 <_dtoa_r+0xa8e>
 80056d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80056d8:	d029      	beq.n	800572e <_dtoa_r+0xac6>
 80056da:	9b00      	ldr	r3, [sp, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	dd01      	ble.n	80056e4 <_dtoa_r+0xa7c>
 80056e0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80056e4:	f108 0501 	add.w	r5, r8, #1
 80056e8:	f888 9000 	strb.w	r9, [r8]
 80056ec:	e753      	b.n	8005596 <_dtoa_r+0x92e>
 80056ee:	4638      	mov	r0, r7
 80056f0:	e7c2      	b.n	8005678 <_dtoa_r+0xa10>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e7e3      	b.n	80056be <_dtoa_r+0xa56>
 80056f6:	9a00      	ldr	r2, [sp, #0]
 80056f8:	2a00      	cmp	r2, #0
 80056fa:	db04      	blt.n	8005706 <_dtoa_r+0xa9e>
 80056fc:	d125      	bne.n	800574a <_dtoa_r+0xae2>
 80056fe:	9a07      	ldr	r2, [sp, #28]
 8005700:	bb1a      	cbnz	r2, 800574a <_dtoa_r+0xae2>
 8005702:	9a05      	ldr	r2, [sp, #20]
 8005704:	bb0a      	cbnz	r2, 800574a <_dtoa_r+0xae2>
 8005706:	2b00      	cmp	r3, #0
 8005708:	ddec      	ble.n	80056e4 <_dtoa_r+0xa7c>
 800570a:	4651      	mov	r1, sl
 800570c:	2201      	movs	r2, #1
 800570e:	4620      	mov	r0, r4
 8005710:	f001 f950 	bl	80069b4 <__lshift>
 8005714:	4631      	mov	r1, r6
 8005716:	4682      	mov	sl, r0
 8005718:	f001 f99d 	bl	8006a56 <__mcmp>
 800571c:	2800      	cmp	r0, #0
 800571e:	dc03      	bgt.n	8005728 <_dtoa_r+0xac0>
 8005720:	d1e0      	bne.n	80056e4 <_dtoa_r+0xa7c>
 8005722:	f019 0f01 	tst.w	r9, #1
 8005726:	d0dd      	beq.n	80056e4 <_dtoa_r+0xa7c>
 8005728:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800572c:	d1d8      	bne.n	80056e0 <_dtoa_r+0xa78>
 800572e:	2339      	movs	r3, #57	; 0x39
 8005730:	f888 3000 	strb.w	r3, [r8]
 8005734:	f108 0801 	add.w	r8, r8, #1
 8005738:	4645      	mov	r5, r8
 800573a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800573e:	2b39      	cmp	r3, #57	; 0x39
 8005740:	f105 32ff 	add.w	r2, r5, #4294967295
 8005744:	d03b      	beq.n	80057be <_dtoa_r+0xb56>
 8005746:	3301      	adds	r3, #1
 8005748:	e040      	b.n	80057cc <_dtoa_r+0xb64>
 800574a:	2b00      	cmp	r3, #0
 800574c:	f108 0501 	add.w	r5, r8, #1
 8005750:	dd05      	ble.n	800575e <_dtoa_r+0xaf6>
 8005752:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005756:	d0ea      	beq.n	800572e <_dtoa_r+0xac6>
 8005758:	f109 0901 	add.w	r9, r9, #1
 800575c:	e7c4      	b.n	80056e8 <_dtoa_r+0xa80>
 800575e:	9b02      	ldr	r3, [sp, #8]
 8005760:	9a04      	ldr	r2, [sp, #16]
 8005762:	f805 9c01 	strb.w	r9, [r5, #-1]
 8005766:	1aeb      	subs	r3, r5, r3
 8005768:	4293      	cmp	r3, r2
 800576a:	46a8      	mov	r8, r5
 800576c:	f43f af4b 	beq.w	8005606 <_dtoa_r+0x99e>
 8005770:	4651      	mov	r1, sl
 8005772:	2300      	movs	r3, #0
 8005774:	220a      	movs	r2, #10
 8005776:	4620      	mov	r0, r4
 8005778:	f000 ffaf 	bl	80066da <__multadd>
 800577c:	9b03      	ldr	r3, [sp, #12]
 800577e:	9903      	ldr	r1, [sp, #12]
 8005780:	42bb      	cmp	r3, r7
 8005782:	4682      	mov	sl, r0
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	f04f 020a 	mov.w	r2, #10
 800578c:	4620      	mov	r0, r4
 800578e:	d104      	bne.n	800579a <_dtoa_r+0xb32>
 8005790:	f000 ffa3 	bl	80066da <__multadd>
 8005794:	9003      	str	r0, [sp, #12]
 8005796:	4607      	mov	r7, r0
 8005798:	e776      	b.n	8005688 <_dtoa_r+0xa20>
 800579a:	f000 ff9e 	bl	80066da <__multadd>
 800579e:	2300      	movs	r3, #0
 80057a0:	9003      	str	r0, [sp, #12]
 80057a2:	220a      	movs	r2, #10
 80057a4:	4639      	mov	r1, r7
 80057a6:	4620      	mov	r0, r4
 80057a8:	f000 ff97 	bl	80066da <__multadd>
 80057ac:	e7f3      	b.n	8005796 <_dtoa_r+0xb2e>
 80057ae:	4651      	mov	r1, sl
 80057b0:	2300      	movs	r3, #0
 80057b2:	220a      	movs	r2, #10
 80057b4:	4620      	mov	r0, r4
 80057b6:	f000 ff90 	bl	80066da <__multadd>
 80057ba:	4682      	mov	sl, r0
 80057bc:	e70d      	b.n	80055da <_dtoa_r+0x972>
 80057be:	9b02      	ldr	r3, [sp, #8]
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d105      	bne.n	80057d0 <_dtoa_r+0xb68>
 80057c4:	9a02      	ldr	r2, [sp, #8]
 80057c6:	f10b 0b01 	add.w	fp, fp, #1
 80057ca:	2331      	movs	r3, #49	; 0x31
 80057cc:	7013      	strb	r3, [r2, #0]
 80057ce:	e6e2      	b.n	8005596 <_dtoa_r+0x92e>
 80057d0:	4615      	mov	r5, r2
 80057d2:	e7b2      	b.n	800573a <_dtoa_r+0xad2>
 80057d4:	4b09      	ldr	r3, [pc, #36]	; (80057fc <_dtoa_r+0xb94>)
 80057d6:	f7ff baae 	b.w	8004d36 <_dtoa_r+0xce>
 80057da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f47f aa88 	bne.w	8004cf2 <_dtoa_r+0x8a>
 80057e2:	4b07      	ldr	r3, [pc, #28]	; (8005800 <_dtoa_r+0xb98>)
 80057e4:	f7ff baa7 	b.w	8004d36 <_dtoa_r+0xce>
 80057e8:	9b04      	ldr	r3, [sp, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f73f aef4 	bgt.w	80055d8 <_dtoa_r+0x970>
 80057f0:	9b07      	ldr	r3, [sp, #28]
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	f77f aef0 	ble.w	80055d8 <_dtoa_r+0x970>
 80057f8:	e6b8      	b.n	800556c <_dtoa_r+0x904>
 80057fa:	bf00      	nop
 80057fc:	08009234 	.word	0x08009234
 8005800:	08009256 	.word	0x08009256

08005804 <__sflush_r>:
 8005804:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005808:	b293      	uxth	r3, r2
 800580a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800580e:	4605      	mov	r5, r0
 8005810:	0718      	lsls	r0, r3, #28
 8005812:	460c      	mov	r4, r1
 8005814:	d461      	bmi.n	80058da <__sflush_r+0xd6>
 8005816:	684b      	ldr	r3, [r1, #4]
 8005818:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800581c:	2b00      	cmp	r3, #0
 800581e:	818a      	strh	r2, [r1, #12]
 8005820:	dc05      	bgt.n	800582e <__sflush_r+0x2a>
 8005822:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	dc02      	bgt.n	800582e <__sflush_r+0x2a>
 8005828:	2000      	movs	r0, #0
 800582a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800582e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005830:	2e00      	cmp	r6, #0
 8005832:	d0f9      	beq.n	8005828 <__sflush_r+0x24>
 8005834:	2300      	movs	r3, #0
 8005836:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800583a:	682f      	ldr	r7, [r5, #0]
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	d037      	beq.n	80058b0 <__sflush_r+0xac>
 8005840:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	075a      	lsls	r2, r3, #29
 8005846:	d505      	bpl.n	8005854 <__sflush_r+0x50>
 8005848:	6863      	ldr	r3, [r4, #4]
 800584a:	1ac0      	subs	r0, r0, r3
 800584c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800584e:	b10b      	cbz	r3, 8005854 <__sflush_r+0x50>
 8005850:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005852:	1ac0      	subs	r0, r0, r3
 8005854:	2300      	movs	r3, #0
 8005856:	4602      	mov	r2, r0
 8005858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800585a:	6a21      	ldr	r1, [r4, #32]
 800585c:	4628      	mov	r0, r5
 800585e:	47b0      	blx	r6
 8005860:	1c43      	adds	r3, r0, #1
 8005862:	89a3      	ldrh	r3, [r4, #12]
 8005864:	d106      	bne.n	8005874 <__sflush_r+0x70>
 8005866:	6829      	ldr	r1, [r5, #0]
 8005868:	291d      	cmp	r1, #29
 800586a:	d84f      	bhi.n	800590c <__sflush_r+0x108>
 800586c:	4a2d      	ldr	r2, [pc, #180]	; (8005924 <__sflush_r+0x120>)
 800586e:	40ca      	lsrs	r2, r1
 8005870:	07d6      	lsls	r6, r2, #31
 8005872:	d54b      	bpl.n	800590c <__sflush_r+0x108>
 8005874:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005878:	b21b      	sxth	r3, r3
 800587a:	2200      	movs	r2, #0
 800587c:	6062      	str	r2, [r4, #4]
 800587e:	04d9      	lsls	r1, r3, #19
 8005880:	6922      	ldr	r2, [r4, #16]
 8005882:	81a3      	strh	r3, [r4, #12]
 8005884:	6022      	str	r2, [r4, #0]
 8005886:	d504      	bpl.n	8005892 <__sflush_r+0x8e>
 8005888:	1c42      	adds	r2, r0, #1
 800588a:	d101      	bne.n	8005890 <__sflush_r+0x8c>
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	b903      	cbnz	r3, 8005892 <__sflush_r+0x8e>
 8005890:	6560      	str	r0, [r4, #84]	; 0x54
 8005892:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005894:	602f      	str	r7, [r5, #0]
 8005896:	2900      	cmp	r1, #0
 8005898:	d0c6      	beq.n	8005828 <__sflush_r+0x24>
 800589a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800589e:	4299      	cmp	r1, r3
 80058a0:	d002      	beq.n	80058a8 <__sflush_r+0xa4>
 80058a2:	4628      	mov	r0, r5
 80058a4:	f000 f9bc 	bl	8005c20 <_free_r>
 80058a8:	2000      	movs	r0, #0
 80058aa:	6360      	str	r0, [r4, #52]	; 0x34
 80058ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058b0:	6a21      	ldr	r1, [r4, #32]
 80058b2:	2301      	movs	r3, #1
 80058b4:	4628      	mov	r0, r5
 80058b6:	47b0      	blx	r6
 80058b8:	1c41      	adds	r1, r0, #1
 80058ba:	d1c2      	bne.n	8005842 <__sflush_r+0x3e>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0bf      	beq.n	8005842 <__sflush_r+0x3e>
 80058c2:	2b1d      	cmp	r3, #29
 80058c4:	d001      	beq.n	80058ca <__sflush_r+0xc6>
 80058c6:	2b16      	cmp	r3, #22
 80058c8:	d101      	bne.n	80058ce <__sflush_r+0xca>
 80058ca:	602f      	str	r7, [r5, #0]
 80058cc:	e7ac      	b.n	8005828 <__sflush_r+0x24>
 80058ce:	89a3      	ldrh	r3, [r4, #12]
 80058d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058d4:	81a3      	strh	r3, [r4, #12]
 80058d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058da:	690f      	ldr	r7, [r1, #16]
 80058dc:	2f00      	cmp	r7, #0
 80058de:	d0a3      	beq.n	8005828 <__sflush_r+0x24>
 80058e0:	079b      	lsls	r3, r3, #30
 80058e2:	680e      	ldr	r6, [r1, #0]
 80058e4:	bf08      	it	eq
 80058e6:	694b      	ldreq	r3, [r1, #20]
 80058e8:	600f      	str	r7, [r1, #0]
 80058ea:	bf18      	it	ne
 80058ec:	2300      	movne	r3, #0
 80058ee:	eba6 0807 	sub.w	r8, r6, r7
 80058f2:	608b      	str	r3, [r1, #8]
 80058f4:	f1b8 0f00 	cmp.w	r8, #0
 80058f8:	dd96      	ble.n	8005828 <__sflush_r+0x24>
 80058fa:	4643      	mov	r3, r8
 80058fc:	463a      	mov	r2, r7
 80058fe:	6a21      	ldr	r1, [r4, #32]
 8005900:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005902:	4628      	mov	r0, r5
 8005904:	47b0      	blx	r6
 8005906:	2800      	cmp	r0, #0
 8005908:	dc07      	bgt.n	800591a <__sflush_r+0x116>
 800590a:	89a3      	ldrh	r3, [r4, #12]
 800590c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005910:	81a3      	strh	r3, [r4, #12]
 8005912:	f04f 30ff 	mov.w	r0, #4294967295
 8005916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800591a:	4407      	add	r7, r0
 800591c:	eba8 0800 	sub.w	r8, r8, r0
 8005920:	e7e8      	b.n	80058f4 <__sflush_r+0xf0>
 8005922:	bf00      	nop
 8005924:	20400001 	.word	0x20400001

08005928 <_fflush_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	690b      	ldr	r3, [r1, #16]
 800592c:	4605      	mov	r5, r0
 800592e:	460c      	mov	r4, r1
 8005930:	b913      	cbnz	r3, 8005938 <_fflush_r+0x10>
 8005932:	2500      	movs	r5, #0
 8005934:	4628      	mov	r0, r5
 8005936:	bd38      	pop	{r3, r4, r5, pc}
 8005938:	b118      	cbz	r0, 8005942 <_fflush_r+0x1a>
 800593a:	6983      	ldr	r3, [r0, #24]
 800593c:	b90b      	cbnz	r3, 8005942 <_fflush_r+0x1a>
 800593e:	f000 f899 	bl	8005a74 <__sinit>
 8005942:	4b14      	ldr	r3, [pc, #80]	; (8005994 <_fflush_r+0x6c>)
 8005944:	429c      	cmp	r4, r3
 8005946:	d11b      	bne.n	8005980 <_fflush_r+0x58>
 8005948:	686c      	ldr	r4, [r5, #4]
 800594a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0ef      	beq.n	8005932 <_fflush_r+0xa>
 8005952:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005954:	07d0      	lsls	r0, r2, #31
 8005956:	d404      	bmi.n	8005962 <_fflush_r+0x3a>
 8005958:	0599      	lsls	r1, r3, #22
 800595a:	d402      	bmi.n	8005962 <_fflush_r+0x3a>
 800595c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800595e:	f000 fbb3 	bl	80060c8 <__retarget_lock_acquire_recursive>
 8005962:	4628      	mov	r0, r5
 8005964:	4621      	mov	r1, r4
 8005966:	f7ff ff4d 	bl	8005804 <__sflush_r>
 800596a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800596c:	07da      	lsls	r2, r3, #31
 800596e:	4605      	mov	r5, r0
 8005970:	d4e0      	bmi.n	8005934 <_fflush_r+0xc>
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	059b      	lsls	r3, r3, #22
 8005976:	d4dd      	bmi.n	8005934 <_fflush_r+0xc>
 8005978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800597a:	f000 fba6 	bl	80060ca <__retarget_lock_release_recursive>
 800597e:	e7d9      	b.n	8005934 <_fflush_r+0xc>
 8005980:	4b05      	ldr	r3, [pc, #20]	; (8005998 <_fflush_r+0x70>)
 8005982:	429c      	cmp	r4, r3
 8005984:	d101      	bne.n	800598a <_fflush_r+0x62>
 8005986:	68ac      	ldr	r4, [r5, #8]
 8005988:	e7df      	b.n	800594a <_fflush_r+0x22>
 800598a:	4b04      	ldr	r3, [pc, #16]	; (800599c <_fflush_r+0x74>)
 800598c:	429c      	cmp	r4, r3
 800598e:	bf08      	it	eq
 8005990:	68ec      	ldreq	r4, [r5, #12]
 8005992:	e7da      	b.n	800594a <_fflush_r+0x22>
 8005994:	08009284 	.word	0x08009284
 8005998:	080092a4 	.word	0x080092a4
 800599c:	08009264 	.word	0x08009264

080059a0 <fflush>:
 80059a0:	4601      	mov	r1, r0
 80059a2:	b920      	cbnz	r0, 80059ae <fflush+0xe>
 80059a4:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <fflush+0x18>)
 80059a6:	4905      	ldr	r1, [pc, #20]	; (80059bc <fflush+0x1c>)
 80059a8:	6818      	ldr	r0, [r3, #0]
 80059aa:	f000 bb5f 	b.w	800606c <_fwalk_reent>
 80059ae:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <fflush+0x20>)
 80059b0:	6818      	ldr	r0, [r3, #0]
 80059b2:	f7ff bfb9 	b.w	8005928 <_fflush_r>
 80059b6:	bf00      	nop
 80059b8:	080091fc 	.word	0x080091fc
 80059bc:	08005929 	.word	0x08005929
 80059c0:	20000128 	.word	0x20000128

080059c4 <_cleanup_r>:
 80059c4:	4901      	ldr	r1, [pc, #4]	; (80059cc <_cleanup_r+0x8>)
 80059c6:	f000 bb51 	b.w	800606c <_fwalk_reent>
 80059ca:	bf00      	nop
 80059cc:	080071d5 	.word	0x080071d5

080059d0 <std.isra.0>:
 80059d0:	2300      	movs	r3, #0
 80059d2:	b510      	push	{r4, lr}
 80059d4:	4604      	mov	r4, r0
 80059d6:	6003      	str	r3, [r0, #0]
 80059d8:	6043      	str	r3, [r0, #4]
 80059da:	6083      	str	r3, [r0, #8]
 80059dc:	8181      	strh	r1, [r0, #12]
 80059de:	6643      	str	r3, [r0, #100]	; 0x64
 80059e0:	81c2      	strh	r2, [r0, #14]
 80059e2:	6103      	str	r3, [r0, #16]
 80059e4:	6143      	str	r3, [r0, #20]
 80059e6:	6183      	str	r3, [r0, #24]
 80059e8:	4619      	mov	r1, r3
 80059ea:	2208      	movs	r2, #8
 80059ec:	305c      	adds	r0, #92	; 0x5c
 80059ee:	f000 fe14 	bl	800661a <memset>
 80059f2:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <std.isra.0+0x38>)
 80059f4:	6263      	str	r3, [r4, #36]	; 0x24
 80059f6:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <std.isra.0+0x3c>)
 80059f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80059fa:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <std.isra.0+0x40>)
 80059fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059fe:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <std.isra.0+0x44>)
 8005a00:	6224      	str	r4, [r4, #32]
 8005a02:	6323      	str	r3, [r4, #48]	; 0x30
 8005a04:	bd10      	pop	{r4, pc}
 8005a06:	bf00      	nop
 8005a08:	08007045 	.word	0x08007045
 8005a0c:	08007067 	.word	0x08007067
 8005a10:	0800709f 	.word	0x0800709f
 8005a14:	080070c3 	.word	0x080070c3

08005a18 <__sfmoreglue>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	1e4a      	subs	r2, r1, #1
 8005a1c:	2568      	movs	r5, #104	; 0x68
 8005a1e:	4355      	muls	r5, r2
 8005a20:	460e      	mov	r6, r1
 8005a22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a26:	f000 fbc5 	bl	80061b4 <_malloc_r>
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	b140      	cbz	r0, 8005a40 <__sfmoreglue+0x28>
 8005a2e:	2100      	movs	r1, #0
 8005a30:	e880 0042 	stmia.w	r0, {r1, r6}
 8005a34:	300c      	adds	r0, #12
 8005a36:	60a0      	str	r0, [r4, #8]
 8005a38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a3c:	f000 fded 	bl	800661a <memset>
 8005a40:	4620      	mov	r0, r4
 8005a42:	bd70      	pop	{r4, r5, r6, pc}

08005a44 <__sfp_lock_acquire>:
 8005a44:	4801      	ldr	r0, [pc, #4]	; (8005a4c <__sfp_lock_acquire+0x8>)
 8005a46:	f000 bb3f 	b.w	80060c8 <__retarget_lock_acquire_recursive>
 8005a4a:	bf00      	nop
 8005a4c:	20000c44 	.word	0x20000c44

08005a50 <__sfp_lock_release>:
 8005a50:	4801      	ldr	r0, [pc, #4]	; (8005a58 <__sfp_lock_release+0x8>)
 8005a52:	f000 bb3a 	b.w	80060ca <__retarget_lock_release_recursive>
 8005a56:	bf00      	nop
 8005a58:	20000c44 	.word	0x20000c44

08005a5c <__sinit_lock_acquire>:
 8005a5c:	4801      	ldr	r0, [pc, #4]	; (8005a64 <__sinit_lock_acquire+0x8>)
 8005a5e:	f000 bb33 	b.w	80060c8 <__retarget_lock_acquire_recursive>
 8005a62:	bf00      	nop
 8005a64:	20000c3f 	.word	0x20000c3f

08005a68 <__sinit_lock_release>:
 8005a68:	4801      	ldr	r0, [pc, #4]	; (8005a70 <__sinit_lock_release+0x8>)
 8005a6a:	f000 bb2e 	b.w	80060ca <__retarget_lock_release_recursive>
 8005a6e:	bf00      	nop
 8005a70:	20000c3f 	.word	0x20000c3f

08005a74 <__sinit>:
 8005a74:	b510      	push	{r4, lr}
 8005a76:	4604      	mov	r4, r0
 8005a78:	f7ff fff0 	bl	8005a5c <__sinit_lock_acquire>
 8005a7c:	69a3      	ldr	r3, [r4, #24]
 8005a7e:	b11b      	cbz	r3, 8005a88 <__sinit+0x14>
 8005a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a84:	f7ff bff0 	b.w	8005a68 <__sinit_lock_release>
 8005a88:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8005a8c:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 8005a90:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8005a94:	4b12      	ldr	r3, [pc, #72]	; (8005ae0 <__sinit+0x6c>)
 8005a96:	4a13      	ldr	r2, [pc, #76]	; (8005ae4 <__sinit+0x70>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a9c:	429c      	cmp	r4, r3
 8005a9e:	bf04      	itt	eq
 8005aa0:	2301      	moveq	r3, #1
 8005aa2:	61a3      	streq	r3, [r4, #24]
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	f000 f81f 	bl	8005ae8 <__sfp>
 8005aaa:	6060      	str	r0, [r4, #4]
 8005aac:	4620      	mov	r0, r4
 8005aae:	f000 f81b 	bl	8005ae8 <__sfp>
 8005ab2:	60a0      	str	r0, [r4, #8]
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	f000 f817 	bl	8005ae8 <__sfp>
 8005aba:	2200      	movs	r2, #0
 8005abc:	60e0      	str	r0, [r4, #12]
 8005abe:	2104      	movs	r1, #4
 8005ac0:	6860      	ldr	r0, [r4, #4]
 8005ac2:	f7ff ff85 	bl	80059d0 <std.isra.0>
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	2109      	movs	r1, #9
 8005aca:	68a0      	ldr	r0, [r4, #8]
 8005acc:	f7ff ff80 	bl	80059d0 <std.isra.0>
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	2112      	movs	r1, #18
 8005ad4:	68e0      	ldr	r0, [r4, #12]
 8005ad6:	f7ff ff7b 	bl	80059d0 <std.isra.0>
 8005ada:	2301      	movs	r3, #1
 8005adc:	61a3      	str	r3, [r4, #24]
 8005ade:	e7cf      	b.n	8005a80 <__sinit+0xc>
 8005ae0:	080091fc 	.word	0x080091fc
 8005ae4:	080059c5 	.word	0x080059c5

08005ae8 <__sfp>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	4607      	mov	r7, r0
 8005aec:	f7ff ffaa 	bl	8005a44 <__sfp_lock_acquire>
 8005af0:	4b1f      	ldr	r3, [pc, #124]	; (8005b70 <__sfp+0x88>)
 8005af2:	681e      	ldr	r6, [r3, #0]
 8005af4:	69b3      	ldr	r3, [r6, #24]
 8005af6:	b913      	cbnz	r3, 8005afe <__sfp+0x16>
 8005af8:	4630      	mov	r0, r6
 8005afa:	f7ff ffbb 	bl	8005a74 <__sinit>
 8005afe:	36d8      	adds	r6, #216	; 0xd8
 8005b00:	68b4      	ldr	r4, [r6, #8]
 8005b02:	6873      	ldr	r3, [r6, #4]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	d503      	bpl.n	8005b10 <__sfp+0x28>
 8005b08:	6833      	ldr	r3, [r6, #0]
 8005b0a:	b133      	cbz	r3, 8005b1a <__sfp+0x32>
 8005b0c:	6836      	ldr	r6, [r6, #0]
 8005b0e:	e7f7      	b.n	8005b00 <__sfp+0x18>
 8005b10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b14:	b17d      	cbz	r5, 8005b36 <__sfp+0x4e>
 8005b16:	3468      	adds	r4, #104	; 0x68
 8005b18:	e7f4      	b.n	8005b04 <__sfp+0x1c>
 8005b1a:	2104      	movs	r1, #4
 8005b1c:	4638      	mov	r0, r7
 8005b1e:	f7ff ff7b 	bl	8005a18 <__sfmoreglue>
 8005b22:	4604      	mov	r4, r0
 8005b24:	6030      	str	r0, [r6, #0]
 8005b26:	2800      	cmp	r0, #0
 8005b28:	d1f0      	bne.n	8005b0c <__sfp+0x24>
 8005b2a:	f7ff ff91 	bl	8005a50 <__sfp_lock_release>
 8005b2e:	230c      	movs	r3, #12
 8005b30:	603b      	str	r3, [r7, #0]
 8005b32:	4620      	mov	r0, r4
 8005b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b3a:	81e3      	strh	r3, [r4, #14]
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	81a3      	strh	r3, [r4, #12]
 8005b40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b44:	6665      	str	r5, [r4, #100]	; 0x64
 8005b46:	f000 fabd 	bl	80060c4 <__retarget_lock_init_recursive>
 8005b4a:	f7ff ff81 	bl	8005a50 <__sfp_lock_release>
 8005b4e:	6025      	str	r5, [r4, #0]
 8005b50:	60a5      	str	r5, [r4, #8]
 8005b52:	6065      	str	r5, [r4, #4]
 8005b54:	6125      	str	r5, [r4, #16]
 8005b56:	6165      	str	r5, [r4, #20]
 8005b58:	61a5      	str	r5, [r4, #24]
 8005b5a:	2208      	movs	r2, #8
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b62:	f000 fd5a 	bl	800661a <memset>
 8005b66:	6365      	str	r5, [r4, #52]	; 0x34
 8005b68:	63a5      	str	r5, [r4, #56]	; 0x38
 8005b6a:	64a5      	str	r5, [r4, #72]	; 0x48
 8005b6c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005b6e:	e7e0      	b.n	8005b32 <__sfp+0x4a>
 8005b70:	080091fc 	.word	0x080091fc

08005b74 <_malloc_trim_r>:
 8005b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b78:	4f25      	ldr	r7, [pc, #148]	; (8005c10 <_malloc_trim_r+0x9c>)
 8005b7a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8005c1c <_malloc_trim_r+0xa8>
 8005b7e:	4689      	mov	r9, r1
 8005b80:	4606      	mov	r6, r0
 8005b82:	f000 fd53 	bl	800662c <__malloc_lock>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	685d      	ldr	r5, [r3, #4]
 8005b8a:	f1a8 0411 	sub.w	r4, r8, #17
 8005b8e:	f025 0503 	bic.w	r5, r5, #3
 8005b92:	eba4 0409 	sub.w	r4, r4, r9
 8005b96:	442c      	add	r4, r5
 8005b98:	fbb4 f4f8 	udiv	r4, r4, r8
 8005b9c:	3c01      	subs	r4, #1
 8005b9e:	fb08 f404 	mul.w	r4, r8, r4
 8005ba2:	4544      	cmp	r4, r8
 8005ba4:	da05      	bge.n	8005bb2 <_malloc_trim_r+0x3e>
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	f000 fd46 	bl	8006638 <__malloc_unlock>
 8005bac:	2000      	movs	r0, #0
 8005bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f001 fa35 	bl	8007024 <_sbrk_r>
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	442b      	add	r3, r5
 8005bbe:	4298      	cmp	r0, r3
 8005bc0:	d1f1      	bne.n	8005ba6 <_malloc_trim_r+0x32>
 8005bc2:	4261      	negs	r1, r4
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	f001 fa2d 	bl	8007024 <_sbrk_r>
 8005bca:	3001      	adds	r0, #1
 8005bcc:	d110      	bne.n	8005bf0 <_malloc_trim_r+0x7c>
 8005bce:	2100      	movs	r1, #0
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	f001 fa27 	bl	8007024 <_sbrk_r>
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	1a83      	subs	r3, r0, r2
 8005bda:	2b0f      	cmp	r3, #15
 8005bdc:	dde3      	ble.n	8005ba6 <_malloc_trim_r+0x32>
 8005bde:	490d      	ldr	r1, [pc, #52]	; (8005c14 <_malloc_trim_r+0xa0>)
 8005be0:	6809      	ldr	r1, [r1, #0]
 8005be2:	1a40      	subs	r0, r0, r1
 8005be4:	490c      	ldr	r1, [pc, #48]	; (8005c18 <_malloc_trim_r+0xa4>)
 8005be6:	f043 0301 	orr.w	r3, r3, #1
 8005bea:	6008      	str	r0, [r1, #0]
 8005bec:	6053      	str	r3, [r2, #4]
 8005bee:	e7da      	b.n	8005ba6 <_malloc_trim_r+0x32>
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	4a09      	ldr	r2, [pc, #36]	; (8005c18 <_malloc_trim_r+0xa4>)
 8005bf4:	1b2d      	subs	r5, r5, r4
 8005bf6:	f045 0501 	orr.w	r5, r5, #1
 8005bfa:	605d      	str	r5, [r3, #4]
 8005bfc:	6813      	ldr	r3, [r2, #0]
 8005bfe:	4630      	mov	r0, r6
 8005c00:	1b1c      	subs	r4, r3, r4
 8005c02:	6014      	str	r4, [r2, #0]
 8005c04:	f000 fd18 	bl	8006638 <__malloc_unlock>
 8005c08:	2001      	movs	r0, #1
 8005c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c0e:	bf00      	nop
 8005c10:	2000021c 	.word	0x2000021c
 8005c14:	20000624 	.word	0x20000624
 8005c18:	20000c04 	.word	0x20000c04
 8005c1c:	00000080 	.word	0x00000080

08005c20 <_free_r>:
 8005c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c24:	4604      	mov	r4, r0
 8005c26:	4688      	mov	r8, r1
 8005c28:	2900      	cmp	r1, #0
 8005c2a:	f000 80ab 	beq.w	8005d84 <_free_r+0x164>
 8005c2e:	f000 fcfd 	bl	800662c <__malloc_lock>
 8005c32:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8005c36:	4d54      	ldr	r5, [pc, #336]	; (8005d88 <_free_r+0x168>)
 8005c38:	f022 0001 	bic.w	r0, r2, #1
 8005c3c:	f1a8 0308 	sub.w	r3, r8, #8
 8005c40:	181f      	adds	r7, r3, r0
 8005c42:	68a9      	ldr	r1, [r5, #8]
 8005c44:	687e      	ldr	r6, [r7, #4]
 8005c46:	428f      	cmp	r7, r1
 8005c48:	f026 0603 	bic.w	r6, r6, #3
 8005c4c:	f002 0201 	and.w	r2, r2, #1
 8005c50:	d11b      	bne.n	8005c8a <_free_r+0x6a>
 8005c52:	4430      	add	r0, r6
 8005c54:	b93a      	cbnz	r2, 8005c66 <_free_r+0x46>
 8005c56:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8005c5a:	1a9b      	subs	r3, r3, r2
 8005c5c:	4410      	add	r0, r2
 8005c5e:	6899      	ldr	r1, [r3, #8]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	60ca      	str	r2, [r1, #12]
 8005c64:	6091      	str	r1, [r2, #8]
 8005c66:	f040 0201 	orr.w	r2, r0, #1
 8005c6a:	605a      	str	r2, [r3, #4]
 8005c6c:	60ab      	str	r3, [r5, #8]
 8005c6e:	4b47      	ldr	r3, [pc, #284]	; (8005d8c <_free_r+0x16c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4298      	cmp	r0, r3
 8005c74:	d304      	bcc.n	8005c80 <_free_r+0x60>
 8005c76:	4b46      	ldr	r3, [pc, #280]	; (8005d90 <_free_r+0x170>)
 8005c78:	4620      	mov	r0, r4
 8005c7a:	6819      	ldr	r1, [r3, #0]
 8005c7c:	f7ff ff7a 	bl	8005b74 <_malloc_trim_r>
 8005c80:	4620      	mov	r0, r4
 8005c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c86:	f000 bcd7 	b.w	8006638 <__malloc_unlock>
 8005c8a:	607e      	str	r6, [r7, #4]
 8005c8c:	2a00      	cmp	r2, #0
 8005c8e:	d139      	bne.n	8005d04 <_free_r+0xe4>
 8005c90:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005c94:	1a5b      	subs	r3, r3, r1
 8005c96:	4408      	add	r0, r1
 8005c98:	6899      	ldr	r1, [r3, #8]
 8005c9a:	f105 0e08 	add.w	lr, r5, #8
 8005c9e:	4571      	cmp	r1, lr
 8005ca0:	d032      	beq.n	8005d08 <_free_r+0xe8>
 8005ca2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8005ca6:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005caa:	f8ce 1008 	str.w	r1, [lr, #8]
 8005cae:	19b9      	adds	r1, r7, r6
 8005cb0:	6849      	ldr	r1, [r1, #4]
 8005cb2:	07c9      	lsls	r1, r1, #31
 8005cb4:	d40a      	bmi.n	8005ccc <_free_r+0xac>
 8005cb6:	4430      	add	r0, r6
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	bb3a      	cbnz	r2, 8005d0c <_free_r+0xec>
 8005cbc:	4e35      	ldr	r6, [pc, #212]	; (8005d94 <_free_r+0x174>)
 8005cbe:	42b1      	cmp	r1, r6
 8005cc0:	d124      	bne.n	8005d0c <_free_r+0xec>
 8005cc2:	616b      	str	r3, [r5, #20]
 8005cc4:	612b      	str	r3, [r5, #16]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	60d9      	str	r1, [r3, #12]
 8005cca:	6099      	str	r1, [r3, #8]
 8005ccc:	f040 0101 	orr.w	r1, r0, #1
 8005cd0:	6059      	str	r1, [r3, #4]
 8005cd2:	5018      	str	r0, [r3, r0]
 8005cd4:	2a00      	cmp	r2, #0
 8005cd6:	d1d3      	bne.n	8005c80 <_free_r+0x60>
 8005cd8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005cdc:	d21a      	bcs.n	8005d14 <_free_r+0xf4>
 8005cde:	08c0      	lsrs	r0, r0, #3
 8005ce0:	1081      	asrs	r1, r0, #2
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	408a      	lsls	r2, r1
 8005ce6:	6869      	ldr	r1, [r5, #4]
 8005ce8:	3001      	adds	r0, #1
 8005cea:	430a      	orrs	r2, r1
 8005cec:	606a      	str	r2, [r5, #4]
 8005cee:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005cf2:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005cf6:	6099      	str	r1, [r3, #8]
 8005cf8:	3a08      	subs	r2, #8
 8005cfa:	60da      	str	r2, [r3, #12]
 8005cfc:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005d00:	60cb      	str	r3, [r1, #12]
 8005d02:	e7bd      	b.n	8005c80 <_free_r+0x60>
 8005d04:	2200      	movs	r2, #0
 8005d06:	e7d2      	b.n	8005cae <_free_r+0x8e>
 8005d08:	2201      	movs	r2, #1
 8005d0a:	e7d0      	b.n	8005cae <_free_r+0x8e>
 8005d0c:	68fe      	ldr	r6, [r7, #12]
 8005d0e:	60ce      	str	r6, [r1, #12]
 8005d10:	60b1      	str	r1, [r6, #8]
 8005d12:	e7db      	b.n	8005ccc <_free_r+0xac>
 8005d14:	0a42      	lsrs	r2, r0, #9
 8005d16:	2a04      	cmp	r2, #4
 8005d18:	d813      	bhi.n	8005d42 <_free_r+0x122>
 8005d1a:	0982      	lsrs	r2, r0, #6
 8005d1c:	3238      	adds	r2, #56	; 0x38
 8005d1e:	1c51      	adds	r1, r2, #1
 8005d20:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005d24:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005d28:	428e      	cmp	r6, r1
 8005d2a:	d124      	bne.n	8005d76 <_free_r+0x156>
 8005d2c:	2001      	movs	r0, #1
 8005d2e:	1092      	asrs	r2, r2, #2
 8005d30:	fa00 f202 	lsl.w	r2, r0, r2
 8005d34:	6868      	ldr	r0, [r5, #4]
 8005d36:	4302      	orrs	r2, r0
 8005d38:	606a      	str	r2, [r5, #4]
 8005d3a:	60de      	str	r6, [r3, #12]
 8005d3c:	6099      	str	r1, [r3, #8]
 8005d3e:	60b3      	str	r3, [r6, #8]
 8005d40:	e7de      	b.n	8005d00 <_free_r+0xe0>
 8005d42:	2a14      	cmp	r2, #20
 8005d44:	d801      	bhi.n	8005d4a <_free_r+0x12a>
 8005d46:	325b      	adds	r2, #91	; 0x5b
 8005d48:	e7e9      	b.n	8005d1e <_free_r+0xfe>
 8005d4a:	2a54      	cmp	r2, #84	; 0x54
 8005d4c:	d802      	bhi.n	8005d54 <_free_r+0x134>
 8005d4e:	0b02      	lsrs	r2, r0, #12
 8005d50:	326e      	adds	r2, #110	; 0x6e
 8005d52:	e7e4      	b.n	8005d1e <_free_r+0xfe>
 8005d54:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005d58:	d802      	bhi.n	8005d60 <_free_r+0x140>
 8005d5a:	0bc2      	lsrs	r2, r0, #15
 8005d5c:	3277      	adds	r2, #119	; 0x77
 8005d5e:	e7de      	b.n	8005d1e <_free_r+0xfe>
 8005d60:	f240 5154 	movw	r1, #1364	; 0x554
 8005d64:	428a      	cmp	r2, r1
 8005d66:	bf9a      	itte	ls
 8005d68:	0c82      	lsrls	r2, r0, #18
 8005d6a:	327c      	addls	r2, #124	; 0x7c
 8005d6c:	227e      	movhi	r2, #126	; 0x7e
 8005d6e:	e7d6      	b.n	8005d1e <_free_r+0xfe>
 8005d70:	6889      	ldr	r1, [r1, #8]
 8005d72:	428e      	cmp	r6, r1
 8005d74:	d004      	beq.n	8005d80 <_free_r+0x160>
 8005d76:	684a      	ldr	r2, [r1, #4]
 8005d78:	f022 0203 	bic.w	r2, r2, #3
 8005d7c:	4290      	cmp	r0, r2
 8005d7e:	d3f7      	bcc.n	8005d70 <_free_r+0x150>
 8005d80:	68ce      	ldr	r6, [r1, #12]
 8005d82:	e7da      	b.n	8005d3a <_free_r+0x11a>
 8005d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d88:	2000021c 	.word	0x2000021c
 8005d8c:	20000628 	.word	0x20000628
 8005d90:	20000c34 	.word	0x20000c34
 8005d94:	20000224 	.word	0x20000224

08005d98 <__sfvwrite_r>:
 8005d98:	6893      	ldr	r3, [r2, #8]
 8005d9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9e:	4607      	mov	r7, r0
 8005da0:	460c      	mov	r4, r1
 8005da2:	4690      	mov	r8, r2
 8005da4:	b91b      	cbnz	r3, 8005dae <__sfvwrite_r+0x16>
 8005da6:	2000      	movs	r0, #0
 8005da8:	b003      	add	sp, #12
 8005daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dae:	898b      	ldrh	r3, [r1, #12]
 8005db0:	0718      	lsls	r0, r3, #28
 8005db2:	d526      	bpl.n	8005e02 <__sfvwrite_r+0x6a>
 8005db4:	690b      	ldr	r3, [r1, #16]
 8005db6:	b323      	cbz	r3, 8005e02 <__sfvwrite_r+0x6a>
 8005db8:	89a3      	ldrh	r3, [r4, #12]
 8005dba:	f8d8 6000 	ldr.w	r6, [r8]
 8005dbe:	f013 0902 	ands.w	r9, r3, #2
 8005dc2:	d02d      	beq.n	8005e20 <__sfvwrite_r+0x88>
 8005dc4:	f04f 0a00 	mov.w	sl, #0
 8005dc8:	f8df b264 	ldr.w	fp, [pc, #612]	; 8006030 <__sfvwrite_r+0x298>
 8005dcc:	46d1      	mov	r9, sl
 8005dce:	f1b9 0f00 	cmp.w	r9, #0
 8005dd2:	d01f      	beq.n	8005e14 <__sfvwrite_r+0x7c>
 8005dd4:	45d9      	cmp	r9, fp
 8005dd6:	464b      	mov	r3, r9
 8005dd8:	4652      	mov	r2, sl
 8005dda:	bf28      	it	cs
 8005ddc:	465b      	movcs	r3, fp
 8005dde:	6a21      	ldr	r1, [r4, #32]
 8005de0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005de2:	4638      	mov	r0, r7
 8005de4:	47a8      	blx	r5
 8005de6:	2800      	cmp	r0, #0
 8005de8:	f340 8089 	ble.w	8005efe <__sfvwrite_r+0x166>
 8005dec:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005df0:	4482      	add	sl, r0
 8005df2:	eba9 0900 	sub.w	r9, r9, r0
 8005df6:	1a18      	subs	r0, r3, r0
 8005df8:	f8c8 0008 	str.w	r0, [r8, #8]
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	d1e6      	bne.n	8005dce <__sfvwrite_r+0x36>
 8005e00:	e7d1      	b.n	8005da6 <__sfvwrite_r+0xe>
 8005e02:	4621      	mov	r1, r4
 8005e04:	4638      	mov	r0, r7
 8005e06:	f7fe fe35 	bl	8004a74 <__swsetup_r>
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d0d4      	beq.n	8005db8 <__sfvwrite_r+0x20>
 8005e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e12:	e7c9      	b.n	8005da8 <__sfvwrite_r+0x10>
 8005e14:	f8d6 a000 	ldr.w	sl, [r6]
 8005e18:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8005e1c:	3608      	adds	r6, #8
 8005e1e:	e7d6      	b.n	8005dce <__sfvwrite_r+0x36>
 8005e20:	f013 0301 	ands.w	r3, r3, #1
 8005e24:	d043      	beq.n	8005eae <__sfvwrite_r+0x116>
 8005e26:	4648      	mov	r0, r9
 8005e28:	46ca      	mov	sl, r9
 8005e2a:	46cb      	mov	fp, r9
 8005e2c:	f1bb 0f00 	cmp.w	fp, #0
 8005e30:	f000 80d9 	beq.w	8005fe6 <__sfvwrite_r+0x24e>
 8005e34:	b950      	cbnz	r0, 8005e4c <__sfvwrite_r+0xb4>
 8005e36:	465a      	mov	r2, fp
 8005e38:	210a      	movs	r1, #10
 8005e3a:	4650      	mov	r0, sl
 8005e3c:	f7fa f9d8 	bl	80001f0 <memchr>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	f000 80d5 	beq.w	8005ff0 <__sfvwrite_r+0x258>
 8005e46:	3001      	adds	r0, #1
 8005e48:	eba0 090a 	sub.w	r9, r0, sl
 8005e4c:	6820      	ldr	r0, [r4, #0]
 8005e4e:	6921      	ldr	r1, [r4, #16]
 8005e50:	6962      	ldr	r2, [r4, #20]
 8005e52:	45d9      	cmp	r9, fp
 8005e54:	464b      	mov	r3, r9
 8005e56:	bf28      	it	cs
 8005e58:	465b      	movcs	r3, fp
 8005e5a:	4288      	cmp	r0, r1
 8005e5c:	f240 80cb 	bls.w	8005ff6 <__sfvwrite_r+0x25e>
 8005e60:	68a5      	ldr	r5, [r4, #8]
 8005e62:	4415      	add	r5, r2
 8005e64:	42ab      	cmp	r3, r5
 8005e66:	f340 80c6 	ble.w	8005ff6 <__sfvwrite_r+0x25e>
 8005e6a:	4651      	mov	r1, sl
 8005e6c:	462a      	mov	r2, r5
 8005e6e:	f000 fbba 	bl	80065e6 <memmove>
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	442b      	add	r3, r5
 8005e76:	6023      	str	r3, [r4, #0]
 8005e78:	4621      	mov	r1, r4
 8005e7a:	4638      	mov	r0, r7
 8005e7c:	f7ff fd54 	bl	8005928 <_fflush_r>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d13c      	bne.n	8005efe <__sfvwrite_r+0x166>
 8005e84:	ebb9 0905 	subs.w	r9, r9, r5
 8005e88:	f040 80cf 	bne.w	800602a <__sfvwrite_r+0x292>
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	4638      	mov	r0, r7
 8005e90:	f7ff fd4a 	bl	8005928 <_fflush_r>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	d132      	bne.n	8005efe <__sfvwrite_r+0x166>
 8005e98:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005e9c:	44aa      	add	sl, r5
 8005e9e:	ebab 0b05 	sub.w	fp, fp, r5
 8005ea2:	1b5d      	subs	r5, r3, r5
 8005ea4:	f8c8 5008 	str.w	r5, [r8, #8]
 8005ea8:	2d00      	cmp	r5, #0
 8005eaa:	d1bf      	bne.n	8005e2c <__sfvwrite_r+0x94>
 8005eac:	e77b      	b.n	8005da6 <__sfvwrite_r+0xe>
 8005eae:	4699      	mov	r9, r3
 8005eb0:	469a      	mov	sl, r3
 8005eb2:	f1ba 0f00 	cmp.w	sl, #0
 8005eb6:	d027      	beq.n	8005f08 <__sfvwrite_r+0x170>
 8005eb8:	89a2      	ldrh	r2, [r4, #12]
 8005eba:	68a5      	ldr	r5, [r4, #8]
 8005ebc:	0591      	lsls	r1, r2, #22
 8005ebe:	d565      	bpl.n	8005f8c <__sfvwrite_r+0x1f4>
 8005ec0:	45aa      	cmp	sl, r5
 8005ec2:	d33b      	bcc.n	8005f3c <__sfvwrite_r+0x1a4>
 8005ec4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ec8:	d036      	beq.n	8005f38 <__sfvwrite_r+0x1a0>
 8005eca:	6921      	ldr	r1, [r4, #16]
 8005ecc:	6823      	ldr	r3, [r4, #0]
 8005ece:	1a5b      	subs	r3, r3, r1
 8005ed0:	9301      	str	r3, [sp, #4]
 8005ed2:	6963      	ldr	r3, [r4, #20]
 8005ed4:	2002      	movs	r0, #2
 8005ed6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005eda:	fb93 fbf0 	sdiv	fp, r3, r0
 8005ede:	9b01      	ldr	r3, [sp, #4]
 8005ee0:	1c58      	adds	r0, r3, #1
 8005ee2:	4450      	add	r0, sl
 8005ee4:	4583      	cmp	fp, r0
 8005ee6:	bf38      	it	cc
 8005ee8:	4683      	movcc	fp, r0
 8005eea:	0553      	lsls	r3, r2, #21
 8005eec:	d53e      	bpl.n	8005f6c <__sfvwrite_r+0x1d4>
 8005eee:	4659      	mov	r1, fp
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	f000 f95f 	bl	80061b4 <_malloc_r>
 8005ef6:	4605      	mov	r5, r0
 8005ef8:	b950      	cbnz	r0, 8005f10 <__sfvwrite_r+0x178>
 8005efa:	230c      	movs	r3, #12
 8005efc:	603b      	str	r3, [r7, #0]
 8005efe:	89a3      	ldrh	r3, [r4, #12]
 8005f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f04:	81a3      	strh	r3, [r4, #12]
 8005f06:	e782      	b.n	8005e0e <__sfvwrite_r+0x76>
 8005f08:	e896 0600 	ldmia.w	r6, {r9, sl}
 8005f0c:	3608      	adds	r6, #8
 8005f0e:	e7d0      	b.n	8005eb2 <__sfvwrite_r+0x11a>
 8005f10:	9a01      	ldr	r2, [sp, #4]
 8005f12:	6921      	ldr	r1, [r4, #16]
 8005f14:	f000 fb5c 	bl	80065d0 <memcpy>
 8005f18:	89a2      	ldrh	r2, [r4, #12]
 8005f1a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8005f1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f22:	81a2      	strh	r2, [r4, #12]
 8005f24:	9b01      	ldr	r3, [sp, #4]
 8005f26:	6125      	str	r5, [r4, #16]
 8005f28:	441d      	add	r5, r3
 8005f2a:	ebab 0303 	sub.w	r3, fp, r3
 8005f2e:	6025      	str	r5, [r4, #0]
 8005f30:	f8c4 b014 	str.w	fp, [r4, #20]
 8005f34:	4655      	mov	r5, sl
 8005f36:	60a3      	str	r3, [r4, #8]
 8005f38:	45aa      	cmp	sl, r5
 8005f3a:	d200      	bcs.n	8005f3e <__sfvwrite_r+0x1a6>
 8005f3c:	4655      	mov	r5, sl
 8005f3e:	462a      	mov	r2, r5
 8005f40:	4649      	mov	r1, r9
 8005f42:	6820      	ldr	r0, [r4, #0]
 8005f44:	f000 fb4f 	bl	80065e6 <memmove>
 8005f48:	68a3      	ldr	r3, [r4, #8]
 8005f4a:	1b5b      	subs	r3, r3, r5
 8005f4c:	60a3      	str	r3, [r4, #8]
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	441d      	add	r5, r3
 8005f52:	6025      	str	r5, [r4, #0]
 8005f54:	4655      	mov	r5, sl
 8005f56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f5a:	44a9      	add	r9, r5
 8005f5c:	ebaa 0a05 	sub.w	sl, sl, r5
 8005f60:	1b5d      	subs	r5, r3, r5
 8005f62:	f8c8 5008 	str.w	r5, [r8, #8]
 8005f66:	2d00      	cmp	r5, #0
 8005f68:	d1a3      	bne.n	8005eb2 <__sfvwrite_r+0x11a>
 8005f6a:	e71c      	b.n	8005da6 <__sfvwrite_r+0xe>
 8005f6c:	465a      	mov	r2, fp
 8005f6e:	4638      	mov	r0, r7
 8005f70:	f000 fe38 	bl	8006be4 <_realloc_r>
 8005f74:	4605      	mov	r5, r0
 8005f76:	2800      	cmp	r0, #0
 8005f78:	d1d4      	bne.n	8005f24 <__sfvwrite_r+0x18c>
 8005f7a:	6921      	ldr	r1, [r4, #16]
 8005f7c:	4638      	mov	r0, r7
 8005f7e:	f7ff fe4f 	bl	8005c20 <_free_r>
 8005f82:	89a3      	ldrh	r3, [r4, #12]
 8005f84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f88:	81a3      	strh	r3, [r4, #12]
 8005f8a:	e7b6      	b.n	8005efa <__sfvwrite_r+0x162>
 8005f8c:	6820      	ldr	r0, [r4, #0]
 8005f8e:	6923      	ldr	r3, [r4, #16]
 8005f90:	4298      	cmp	r0, r3
 8005f92:	d802      	bhi.n	8005f9a <__sfvwrite_r+0x202>
 8005f94:	6962      	ldr	r2, [r4, #20]
 8005f96:	4592      	cmp	sl, r2
 8005f98:	d215      	bcs.n	8005fc6 <__sfvwrite_r+0x22e>
 8005f9a:	4555      	cmp	r5, sl
 8005f9c:	bf28      	it	cs
 8005f9e:	4655      	movcs	r5, sl
 8005fa0:	462a      	mov	r2, r5
 8005fa2:	4649      	mov	r1, r9
 8005fa4:	f000 fb1f 	bl	80065e6 <memmove>
 8005fa8:	68a3      	ldr	r3, [r4, #8]
 8005faa:	6822      	ldr	r2, [r4, #0]
 8005fac:	1b5b      	subs	r3, r3, r5
 8005fae:	442a      	add	r2, r5
 8005fb0:	60a3      	str	r3, [r4, #8]
 8005fb2:	6022      	str	r2, [r4, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1ce      	bne.n	8005f56 <__sfvwrite_r+0x1be>
 8005fb8:	4621      	mov	r1, r4
 8005fba:	4638      	mov	r0, r7
 8005fbc:	f7ff fcb4 	bl	8005928 <_fflush_r>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d0c8      	beq.n	8005f56 <__sfvwrite_r+0x1be>
 8005fc4:	e79b      	b.n	8005efe <__sfvwrite_r+0x166>
 8005fc6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005fca:	4553      	cmp	r3, sl
 8005fcc:	bf28      	it	cs
 8005fce:	4653      	movcs	r3, sl
 8005fd0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005fd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fd6:	6a21      	ldr	r1, [r4, #32]
 8005fd8:	4353      	muls	r3, r2
 8005fda:	4638      	mov	r0, r7
 8005fdc:	464a      	mov	r2, r9
 8005fde:	47a8      	blx	r5
 8005fe0:	1e05      	subs	r5, r0, #0
 8005fe2:	dcb8      	bgt.n	8005f56 <__sfvwrite_r+0x1be>
 8005fe4:	e78b      	b.n	8005efe <__sfvwrite_r+0x166>
 8005fe6:	e896 0c00 	ldmia.w	r6, {sl, fp}
 8005fea:	2000      	movs	r0, #0
 8005fec:	3608      	adds	r6, #8
 8005fee:	e71d      	b.n	8005e2c <__sfvwrite_r+0x94>
 8005ff0:	f10b 0901 	add.w	r9, fp, #1
 8005ff4:	e72a      	b.n	8005e4c <__sfvwrite_r+0xb4>
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	db09      	blt.n	800600e <__sfvwrite_r+0x276>
 8005ffa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005ffc:	6a21      	ldr	r1, [r4, #32]
 8005ffe:	4613      	mov	r3, r2
 8006000:	4638      	mov	r0, r7
 8006002:	4652      	mov	r2, sl
 8006004:	47a8      	blx	r5
 8006006:	1e05      	subs	r5, r0, #0
 8006008:	f73f af3c 	bgt.w	8005e84 <__sfvwrite_r+0xec>
 800600c:	e777      	b.n	8005efe <__sfvwrite_r+0x166>
 800600e:	461a      	mov	r2, r3
 8006010:	4651      	mov	r1, sl
 8006012:	9301      	str	r3, [sp, #4]
 8006014:	f000 fae7 	bl	80065e6 <memmove>
 8006018:	9b01      	ldr	r3, [sp, #4]
 800601a:	68a2      	ldr	r2, [r4, #8]
 800601c:	1ad2      	subs	r2, r2, r3
 800601e:	60a2      	str	r2, [r4, #8]
 8006020:	6822      	ldr	r2, [r4, #0]
 8006022:	441a      	add	r2, r3
 8006024:	6022      	str	r2, [r4, #0]
 8006026:	461d      	mov	r5, r3
 8006028:	e72c      	b.n	8005e84 <__sfvwrite_r+0xec>
 800602a:	2001      	movs	r0, #1
 800602c:	e734      	b.n	8005e98 <__sfvwrite_r+0x100>
 800602e:	bf00      	nop
 8006030:	7ffffc00 	.word	0x7ffffc00

08006034 <_fwalk>:
 8006034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006038:	4688      	mov	r8, r1
 800603a:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 800603e:	2600      	movs	r6, #0
 8006040:	b914      	cbnz	r4, 8006048 <_fwalk+0x14>
 8006042:	4630      	mov	r0, r6
 8006044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006048:	68a5      	ldr	r5, [r4, #8]
 800604a:	6867      	ldr	r7, [r4, #4]
 800604c:	3f01      	subs	r7, #1
 800604e:	d501      	bpl.n	8006054 <_fwalk+0x20>
 8006050:	6824      	ldr	r4, [r4, #0]
 8006052:	e7f5      	b.n	8006040 <_fwalk+0xc>
 8006054:	89ab      	ldrh	r3, [r5, #12]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d906      	bls.n	8006068 <_fwalk+0x34>
 800605a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800605e:	3301      	adds	r3, #1
 8006060:	d002      	beq.n	8006068 <_fwalk+0x34>
 8006062:	4628      	mov	r0, r5
 8006064:	47c0      	blx	r8
 8006066:	4306      	orrs	r6, r0
 8006068:	3568      	adds	r5, #104	; 0x68
 800606a:	e7ef      	b.n	800604c <_fwalk+0x18>

0800606c <_fwalk_reent>:
 800606c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006070:	4680      	mov	r8, r0
 8006072:	4689      	mov	r9, r1
 8006074:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8006078:	2600      	movs	r6, #0
 800607a:	b914      	cbnz	r4, 8006082 <_fwalk_reent+0x16>
 800607c:	4630      	mov	r0, r6
 800607e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006082:	68a5      	ldr	r5, [r4, #8]
 8006084:	6867      	ldr	r7, [r4, #4]
 8006086:	3f01      	subs	r7, #1
 8006088:	d501      	bpl.n	800608e <_fwalk_reent+0x22>
 800608a:	6824      	ldr	r4, [r4, #0]
 800608c:	e7f5      	b.n	800607a <_fwalk_reent+0xe>
 800608e:	89ab      	ldrh	r3, [r5, #12]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d907      	bls.n	80060a4 <_fwalk_reent+0x38>
 8006094:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006098:	3301      	adds	r3, #1
 800609a:	d003      	beq.n	80060a4 <_fwalk_reent+0x38>
 800609c:	4629      	mov	r1, r5
 800609e:	4640      	mov	r0, r8
 80060a0:	47c8      	blx	r9
 80060a2:	4306      	orrs	r6, r0
 80060a4:	3568      	adds	r5, #104	; 0x68
 80060a6:	e7ee      	b.n	8006086 <_fwalk_reent+0x1a>

080060a8 <_localeconv_r>:
 80060a8:	4b04      	ldr	r3, [pc, #16]	; (80060bc <_localeconv_r+0x14>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6a18      	ldr	r0, [r3, #32]
 80060ae:	4b04      	ldr	r3, [pc, #16]	; (80060c0 <_localeconv_r+0x18>)
 80060b0:	2800      	cmp	r0, #0
 80060b2:	bf08      	it	eq
 80060b4:	4618      	moveq	r0, r3
 80060b6:	30f0      	adds	r0, #240	; 0xf0
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	20000128 	.word	0x20000128
 80060c0:	2000062c 	.word	0x2000062c

080060c4 <__retarget_lock_init_recursive>:
 80060c4:	4770      	bx	lr

080060c6 <__retarget_lock_close_recursive>:
 80060c6:	4770      	bx	lr

080060c8 <__retarget_lock_acquire_recursive>:
 80060c8:	4770      	bx	lr

080060ca <__retarget_lock_release_recursive>:
 80060ca:	4770      	bx	lr

080060cc <__swhatbuf_r>:
 80060cc:	b570      	push	{r4, r5, r6, lr}
 80060ce:	460e      	mov	r6, r1
 80060d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d4:	2900      	cmp	r1, #0
 80060d6:	b090      	sub	sp, #64	; 0x40
 80060d8:	4614      	mov	r4, r2
 80060da:	461d      	mov	r5, r3
 80060dc:	da09      	bge.n	80060f2 <__swhatbuf_r+0x26>
 80060de:	89b3      	ldrh	r3, [r6, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80060e6:	602a      	str	r2, [r5, #0]
 80060e8:	d116      	bne.n	8006118 <__swhatbuf_r+0x4c>
 80060ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060ee:	6023      	str	r3, [r4, #0]
 80060f0:	e015      	b.n	800611e <__swhatbuf_r+0x52>
 80060f2:	aa01      	add	r2, sp, #4
 80060f4:	f001 f944 	bl	8007380 <_fstat_r>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	dbf0      	blt.n	80060de <__swhatbuf_r+0x12>
 80060fc:	9a02      	ldr	r2, [sp, #8]
 80060fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006102:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006106:	425a      	negs	r2, r3
 8006108:	415a      	adcs	r2, r3
 800610a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800610e:	602a      	str	r2, [r5, #0]
 8006110:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006114:	6023      	str	r3, [r4, #0]
 8006116:	e002      	b.n	800611e <__swhatbuf_r+0x52>
 8006118:	2340      	movs	r3, #64	; 0x40
 800611a:	6023      	str	r3, [r4, #0]
 800611c:	4610      	mov	r0, r2
 800611e:	b010      	add	sp, #64	; 0x40
 8006120:	bd70      	pop	{r4, r5, r6, pc}
	...

08006124 <__smakebuf_r>:
 8006124:	898b      	ldrh	r3, [r1, #12]
 8006126:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006128:	079d      	lsls	r5, r3, #30
 800612a:	4606      	mov	r6, r0
 800612c:	460c      	mov	r4, r1
 800612e:	d507      	bpl.n	8006140 <__smakebuf_r+0x1c>
 8006130:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006134:	6023      	str	r3, [r4, #0]
 8006136:	6123      	str	r3, [r4, #16]
 8006138:	2301      	movs	r3, #1
 800613a:	6163      	str	r3, [r4, #20]
 800613c:	b002      	add	sp, #8
 800613e:	bd70      	pop	{r4, r5, r6, pc}
 8006140:	ab01      	add	r3, sp, #4
 8006142:	466a      	mov	r2, sp
 8006144:	f7ff ffc2 	bl	80060cc <__swhatbuf_r>
 8006148:	9900      	ldr	r1, [sp, #0]
 800614a:	4605      	mov	r5, r0
 800614c:	4630      	mov	r0, r6
 800614e:	f000 f831 	bl	80061b4 <_malloc_r>
 8006152:	b948      	cbnz	r0, 8006168 <__smakebuf_r+0x44>
 8006154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006158:	059a      	lsls	r2, r3, #22
 800615a:	d4ef      	bmi.n	800613c <__smakebuf_r+0x18>
 800615c:	f023 0303 	bic.w	r3, r3, #3
 8006160:	f043 0302 	orr.w	r3, r3, #2
 8006164:	81a3      	strh	r3, [r4, #12]
 8006166:	e7e3      	b.n	8006130 <__smakebuf_r+0xc>
 8006168:	4b0d      	ldr	r3, [pc, #52]	; (80061a0 <__smakebuf_r+0x7c>)
 800616a:	62b3      	str	r3, [r6, #40]	; 0x28
 800616c:	89a3      	ldrh	r3, [r4, #12]
 800616e:	6020      	str	r0, [r4, #0]
 8006170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006174:	81a3      	strh	r3, [r4, #12]
 8006176:	9b00      	ldr	r3, [sp, #0]
 8006178:	6163      	str	r3, [r4, #20]
 800617a:	9b01      	ldr	r3, [sp, #4]
 800617c:	6120      	str	r0, [r4, #16]
 800617e:	b15b      	cbz	r3, 8006198 <__smakebuf_r+0x74>
 8006180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006184:	4630      	mov	r0, r6
 8006186:	f001 f90d 	bl	80073a4 <_isatty_r>
 800618a:	b128      	cbz	r0, 8006198 <__smakebuf_r+0x74>
 800618c:	89a3      	ldrh	r3, [r4, #12]
 800618e:	f023 0303 	bic.w	r3, r3, #3
 8006192:	f043 0301 	orr.w	r3, r3, #1
 8006196:	81a3      	strh	r3, [r4, #12]
 8006198:	89a3      	ldrh	r3, [r4, #12]
 800619a:	431d      	orrs	r5, r3
 800619c:	81a5      	strh	r5, [r4, #12]
 800619e:	e7cd      	b.n	800613c <__smakebuf_r+0x18>
 80061a0:	080059c5 	.word	0x080059c5

080061a4 <malloc>:
 80061a4:	4b02      	ldr	r3, [pc, #8]	; (80061b0 <malloc+0xc>)
 80061a6:	4601      	mov	r1, r0
 80061a8:	6818      	ldr	r0, [r3, #0]
 80061aa:	f000 b803 	b.w	80061b4 <_malloc_r>
 80061ae:	bf00      	nop
 80061b0:	20000128 	.word	0x20000128

080061b4 <_malloc_r>:
 80061b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b8:	f101 040b 	add.w	r4, r1, #11
 80061bc:	2c16      	cmp	r4, #22
 80061be:	4681      	mov	r9, r0
 80061c0:	d907      	bls.n	80061d2 <_malloc_r+0x1e>
 80061c2:	f034 0407 	bics.w	r4, r4, #7
 80061c6:	d505      	bpl.n	80061d4 <_malloc_r+0x20>
 80061c8:	230c      	movs	r3, #12
 80061ca:	f8c9 3000 	str.w	r3, [r9]
 80061ce:	2600      	movs	r6, #0
 80061d0:	e131      	b.n	8006436 <_malloc_r+0x282>
 80061d2:	2410      	movs	r4, #16
 80061d4:	428c      	cmp	r4, r1
 80061d6:	d3f7      	bcc.n	80061c8 <_malloc_r+0x14>
 80061d8:	4648      	mov	r0, r9
 80061da:	f000 fa27 	bl	800662c <__malloc_lock>
 80061de:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80061e2:	4d9c      	ldr	r5, [pc, #624]	; (8006454 <_malloc_r+0x2a0>)
 80061e4:	d236      	bcs.n	8006254 <_malloc_r+0xa0>
 80061e6:	f104 0208 	add.w	r2, r4, #8
 80061ea:	442a      	add	r2, r5
 80061ec:	f1a2 0108 	sub.w	r1, r2, #8
 80061f0:	6856      	ldr	r6, [r2, #4]
 80061f2:	428e      	cmp	r6, r1
 80061f4:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80061f8:	d102      	bne.n	8006200 <_malloc_r+0x4c>
 80061fa:	68d6      	ldr	r6, [r2, #12]
 80061fc:	42b2      	cmp	r2, r6
 80061fe:	d010      	beq.n	8006222 <_malloc_r+0x6e>
 8006200:	6873      	ldr	r3, [r6, #4]
 8006202:	68f2      	ldr	r2, [r6, #12]
 8006204:	68b1      	ldr	r1, [r6, #8]
 8006206:	f023 0303 	bic.w	r3, r3, #3
 800620a:	60ca      	str	r2, [r1, #12]
 800620c:	4433      	add	r3, r6
 800620e:	6091      	str	r1, [r2, #8]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	f042 0201 	orr.w	r2, r2, #1
 8006216:	605a      	str	r2, [r3, #4]
 8006218:	4648      	mov	r0, r9
 800621a:	f000 fa0d 	bl	8006638 <__malloc_unlock>
 800621e:	3608      	adds	r6, #8
 8006220:	e109      	b.n	8006436 <_malloc_r+0x282>
 8006222:	3302      	adds	r3, #2
 8006224:	4a8c      	ldr	r2, [pc, #560]	; (8006458 <_malloc_r+0x2a4>)
 8006226:	692e      	ldr	r6, [r5, #16]
 8006228:	4296      	cmp	r6, r2
 800622a:	4611      	mov	r1, r2
 800622c:	d06d      	beq.n	800630a <_malloc_r+0x156>
 800622e:	6870      	ldr	r0, [r6, #4]
 8006230:	f020 0003 	bic.w	r0, r0, #3
 8006234:	1b07      	subs	r7, r0, r4
 8006236:	2f0f      	cmp	r7, #15
 8006238:	dd47      	ble.n	80062ca <_malloc_r+0x116>
 800623a:	1933      	adds	r3, r6, r4
 800623c:	f044 0401 	orr.w	r4, r4, #1
 8006240:	6074      	str	r4, [r6, #4]
 8006242:	616b      	str	r3, [r5, #20]
 8006244:	612b      	str	r3, [r5, #16]
 8006246:	60da      	str	r2, [r3, #12]
 8006248:	609a      	str	r2, [r3, #8]
 800624a:	f047 0201 	orr.w	r2, r7, #1
 800624e:	605a      	str	r2, [r3, #4]
 8006250:	5037      	str	r7, [r6, r0]
 8006252:	e7e1      	b.n	8006218 <_malloc_r+0x64>
 8006254:	0a63      	lsrs	r3, r4, #9
 8006256:	d02a      	beq.n	80062ae <_malloc_r+0xfa>
 8006258:	2b04      	cmp	r3, #4
 800625a:	d812      	bhi.n	8006282 <_malloc_r+0xce>
 800625c:	09a3      	lsrs	r3, r4, #6
 800625e:	3338      	adds	r3, #56	; 0x38
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8006266:	f1a2 0008 	sub.w	r0, r2, #8
 800626a:	6856      	ldr	r6, [r2, #4]
 800626c:	4286      	cmp	r6, r0
 800626e:	d006      	beq.n	800627e <_malloc_r+0xca>
 8006270:	6872      	ldr	r2, [r6, #4]
 8006272:	f022 0203 	bic.w	r2, r2, #3
 8006276:	1b11      	subs	r1, r2, r4
 8006278:	290f      	cmp	r1, #15
 800627a:	dd1c      	ble.n	80062b6 <_malloc_r+0x102>
 800627c:	3b01      	subs	r3, #1
 800627e:	3301      	adds	r3, #1
 8006280:	e7d0      	b.n	8006224 <_malloc_r+0x70>
 8006282:	2b14      	cmp	r3, #20
 8006284:	d801      	bhi.n	800628a <_malloc_r+0xd6>
 8006286:	335b      	adds	r3, #91	; 0x5b
 8006288:	e7ea      	b.n	8006260 <_malloc_r+0xac>
 800628a:	2b54      	cmp	r3, #84	; 0x54
 800628c:	d802      	bhi.n	8006294 <_malloc_r+0xe0>
 800628e:	0b23      	lsrs	r3, r4, #12
 8006290:	336e      	adds	r3, #110	; 0x6e
 8006292:	e7e5      	b.n	8006260 <_malloc_r+0xac>
 8006294:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006298:	d802      	bhi.n	80062a0 <_malloc_r+0xec>
 800629a:	0be3      	lsrs	r3, r4, #15
 800629c:	3377      	adds	r3, #119	; 0x77
 800629e:	e7df      	b.n	8006260 <_malloc_r+0xac>
 80062a0:	f240 5254 	movw	r2, #1364	; 0x554
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d804      	bhi.n	80062b2 <_malloc_r+0xfe>
 80062a8:	0ca3      	lsrs	r3, r4, #18
 80062aa:	337c      	adds	r3, #124	; 0x7c
 80062ac:	e7d8      	b.n	8006260 <_malloc_r+0xac>
 80062ae:	233f      	movs	r3, #63	; 0x3f
 80062b0:	e7d6      	b.n	8006260 <_malloc_r+0xac>
 80062b2:	237e      	movs	r3, #126	; 0x7e
 80062b4:	e7d4      	b.n	8006260 <_malloc_r+0xac>
 80062b6:	2900      	cmp	r1, #0
 80062b8:	68f1      	ldr	r1, [r6, #12]
 80062ba:	db04      	blt.n	80062c6 <_malloc_r+0x112>
 80062bc:	68b3      	ldr	r3, [r6, #8]
 80062be:	60d9      	str	r1, [r3, #12]
 80062c0:	608b      	str	r3, [r1, #8]
 80062c2:	18b3      	adds	r3, r6, r2
 80062c4:	e7a4      	b.n	8006210 <_malloc_r+0x5c>
 80062c6:	460e      	mov	r6, r1
 80062c8:	e7d0      	b.n	800626c <_malloc_r+0xb8>
 80062ca:	2f00      	cmp	r7, #0
 80062cc:	616a      	str	r2, [r5, #20]
 80062ce:	612a      	str	r2, [r5, #16]
 80062d0:	db05      	blt.n	80062de <_malloc_r+0x12a>
 80062d2:	4430      	add	r0, r6
 80062d4:	6843      	ldr	r3, [r0, #4]
 80062d6:	f043 0301 	orr.w	r3, r3, #1
 80062da:	6043      	str	r3, [r0, #4]
 80062dc:	e79c      	b.n	8006218 <_malloc_r+0x64>
 80062de:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80062e2:	d244      	bcs.n	800636e <_malloc_r+0x1ba>
 80062e4:	08c0      	lsrs	r0, r0, #3
 80062e6:	1087      	asrs	r7, r0, #2
 80062e8:	2201      	movs	r2, #1
 80062ea:	fa02 f707 	lsl.w	r7, r2, r7
 80062ee:	686a      	ldr	r2, [r5, #4]
 80062f0:	3001      	adds	r0, #1
 80062f2:	433a      	orrs	r2, r7
 80062f4:	606a      	str	r2, [r5, #4]
 80062f6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80062fa:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80062fe:	60b7      	str	r7, [r6, #8]
 8006300:	3a08      	subs	r2, #8
 8006302:	60f2      	str	r2, [r6, #12]
 8006304:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8006308:	60fe      	str	r6, [r7, #12]
 800630a:	2001      	movs	r0, #1
 800630c:	109a      	asrs	r2, r3, #2
 800630e:	fa00 f202 	lsl.w	r2, r0, r2
 8006312:	6868      	ldr	r0, [r5, #4]
 8006314:	4282      	cmp	r2, r0
 8006316:	f200 80a1 	bhi.w	800645c <_malloc_r+0x2a8>
 800631a:	4202      	tst	r2, r0
 800631c:	d106      	bne.n	800632c <_malloc_r+0x178>
 800631e:	f023 0303 	bic.w	r3, r3, #3
 8006322:	0052      	lsls	r2, r2, #1
 8006324:	4202      	tst	r2, r0
 8006326:	f103 0304 	add.w	r3, r3, #4
 800632a:	d0fa      	beq.n	8006322 <_malloc_r+0x16e>
 800632c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8006330:	46e0      	mov	r8, ip
 8006332:	469e      	mov	lr, r3
 8006334:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8006338:	4546      	cmp	r6, r8
 800633a:	d153      	bne.n	80063e4 <_malloc_r+0x230>
 800633c:	f10e 0e01 	add.w	lr, lr, #1
 8006340:	f01e 0f03 	tst.w	lr, #3
 8006344:	f108 0808 	add.w	r8, r8, #8
 8006348:	d1f4      	bne.n	8006334 <_malloc_r+0x180>
 800634a:	0798      	lsls	r0, r3, #30
 800634c:	d179      	bne.n	8006442 <_malloc_r+0x28e>
 800634e:	686b      	ldr	r3, [r5, #4]
 8006350:	ea23 0302 	bic.w	r3, r3, r2
 8006354:	606b      	str	r3, [r5, #4]
 8006356:	6868      	ldr	r0, [r5, #4]
 8006358:	0052      	lsls	r2, r2, #1
 800635a:	4282      	cmp	r2, r0
 800635c:	d87e      	bhi.n	800645c <_malloc_r+0x2a8>
 800635e:	2a00      	cmp	r2, #0
 8006360:	d07c      	beq.n	800645c <_malloc_r+0x2a8>
 8006362:	4673      	mov	r3, lr
 8006364:	4202      	tst	r2, r0
 8006366:	d1e1      	bne.n	800632c <_malloc_r+0x178>
 8006368:	3304      	adds	r3, #4
 800636a:	0052      	lsls	r2, r2, #1
 800636c:	e7fa      	b.n	8006364 <_malloc_r+0x1b0>
 800636e:	0a42      	lsrs	r2, r0, #9
 8006370:	2a04      	cmp	r2, #4
 8006372:	d815      	bhi.n	80063a0 <_malloc_r+0x1ec>
 8006374:	0982      	lsrs	r2, r0, #6
 8006376:	3238      	adds	r2, #56	; 0x38
 8006378:	1c57      	adds	r7, r2, #1
 800637a:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800637e:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8006382:	45be      	cmp	lr, r7
 8006384:	d126      	bne.n	80063d4 <_malloc_r+0x220>
 8006386:	2001      	movs	r0, #1
 8006388:	1092      	asrs	r2, r2, #2
 800638a:	fa00 f202 	lsl.w	r2, r0, r2
 800638e:	6868      	ldr	r0, [r5, #4]
 8006390:	4310      	orrs	r0, r2
 8006392:	6068      	str	r0, [r5, #4]
 8006394:	f8c6 e00c 	str.w	lr, [r6, #12]
 8006398:	60b7      	str	r7, [r6, #8]
 800639a:	f8ce 6008 	str.w	r6, [lr, #8]
 800639e:	e7b3      	b.n	8006308 <_malloc_r+0x154>
 80063a0:	2a14      	cmp	r2, #20
 80063a2:	d801      	bhi.n	80063a8 <_malloc_r+0x1f4>
 80063a4:	325b      	adds	r2, #91	; 0x5b
 80063a6:	e7e7      	b.n	8006378 <_malloc_r+0x1c4>
 80063a8:	2a54      	cmp	r2, #84	; 0x54
 80063aa:	d802      	bhi.n	80063b2 <_malloc_r+0x1fe>
 80063ac:	0b02      	lsrs	r2, r0, #12
 80063ae:	326e      	adds	r2, #110	; 0x6e
 80063b0:	e7e2      	b.n	8006378 <_malloc_r+0x1c4>
 80063b2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80063b6:	d802      	bhi.n	80063be <_malloc_r+0x20a>
 80063b8:	0bc2      	lsrs	r2, r0, #15
 80063ba:	3277      	adds	r2, #119	; 0x77
 80063bc:	e7dc      	b.n	8006378 <_malloc_r+0x1c4>
 80063be:	f240 5754 	movw	r7, #1364	; 0x554
 80063c2:	42ba      	cmp	r2, r7
 80063c4:	bf9a      	itte	ls
 80063c6:	0c82      	lsrls	r2, r0, #18
 80063c8:	327c      	addls	r2, #124	; 0x7c
 80063ca:	227e      	movhi	r2, #126	; 0x7e
 80063cc:	e7d4      	b.n	8006378 <_malloc_r+0x1c4>
 80063ce:	68bf      	ldr	r7, [r7, #8]
 80063d0:	45be      	cmp	lr, r7
 80063d2:	d004      	beq.n	80063de <_malloc_r+0x22a>
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	f022 0203 	bic.w	r2, r2, #3
 80063da:	4290      	cmp	r0, r2
 80063dc:	d3f7      	bcc.n	80063ce <_malloc_r+0x21a>
 80063de:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80063e2:	e7d7      	b.n	8006394 <_malloc_r+0x1e0>
 80063e4:	6870      	ldr	r0, [r6, #4]
 80063e6:	68f7      	ldr	r7, [r6, #12]
 80063e8:	f020 0003 	bic.w	r0, r0, #3
 80063ec:	eba0 0a04 	sub.w	sl, r0, r4
 80063f0:	f1ba 0f0f 	cmp.w	sl, #15
 80063f4:	dd10      	ble.n	8006418 <_malloc_r+0x264>
 80063f6:	68b2      	ldr	r2, [r6, #8]
 80063f8:	1933      	adds	r3, r6, r4
 80063fa:	f044 0401 	orr.w	r4, r4, #1
 80063fe:	6074      	str	r4, [r6, #4]
 8006400:	60d7      	str	r7, [r2, #12]
 8006402:	60ba      	str	r2, [r7, #8]
 8006404:	f04a 0201 	orr.w	r2, sl, #1
 8006408:	616b      	str	r3, [r5, #20]
 800640a:	612b      	str	r3, [r5, #16]
 800640c:	60d9      	str	r1, [r3, #12]
 800640e:	6099      	str	r1, [r3, #8]
 8006410:	605a      	str	r2, [r3, #4]
 8006412:	f846 a000 	str.w	sl, [r6, r0]
 8006416:	e6ff      	b.n	8006218 <_malloc_r+0x64>
 8006418:	f1ba 0f00 	cmp.w	sl, #0
 800641c:	db0f      	blt.n	800643e <_malloc_r+0x28a>
 800641e:	4430      	add	r0, r6
 8006420:	6843      	ldr	r3, [r0, #4]
 8006422:	f043 0301 	orr.w	r3, r3, #1
 8006426:	6043      	str	r3, [r0, #4]
 8006428:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800642c:	4648      	mov	r0, r9
 800642e:	60df      	str	r7, [r3, #12]
 8006430:	60bb      	str	r3, [r7, #8]
 8006432:	f000 f901 	bl	8006638 <__malloc_unlock>
 8006436:	4630      	mov	r0, r6
 8006438:	b003      	add	sp, #12
 800643a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643e:	463e      	mov	r6, r7
 8006440:	e77a      	b.n	8006338 <_malloc_r+0x184>
 8006442:	f85c 0908 	ldr.w	r0, [ip], #-8
 8006446:	4584      	cmp	ip, r0
 8006448:	f103 33ff 	add.w	r3, r3, #4294967295
 800644c:	f43f af7d 	beq.w	800634a <_malloc_r+0x196>
 8006450:	e781      	b.n	8006356 <_malloc_r+0x1a2>
 8006452:	bf00      	nop
 8006454:	2000021c 	.word	0x2000021c
 8006458:	20000224 	.word	0x20000224
 800645c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8006460:	f8db 6004 	ldr.w	r6, [fp, #4]
 8006464:	f026 0603 	bic.w	r6, r6, #3
 8006468:	42b4      	cmp	r4, r6
 800646a:	d803      	bhi.n	8006474 <_malloc_r+0x2c0>
 800646c:	1b33      	subs	r3, r6, r4
 800646e:	2b0f      	cmp	r3, #15
 8006470:	f300 8096 	bgt.w	80065a0 <_malloc_r+0x3ec>
 8006474:	4a4f      	ldr	r2, [pc, #316]	; (80065b4 <_malloc_r+0x400>)
 8006476:	6817      	ldr	r7, [r2, #0]
 8006478:	4a4f      	ldr	r2, [pc, #316]	; (80065b8 <_malloc_r+0x404>)
 800647a:	6811      	ldr	r1, [r2, #0]
 800647c:	3710      	adds	r7, #16
 800647e:	3101      	adds	r1, #1
 8006480:	eb0b 0306 	add.w	r3, fp, r6
 8006484:	4427      	add	r7, r4
 8006486:	d005      	beq.n	8006494 <_malloc_r+0x2e0>
 8006488:	494c      	ldr	r1, [pc, #304]	; (80065bc <_malloc_r+0x408>)
 800648a:	3901      	subs	r1, #1
 800648c:	440f      	add	r7, r1
 800648e:	3101      	adds	r1, #1
 8006490:	4249      	negs	r1, r1
 8006492:	400f      	ands	r7, r1
 8006494:	4639      	mov	r1, r7
 8006496:	4648      	mov	r0, r9
 8006498:	9201      	str	r2, [sp, #4]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	f000 fdc2 	bl	8007024 <_sbrk_r>
 80064a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80064a4:	4680      	mov	r8, r0
 80064a6:	d056      	beq.n	8006556 <_malloc_r+0x3a2>
 80064a8:	9b00      	ldr	r3, [sp, #0]
 80064aa:	9a01      	ldr	r2, [sp, #4]
 80064ac:	4283      	cmp	r3, r0
 80064ae:	d901      	bls.n	80064b4 <_malloc_r+0x300>
 80064b0:	45ab      	cmp	fp, r5
 80064b2:	d150      	bne.n	8006556 <_malloc_r+0x3a2>
 80064b4:	4842      	ldr	r0, [pc, #264]	; (80065c0 <_malloc_r+0x40c>)
 80064b6:	6801      	ldr	r1, [r0, #0]
 80064b8:	4543      	cmp	r3, r8
 80064ba:	eb07 0e01 	add.w	lr, r7, r1
 80064be:	f8c0 e000 	str.w	lr, [r0]
 80064c2:	4940      	ldr	r1, [pc, #256]	; (80065c4 <_malloc_r+0x410>)
 80064c4:	4682      	mov	sl, r0
 80064c6:	d113      	bne.n	80064f0 <_malloc_r+0x33c>
 80064c8:	420b      	tst	r3, r1
 80064ca:	d111      	bne.n	80064f0 <_malloc_r+0x33c>
 80064cc:	68ab      	ldr	r3, [r5, #8]
 80064ce:	443e      	add	r6, r7
 80064d0:	f046 0601 	orr.w	r6, r6, #1
 80064d4:	605e      	str	r6, [r3, #4]
 80064d6:	4a3c      	ldr	r2, [pc, #240]	; (80065c8 <_malloc_r+0x414>)
 80064d8:	f8da 3000 	ldr.w	r3, [sl]
 80064dc:	6811      	ldr	r1, [r2, #0]
 80064de:	428b      	cmp	r3, r1
 80064e0:	bf88      	it	hi
 80064e2:	6013      	strhi	r3, [r2, #0]
 80064e4:	4a39      	ldr	r2, [pc, #228]	; (80065cc <_malloc_r+0x418>)
 80064e6:	6811      	ldr	r1, [r2, #0]
 80064e8:	428b      	cmp	r3, r1
 80064ea:	bf88      	it	hi
 80064ec:	6013      	strhi	r3, [r2, #0]
 80064ee:	e032      	b.n	8006556 <_malloc_r+0x3a2>
 80064f0:	6810      	ldr	r0, [r2, #0]
 80064f2:	3001      	adds	r0, #1
 80064f4:	bf1b      	ittet	ne
 80064f6:	eba8 0303 	subne.w	r3, r8, r3
 80064fa:	4473      	addne	r3, lr
 80064fc:	f8c2 8000 	streq.w	r8, [r2]
 8006500:	f8ca 3000 	strne.w	r3, [sl]
 8006504:	f018 0007 	ands.w	r0, r8, #7
 8006508:	bf1c      	itt	ne
 800650a:	f1c0 0008 	rsbne	r0, r0, #8
 800650e:	4480      	addne	r8, r0
 8006510:	4b2a      	ldr	r3, [pc, #168]	; (80065bc <_malloc_r+0x408>)
 8006512:	4447      	add	r7, r8
 8006514:	4418      	add	r0, r3
 8006516:	400f      	ands	r7, r1
 8006518:	1bc7      	subs	r7, r0, r7
 800651a:	4639      	mov	r1, r7
 800651c:	4648      	mov	r0, r9
 800651e:	f000 fd81 	bl	8007024 <_sbrk_r>
 8006522:	1c43      	adds	r3, r0, #1
 8006524:	bf08      	it	eq
 8006526:	4640      	moveq	r0, r8
 8006528:	f8da 3000 	ldr.w	r3, [sl]
 800652c:	f8c5 8008 	str.w	r8, [r5, #8]
 8006530:	bf08      	it	eq
 8006532:	2700      	moveq	r7, #0
 8006534:	eba0 0008 	sub.w	r0, r0, r8
 8006538:	443b      	add	r3, r7
 800653a:	4407      	add	r7, r0
 800653c:	f047 0701 	orr.w	r7, r7, #1
 8006540:	45ab      	cmp	fp, r5
 8006542:	f8ca 3000 	str.w	r3, [sl]
 8006546:	f8c8 7004 	str.w	r7, [r8, #4]
 800654a:	d0c4      	beq.n	80064d6 <_malloc_r+0x322>
 800654c:	2e0f      	cmp	r6, #15
 800654e:	d810      	bhi.n	8006572 <_malloc_r+0x3be>
 8006550:	2301      	movs	r3, #1
 8006552:	f8c8 3004 	str.w	r3, [r8, #4]
 8006556:	68ab      	ldr	r3, [r5, #8]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	f022 0203 	bic.w	r2, r2, #3
 800655e:	4294      	cmp	r4, r2
 8006560:	eba2 0304 	sub.w	r3, r2, r4
 8006564:	d801      	bhi.n	800656a <_malloc_r+0x3b6>
 8006566:	2b0f      	cmp	r3, #15
 8006568:	dc1a      	bgt.n	80065a0 <_malloc_r+0x3ec>
 800656a:	4648      	mov	r0, r9
 800656c:	f000 f864 	bl	8006638 <__malloc_unlock>
 8006570:	e62d      	b.n	80061ce <_malloc_r+0x1a>
 8006572:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006576:	3e0c      	subs	r6, #12
 8006578:	f026 0607 	bic.w	r6, r6, #7
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	4333      	orrs	r3, r6
 8006582:	f8cb 3004 	str.w	r3, [fp, #4]
 8006586:	eb0b 0306 	add.w	r3, fp, r6
 800658a:	2205      	movs	r2, #5
 800658c:	2e0f      	cmp	r6, #15
 800658e:	605a      	str	r2, [r3, #4]
 8006590:	609a      	str	r2, [r3, #8]
 8006592:	d9a0      	bls.n	80064d6 <_malloc_r+0x322>
 8006594:	f10b 0108 	add.w	r1, fp, #8
 8006598:	4648      	mov	r0, r9
 800659a:	f7ff fb41 	bl	8005c20 <_free_r>
 800659e:	e79a      	b.n	80064d6 <_malloc_r+0x322>
 80065a0:	68ae      	ldr	r6, [r5, #8]
 80065a2:	f044 0201 	orr.w	r2, r4, #1
 80065a6:	4434      	add	r4, r6
 80065a8:	f043 0301 	orr.w	r3, r3, #1
 80065ac:	6072      	str	r2, [r6, #4]
 80065ae:	60ac      	str	r4, [r5, #8]
 80065b0:	6063      	str	r3, [r4, #4]
 80065b2:	e631      	b.n	8006218 <_malloc_r+0x64>
 80065b4:	20000c34 	.word	0x20000c34
 80065b8:	20000624 	.word	0x20000624
 80065bc:	00000080 	.word	0x00000080
 80065c0:	20000c04 	.word	0x20000c04
 80065c4:	0000007f 	.word	0x0000007f
 80065c8:	20000c2c 	.word	0x20000c2c
 80065cc:	20000c30 	.word	0x20000c30

080065d0 <memcpy>:
 80065d0:	b510      	push	{r4, lr}
 80065d2:	1e43      	subs	r3, r0, #1
 80065d4:	440a      	add	r2, r1
 80065d6:	4291      	cmp	r1, r2
 80065d8:	d100      	bne.n	80065dc <memcpy+0xc>
 80065da:	bd10      	pop	{r4, pc}
 80065dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065e4:	e7f7      	b.n	80065d6 <memcpy+0x6>

080065e6 <memmove>:
 80065e6:	4288      	cmp	r0, r1
 80065e8:	b510      	push	{r4, lr}
 80065ea:	eb01 0302 	add.w	r3, r1, r2
 80065ee:	d803      	bhi.n	80065f8 <memmove+0x12>
 80065f0:	1e42      	subs	r2, r0, #1
 80065f2:	4299      	cmp	r1, r3
 80065f4:	d10c      	bne.n	8006610 <memmove+0x2a>
 80065f6:	bd10      	pop	{r4, pc}
 80065f8:	4298      	cmp	r0, r3
 80065fa:	d2f9      	bcs.n	80065f0 <memmove+0xa>
 80065fc:	1881      	adds	r1, r0, r2
 80065fe:	1ad2      	subs	r2, r2, r3
 8006600:	42d3      	cmn	r3, r2
 8006602:	d100      	bne.n	8006606 <memmove+0x20>
 8006604:	bd10      	pop	{r4, pc}
 8006606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800660a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800660e:	e7f7      	b.n	8006600 <memmove+0x1a>
 8006610:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006614:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006618:	e7eb      	b.n	80065f2 <memmove+0xc>

0800661a <memset>:
 800661a:	4402      	add	r2, r0
 800661c:	4603      	mov	r3, r0
 800661e:	4293      	cmp	r3, r2
 8006620:	d100      	bne.n	8006624 <memset+0xa>
 8006622:	4770      	bx	lr
 8006624:	f803 1b01 	strb.w	r1, [r3], #1
 8006628:	e7f9      	b.n	800661e <memset+0x4>
	...

0800662c <__malloc_lock>:
 800662c:	4801      	ldr	r0, [pc, #4]	; (8006634 <__malloc_lock+0x8>)
 800662e:	f7ff bd4b 	b.w	80060c8 <__retarget_lock_acquire_recursive>
 8006632:	bf00      	nop
 8006634:	20000c40 	.word	0x20000c40

08006638 <__malloc_unlock>:
 8006638:	4801      	ldr	r0, [pc, #4]	; (8006640 <__malloc_unlock+0x8>)
 800663a:	f7ff bd46 	b.w	80060ca <__retarget_lock_release_recursive>
 800663e:	bf00      	nop
 8006640:	20000c40 	.word	0x20000c40

08006644 <_Balloc>:
 8006644:	b570      	push	{r4, r5, r6, lr}
 8006646:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006648:	4604      	mov	r4, r0
 800664a:	460e      	mov	r6, r1
 800664c:	b93d      	cbnz	r5, 800665e <_Balloc+0x1a>
 800664e:	2010      	movs	r0, #16
 8006650:	f7ff fda8 	bl	80061a4 <malloc>
 8006654:	6260      	str	r0, [r4, #36]	; 0x24
 8006656:	6045      	str	r5, [r0, #4]
 8006658:	6085      	str	r5, [r0, #8]
 800665a:	6005      	str	r5, [r0, #0]
 800665c:	60c5      	str	r5, [r0, #12]
 800665e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006660:	68eb      	ldr	r3, [r5, #12]
 8006662:	b183      	cbz	r3, 8006686 <_Balloc+0x42>
 8006664:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800666c:	b9b8      	cbnz	r0, 800669e <_Balloc+0x5a>
 800666e:	2101      	movs	r1, #1
 8006670:	fa01 f506 	lsl.w	r5, r1, r6
 8006674:	1d6a      	adds	r2, r5, #5
 8006676:	0092      	lsls	r2, r2, #2
 8006678:	4620      	mov	r0, r4
 800667a:	f000 fd6d 	bl	8007158 <_calloc_r>
 800667e:	b160      	cbz	r0, 800669a <_Balloc+0x56>
 8006680:	6046      	str	r6, [r0, #4]
 8006682:	6085      	str	r5, [r0, #8]
 8006684:	e00e      	b.n	80066a4 <_Balloc+0x60>
 8006686:	2221      	movs	r2, #33	; 0x21
 8006688:	2104      	movs	r1, #4
 800668a:	4620      	mov	r0, r4
 800668c:	f000 fd64 	bl	8007158 <_calloc_r>
 8006690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006692:	60e8      	str	r0, [r5, #12]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e4      	bne.n	8006664 <_Balloc+0x20>
 800669a:	2000      	movs	r0, #0
 800669c:	bd70      	pop	{r4, r5, r6, pc}
 800669e:	6802      	ldr	r2, [r0, #0]
 80066a0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80066a4:	2300      	movs	r3, #0
 80066a6:	6103      	str	r3, [r0, #16]
 80066a8:	60c3      	str	r3, [r0, #12]
 80066aa:	bd70      	pop	{r4, r5, r6, pc}

080066ac <_Bfree>:
 80066ac:	b570      	push	{r4, r5, r6, lr}
 80066ae:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80066b0:	4606      	mov	r6, r0
 80066b2:	460d      	mov	r5, r1
 80066b4:	b93c      	cbnz	r4, 80066c6 <_Bfree+0x1a>
 80066b6:	2010      	movs	r0, #16
 80066b8:	f7ff fd74 	bl	80061a4 <malloc>
 80066bc:	6270      	str	r0, [r6, #36]	; 0x24
 80066be:	6044      	str	r4, [r0, #4]
 80066c0:	6084      	str	r4, [r0, #8]
 80066c2:	6004      	str	r4, [r0, #0]
 80066c4:	60c4      	str	r4, [r0, #12]
 80066c6:	b13d      	cbz	r5, 80066d8 <_Bfree+0x2c>
 80066c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80066ca:	686a      	ldr	r2, [r5, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066d2:	6029      	str	r1, [r5, #0]
 80066d4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80066d8:	bd70      	pop	{r4, r5, r6, pc}

080066da <__multadd>:
 80066da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066de:	690d      	ldr	r5, [r1, #16]
 80066e0:	461f      	mov	r7, r3
 80066e2:	4606      	mov	r6, r0
 80066e4:	460c      	mov	r4, r1
 80066e6:	f101 0e14 	add.w	lr, r1, #20
 80066ea:	2300      	movs	r3, #0
 80066ec:	f8de 0000 	ldr.w	r0, [lr]
 80066f0:	b281      	uxth	r1, r0
 80066f2:	fb02 7101 	mla	r1, r2, r1, r7
 80066f6:	0c0f      	lsrs	r7, r1, #16
 80066f8:	0c00      	lsrs	r0, r0, #16
 80066fa:	fb02 7000 	mla	r0, r2, r0, r7
 80066fe:	b289      	uxth	r1, r1
 8006700:	3301      	adds	r3, #1
 8006702:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006706:	429d      	cmp	r5, r3
 8006708:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800670c:	f84e 1b04 	str.w	r1, [lr], #4
 8006710:	dcec      	bgt.n	80066ec <__multadd+0x12>
 8006712:	b1d7      	cbz	r7, 800674a <__multadd+0x70>
 8006714:	68a3      	ldr	r3, [r4, #8]
 8006716:	429d      	cmp	r5, r3
 8006718:	db12      	blt.n	8006740 <__multadd+0x66>
 800671a:	6861      	ldr	r1, [r4, #4]
 800671c:	4630      	mov	r0, r6
 800671e:	3101      	adds	r1, #1
 8006720:	f7ff ff90 	bl	8006644 <_Balloc>
 8006724:	6922      	ldr	r2, [r4, #16]
 8006726:	3202      	adds	r2, #2
 8006728:	f104 010c 	add.w	r1, r4, #12
 800672c:	4680      	mov	r8, r0
 800672e:	0092      	lsls	r2, r2, #2
 8006730:	300c      	adds	r0, #12
 8006732:	f7ff ff4d 	bl	80065d0 <memcpy>
 8006736:	4621      	mov	r1, r4
 8006738:	4630      	mov	r0, r6
 800673a:	f7ff ffb7 	bl	80066ac <_Bfree>
 800673e:	4644      	mov	r4, r8
 8006740:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006744:	3501      	adds	r5, #1
 8006746:	615f      	str	r7, [r3, #20]
 8006748:	6125      	str	r5, [r4, #16]
 800674a:	4620      	mov	r0, r4
 800674c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006750 <__hi0bits>:
 8006750:	0c02      	lsrs	r2, r0, #16
 8006752:	0412      	lsls	r2, r2, #16
 8006754:	4603      	mov	r3, r0
 8006756:	b9b2      	cbnz	r2, 8006786 <__hi0bits+0x36>
 8006758:	0403      	lsls	r3, r0, #16
 800675a:	2010      	movs	r0, #16
 800675c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006760:	bf04      	itt	eq
 8006762:	021b      	lsleq	r3, r3, #8
 8006764:	3008      	addeq	r0, #8
 8006766:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800676a:	bf04      	itt	eq
 800676c:	011b      	lsleq	r3, r3, #4
 800676e:	3004      	addeq	r0, #4
 8006770:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006774:	bf04      	itt	eq
 8006776:	009b      	lsleq	r3, r3, #2
 8006778:	3002      	addeq	r0, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	db06      	blt.n	800678c <__hi0bits+0x3c>
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	d503      	bpl.n	800678a <__hi0bits+0x3a>
 8006782:	3001      	adds	r0, #1
 8006784:	4770      	bx	lr
 8006786:	2000      	movs	r0, #0
 8006788:	e7e8      	b.n	800675c <__hi0bits+0xc>
 800678a:	2020      	movs	r0, #32
 800678c:	4770      	bx	lr

0800678e <__lo0bits>:
 800678e:	6803      	ldr	r3, [r0, #0]
 8006790:	f013 0207 	ands.w	r2, r3, #7
 8006794:	4601      	mov	r1, r0
 8006796:	d00b      	beq.n	80067b0 <__lo0bits+0x22>
 8006798:	07da      	lsls	r2, r3, #31
 800679a:	d423      	bmi.n	80067e4 <__lo0bits+0x56>
 800679c:	0798      	lsls	r0, r3, #30
 800679e:	bf49      	itett	mi
 80067a0:	085b      	lsrmi	r3, r3, #1
 80067a2:	089b      	lsrpl	r3, r3, #2
 80067a4:	2001      	movmi	r0, #1
 80067a6:	600b      	strmi	r3, [r1, #0]
 80067a8:	bf5c      	itt	pl
 80067aa:	600b      	strpl	r3, [r1, #0]
 80067ac:	2002      	movpl	r0, #2
 80067ae:	4770      	bx	lr
 80067b0:	b298      	uxth	r0, r3
 80067b2:	b9a8      	cbnz	r0, 80067e0 <__lo0bits+0x52>
 80067b4:	0c1b      	lsrs	r3, r3, #16
 80067b6:	2010      	movs	r0, #16
 80067b8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80067bc:	bf04      	itt	eq
 80067be:	0a1b      	lsreq	r3, r3, #8
 80067c0:	3008      	addeq	r0, #8
 80067c2:	071a      	lsls	r2, r3, #28
 80067c4:	bf04      	itt	eq
 80067c6:	091b      	lsreq	r3, r3, #4
 80067c8:	3004      	addeq	r0, #4
 80067ca:	079a      	lsls	r2, r3, #30
 80067cc:	bf04      	itt	eq
 80067ce:	089b      	lsreq	r3, r3, #2
 80067d0:	3002      	addeq	r0, #2
 80067d2:	07da      	lsls	r2, r3, #31
 80067d4:	d402      	bmi.n	80067dc <__lo0bits+0x4e>
 80067d6:	085b      	lsrs	r3, r3, #1
 80067d8:	d006      	beq.n	80067e8 <__lo0bits+0x5a>
 80067da:	3001      	adds	r0, #1
 80067dc:	600b      	str	r3, [r1, #0]
 80067de:	4770      	bx	lr
 80067e0:	4610      	mov	r0, r2
 80067e2:	e7e9      	b.n	80067b8 <__lo0bits+0x2a>
 80067e4:	2000      	movs	r0, #0
 80067e6:	4770      	bx	lr
 80067e8:	2020      	movs	r0, #32
 80067ea:	4770      	bx	lr

080067ec <__i2b>:
 80067ec:	b510      	push	{r4, lr}
 80067ee:	460c      	mov	r4, r1
 80067f0:	2101      	movs	r1, #1
 80067f2:	f7ff ff27 	bl	8006644 <_Balloc>
 80067f6:	2201      	movs	r2, #1
 80067f8:	6144      	str	r4, [r0, #20]
 80067fa:	6102      	str	r2, [r0, #16]
 80067fc:	bd10      	pop	{r4, pc}

080067fe <__multiply>:
 80067fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006802:	4614      	mov	r4, r2
 8006804:	690a      	ldr	r2, [r1, #16]
 8006806:	6923      	ldr	r3, [r4, #16]
 8006808:	429a      	cmp	r2, r3
 800680a:	bfb8      	it	lt
 800680c:	460b      	movlt	r3, r1
 800680e:	4689      	mov	r9, r1
 8006810:	bfbc      	itt	lt
 8006812:	46a1      	movlt	r9, r4
 8006814:	461c      	movlt	r4, r3
 8006816:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800681a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800681e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006822:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006826:	eb07 060a 	add.w	r6, r7, sl
 800682a:	429e      	cmp	r6, r3
 800682c:	bfc8      	it	gt
 800682e:	3101      	addgt	r1, #1
 8006830:	f7ff ff08 	bl	8006644 <_Balloc>
 8006834:	f100 0514 	add.w	r5, r0, #20
 8006838:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800683c:	462b      	mov	r3, r5
 800683e:	2200      	movs	r2, #0
 8006840:	4543      	cmp	r3, r8
 8006842:	d316      	bcc.n	8006872 <__multiply+0x74>
 8006844:	f104 0214 	add.w	r2, r4, #20
 8006848:	f109 0114 	add.w	r1, r9, #20
 800684c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8006850:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006854:	9301      	str	r3, [sp, #4]
 8006856:	9c01      	ldr	r4, [sp, #4]
 8006858:	4294      	cmp	r4, r2
 800685a:	4613      	mov	r3, r2
 800685c:	d80c      	bhi.n	8006878 <__multiply+0x7a>
 800685e:	2e00      	cmp	r6, #0
 8006860:	dd03      	ble.n	800686a <__multiply+0x6c>
 8006862:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006866:	2b00      	cmp	r3, #0
 8006868:	d054      	beq.n	8006914 <__multiply+0x116>
 800686a:	6106      	str	r6, [r0, #16]
 800686c:	b003      	add	sp, #12
 800686e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006872:	f843 2b04 	str.w	r2, [r3], #4
 8006876:	e7e3      	b.n	8006840 <__multiply+0x42>
 8006878:	f8b3 a000 	ldrh.w	sl, [r3]
 800687c:	3204      	adds	r2, #4
 800687e:	f1ba 0f00 	cmp.w	sl, #0
 8006882:	d020      	beq.n	80068c6 <__multiply+0xc8>
 8006884:	46ae      	mov	lr, r5
 8006886:	4689      	mov	r9, r1
 8006888:	f04f 0c00 	mov.w	ip, #0
 800688c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006890:	f8be b000 	ldrh.w	fp, [lr]
 8006894:	b2a3      	uxth	r3, r4
 8006896:	fb0a b303 	mla	r3, sl, r3, fp
 800689a:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800689e:	f8de 4000 	ldr.w	r4, [lr]
 80068a2:	4463      	add	r3, ip
 80068a4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80068a8:	fb0a c40b 	mla	r4, sl, fp, ip
 80068ac:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80068b6:	454f      	cmp	r7, r9
 80068b8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80068bc:	f84e 3b04 	str.w	r3, [lr], #4
 80068c0:	d8e4      	bhi.n	800688c <__multiply+0x8e>
 80068c2:	f8ce c000 	str.w	ip, [lr]
 80068c6:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80068ca:	f1b9 0f00 	cmp.w	r9, #0
 80068ce:	d01f      	beq.n	8006910 <__multiply+0x112>
 80068d0:	682b      	ldr	r3, [r5, #0]
 80068d2:	46ae      	mov	lr, r5
 80068d4:	468c      	mov	ip, r1
 80068d6:	f04f 0a00 	mov.w	sl, #0
 80068da:	f8bc 4000 	ldrh.w	r4, [ip]
 80068de:	f8be b002 	ldrh.w	fp, [lr, #2]
 80068e2:	fb09 b404 	mla	r4, r9, r4, fp
 80068e6:	44a2      	add	sl, r4
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80068ee:	f84e 3b04 	str.w	r3, [lr], #4
 80068f2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80068f6:	f8be 4000 	ldrh.w	r4, [lr]
 80068fa:	0c1b      	lsrs	r3, r3, #16
 80068fc:	fb09 4303 	mla	r3, r9, r3, r4
 8006900:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8006904:	4567      	cmp	r7, ip
 8006906:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800690a:	d8e6      	bhi.n	80068da <__multiply+0xdc>
 800690c:	f8ce 3000 	str.w	r3, [lr]
 8006910:	3504      	adds	r5, #4
 8006912:	e7a0      	b.n	8006856 <__multiply+0x58>
 8006914:	3e01      	subs	r6, #1
 8006916:	e7a2      	b.n	800685e <__multiply+0x60>

08006918 <__pow5mult>:
 8006918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800691c:	4615      	mov	r5, r2
 800691e:	f012 0203 	ands.w	r2, r2, #3
 8006922:	4606      	mov	r6, r0
 8006924:	460f      	mov	r7, r1
 8006926:	d007      	beq.n	8006938 <__pow5mult+0x20>
 8006928:	3a01      	subs	r2, #1
 800692a:	4c21      	ldr	r4, [pc, #132]	; (80069b0 <__pow5mult+0x98>)
 800692c:	2300      	movs	r3, #0
 800692e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006932:	f7ff fed2 	bl	80066da <__multadd>
 8006936:	4607      	mov	r7, r0
 8006938:	10ad      	asrs	r5, r5, #2
 800693a:	d035      	beq.n	80069a8 <__pow5mult+0x90>
 800693c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800693e:	b93c      	cbnz	r4, 8006950 <__pow5mult+0x38>
 8006940:	2010      	movs	r0, #16
 8006942:	f7ff fc2f 	bl	80061a4 <malloc>
 8006946:	6270      	str	r0, [r6, #36]	; 0x24
 8006948:	6044      	str	r4, [r0, #4]
 800694a:	6084      	str	r4, [r0, #8]
 800694c:	6004      	str	r4, [r0, #0]
 800694e:	60c4      	str	r4, [r0, #12]
 8006950:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006954:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006958:	b94c      	cbnz	r4, 800696e <__pow5mult+0x56>
 800695a:	f240 2171 	movw	r1, #625	; 0x271
 800695e:	4630      	mov	r0, r6
 8006960:	f7ff ff44 	bl	80067ec <__i2b>
 8006964:	2300      	movs	r3, #0
 8006966:	f8c8 0008 	str.w	r0, [r8, #8]
 800696a:	4604      	mov	r4, r0
 800696c:	6003      	str	r3, [r0, #0]
 800696e:	f04f 0800 	mov.w	r8, #0
 8006972:	07eb      	lsls	r3, r5, #31
 8006974:	d50a      	bpl.n	800698c <__pow5mult+0x74>
 8006976:	4639      	mov	r1, r7
 8006978:	4622      	mov	r2, r4
 800697a:	4630      	mov	r0, r6
 800697c:	f7ff ff3f 	bl	80067fe <__multiply>
 8006980:	4639      	mov	r1, r7
 8006982:	4681      	mov	r9, r0
 8006984:	4630      	mov	r0, r6
 8006986:	f7ff fe91 	bl	80066ac <_Bfree>
 800698a:	464f      	mov	r7, r9
 800698c:	106d      	asrs	r5, r5, #1
 800698e:	d00b      	beq.n	80069a8 <__pow5mult+0x90>
 8006990:	6820      	ldr	r0, [r4, #0]
 8006992:	b938      	cbnz	r0, 80069a4 <__pow5mult+0x8c>
 8006994:	4622      	mov	r2, r4
 8006996:	4621      	mov	r1, r4
 8006998:	4630      	mov	r0, r6
 800699a:	f7ff ff30 	bl	80067fe <__multiply>
 800699e:	6020      	str	r0, [r4, #0]
 80069a0:	f8c0 8000 	str.w	r8, [r0]
 80069a4:	4604      	mov	r4, r0
 80069a6:	e7e4      	b.n	8006972 <__pow5mult+0x5a>
 80069a8:	4638      	mov	r0, r7
 80069aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ae:	bf00      	nop
 80069b0:	080093b8 	.word	0x080093b8

080069b4 <__lshift>:
 80069b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069b8:	460c      	mov	r4, r1
 80069ba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80069be:	6923      	ldr	r3, [r4, #16]
 80069c0:	6849      	ldr	r1, [r1, #4]
 80069c2:	eb0a 0903 	add.w	r9, sl, r3
 80069c6:	68a3      	ldr	r3, [r4, #8]
 80069c8:	4607      	mov	r7, r0
 80069ca:	4616      	mov	r6, r2
 80069cc:	f109 0501 	add.w	r5, r9, #1
 80069d0:	42ab      	cmp	r3, r5
 80069d2:	db31      	blt.n	8006a38 <__lshift+0x84>
 80069d4:	4638      	mov	r0, r7
 80069d6:	f7ff fe35 	bl	8006644 <_Balloc>
 80069da:	2200      	movs	r2, #0
 80069dc:	4680      	mov	r8, r0
 80069de:	f100 0314 	add.w	r3, r0, #20
 80069e2:	4611      	mov	r1, r2
 80069e4:	4552      	cmp	r2, sl
 80069e6:	db2a      	blt.n	8006a3e <__lshift+0x8a>
 80069e8:	6920      	ldr	r0, [r4, #16]
 80069ea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069ee:	f104 0114 	add.w	r1, r4, #20
 80069f2:	f016 021f 	ands.w	r2, r6, #31
 80069f6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80069fa:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80069fe:	d022      	beq.n	8006a46 <__lshift+0x92>
 8006a00:	f1c2 0c20 	rsb	ip, r2, #32
 8006a04:	2000      	movs	r0, #0
 8006a06:	680e      	ldr	r6, [r1, #0]
 8006a08:	4096      	lsls	r6, r2
 8006a0a:	4330      	orrs	r0, r6
 8006a0c:	f843 0b04 	str.w	r0, [r3], #4
 8006a10:	f851 0b04 	ldr.w	r0, [r1], #4
 8006a14:	458e      	cmp	lr, r1
 8006a16:	fa20 f00c 	lsr.w	r0, r0, ip
 8006a1a:	d8f4      	bhi.n	8006a06 <__lshift+0x52>
 8006a1c:	6018      	str	r0, [r3, #0]
 8006a1e:	b108      	cbz	r0, 8006a24 <__lshift+0x70>
 8006a20:	f109 0502 	add.w	r5, r9, #2
 8006a24:	3d01      	subs	r5, #1
 8006a26:	4638      	mov	r0, r7
 8006a28:	f8c8 5010 	str.w	r5, [r8, #16]
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	f7ff fe3d 	bl	80066ac <_Bfree>
 8006a32:	4640      	mov	r0, r8
 8006a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a38:	3101      	adds	r1, #1
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	e7c8      	b.n	80069d0 <__lshift+0x1c>
 8006a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006a42:	3201      	adds	r2, #1
 8006a44:	e7ce      	b.n	80069e4 <__lshift+0x30>
 8006a46:	3b04      	subs	r3, #4
 8006a48:	f851 2b04 	ldr.w	r2, [r1], #4
 8006a4c:	f843 2f04 	str.w	r2, [r3, #4]!
 8006a50:	458e      	cmp	lr, r1
 8006a52:	d8f9      	bhi.n	8006a48 <__lshift+0x94>
 8006a54:	e7e6      	b.n	8006a24 <__lshift+0x70>

08006a56 <__mcmp>:
 8006a56:	6903      	ldr	r3, [r0, #16]
 8006a58:	690a      	ldr	r2, [r1, #16]
 8006a5a:	1a9b      	subs	r3, r3, r2
 8006a5c:	b530      	push	{r4, r5, lr}
 8006a5e:	d10c      	bne.n	8006a7a <__mcmp+0x24>
 8006a60:	0092      	lsls	r2, r2, #2
 8006a62:	3014      	adds	r0, #20
 8006a64:	3114      	adds	r1, #20
 8006a66:	1884      	adds	r4, r0, r2
 8006a68:	4411      	add	r1, r2
 8006a6a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a6e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a72:	4295      	cmp	r5, r2
 8006a74:	d003      	beq.n	8006a7e <__mcmp+0x28>
 8006a76:	d305      	bcc.n	8006a84 <__mcmp+0x2e>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	bd30      	pop	{r4, r5, pc}
 8006a7e:	42a0      	cmp	r0, r4
 8006a80:	d3f3      	bcc.n	8006a6a <__mcmp+0x14>
 8006a82:	e7fa      	b.n	8006a7a <__mcmp+0x24>
 8006a84:	f04f 33ff 	mov.w	r3, #4294967295
 8006a88:	e7f7      	b.n	8006a7a <__mcmp+0x24>

08006a8a <__mdiff>:
 8006a8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a8e:	460d      	mov	r5, r1
 8006a90:	4607      	mov	r7, r0
 8006a92:	4611      	mov	r1, r2
 8006a94:	4628      	mov	r0, r5
 8006a96:	4614      	mov	r4, r2
 8006a98:	f7ff ffdd 	bl	8006a56 <__mcmp>
 8006a9c:	1e06      	subs	r6, r0, #0
 8006a9e:	d108      	bne.n	8006ab2 <__mdiff+0x28>
 8006aa0:	4631      	mov	r1, r6
 8006aa2:	4638      	mov	r0, r7
 8006aa4:	f7ff fdce 	bl	8006644 <_Balloc>
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	6103      	str	r3, [r0, #16]
 8006aac:	6146      	str	r6, [r0, #20]
 8006aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab2:	bfa4      	itt	ge
 8006ab4:	4623      	movge	r3, r4
 8006ab6:	462c      	movge	r4, r5
 8006ab8:	4638      	mov	r0, r7
 8006aba:	6861      	ldr	r1, [r4, #4]
 8006abc:	bfa6      	itte	ge
 8006abe:	461d      	movge	r5, r3
 8006ac0:	2600      	movge	r6, #0
 8006ac2:	2601      	movlt	r6, #1
 8006ac4:	f7ff fdbe 	bl	8006644 <_Balloc>
 8006ac8:	692b      	ldr	r3, [r5, #16]
 8006aca:	60c6      	str	r6, [r0, #12]
 8006acc:	6926      	ldr	r6, [r4, #16]
 8006ace:	f105 0914 	add.w	r9, r5, #20
 8006ad2:	f104 0214 	add.w	r2, r4, #20
 8006ad6:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006ada:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006ade:	f100 0514 	add.w	r5, r0, #20
 8006ae2:	f04f 0c00 	mov.w	ip, #0
 8006ae6:	f852 ab04 	ldr.w	sl, [r2], #4
 8006aea:	f859 4b04 	ldr.w	r4, [r9], #4
 8006aee:	fa1c f18a 	uxtah	r1, ip, sl
 8006af2:	b2a3      	uxth	r3, r4
 8006af4:	1ac9      	subs	r1, r1, r3
 8006af6:	0c23      	lsrs	r3, r4, #16
 8006af8:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006afc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006b00:	b289      	uxth	r1, r1
 8006b02:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006b06:	45c8      	cmp	r8, r9
 8006b08:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006b0c:	4696      	mov	lr, r2
 8006b0e:	f845 3b04 	str.w	r3, [r5], #4
 8006b12:	d8e8      	bhi.n	8006ae6 <__mdiff+0x5c>
 8006b14:	45be      	cmp	lr, r7
 8006b16:	d305      	bcc.n	8006b24 <__mdiff+0x9a>
 8006b18:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006b1c:	b18b      	cbz	r3, 8006b42 <__mdiff+0xb8>
 8006b1e:	6106      	str	r6, [r0, #16]
 8006b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b24:	f85e 1b04 	ldr.w	r1, [lr], #4
 8006b28:	fa1c f381 	uxtah	r3, ip, r1
 8006b2c:	141a      	asrs	r2, r3, #16
 8006b2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b3c:	f845 3b04 	str.w	r3, [r5], #4
 8006b40:	e7e8      	b.n	8006b14 <__mdiff+0x8a>
 8006b42:	3e01      	subs	r6, #1
 8006b44:	e7e8      	b.n	8006b18 <__mdiff+0x8e>

08006b46 <__d2b>:
 8006b46:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b4a:	460e      	mov	r6, r1
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	ec59 8b10 	vmov	r8, r9, d0
 8006b52:	4615      	mov	r5, r2
 8006b54:	f7ff fd76 	bl	8006644 <_Balloc>
 8006b58:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006b5c:	4607      	mov	r7, r0
 8006b5e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b62:	bb34      	cbnz	r4, 8006bb2 <__d2b+0x6c>
 8006b64:	9301      	str	r3, [sp, #4]
 8006b66:	f1b8 0f00 	cmp.w	r8, #0
 8006b6a:	d027      	beq.n	8006bbc <__d2b+0x76>
 8006b6c:	a802      	add	r0, sp, #8
 8006b6e:	f840 8d08 	str.w	r8, [r0, #-8]!
 8006b72:	f7ff fe0c 	bl	800678e <__lo0bits>
 8006b76:	9900      	ldr	r1, [sp, #0]
 8006b78:	b1f0      	cbz	r0, 8006bb8 <__d2b+0x72>
 8006b7a:	9a01      	ldr	r2, [sp, #4]
 8006b7c:	f1c0 0320 	rsb	r3, r0, #32
 8006b80:	fa02 f303 	lsl.w	r3, r2, r3
 8006b84:	430b      	orrs	r3, r1
 8006b86:	40c2      	lsrs	r2, r0
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	9201      	str	r2, [sp, #4]
 8006b8c:	9b01      	ldr	r3, [sp, #4]
 8006b8e:	61bb      	str	r3, [r7, #24]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	bf14      	ite	ne
 8006b94:	2102      	movne	r1, #2
 8006b96:	2101      	moveq	r1, #1
 8006b98:	6139      	str	r1, [r7, #16]
 8006b9a:	b1c4      	cbz	r4, 8006bce <__d2b+0x88>
 8006b9c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006ba0:	4404      	add	r4, r0
 8006ba2:	6034      	str	r4, [r6, #0]
 8006ba4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ba8:	6028      	str	r0, [r5, #0]
 8006baa:	4638      	mov	r0, r7
 8006bac:	b003      	add	sp, #12
 8006bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bb6:	e7d5      	b.n	8006b64 <__d2b+0x1e>
 8006bb8:	6179      	str	r1, [r7, #20]
 8006bba:	e7e7      	b.n	8006b8c <__d2b+0x46>
 8006bbc:	a801      	add	r0, sp, #4
 8006bbe:	f7ff fde6 	bl	800678e <__lo0bits>
 8006bc2:	9b01      	ldr	r3, [sp, #4]
 8006bc4:	617b      	str	r3, [r7, #20]
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	6139      	str	r1, [r7, #16]
 8006bca:	3020      	adds	r0, #32
 8006bcc:	e7e5      	b.n	8006b9a <__d2b+0x54>
 8006bce:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006bd2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006bd6:	6030      	str	r0, [r6, #0]
 8006bd8:	6918      	ldr	r0, [r3, #16]
 8006bda:	f7ff fdb9 	bl	8006750 <__hi0bits>
 8006bde:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006be2:	e7e1      	b.n	8006ba8 <__d2b+0x62>

08006be4 <_realloc_r>:
 8006be4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be8:	4682      	mov	sl, r0
 8006bea:	460c      	mov	r4, r1
 8006bec:	b929      	cbnz	r1, 8006bfa <_realloc_r+0x16>
 8006bee:	4611      	mov	r1, r2
 8006bf0:	b003      	add	sp, #12
 8006bf2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf6:	f7ff badd 	b.w	80061b4 <_malloc_r>
 8006bfa:	9201      	str	r2, [sp, #4]
 8006bfc:	f7ff fd16 	bl	800662c <__malloc_lock>
 8006c00:	9a01      	ldr	r2, [sp, #4]
 8006c02:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8006c06:	f102 080b 	add.w	r8, r2, #11
 8006c0a:	f1b8 0f16 	cmp.w	r8, #22
 8006c0e:	f1a4 0908 	sub.w	r9, r4, #8
 8006c12:	f025 0603 	bic.w	r6, r5, #3
 8006c16:	d90a      	bls.n	8006c2e <_realloc_r+0x4a>
 8006c18:	f038 0807 	bics.w	r8, r8, #7
 8006c1c:	d509      	bpl.n	8006c32 <_realloc_r+0x4e>
 8006c1e:	230c      	movs	r3, #12
 8006c20:	f8ca 3000 	str.w	r3, [sl]
 8006c24:	2700      	movs	r7, #0
 8006c26:	4638      	mov	r0, r7
 8006c28:	b003      	add	sp, #12
 8006c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2e:	f04f 0810 	mov.w	r8, #16
 8006c32:	4590      	cmp	r8, r2
 8006c34:	d3f3      	bcc.n	8006c1e <_realloc_r+0x3a>
 8006c36:	45b0      	cmp	r8, r6
 8006c38:	f340 8145 	ble.w	8006ec6 <_realloc_r+0x2e2>
 8006c3c:	4ba8      	ldr	r3, [pc, #672]	; (8006ee0 <_realloc_r+0x2fc>)
 8006c3e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8006c42:	eb09 0106 	add.w	r1, r9, r6
 8006c46:	4571      	cmp	r1, lr
 8006c48:	469b      	mov	fp, r3
 8006c4a:	684b      	ldr	r3, [r1, #4]
 8006c4c:	d005      	beq.n	8006c5a <_realloc_r+0x76>
 8006c4e:	f023 0001 	bic.w	r0, r3, #1
 8006c52:	4408      	add	r0, r1
 8006c54:	6840      	ldr	r0, [r0, #4]
 8006c56:	07c7      	lsls	r7, r0, #31
 8006c58:	d447      	bmi.n	8006cea <_realloc_r+0x106>
 8006c5a:	f023 0303 	bic.w	r3, r3, #3
 8006c5e:	4571      	cmp	r1, lr
 8006c60:	eb06 0703 	add.w	r7, r6, r3
 8006c64:	d119      	bne.n	8006c9a <_realloc_r+0xb6>
 8006c66:	f108 0010 	add.w	r0, r8, #16
 8006c6a:	4287      	cmp	r7, r0
 8006c6c:	db3f      	blt.n	8006cee <_realloc_r+0x10a>
 8006c6e:	eb09 0308 	add.w	r3, r9, r8
 8006c72:	eba7 0708 	sub.w	r7, r7, r8
 8006c76:	f047 0701 	orr.w	r7, r7, #1
 8006c7a:	f8cb 3008 	str.w	r3, [fp, #8]
 8006c7e:	605f      	str	r7, [r3, #4]
 8006c80:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	ea43 0308 	orr.w	r3, r3, r8
 8006c8c:	f844 3c04 	str.w	r3, [r4, #-4]
 8006c90:	4650      	mov	r0, sl
 8006c92:	f7ff fcd1 	bl	8006638 <__malloc_unlock>
 8006c96:	4627      	mov	r7, r4
 8006c98:	e7c5      	b.n	8006c26 <_realloc_r+0x42>
 8006c9a:	45b8      	cmp	r8, r7
 8006c9c:	dc27      	bgt.n	8006cee <_realloc_r+0x10a>
 8006c9e:	68cb      	ldr	r3, [r1, #12]
 8006ca0:	688a      	ldr	r2, [r1, #8]
 8006ca2:	60d3      	str	r3, [r2, #12]
 8006ca4:	609a      	str	r2, [r3, #8]
 8006ca6:	eba7 0008 	sub.w	r0, r7, r8
 8006caa:	280f      	cmp	r0, #15
 8006cac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006cb0:	eb09 0207 	add.w	r2, r9, r7
 8006cb4:	f240 8109 	bls.w	8006eca <_realloc_r+0x2e6>
 8006cb8:	eb09 0108 	add.w	r1, r9, r8
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	ea43 0308 	orr.w	r3, r3, r8
 8006cc4:	f040 0001 	orr.w	r0, r0, #1
 8006cc8:	f8c9 3004 	str.w	r3, [r9, #4]
 8006ccc:	6048      	str	r0, [r1, #4]
 8006cce:	6853      	ldr	r3, [r2, #4]
 8006cd0:	f043 0301 	orr.w	r3, r3, #1
 8006cd4:	6053      	str	r3, [r2, #4]
 8006cd6:	3108      	adds	r1, #8
 8006cd8:	4650      	mov	r0, sl
 8006cda:	f7fe ffa1 	bl	8005c20 <_free_r>
 8006cde:	4650      	mov	r0, sl
 8006ce0:	f7ff fcaa 	bl	8006638 <__malloc_unlock>
 8006ce4:	f109 0708 	add.w	r7, r9, #8
 8006ce8:	e79d      	b.n	8006c26 <_realloc_r+0x42>
 8006cea:	2300      	movs	r3, #0
 8006cec:	4619      	mov	r1, r3
 8006cee:	07e8      	lsls	r0, r5, #31
 8006cf0:	f100 8084 	bmi.w	8006dfc <_realloc_r+0x218>
 8006cf4:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8006cf8:	eba9 0505 	sub.w	r5, r9, r5
 8006cfc:	6868      	ldr	r0, [r5, #4]
 8006cfe:	f020 0003 	bic.w	r0, r0, #3
 8006d02:	4430      	add	r0, r6
 8006d04:	2900      	cmp	r1, #0
 8006d06:	d076      	beq.n	8006df6 <_realloc_r+0x212>
 8006d08:	4571      	cmp	r1, lr
 8006d0a:	d150      	bne.n	8006dae <_realloc_r+0x1ca>
 8006d0c:	4403      	add	r3, r0
 8006d0e:	f108 0110 	add.w	r1, r8, #16
 8006d12:	428b      	cmp	r3, r1
 8006d14:	db6f      	blt.n	8006df6 <_realloc_r+0x212>
 8006d16:	462f      	mov	r7, r5
 8006d18:	68ea      	ldr	r2, [r5, #12]
 8006d1a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8006d1e:	60ca      	str	r2, [r1, #12]
 8006d20:	6091      	str	r1, [r2, #8]
 8006d22:	1f32      	subs	r2, r6, #4
 8006d24:	2a24      	cmp	r2, #36	; 0x24
 8006d26:	d83b      	bhi.n	8006da0 <_realloc_r+0x1bc>
 8006d28:	2a13      	cmp	r2, #19
 8006d2a:	d936      	bls.n	8006d9a <_realloc_r+0x1b6>
 8006d2c:	6821      	ldr	r1, [r4, #0]
 8006d2e:	60a9      	str	r1, [r5, #8]
 8006d30:	6861      	ldr	r1, [r4, #4]
 8006d32:	60e9      	str	r1, [r5, #12]
 8006d34:	2a1b      	cmp	r2, #27
 8006d36:	d81c      	bhi.n	8006d72 <_realloc_r+0x18e>
 8006d38:	f105 0210 	add.w	r2, r5, #16
 8006d3c:	f104 0108 	add.w	r1, r4, #8
 8006d40:	6808      	ldr	r0, [r1, #0]
 8006d42:	6010      	str	r0, [r2, #0]
 8006d44:	6848      	ldr	r0, [r1, #4]
 8006d46:	6050      	str	r0, [r2, #4]
 8006d48:	6889      	ldr	r1, [r1, #8]
 8006d4a:	6091      	str	r1, [r2, #8]
 8006d4c:	eb05 0208 	add.w	r2, r5, r8
 8006d50:	eba3 0308 	sub.w	r3, r3, r8
 8006d54:	f043 0301 	orr.w	r3, r3, #1
 8006d58:	f8cb 2008 	str.w	r2, [fp, #8]
 8006d5c:	6053      	str	r3, [r2, #4]
 8006d5e:	686b      	ldr	r3, [r5, #4]
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	ea43 0308 	orr.w	r3, r3, r8
 8006d68:	606b      	str	r3, [r5, #4]
 8006d6a:	4650      	mov	r0, sl
 8006d6c:	f7ff fc64 	bl	8006638 <__malloc_unlock>
 8006d70:	e759      	b.n	8006c26 <_realloc_r+0x42>
 8006d72:	68a1      	ldr	r1, [r4, #8]
 8006d74:	6129      	str	r1, [r5, #16]
 8006d76:	68e1      	ldr	r1, [r4, #12]
 8006d78:	6169      	str	r1, [r5, #20]
 8006d7a:	2a24      	cmp	r2, #36	; 0x24
 8006d7c:	bf01      	itttt	eq
 8006d7e:	6922      	ldreq	r2, [r4, #16]
 8006d80:	61aa      	streq	r2, [r5, #24]
 8006d82:	6960      	ldreq	r0, [r4, #20]
 8006d84:	61e8      	streq	r0, [r5, #28]
 8006d86:	bf19      	ittee	ne
 8006d88:	f105 0218 	addne.w	r2, r5, #24
 8006d8c:	f104 0110 	addne.w	r1, r4, #16
 8006d90:	f105 0220 	addeq.w	r2, r5, #32
 8006d94:	f104 0118 	addeq.w	r1, r4, #24
 8006d98:	e7d2      	b.n	8006d40 <_realloc_r+0x15c>
 8006d9a:	463a      	mov	r2, r7
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	e7cf      	b.n	8006d40 <_realloc_r+0x15c>
 8006da0:	4621      	mov	r1, r4
 8006da2:	4638      	mov	r0, r7
 8006da4:	9301      	str	r3, [sp, #4]
 8006da6:	f7ff fc1e 	bl	80065e6 <memmove>
 8006daa:	9b01      	ldr	r3, [sp, #4]
 8006dac:	e7ce      	b.n	8006d4c <_realloc_r+0x168>
 8006dae:	18c7      	adds	r7, r0, r3
 8006db0:	45b8      	cmp	r8, r7
 8006db2:	dc20      	bgt.n	8006df6 <_realloc_r+0x212>
 8006db4:	68cb      	ldr	r3, [r1, #12]
 8006db6:	688a      	ldr	r2, [r1, #8]
 8006db8:	60d3      	str	r3, [r2, #12]
 8006dba:	609a      	str	r2, [r3, #8]
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	68eb      	ldr	r3, [r5, #12]
 8006dc0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8006dc4:	60d3      	str	r3, [r2, #12]
 8006dc6:	609a      	str	r2, [r3, #8]
 8006dc8:	1f32      	subs	r2, r6, #4
 8006dca:	2a24      	cmp	r2, #36	; 0x24
 8006dcc:	d842      	bhi.n	8006e54 <_realloc_r+0x270>
 8006dce:	2a13      	cmp	r2, #19
 8006dd0:	d93e      	bls.n	8006e50 <_realloc_r+0x26c>
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	60ab      	str	r3, [r5, #8]
 8006dd6:	6863      	ldr	r3, [r4, #4]
 8006dd8:	60eb      	str	r3, [r5, #12]
 8006dda:	2a1b      	cmp	r2, #27
 8006ddc:	d824      	bhi.n	8006e28 <_realloc_r+0x244>
 8006dde:	f105 0010 	add.w	r0, r5, #16
 8006de2:	f104 0308 	add.w	r3, r4, #8
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	6002      	str	r2, [r0, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	6042      	str	r2, [r0, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	6083      	str	r3, [r0, #8]
 8006df2:	46a9      	mov	r9, r5
 8006df4:	e757      	b.n	8006ca6 <_realloc_r+0xc2>
 8006df6:	4580      	cmp	r8, r0
 8006df8:	4607      	mov	r7, r0
 8006dfa:	dddf      	ble.n	8006dbc <_realloc_r+0x1d8>
 8006dfc:	4611      	mov	r1, r2
 8006dfe:	4650      	mov	r0, sl
 8006e00:	f7ff f9d8 	bl	80061b4 <_malloc_r>
 8006e04:	4607      	mov	r7, r0
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d0af      	beq.n	8006d6a <_realloc_r+0x186>
 8006e0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006e0e:	f023 0301 	bic.w	r3, r3, #1
 8006e12:	f1a0 0208 	sub.w	r2, r0, #8
 8006e16:	444b      	add	r3, r9
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d11f      	bne.n	8006e5c <_realloc_r+0x278>
 8006e1c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8006e20:	f027 0703 	bic.w	r7, r7, #3
 8006e24:	4437      	add	r7, r6
 8006e26:	e73e      	b.n	8006ca6 <_realloc_r+0xc2>
 8006e28:	68a3      	ldr	r3, [r4, #8]
 8006e2a:	612b      	str	r3, [r5, #16]
 8006e2c:	68e3      	ldr	r3, [r4, #12]
 8006e2e:	616b      	str	r3, [r5, #20]
 8006e30:	2a24      	cmp	r2, #36	; 0x24
 8006e32:	bf01      	itttt	eq
 8006e34:	6923      	ldreq	r3, [r4, #16]
 8006e36:	61ab      	streq	r3, [r5, #24]
 8006e38:	6962      	ldreq	r2, [r4, #20]
 8006e3a:	61ea      	streq	r2, [r5, #28]
 8006e3c:	bf19      	ittee	ne
 8006e3e:	f105 0018 	addne.w	r0, r5, #24
 8006e42:	f104 0310 	addne.w	r3, r4, #16
 8006e46:	f105 0020 	addeq.w	r0, r5, #32
 8006e4a:	f104 0318 	addeq.w	r3, r4, #24
 8006e4e:	e7ca      	b.n	8006de6 <_realloc_r+0x202>
 8006e50:	4623      	mov	r3, r4
 8006e52:	e7c8      	b.n	8006de6 <_realloc_r+0x202>
 8006e54:	4621      	mov	r1, r4
 8006e56:	f7ff fbc6 	bl	80065e6 <memmove>
 8006e5a:	e7ca      	b.n	8006df2 <_realloc_r+0x20e>
 8006e5c:	1f32      	subs	r2, r6, #4
 8006e5e:	2a24      	cmp	r2, #36	; 0x24
 8006e60:	d82d      	bhi.n	8006ebe <_realloc_r+0x2da>
 8006e62:	2a13      	cmp	r2, #19
 8006e64:	d928      	bls.n	8006eb8 <_realloc_r+0x2d4>
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	6003      	str	r3, [r0, #0]
 8006e6a:	6863      	ldr	r3, [r4, #4]
 8006e6c:	6043      	str	r3, [r0, #4]
 8006e6e:	2a1b      	cmp	r2, #27
 8006e70:	d80e      	bhi.n	8006e90 <_realloc_r+0x2ac>
 8006e72:	f100 0308 	add.w	r3, r0, #8
 8006e76:	f104 0208 	add.w	r2, r4, #8
 8006e7a:	6811      	ldr	r1, [r2, #0]
 8006e7c:	6019      	str	r1, [r3, #0]
 8006e7e:	6851      	ldr	r1, [r2, #4]
 8006e80:	6059      	str	r1, [r3, #4]
 8006e82:	6892      	ldr	r2, [r2, #8]
 8006e84:	609a      	str	r2, [r3, #8]
 8006e86:	4621      	mov	r1, r4
 8006e88:	4650      	mov	r0, sl
 8006e8a:	f7fe fec9 	bl	8005c20 <_free_r>
 8006e8e:	e76c      	b.n	8006d6a <_realloc_r+0x186>
 8006e90:	68a3      	ldr	r3, [r4, #8]
 8006e92:	6083      	str	r3, [r0, #8]
 8006e94:	68e3      	ldr	r3, [r4, #12]
 8006e96:	60c3      	str	r3, [r0, #12]
 8006e98:	2a24      	cmp	r2, #36	; 0x24
 8006e9a:	bf01      	itttt	eq
 8006e9c:	6923      	ldreq	r3, [r4, #16]
 8006e9e:	6103      	streq	r3, [r0, #16]
 8006ea0:	6961      	ldreq	r1, [r4, #20]
 8006ea2:	6141      	streq	r1, [r0, #20]
 8006ea4:	bf19      	ittee	ne
 8006ea6:	f100 0310 	addne.w	r3, r0, #16
 8006eaa:	f104 0210 	addne.w	r2, r4, #16
 8006eae:	f100 0318 	addeq.w	r3, r0, #24
 8006eb2:	f104 0218 	addeq.w	r2, r4, #24
 8006eb6:	e7e0      	b.n	8006e7a <_realloc_r+0x296>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	4622      	mov	r2, r4
 8006ebc:	e7dd      	b.n	8006e7a <_realloc_r+0x296>
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	f7ff fb91 	bl	80065e6 <memmove>
 8006ec4:	e7df      	b.n	8006e86 <_realloc_r+0x2a2>
 8006ec6:	4637      	mov	r7, r6
 8006ec8:	e6ed      	b.n	8006ca6 <_realloc_r+0xc2>
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	431f      	orrs	r7, r3
 8006ed0:	f8c9 7004 	str.w	r7, [r9, #4]
 8006ed4:	6853      	ldr	r3, [r2, #4]
 8006ed6:	f043 0301 	orr.w	r3, r3, #1
 8006eda:	6053      	str	r3, [r2, #4]
 8006edc:	e6ff      	b.n	8006cde <_realloc_r+0xfa>
 8006ede:	bf00      	nop
 8006ee0:	2000021c 	.word	0x2000021c

08006ee4 <lflush>:
 8006ee4:	8983      	ldrh	r3, [r0, #12]
 8006ee6:	f003 0309 	and.w	r3, r3, #9
 8006eea:	2b09      	cmp	r3, #9
 8006eec:	d101      	bne.n	8006ef2 <lflush+0xe>
 8006eee:	f7fe bd57 	b.w	80059a0 <fflush>
 8006ef2:	2000      	movs	r0, #0
 8006ef4:	4770      	bx	lr
	...

08006ef8 <__srefill_r>:
 8006ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efa:	460c      	mov	r4, r1
 8006efc:	4605      	mov	r5, r0
 8006efe:	b118      	cbz	r0, 8006f08 <__srefill_r+0x10>
 8006f00:	6983      	ldr	r3, [r0, #24]
 8006f02:	b90b      	cbnz	r3, 8006f08 <__srefill_r+0x10>
 8006f04:	f7fe fdb6 	bl	8005a74 <__sinit>
 8006f08:	4b41      	ldr	r3, [pc, #260]	; (8007010 <__srefill_r+0x118>)
 8006f0a:	429c      	cmp	r4, r3
 8006f0c:	d115      	bne.n	8006f3a <__srefill_r+0x42>
 8006f0e:	686c      	ldr	r4, [r5, #4]
 8006f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f14:	049f      	lsls	r7, r3, #18
 8006f16:	d406      	bmi.n	8006f26 <__srefill_r+0x2e>
 8006f18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006f1c:	81a3      	strh	r3, [r4, #12]
 8006f1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f24:	6663      	str	r3, [r4, #100]	; 0x64
 8006f26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	6063      	str	r3, [r4, #4]
 8006f2e:	b293      	uxth	r3, r2
 8006f30:	069e      	lsls	r6, r3, #26
 8006f32:	d50c      	bpl.n	8006f4e <__srefill_r+0x56>
 8006f34:	f04f 30ff 	mov.w	r0, #4294967295
 8006f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f3a:	4b36      	ldr	r3, [pc, #216]	; (8007014 <__srefill_r+0x11c>)
 8006f3c:	429c      	cmp	r4, r3
 8006f3e:	d101      	bne.n	8006f44 <__srefill_r+0x4c>
 8006f40:	68ac      	ldr	r4, [r5, #8]
 8006f42:	e7e5      	b.n	8006f10 <__srefill_r+0x18>
 8006f44:	4b34      	ldr	r3, [pc, #208]	; (8007018 <__srefill_r+0x120>)
 8006f46:	429c      	cmp	r4, r3
 8006f48:	bf08      	it	eq
 8006f4a:	68ec      	ldreq	r4, [r5, #12]
 8006f4c:	e7e0      	b.n	8006f10 <__srefill_r+0x18>
 8006f4e:	0758      	lsls	r0, r3, #29
 8006f50:	d448      	bmi.n	8006fe4 <__srefill_r+0xec>
 8006f52:	06d9      	lsls	r1, r3, #27
 8006f54:	d405      	bmi.n	8006f62 <__srefill_r+0x6a>
 8006f56:	2309      	movs	r3, #9
 8006f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f5c:	602b      	str	r3, [r5, #0]
 8006f5e:	81a2      	strh	r2, [r4, #12]
 8006f60:	e7e8      	b.n	8006f34 <__srefill_r+0x3c>
 8006f62:	071a      	lsls	r2, r3, #28
 8006f64:	d50b      	bpl.n	8006f7e <__srefill_r+0x86>
 8006f66:	4621      	mov	r1, r4
 8006f68:	4628      	mov	r0, r5
 8006f6a:	f7fe fcdd 	bl	8005928 <_fflush_r>
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	d1e0      	bne.n	8006f34 <__srefill_r+0x3c>
 8006f72:	89a3      	ldrh	r3, [r4, #12]
 8006f74:	60a0      	str	r0, [r4, #8]
 8006f76:	f023 0308 	bic.w	r3, r3, #8
 8006f7a:	81a3      	strh	r3, [r4, #12]
 8006f7c:	61a0      	str	r0, [r4, #24]
 8006f7e:	89a3      	ldrh	r3, [r4, #12]
 8006f80:	f043 0304 	orr.w	r3, r3, #4
 8006f84:	81a3      	strh	r3, [r4, #12]
 8006f86:	6923      	ldr	r3, [r4, #16]
 8006f88:	b91b      	cbnz	r3, 8006f92 <__srefill_r+0x9a>
 8006f8a:	4621      	mov	r1, r4
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	f7ff f8c9 	bl	8006124 <__smakebuf_r>
 8006f92:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8006f96:	b2be      	uxth	r6, r7
 8006f98:	07b3      	lsls	r3, r6, #30
 8006f9a:	d00f      	beq.n	8006fbc <__srefill_r+0xc4>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	81a3      	strh	r3, [r4, #12]
 8006fa0:	4b1e      	ldr	r3, [pc, #120]	; (800701c <__srefill_r+0x124>)
 8006fa2:	491f      	ldr	r1, [pc, #124]	; (8007020 <__srefill_r+0x128>)
 8006fa4:	6818      	ldr	r0, [r3, #0]
 8006fa6:	f006 0609 	and.w	r6, r6, #9
 8006faa:	f7ff f843 	bl	8006034 <_fwalk>
 8006fae:	2e09      	cmp	r6, #9
 8006fb0:	81a7      	strh	r7, [r4, #12]
 8006fb2:	d103      	bne.n	8006fbc <__srefill_r+0xc4>
 8006fb4:	4621      	mov	r1, r4
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	f7fe fc24 	bl	8005804 <__sflush_r>
 8006fbc:	6922      	ldr	r2, [r4, #16]
 8006fbe:	6022      	str	r2, [r4, #0]
 8006fc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006fc2:	6963      	ldr	r3, [r4, #20]
 8006fc4:	6a21      	ldr	r1, [r4, #32]
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	47b0      	blx	r6
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	6060      	str	r0, [r4, #4]
 8006fce:	dc1c      	bgt.n	800700a <__srefill_r+0x112>
 8006fd0:	89a3      	ldrh	r3, [r4, #12]
 8006fd2:	bf17      	itett	ne
 8006fd4:	2200      	movne	r2, #0
 8006fd6:	f043 0320 	orreq.w	r3, r3, #32
 8006fda:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8006fde:	6062      	strne	r2, [r4, #4]
 8006fe0:	81a3      	strh	r3, [r4, #12]
 8006fe2:	e7a7      	b.n	8006f34 <__srefill_r+0x3c>
 8006fe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fe6:	2900      	cmp	r1, #0
 8006fe8:	d0cd      	beq.n	8006f86 <__srefill_r+0x8e>
 8006fea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fee:	4299      	cmp	r1, r3
 8006ff0:	d002      	beq.n	8006ff8 <__srefill_r+0x100>
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	f7fe fe14 	bl	8005c20 <_free_r>
 8006ff8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ffa:	6063      	str	r3, [r4, #4]
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	6360      	str	r0, [r4, #52]	; 0x34
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0c0      	beq.n	8006f86 <__srefill_r+0x8e>
 8007004:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007006:	6023      	str	r3, [r4, #0]
 8007008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800700a:	2000      	movs	r0, #0
 800700c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800700e:	bf00      	nop
 8007010:	08009284 	.word	0x08009284
 8007014:	080092a4 	.word	0x080092a4
 8007018:	08009264 	.word	0x08009264
 800701c:	080091fc 	.word	0x080091fc
 8007020:	08006ee5 	.word	0x08006ee5

08007024 <_sbrk_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	4c06      	ldr	r4, [pc, #24]	; (8007040 <_sbrk_r+0x1c>)
 8007028:	2300      	movs	r3, #0
 800702a:	4605      	mov	r5, r0
 800702c:	4608      	mov	r0, r1
 800702e:	6023      	str	r3, [r4, #0]
 8007030:	f7fc f8f4 	bl	800321c <_sbrk>
 8007034:	1c43      	adds	r3, r0, #1
 8007036:	d102      	bne.n	800703e <_sbrk_r+0x1a>
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	b103      	cbz	r3, 800703e <_sbrk_r+0x1a>
 800703c:	602b      	str	r3, [r5, #0]
 800703e:	bd38      	pop	{r3, r4, r5, pc}
 8007040:	20000c38 	.word	0x20000c38

08007044 <__sread>:
 8007044:	b510      	push	{r4, lr}
 8007046:	460c      	mov	r4, r1
 8007048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800704c:	f000 f9ec 	bl	8007428 <_read_r>
 8007050:	2800      	cmp	r0, #0
 8007052:	bfab      	itete	ge
 8007054:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007056:	89a3      	ldrhlt	r3, [r4, #12]
 8007058:	181b      	addge	r3, r3, r0
 800705a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800705e:	bfac      	ite	ge
 8007060:	6563      	strge	r3, [r4, #84]	; 0x54
 8007062:	81a3      	strhlt	r3, [r4, #12]
 8007064:	bd10      	pop	{r4, pc}

08007066 <__swrite>:
 8007066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800706a:	461f      	mov	r7, r3
 800706c:	898b      	ldrh	r3, [r1, #12]
 800706e:	05db      	lsls	r3, r3, #23
 8007070:	4605      	mov	r5, r0
 8007072:	460c      	mov	r4, r1
 8007074:	4616      	mov	r6, r2
 8007076:	d505      	bpl.n	8007084 <__swrite+0x1e>
 8007078:	2302      	movs	r3, #2
 800707a:	2200      	movs	r2, #0
 800707c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007080:	f000 f9ae 	bl	80073e0 <_lseek_r>
 8007084:	89a3      	ldrh	r3, [r4, #12]
 8007086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800708a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800708e:	81a3      	strh	r3, [r4, #12]
 8007090:	4632      	mov	r2, r6
 8007092:	463b      	mov	r3, r7
 8007094:	4628      	mov	r0, r5
 8007096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800709a:	f000 b84b 	b.w	8007134 <_write_r>

0800709e <__sseek>:
 800709e:	b510      	push	{r4, lr}
 80070a0:	460c      	mov	r4, r1
 80070a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a6:	f000 f99b 	bl	80073e0 <_lseek_r>
 80070aa:	1c43      	adds	r3, r0, #1
 80070ac:	89a3      	ldrh	r3, [r4, #12]
 80070ae:	bf15      	itete	ne
 80070b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80070b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070ba:	81a3      	strheq	r3, [r4, #12]
 80070bc:	bf18      	it	ne
 80070be:	81a3      	strhne	r3, [r4, #12]
 80070c0:	bd10      	pop	{r4, pc}

080070c2 <__sclose>:
 80070c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070c6:	f000 b875 	b.w	80071b4 <_close_r>

080070ca <__sprint_r>:
 80070ca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ce:	6893      	ldr	r3, [r2, #8]
 80070d0:	4680      	mov	r8, r0
 80070d2:	460f      	mov	r7, r1
 80070d4:	4614      	mov	r4, r2
 80070d6:	b91b      	cbnz	r3, 80070e0 <__sprint_r+0x16>
 80070d8:	6053      	str	r3, [r2, #4]
 80070da:	4618      	mov	r0, r3
 80070dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80070e2:	049d      	lsls	r5, r3, #18
 80070e4:	d523      	bpl.n	800712e <__sprint_r+0x64>
 80070e6:	6815      	ldr	r5, [r2, #0]
 80070e8:	68a0      	ldr	r0, [r4, #8]
 80070ea:	3508      	adds	r5, #8
 80070ec:	b920      	cbnz	r0, 80070f8 <__sprint_r+0x2e>
 80070ee:	2300      	movs	r3, #0
 80070f0:	60a3      	str	r3, [r4, #8]
 80070f2:	6063      	str	r3, [r4, #4]
 80070f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f8:	f855 6c04 	ldr.w	r6, [r5, #-4]
 80070fc:	f855 bc08 	ldr.w	fp, [r5, #-8]
 8007100:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8007104:	f04f 0900 	mov.w	r9, #0
 8007108:	45ca      	cmp	sl, r9
 800710a:	dc05      	bgt.n	8007118 <__sprint_r+0x4e>
 800710c:	68a3      	ldr	r3, [r4, #8]
 800710e:	f026 0603 	bic.w	r6, r6, #3
 8007112:	1b9e      	subs	r6, r3, r6
 8007114:	60a6      	str	r6, [r4, #8]
 8007116:	e7e7      	b.n	80070e8 <__sprint_r+0x1e>
 8007118:	463a      	mov	r2, r7
 800711a:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800711e:	4640      	mov	r0, r8
 8007120:	f000 f905 	bl	800732e <_fputwc_r>
 8007124:	1c43      	adds	r3, r0, #1
 8007126:	d0e2      	beq.n	80070ee <__sprint_r+0x24>
 8007128:	f109 0901 	add.w	r9, r9, #1
 800712c:	e7ec      	b.n	8007108 <__sprint_r+0x3e>
 800712e:	f7fe fe33 	bl	8005d98 <__sfvwrite_r>
 8007132:	e7dc      	b.n	80070ee <__sprint_r+0x24>

08007134 <_write_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	4c07      	ldr	r4, [pc, #28]	; (8007154 <_write_r+0x20>)
 8007138:	4605      	mov	r5, r0
 800713a:	4608      	mov	r0, r1
 800713c:	4611      	mov	r1, r2
 800713e:	2200      	movs	r2, #0
 8007140:	6022      	str	r2, [r4, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	f7fc f832 	bl	80031ac <_write>
 8007148:	1c43      	adds	r3, r0, #1
 800714a:	d102      	bne.n	8007152 <_write_r+0x1e>
 800714c:	6823      	ldr	r3, [r4, #0]
 800714e:	b103      	cbz	r3, 8007152 <_write_r+0x1e>
 8007150:	602b      	str	r3, [r5, #0]
 8007152:	bd38      	pop	{r3, r4, r5, pc}
 8007154:	20000c38 	.word	0x20000c38

08007158 <_calloc_r>:
 8007158:	b510      	push	{r4, lr}
 800715a:	4351      	muls	r1, r2
 800715c:	f7ff f82a 	bl	80061b4 <_malloc_r>
 8007160:	4604      	mov	r4, r0
 8007162:	b198      	cbz	r0, 800718c <_calloc_r+0x34>
 8007164:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007168:	f022 0203 	bic.w	r2, r2, #3
 800716c:	3a04      	subs	r2, #4
 800716e:	2a24      	cmp	r2, #36	; 0x24
 8007170:	d81b      	bhi.n	80071aa <_calloc_r+0x52>
 8007172:	2a13      	cmp	r2, #19
 8007174:	d917      	bls.n	80071a6 <_calloc_r+0x4e>
 8007176:	2100      	movs	r1, #0
 8007178:	2a1b      	cmp	r2, #27
 800717a:	6001      	str	r1, [r0, #0]
 800717c:	6041      	str	r1, [r0, #4]
 800717e:	d807      	bhi.n	8007190 <_calloc_r+0x38>
 8007180:	f100 0308 	add.w	r3, r0, #8
 8007184:	2200      	movs	r2, #0
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	605a      	str	r2, [r3, #4]
 800718a:	609a      	str	r2, [r3, #8]
 800718c:	4620      	mov	r0, r4
 800718e:	bd10      	pop	{r4, pc}
 8007190:	2a24      	cmp	r2, #36	; 0x24
 8007192:	6081      	str	r1, [r0, #8]
 8007194:	60c1      	str	r1, [r0, #12]
 8007196:	bf11      	iteee	ne
 8007198:	f100 0310 	addne.w	r3, r0, #16
 800719c:	6101      	streq	r1, [r0, #16]
 800719e:	f100 0318 	addeq.w	r3, r0, #24
 80071a2:	6141      	streq	r1, [r0, #20]
 80071a4:	e7ee      	b.n	8007184 <_calloc_r+0x2c>
 80071a6:	4603      	mov	r3, r0
 80071a8:	e7ec      	b.n	8007184 <_calloc_r+0x2c>
 80071aa:	2100      	movs	r1, #0
 80071ac:	f7ff fa35 	bl	800661a <memset>
 80071b0:	e7ec      	b.n	800718c <_calloc_r+0x34>
	...

080071b4 <_close_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	4c06      	ldr	r4, [pc, #24]	; (80071d0 <_close_r+0x1c>)
 80071b8:	2300      	movs	r3, #0
 80071ba:	4605      	mov	r5, r0
 80071bc:	4608      	mov	r0, r1
 80071be:	6023      	str	r3, [r4, #0]
 80071c0:	f7fc f84c 	bl	800325c <_close>
 80071c4:	1c43      	adds	r3, r0, #1
 80071c6:	d102      	bne.n	80071ce <_close_r+0x1a>
 80071c8:	6823      	ldr	r3, [r4, #0]
 80071ca:	b103      	cbz	r3, 80071ce <_close_r+0x1a>
 80071cc:	602b      	str	r3, [r5, #0]
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
 80071d0:	20000c38 	.word	0x20000c38

080071d4 <_fclose_r>:
 80071d4:	b570      	push	{r4, r5, r6, lr}
 80071d6:	4605      	mov	r5, r0
 80071d8:	460c      	mov	r4, r1
 80071da:	b911      	cbnz	r1, 80071e2 <_fclose_r+0xe>
 80071dc:	2600      	movs	r6, #0
 80071de:	4630      	mov	r0, r6
 80071e0:	bd70      	pop	{r4, r5, r6, pc}
 80071e2:	b118      	cbz	r0, 80071ec <_fclose_r+0x18>
 80071e4:	6983      	ldr	r3, [r0, #24]
 80071e6:	b90b      	cbnz	r3, 80071ec <_fclose_r+0x18>
 80071e8:	f7fe fc44 	bl	8005a74 <__sinit>
 80071ec:	4b2c      	ldr	r3, [pc, #176]	; (80072a0 <_fclose_r+0xcc>)
 80071ee:	429c      	cmp	r4, r3
 80071f0:	d114      	bne.n	800721c <_fclose_r+0x48>
 80071f2:	686c      	ldr	r4, [r5, #4]
 80071f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071f6:	07d8      	lsls	r0, r3, #31
 80071f8:	d405      	bmi.n	8007206 <_fclose_r+0x32>
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	0599      	lsls	r1, r3, #22
 80071fe:	d402      	bmi.n	8007206 <_fclose_r+0x32>
 8007200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007202:	f7fe ff61 	bl	80060c8 <__retarget_lock_acquire_recursive>
 8007206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800720a:	b98b      	cbnz	r3, 8007230 <_fclose_r+0x5c>
 800720c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800720e:	f016 0601 	ands.w	r6, r6, #1
 8007212:	d1e3      	bne.n	80071dc <_fclose_r+0x8>
 8007214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007216:	f7fe ff58 	bl	80060ca <__retarget_lock_release_recursive>
 800721a:	e7e0      	b.n	80071de <_fclose_r+0xa>
 800721c:	4b21      	ldr	r3, [pc, #132]	; (80072a4 <_fclose_r+0xd0>)
 800721e:	429c      	cmp	r4, r3
 8007220:	d101      	bne.n	8007226 <_fclose_r+0x52>
 8007222:	68ac      	ldr	r4, [r5, #8]
 8007224:	e7e6      	b.n	80071f4 <_fclose_r+0x20>
 8007226:	4b20      	ldr	r3, [pc, #128]	; (80072a8 <_fclose_r+0xd4>)
 8007228:	429c      	cmp	r4, r3
 800722a:	bf08      	it	eq
 800722c:	68ec      	ldreq	r4, [r5, #12]
 800722e:	e7e1      	b.n	80071f4 <_fclose_r+0x20>
 8007230:	4621      	mov	r1, r4
 8007232:	4628      	mov	r0, r5
 8007234:	f7fe fae6 	bl	8005804 <__sflush_r>
 8007238:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800723a:	4606      	mov	r6, r0
 800723c:	b133      	cbz	r3, 800724c <_fclose_r+0x78>
 800723e:	6a21      	ldr	r1, [r4, #32]
 8007240:	4628      	mov	r0, r5
 8007242:	4798      	blx	r3
 8007244:	2800      	cmp	r0, #0
 8007246:	bfb8      	it	lt
 8007248:	f04f 36ff 	movlt.w	r6, #4294967295
 800724c:	89a3      	ldrh	r3, [r4, #12]
 800724e:	061a      	lsls	r2, r3, #24
 8007250:	d503      	bpl.n	800725a <_fclose_r+0x86>
 8007252:	6921      	ldr	r1, [r4, #16]
 8007254:	4628      	mov	r0, r5
 8007256:	f7fe fce3 	bl	8005c20 <_free_r>
 800725a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800725c:	b141      	cbz	r1, 8007270 <_fclose_r+0x9c>
 800725e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007262:	4299      	cmp	r1, r3
 8007264:	d002      	beq.n	800726c <_fclose_r+0x98>
 8007266:	4628      	mov	r0, r5
 8007268:	f7fe fcda 	bl	8005c20 <_free_r>
 800726c:	2300      	movs	r3, #0
 800726e:	6363      	str	r3, [r4, #52]	; 0x34
 8007270:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007272:	b121      	cbz	r1, 800727e <_fclose_r+0xaa>
 8007274:	4628      	mov	r0, r5
 8007276:	f7fe fcd3 	bl	8005c20 <_free_r>
 800727a:	2300      	movs	r3, #0
 800727c:	64a3      	str	r3, [r4, #72]	; 0x48
 800727e:	f7fe fbe1 	bl	8005a44 <__sfp_lock_acquire>
 8007282:	2300      	movs	r3, #0
 8007284:	81a3      	strh	r3, [r4, #12]
 8007286:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007288:	07db      	lsls	r3, r3, #31
 800728a:	d402      	bmi.n	8007292 <_fclose_r+0xbe>
 800728c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800728e:	f7fe ff1c 	bl	80060ca <__retarget_lock_release_recursive>
 8007292:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007294:	f7fe ff17 	bl	80060c6 <__retarget_lock_close_recursive>
 8007298:	f7fe fbda 	bl	8005a50 <__sfp_lock_release>
 800729c:	e79f      	b.n	80071de <_fclose_r+0xa>
 800729e:	bf00      	nop
 80072a0:	08009284 	.word	0x08009284
 80072a4:	080092a4 	.word	0x080092a4
 80072a8:	08009264 	.word	0x08009264

080072ac <__fputwc>:
 80072ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072b0:	4680      	mov	r8, r0
 80072b2:	460e      	mov	r6, r1
 80072b4:	4614      	mov	r4, r2
 80072b6:	f000 f885 	bl	80073c4 <__locale_mb_cur_max>
 80072ba:	2801      	cmp	r0, #1
 80072bc:	d11c      	bne.n	80072f8 <__fputwc+0x4c>
 80072be:	1e73      	subs	r3, r6, #1
 80072c0:	2bfe      	cmp	r3, #254	; 0xfe
 80072c2:	d819      	bhi.n	80072f8 <__fputwc+0x4c>
 80072c4:	f88d 6004 	strb.w	r6, [sp, #4]
 80072c8:	4605      	mov	r5, r0
 80072ca:	2700      	movs	r7, #0
 80072cc:	f10d 0904 	add.w	r9, sp, #4
 80072d0:	42af      	cmp	r7, r5
 80072d2:	d020      	beq.n	8007316 <__fputwc+0x6a>
 80072d4:	68a3      	ldr	r3, [r4, #8]
 80072d6:	f817 1009 	ldrb.w	r1, [r7, r9]
 80072da:	3b01      	subs	r3, #1
 80072dc:	2b00      	cmp	r3, #0
 80072de:	60a3      	str	r3, [r4, #8]
 80072e0:	da04      	bge.n	80072ec <__fputwc+0x40>
 80072e2:	69a2      	ldr	r2, [r4, #24]
 80072e4:	4293      	cmp	r3, r2
 80072e6:	db1a      	blt.n	800731e <__fputwc+0x72>
 80072e8:	290a      	cmp	r1, #10
 80072ea:	d018      	beq.n	800731e <__fputwc+0x72>
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	6022      	str	r2, [r4, #0]
 80072f2:	7019      	strb	r1, [r3, #0]
 80072f4:	3701      	adds	r7, #1
 80072f6:	e7eb      	b.n	80072d0 <__fputwc+0x24>
 80072f8:	4632      	mov	r2, r6
 80072fa:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80072fe:	a901      	add	r1, sp, #4
 8007300:	4640      	mov	r0, r8
 8007302:	f000 f8a3 	bl	800744c <_wcrtomb_r>
 8007306:	1c42      	adds	r2, r0, #1
 8007308:	4605      	mov	r5, r0
 800730a:	d1de      	bne.n	80072ca <__fputwc+0x1e>
 800730c:	89a3      	ldrh	r3, [r4, #12]
 800730e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007312:	81a3      	strh	r3, [r4, #12]
 8007314:	4606      	mov	r6, r0
 8007316:	4630      	mov	r0, r6
 8007318:	b003      	add	sp, #12
 800731a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800731e:	4622      	mov	r2, r4
 8007320:	4640      	mov	r0, r8
 8007322:	f7fd fb49 	bl	80049b8 <__swbuf_r>
 8007326:	1c43      	adds	r3, r0, #1
 8007328:	d1e4      	bne.n	80072f4 <__fputwc+0x48>
 800732a:	4606      	mov	r6, r0
 800732c:	e7f3      	b.n	8007316 <__fputwc+0x6a>

0800732e <_fputwc_r>:
 800732e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8007330:	07db      	lsls	r3, r3, #31
 8007332:	b570      	push	{r4, r5, r6, lr}
 8007334:	4605      	mov	r5, r0
 8007336:	460e      	mov	r6, r1
 8007338:	4614      	mov	r4, r2
 800733a:	d405      	bmi.n	8007348 <_fputwc_r+0x1a>
 800733c:	8993      	ldrh	r3, [r2, #12]
 800733e:	0598      	lsls	r0, r3, #22
 8007340:	d402      	bmi.n	8007348 <_fputwc_r+0x1a>
 8007342:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8007344:	f7fe fec0 	bl	80060c8 <__retarget_lock_acquire_recursive>
 8007348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800734c:	0499      	lsls	r1, r3, #18
 800734e:	d406      	bmi.n	800735e <_fputwc_r+0x30>
 8007350:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007354:	81a3      	strh	r3, [r4, #12]
 8007356:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007358:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800735c:	6663      	str	r3, [r4, #100]	; 0x64
 800735e:	4622      	mov	r2, r4
 8007360:	4628      	mov	r0, r5
 8007362:	4631      	mov	r1, r6
 8007364:	f7ff ffa2 	bl	80072ac <__fputwc>
 8007368:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800736a:	07da      	lsls	r2, r3, #31
 800736c:	4605      	mov	r5, r0
 800736e:	d405      	bmi.n	800737c <_fputwc_r+0x4e>
 8007370:	89a3      	ldrh	r3, [r4, #12]
 8007372:	059b      	lsls	r3, r3, #22
 8007374:	d402      	bmi.n	800737c <_fputwc_r+0x4e>
 8007376:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007378:	f7fe fea7 	bl	80060ca <__retarget_lock_release_recursive>
 800737c:	4628      	mov	r0, r5
 800737e:	bd70      	pop	{r4, r5, r6, pc}

08007380 <_fstat_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4c07      	ldr	r4, [pc, #28]	; (80073a0 <_fstat_r+0x20>)
 8007384:	2300      	movs	r3, #0
 8007386:	4605      	mov	r5, r0
 8007388:	4608      	mov	r0, r1
 800738a:	4611      	mov	r1, r2
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	f7fb ff77 	bl	8003280 <_fstat>
 8007392:	1c43      	adds	r3, r0, #1
 8007394:	d102      	bne.n	800739c <_fstat_r+0x1c>
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	b103      	cbz	r3, 800739c <_fstat_r+0x1c>
 800739a:	602b      	str	r3, [r5, #0]
 800739c:	bd38      	pop	{r3, r4, r5, pc}
 800739e:	bf00      	nop
 80073a0:	20000c38 	.word	0x20000c38

080073a4 <_isatty_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	4c06      	ldr	r4, [pc, #24]	; (80073c0 <_isatty_r+0x1c>)
 80073a8:	2300      	movs	r3, #0
 80073aa:	4605      	mov	r5, r0
 80073ac:	4608      	mov	r0, r1
 80073ae:	6023      	str	r3, [r4, #0]
 80073b0:	f7fb ff78 	bl	80032a4 <_isatty>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d102      	bne.n	80073be <_isatty_r+0x1a>
 80073b8:	6823      	ldr	r3, [r4, #0]
 80073ba:	b103      	cbz	r3, 80073be <_isatty_r+0x1a>
 80073bc:	602b      	str	r3, [r5, #0]
 80073be:	bd38      	pop	{r3, r4, r5, pc}
 80073c0:	20000c38 	.word	0x20000c38

080073c4 <__locale_mb_cur_max>:
 80073c4:	4b04      	ldr	r3, [pc, #16]	; (80073d8 <__locale_mb_cur_max+0x14>)
 80073c6:	4a05      	ldr	r2, [pc, #20]	; (80073dc <__locale_mb_cur_max+0x18>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	bf08      	it	eq
 80073d0:	4613      	moveq	r3, r2
 80073d2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80073d6:	4770      	bx	lr
 80073d8:	20000128 	.word	0x20000128
 80073dc:	2000062c 	.word	0x2000062c

080073e0 <_lseek_r>:
 80073e0:	b538      	push	{r3, r4, r5, lr}
 80073e2:	4c07      	ldr	r4, [pc, #28]	; (8007400 <_lseek_r+0x20>)
 80073e4:	4605      	mov	r5, r0
 80073e6:	4608      	mov	r0, r1
 80073e8:	4611      	mov	r1, r2
 80073ea:	2200      	movs	r2, #0
 80073ec:	6022      	str	r2, [r4, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	f7fb ff68 	bl	80032c4 <_lseek>
 80073f4:	1c43      	adds	r3, r0, #1
 80073f6:	d102      	bne.n	80073fe <_lseek_r+0x1e>
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	b103      	cbz	r3, 80073fe <_lseek_r+0x1e>
 80073fc:	602b      	str	r3, [r5, #0]
 80073fe:	bd38      	pop	{r3, r4, r5, pc}
 8007400:	20000c38 	.word	0x20000c38

08007404 <__ascii_mbtowc>:
 8007404:	b082      	sub	sp, #8
 8007406:	b901      	cbnz	r1, 800740a <__ascii_mbtowc+0x6>
 8007408:	a901      	add	r1, sp, #4
 800740a:	b142      	cbz	r2, 800741e <__ascii_mbtowc+0x1a>
 800740c:	b14b      	cbz	r3, 8007422 <__ascii_mbtowc+0x1e>
 800740e:	7813      	ldrb	r3, [r2, #0]
 8007410:	600b      	str	r3, [r1, #0]
 8007412:	7812      	ldrb	r2, [r2, #0]
 8007414:	1c10      	adds	r0, r2, #0
 8007416:	bf18      	it	ne
 8007418:	2001      	movne	r0, #1
 800741a:	b002      	add	sp, #8
 800741c:	4770      	bx	lr
 800741e:	4610      	mov	r0, r2
 8007420:	e7fb      	b.n	800741a <__ascii_mbtowc+0x16>
 8007422:	f06f 0001 	mvn.w	r0, #1
 8007426:	e7f8      	b.n	800741a <__ascii_mbtowc+0x16>

08007428 <_read_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	4c07      	ldr	r4, [pc, #28]	; (8007448 <_read_r+0x20>)
 800742c:	4605      	mov	r5, r0
 800742e:	4608      	mov	r0, r1
 8007430:	4611      	mov	r1, r2
 8007432:	2200      	movs	r2, #0
 8007434:	6022      	str	r2, [r4, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	f7fb feda 	bl	80031f0 <_read>
 800743c:	1c43      	adds	r3, r0, #1
 800743e:	d102      	bne.n	8007446 <_read_r+0x1e>
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	b103      	cbz	r3, 8007446 <_read_r+0x1e>
 8007444:	602b      	str	r3, [r5, #0]
 8007446:	bd38      	pop	{r3, r4, r5, pc}
 8007448:	20000c38 	.word	0x20000c38

0800744c <_wcrtomb_r>:
 800744c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800744e:	4605      	mov	r5, r0
 8007450:	b085      	sub	sp, #20
 8007452:	461e      	mov	r6, r3
 8007454:	460f      	mov	r7, r1
 8007456:	4c0f      	ldr	r4, [pc, #60]	; (8007494 <_wcrtomb_r+0x48>)
 8007458:	b991      	cbnz	r1, 8007480 <_wcrtomb_r+0x34>
 800745a:	6822      	ldr	r2, [r4, #0]
 800745c:	490e      	ldr	r1, [pc, #56]	; (8007498 <_wcrtomb_r+0x4c>)
 800745e:	6a12      	ldr	r2, [r2, #32]
 8007460:	2a00      	cmp	r2, #0
 8007462:	bf08      	it	eq
 8007464:	460a      	moveq	r2, r1
 8007466:	a901      	add	r1, sp, #4
 8007468:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 800746c:	463a      	mov	r2, r7
 800746e:	47a0      	blx	r4
 8007470:	1c43      	adds	r3, r0, #1
 8007472:	bf01      	itttt	eq
 8007474:	2300      	moveq	r3, #0
 8007476:	6033      	streq	r3, [r6, #0]
 8007478:	238a      	moveq	r3, #138	; 0x8a
 800747a:	602b      	streq	r3, [r5, #0]
 800747c:	b005      	add	sp, #20
 800747e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007480:	6824      	ldr	r4, [r4, #0]
 8007482:	4f05      	ldr	r7, [pc, #20]	; (8007498 <_wcrtomb_r+0x4c>)
 8007484:	6a24      	ldr	r4, [r4, #32]
 8007486:	2c00      	cmp	r4, #0
 8007488:	bf08      	it	eq
 800748a:	463c      	moveq	r4, r7
 800748c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8007490:	e7ed      	b.n	800746e <_wcrtomb_r+0x22>
 8007492:	bf00      	nop
 8007494:	20000128 	.word	0x20000128
 8007498:	2000062c 	.word	0x2000062c

0800749c <__ascii_wctomb>:
 800749c:	b149      	cbz	r1, 80074b2 <__ascii_wctomb+0x16>
 800749e:	2aff      	cmp	r2, #255	; 0xff
 80074a0:	bf85      	ittet	hi
 80074a2:	238a      	movhi	r3, #138	; 0x8a
 80074a4:	6003      	strhi	r3, [r0, #0]
 80074a6:	700a      	strbls	r2, [r1, #0]
 80074a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80074ac:	bf98      	it	ls
 80074ae:	2001      	movls	r0, #1
 80074b0:	4770      	bx	lr
 80074b2:	4608      	mov	r0, r1
 80074b4:	4770      	bx	lr
	...

080074b8 <cos>:
 80074b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074ba:	ec51 0b10 	vmov	r0, r1, d0
 80074be:	4a1e      	ldr	r2, [pc, #120]	; (8007538 <cos+0x80>)
 80074c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80074c4:	4293      	cmp	r3, r2
 80074c6:	dc06      	bgt.n	80074d6 <cos+0x1e>
 80074c8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8007530 <cos+0x78>
 80074cc:	f000 fa74 	bl	80079b8 <__kernel_cos>
 80074d0:	ec51 0b10 	vmov	r0, r1, d0
 80074d4:	e007      	b.n	80074e6 <cos+0x2e>
 80074d6:	4a19      	ldr	r2, [pc, #100]	; (800753c <cos+0x84>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	dd09      	ble.n	80074f0 <cos+0x38>
 80074dc:	ee10 2a10 	vmov	r2, s0
 80074e0:	460b      	mov	r3, r1
 80074e2:	f7f8 fed9 	bl	8000298 <__aeabi_dsub>
 80074e6:	ec41 0b10 	vmov	d0, r0, r1
 80074ea:	b005      	add	sp, #20
 80074ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80074f0:	4668      	mov	r0, sp
 80074f2:	f000 f86d 	bl	80075d0 <__ieee754_rem_pio2>
 80074f6:	f000 0003 	and.w	r0, r0, #3
 80074fa:	2801      	cmp	r0, #1
 80074fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007500:	ed9d 0b00 	vldr	d0, [sp]
 8007504:	d007      	beq.n	8007516 <cos+0x5e>
 8007506:	2802      	cmp	r0, #2
 8007508:	d00e      	beq.n	8007528 <cos+0x70>
 800750a:	2800      	cmp	r0, #0
 800750c:	d0de      	beq.n	80074cc <cos+0x14>
 800750e:	2001      	movs	r0, #1
 8007510:	f000 fe8a 	bl	8008228 <__kernel_sin>
 8007514:	e7dc      	b.n	80074d0 <cos+0x18>
 8007516:	f000 fe87 	bl	8008228 <__kernel_sin>
 800751a:	ec53 2b10 	vmov	r2, r3, d0
 800751e:	ee10 0a10 	vmov	r0, s0
 8007522:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007526:	e7de      	b.n	80074e6 <cos+0x2e>
 8007528:	f000 fa46 	bl	80079b8 <__kernel_cos>
 800752c:	e7f5      	b.n	800751a <cos+0x62>
 800752e:	bf00      	nop
	...
 8007538:	3fe921fb 	.word	0x3fe921fb
 800753c:	7fefffff 	.word	0x7fefffff

08007540 <sin>:
 8007540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007542:	ec51 0b10 	vmov	r0, r1, d0
 8007546:	4a20      	ldr	r2, [pc, #128]	; (80075c8 <sin+0x88>)
 8007548:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800754c:	4293      	cmp	r3, r2
 800754e:	dc07      	bgt.n	8007560 <sin+0x20>
 8007550:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80075c0 <sin+0x80>
 8007554:	2000      	movs	r0, #0
 8007556:	f000 fe67 	bl	8008228 <__kernel_sin>
 800755a:	ec51 0b10 	vmov	r0, r1, d0
 800755e:	e007      	b.n	8007570 <sin+0x30>
 8007560:	4a1a      	ldr	r2, [pc, #104]	; (80075cc <sin+0x8c>)
 8007562:	4293      	cmp	r3, r2
 8007564:	dd09      	ble.n	800757a <sin+0x3a>
 8007566:	ee10 2a10 	vmov	r2, s0
 800756a:	460b      	mov	r3, r1
 800756c:	f7f8 fe94 	bl	8000298 <__aeabi_dsub>
 8007570:	ec41 0b10 	vmov	d0, r0, r1
 8007574:	b005      	add	sp, #20
 8007576:	f85d fb04 	ldr.w	pc, [sp], #4
 800757a:	4668      	mov	r0, sp
 800757c:	f000 f828 	bl	80075d0 <__ieee754_rem_pio2>
 8007580:	f000 0003 	and.w	r0, r0, #3
 8007584:	2801      	cmp	r0, #1
 8007586:	ed9d 1b02 	vldr	d1, [sp, #8]
 800758a:	ed9d 0b00 	vldr	d0, [sp]
 800758e:	d004      	beq.n	800759a <sin+0x5a>
 8007590:	2802      	cmp	r0, #2
 8007592:	d005      	beq.n	80075a0 <sin+0x60>
 8007594:	b970      	cbnz	r0, 80075b4 <sin+0x74>
 8007596:	2001      	movs	r0, #1
 8007598:	e7dd      	b.n	8007556 <sin+0x16>
 800759a:	f000 fa0d 	bl	80079b8 <__kernel_cos>
 800759e:	e7dc      	b.n	800755a <sin+0x1a>
 80075a0:	2001      	movs	r0, #1
 80075a2:	f000 fe41 	bl	8008228 <__kernel_sin>
 80075a6:	ec53 2b10 	vmov	r2, r3, d0
 80075aa:	ee10 0a10 	vmov	r0, s0
 80075ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80075b2:	e7dd      	b.n	8007570 <sin+0x30>
 80075b4:	f000 fa00 	bl	80079b8 <__kernel_cos>
 80075b8:	e7f5      	b.n	80075a6 <sin+0x66>
 80075ba:	bf00      	nop
 80075bc:	f3af 8000 	nop.w
	...
 80075c8:	3fe921fb 	.word	0x3fe921fb
 80075cc:	7fefffff 	.word	0x7fefffff

080075d0 <__ieee754_rem_pio2>:
 80075d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d4:	ec57 6b10 	vmov	r6, r7, d0
 80075d8:	4bc3      	ldr	r3, [pc, #780]	; (80078e8 <__ieee754_rem_pio2+0x318>)
 80075da:	b08d      	sub	sp, #52	; 0x34
 80075dc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80075e0:	4598      	cmp	r8, r3
 80075e2:	4604      	mov	r4, r0
 80075e4:	9704      	str	r7, [sp, #16]
 80075e6:	dc07      	bgt.n	80075f8 <__ieee754_rem_pio2+0x28>
 80075e8:	2200      	movs	r2, #0
 80075ea:	2300      	movs	r3, #0
 80075ec:	ed84 0b00 	vstr	d0, [r4]
 80075f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80075f4:	2500      	movs	r5, #0
 80075f6:	e027      	b.n	8007648 <__ieee754_rem_pio2+0x78>
 80075f8:	4bbc      	ldr	r3, [pc, #752]	; (80078ec <__ieee754_rem_pio2+0x31c>)
 80075fa:	4598      	cmp	r8, r3
 80075fc:	dc75      	bgt.n	80076ea <__ieee754_rem_pio2+0x11a>
 80075fe:	9b04      	ldr	r3, [sp, #16]
 8007600:	4dbb      	ldr	r5, [pc, #748]	; (80078f0 <__ieee754_rem_pio2+0x320>)
 8007602:	2b00      	cmp	r3, #0
 8007604:	ee10 0a10 	vmov	r0, s0
 8007608:	a3a9      	add	r3, pc, #676	; (adr r3, 80078b0 <__ieee754_rem_pio2+0x2e0>)
 800760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760e:	4639      	mov	r1, r7
 8007610:	dd36      	ble.n	8007680 <__ieee754_rem_pio2+0xb0>
 8007612:	f7f8 fe41 	bl	8000298 <__aeabi_dsub>
 8007616:	45a8      	cmp	r8, r5
 8007618:	4606      	mov	r6, r0
 800761a:	460f      	mov	r7, r1
 800761c:	d018      	beq.n	8007650 <__ieee754_rem_pio2+0x80>
 800761e:	a3a6      	add	r3, pc, #664	; (adr r3, 80078b8 <__ieee754_rem_pio2+0x2e8>)
 8007620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007624:	f7f8 fe38 	bl	8000298 <__aeabi_dsub>
 8007628:	4602      	mov	r2, r0
 800762a:	460b      	mov	r3, r1
 800762c:	e9c4 2300 	strd	r2, r3, [r4]
 8007630:	4630      	mov	r0, r6
 8007632:	4639      	mov	r1, r7
 8007634:	f7f8 fe30 	bl	8000298 <__aeabi_dsub>
 8007638:	a39f      	add	r3, pc, #636	; (adr r3, 80078b8 <__ieee754_rem_pio2+0x2e8>)
 800763a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763e:	f7f8 fe2b 	bl	8000298 <__aeabi_dsub>
 8007642:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007646:	2501      	movs	r5, #1
 8007648:	4628      	mov	r0, r5
 800764a:	b00d      	add	sp, #52	; 0x34
 800764c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007650:	a39b      	add	r3, pc, #620	; (adr r3, 80078c0 <__ieee754_rem_pio2+0x2f0>)
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	f7f8 fe1f 	bl	8000298 <__aeabi_dsub>
 800765a:	a39b      	add	r3, pc, #620	; (adr r3, 80078c8 <__ieee754_rem_pio2+0x2f8>)
 800765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007660:	4606      	mov	r6, r0
 8007662:	460f      	mov	r7, r1
 8007664:	f7f8 fe18 	bl	8000298 <__aeabi_dsub>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	e9c4 2300 	strd	r2, r3, [r4]
 8007670:	4630      	mov	r0, r6
 8007672:	4639      	mov	r1, r7
 8007674:	f7f8 fe10 	bl	8000298 <__aeabi_dsub>
 8007678:	a393      	add	r3, pc, #588	; (adr r3, 80078c8 <__ieee754_rem_pio2+0x2f8>)
 800767a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767e:	e7de      	b.n	800763e <__ieee754_rem_pio2+0x6e>
 8007680:	f7f8 fe0c 	bl	800029c <__adddf3>
 8007684:	45a8      	cmp	r8, r5
 8007686:	4606      	mov	r6, r0
 8007688:	460f      	mov	r7, r1
 800768a:	d016      	beq.n	80076ba <__ieee754_rem_pio2+0xea>
 800768c:	a38a      	add	r3, pc, #552	; (adr r3, 80078b8 <__ieee754_rem_pio2+0x2e8>)
 800768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007692:	f7f8 fe03 	bl	800029c <__adddf3>
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	e9c4 2300 	strd	r2, r3, [r4]
 800769e:	4630      	mov	r0, r6
 80076a0:	4639      	mov	r1, r7
 80076a2:	f7f8 fdf9 	bl	8000298 <__aeabi_dsub>
 80076a6:	a384      	add	r3, pc, #528	; (adr r3, 80078b8 <__ieee754_rem_pio2+0x2e8>)
 80076a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ac:	f7f8 fdf6 	bl	800029c <__adddf3>
 80076b0:	f04f 35ff 	mov.w	r5, #4294967295
 80076b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80076b8:	e7c6      	b.n	8007648 <__ieee754_rem_pio2+0x78>
 80076ba:	a381      	add	r3, pc, #516	; (adr r3, 80078c0 <__ieee754_rem_pio2+0x2f0>)
 80076bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c0:	f7f8 fdec 	bl	800029c <__adddf3>
 80076c4:	a380      	add	r3, pc, #512	; (adr r3, 80078c8 <__ieee754_rem_pio2+0x2f8>)
 80076c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ca:	4606      	mov	r6, r0
 80076cc:	460f      	mov	r7, r1
 80076ce:	f7f8 fde5 	bl	800029c <__adddf3>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	e9c4 2300 	strd	r2, r3, [r4]
 80076da:	4630      	mov	r0, r6
 80076dc:	4639      	mov	r1, r7
 80076de:	f7f8 fddb 	bl	8000298 <__aeabi_dsub>
 80076e2:	a379      	add	r3, pc, #484	; (adr r3, 80078c8 <__ieee754_rem_pio2+0x2f8>)
 80076e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e8:	e7e0      	b.n	80076ac <__ieee754_rem_pio2+0xdc>
 80076ea:	4b82      	ldr	r3, [pc, #520]	; (80078f4 <__ieee754_rem_pio2+0x324>)
 80076ec:	4598      	cmp	r8, r3
 80076ee:	f300 80d0 	bgt.w	8007892 <__ieee754_rem_pio2+0x2c2>
 80076f2:	f000 fe53 	bl	800839c <fabs>
 80076f6:	ec57 6b10 	vmov	r6, r7, d0
 80076fa:	ee10 0a10 	vmov	r0, s0
 80076fe:	a374      	add	r3, pc, #464	; (adr r3, 80078d0 <__ieee754_rem_pio2+0x300>)
 8007700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007704:	4639      	mov	r1, r7
 8007706:	f7f8 ff7b 	bl	8000600 <__aeabi_dmul>
 800770a:	2200      	movs	r2, #0
 800770c:	4b7a      	ldr	r3, [pc, #488]	; (80078f8 <__ieee754_rem_pio2+0x328>)
 800770e:	f7f8 fdc5 	bl	800029c <__adddf3>
 8007712:	f7f9 fa25 	bl	8000b60 <__aeabi_d2iz>
 8007716:	4605      	mov	r5, r0
 8007718:	f7f8 ff0c 	bl	8000534 <__aeabi_i2d>
 800771c:	a364      	add	r3, pc, #400	; (adr r3, 80078b0 <__ieee754_rem_pio2+0x2e0>)
 800771e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007722:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007726:	f7f8 ff6b 	bl	8000600 <__aeabi_dmul>
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	4630      	mov	r0, r6
 8007730:	4639      	mov	r1, r7
 8007732:	f7f8 fdb1 	bl	8000298 <__aeabi_dsub>
 8007736:	a360      	add	r3, pc, #384	; (adr r3, 80078b8 <__ieee754_rem_pio2+0x2e8>)
 8007738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773c:	4682      	mov	sl, r0
 800773e:	468b      	mov	fp, r1
 8007740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007744:	f7f8 ff5c 	bl	8000600 <__aeabi_dmul>
 8007748:	2d1f      	cmp	r5, #31
 800774a:	4606      	mov	r6, r0
 800774c:	460f      	mov	r7, r1
 800774e:	dc2a      	bgt.n	80077a6 <__ieee754_rem_pio2+0x1d6>
 8007750:	1e6a      	subs	r2, r5, #1
 8007752:	4b6a      	ldr	r3, [pc, #424]	; (80078fc <__ieee754_rem_pio2+0x32c>)
 8007754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007758:	4598      	cmp	r8, r3
 800775a:	d024      	beq.n	80077a6 <__ieee754_rem_pio2+0x1d6>
 800775c:	4632      	mov	r2, r6
 800775e:	463b      	mov	r3, r7
 8007760:	4650      	mov	r0, sl
 8007762:	4659      	mov	r1, fp
 8007764:	f7f8 fd98 	bl	8000298 <__aeabi_dsub>
 8007768:	e9c4 0100 	strd	r0, r1, [r4]
 800776c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007770:	4650      	mov	r0, sl
 8007772:	4642      	mov	r2, r8
 8007774:	464b      	mov	r3, r9
 8007776:	4659      	mov	r1, fp
 8007778:	f7f8 fd8e 	bl	8000298 <__aeabi_dsub>
 800777c:	463b      	mov	r3, r7
 800777e:	4632      	mov	r2, r6
 8007780:	f7f8 fd8a 	bl	8000298 <__aeabi_dsub>
 8007784:	9b04      	ldr	r3, [sp, #16]
 8007786:	2b00      	cmp	r3, #0
 8007788:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800778c:	f6bf af5c 	bge.w	8007648 <__ieee754_rem_pio2+0x78>
 8007790:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007794:	6063      	str	r3, [r4, #4]
 8007796:	f8c4 8000 	str.w	r8, [r4]
 800779a:	60a0      	str	r0, [r4, #8]
 800779c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077a0:	60e3      	str	r3, [r4, #12]
 80077a2:	426d      	negs	r5, r5
 80077a4:	e750      	b.n	8007648 <__ieee754_rem_pio2+0x78>
 80077a6:	4632      	mov	r2, r6
 80077a8:	463b      	mov	r3, r7
 80077aa:	4650      	mov	r0, sl
 80077ac:	4659      	mov	r1, fp
 80077ae:	f7f8 fd73 	bl	8000298 <__aeabi_dsub>
 80077b2:	ea4f 5228 	mov.w	r2, r8, asr #20
 80077b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	2b10      	cmp	r3, #16
 80077be:	e9c4 0100 	strd	r0, r1, [r4]
 80077c2:	9205      	str	r2, [sp, #20]
 80077c4:	ddd2      	ble.n	800776c <__ieee754_rem_pio2+0x19c>
 80077c6:	a33e      	add	r3, pc, #248	; (adr r3, 80078c0 <__ieee754_rem_pio2+0x2f0>)
 80077c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077d0:	f7f8 ff16 	bl	8000600 <__aeabi_dmul>
 80077d4:	4606      	mov	r6, r0
 80077d6:	460f      	mov	r7, r1
 80077d8:	4602      	mov	r2, r0
 80077da:	460b      	mov	r3, r1
 80077dc:	4650      	mov	r0, sl
 80077de:	4659      	mov	r1, fp
 80077e0:	f7f8 fd5a 	bl	8000298 <__aeabi_dsub>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	4680      	mov	r8, r0
 80077ea:	4689      	mov	r9, r1
 80077ec:	4650      	mov	r0, sl
 80077ee:	4659      	mov	r1, fp
 80077f0:	f7f8 fd52 	bl	8000298 <__aeabi_dsub>
 80077f4:	4632      	mov	r2, r6
 80077f6:	463b      	mov	r3, r7
 80077f8:	f7f8 fd4e 	bl	8000298 <__aeabi_dsub>
 80077fc:	a332      	add	r3, pc, #200	; (adr r3, 80078c8 <__ieee754_rem_pio2+0x2f8>)
 80077fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007802:	4606      	mov	r6, r0
 8007804:	460f      	mov	r7, r1
 8007806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800780a:	f7f8 fef9 	bl	8000600 <__aeabi_dmul>
 800780e:	4632      	mov	r2, r6
 8007810:	463b      	mov	r3, r7
 8007812:	f7f8 fd41 	bl	8000298 <__aeabi_dsub>
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	4606      	mov	r6, r0
 800781c:	460f      	mov	r7, r1
 800781e:	4640      	mov	r0, r8
 8007820:	4649      	mov	r1, r9
 8007822:	f7f8 fd39 	bl	8000298 <__aeabi_dsub>
 8007826:	9a05      	ldr	r2, [sp, #20]
 8007828:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	2b31      	cmp	r3, #49	; 0x31
 8007830:	e9c4 0100 	strd	r0, r1, [r4]
 8007834:	dd2a      	ble.n	800788c <__ieee754_rem_pio2+0x2bc>
 8007836:	a328      	add	r3, pc, #160	; (adr r3, 80078d8 <__ieee754_rem_pio2+0x308>)
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007840:	f7f8 fede 	bl	8000600 <__aeabi_dmul>
 8007844:	4606      	mov	r6, r0
 8007846:	460f      	mov	r7, r1
 8007848:	4602      	mov	r2, r0
 800784a:	460b      	mov	r3, r1
 800784c:	4640      	mov	r0, r8
 800784e:	4649      	mov	r1, r9
 8007850:	f7f8 fd22 	bl	8000298 <__aeabi_dsub>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	4682      	mov	sl, r0
 800785a:	468b      	mov	fp, r1
 800785c:	4640      	mov	r0, r8
 800785e:	4649      	mov	r1, r9
 8007860:	f7f8 fd1a 	bl	8000298 <__aeabi_dsub>
 8007864:	4632      	mov	r2, r6
 8007866:	463b      	mov	r3, r7
 8007868:	f7f8 fd16 	bl	8000298 <__aeabi_dsub>
 800786c:	a31c      	add	r3, pc, #112	; (adr r3, 80078e0 <__ieee754_rem_pio2+0x310>)
 800786e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007872:	4606      	mov	r6, r0
 8007874:	460f      	mov	r7, r1
 8007876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800787a:	f7f8 fec1 	bl	8000600 <__aeabi_dmul>
 800787e:	4632      	mov	r2, r6
 8007880:	463b      	mov	r3, r7
 8007882:	f7f8 fd09 	bl	8000298 <__aeabi_dsub>
 8007886:	4606      	mov	r6, r0
 8007888:	460f      	mov	r7, r1
 800788a:	e767      	b.n	800775c <__ieee754_rem_pio2+0x18c>
 800788c:	46c2      	mov	sl, r8
 800788e:	46cb      	mov	fp, r9
 8007890:	e76c      	b.n	800776c <__ieee754_rem_pio2+0x19c>
 8007892:	4b1b      	ldr	r3, [pc, #108]	; (8007900 <__ieee754_rem_pio2+0x330>)
 8007894:	4598      	cmp	r8, r3
 8007896:	dd35      	ble.n	8007904 <__ieee754_rem_pio2+0x334>
 8007898:	ee10 2a10 	vmov	r2, s0
 800789c:	463b      	mov	r3, r7
 800789e:	4630      	mov	r0, r6
 80078a0:	4639      	mov	r1, r7
 80078a2:	f7f8 fcf9 	bl	8000298 <__aeabi_dsub>
 80078a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80078aa:	e9c4 0100 	strd	r0, r1, [r4]
 80078ae:	e6a1      	b.n	80075f4 <__ieee754_rem_pio2+0x24>
 80078b0:	54400000 	.word	0x54400000
 80078b4:	3ff921fb 	.word	0x3ff921fb
 80078b8:	1a626331 	.word	0x1a626331
 80078bc:	3dd0b461 	.word	0x3dd0b461
 80078c0:	1a600000 	.word	0x1a600000
 80078c4:	3dd0b461 	.word	0x3dd0b461
 80078c8:	2e037073 	.word	0x2e037073
 80078cc:	3ba3198a 	.word	0x3ba3198a
 80078d0:	6dc9c883 	.word	0x6dc9c883
 80078d4:	3fe45f30 	.word	0x3fe45f30
 80078d8:	2e000000 	.word	0x2e000000
 80078dc:	3ba3198a 	.word	0x3ba3198a
 80078e0:	252049c1 	.word	0x252049c1
 80078e4:	397b839a 	.word	0x397b839a
 80078e8:	3fe921fb 	.word	0x3fe921fb
 80078ec:	4002d97b 	.word	0x4002d97b
 80078f0:	3ff921fb 	.word	0x3ff921fb
 80078f4:	413921fb 	.word	0x413921fb
 80078f8:	3fe00000 	.word	0x3fe00000
 80078fc:	080094d0 	.word	0x080094d0
 8007900:	7fefffff 	.word	0x7fefffff
 8007904:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007908:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800790c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007910:	4630      	mov	r0, r6
 8007912:	460f      	mov	r7, r1
 8007914:	f7f9 f924 	bl	8000b60 <__aeabi_d2iz>
 8007918:	f7f8 fe0c 	bl	8000534 <__aeabi_i2d>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4630      	mov	r0, r6
 8007922:	4639      	mov	r1, r7
 8007924:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007928:	f7f8 fcb6 	bl	8000298 <__aeabi_dsub>
 800792c:	2200      	movs	r2, #0
 800792e:	4b1f      	ldr	r3, [pc, #124]	; (80079ac <__ieee754_rem_pio2+0x3dc>)
 8007930:	f7f8 fe66 	bl	8000600 <__aeabi_dmul>
 8007934:	460f      	mov	r7, r1
 8007936:	4606      	mov	r6, r0
 8007938:	f7f9 f912 	bl	8000b60 <__aeabi_d2iz>
 800793c:	f7f8 fdfa 	bl	8000534 <__aeabi_i2d>
 8007940:	4602      	mov	r2, r0
 8007942:	460b      	mov	r3, r1
 8007944:	4630      	mov	r0, r6
 8007946:	4639      	mov	r1, r7
 8007948:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800794c:	f7f8 fca4 	bl	8000298 <__aeabi_dsub>
 8007950:	2200      	movs	r2, #0
 8007952:	4b16      	ldr	r3, [pc, #88]	; (80079ac <__ieee754_rem_pio2+0x3dc>)
 8007954:	f7f8 fe54 	bl	8000600 <__aeabi_dmul>
 8007958:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800795c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8007960:	f04f 0803 	mov.w	r8, #3
 8007964:	2600      	movs	r6, #0
 8007966:	2700      	movs	r7, #0
 8007968:	4632      	mov	r2, r6
 800796a:	463b      	mov	r3, r7
 800796c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007970:	f108 3aff 	add.w	sl, r8, #4294967295
 8007974:	f7f9 f8ac 	bl	8000ad0 <__aeabi_dcmpeq>
 8007978:	b9b0      	cbnz	r0, 80079a8 <__ieee754_rem_pio2+0x3d8>
 800797a:	4b0d      	ldr	r3, [pc, #52]	; (80079b0 <__ieee754_rem_pio2+0x3e0>)
 800797c:	9301      	str	r3, [sp, #4]
 800797e:	2302      	movs	r3, #2
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	462a      	mov	r2, r5
 8007984:	4643      	mov	r3, r8
 8007986:	4621      	mov	r1, r4
 8007988:	a806      	add	r0, sp, #24
 800798a:	f000 f8fd 	bl	8007b88 <__kernel_rem_pio2>
 800798e:	9b04      	ldr	r3, [sp, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	4605      	mov	r5, r0
 8007994:	f6bf ae58 	bge.w	8007648 <__ieee754_rem_pio2+0x78>
 8007998:	6863      	ldr	r3, [r4, #4]
 800799a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800799e:	6063      	str	r3, [r4, #4]
 80079a0:	68e3      	ldr	r3, [r4, #12]
 80079a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80079a6:	e6fb      	b.n	80077a0 <__ieee754_rem_pio2+0x1d0>
 80079a8:	46d0      	mov	r8, sl
 80079aa:	e7dd      	b.n	8007968 <__ieee754_rem_pio2+0x398>
 80079ac:	41700000 	.word	0x41700000
 80079b0:	08009550 	.word	0x08009550
 80079b4:	00000000 	.word	0x00000000

080079b8 <__kernel_cos>:
 80079b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079bc:	ec59 8b10 	vmov	r8, r9, d0
 80079c0:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 80079c4:	b085      	sub	sp, #20
 80079c6:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80079ca:	ed8d 1b00 	vstr	d1, [sp]
 80079ce:	da07      	bge.n	80079e0 <__kernel_cos+0x28>
 80079d0:	ee10 0a10 	vmov	r0, s0
 80079d4:	4649      	mov	r1, r9
 80079d6:	f7f9 f8c3 	bl	8000b60 <__aeabi_d2iz>
 80079da:	2800      	cmp	r0, #0
 80079dc:	f000 80aa 	beq.w	8007b34 <__kernel_cos+0x17c>
 80079e0:	4642      	mov	r2, r8
 80079e2:	464b      	mov	r3, r9
 80079e4:	4640      	mov	r0, r8
 80079e6:	4649      	mov	r1, r9
 80079e8:	f7f8 fe0a 	bl	8000600 <__aeabi_dmul>
 80079ec:	a359      	add	r3, pc, #356	; (adr r3, 8007b54 <__kernel_cos+0x19c>)
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	4604      	mov	r4, r0
 80079f4:	460d      	mov	r5, r1
 80079f6:	f7f8 fe03 	bl	8000600 <__aeabi_dmul>
 80079fa:	a358      	add	r3, pc, #352	; (adr r3, 8007b5c <__kernel_cos+0x1a4>)
 80079fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a00:	f7f8 fc4c 	bl	800029c <__adddf3>
 8007a04:	4622      	mov	r2, r4
 8007a06:	462b      	mov	r3, r5
 8007a08:	f7f8 fdfa 	bl	8000600 <__aeabi_dmul>
 8007a0c:	a355      	add	r3, pc, #340	; (adr r3, 8007b64 <__kernel_cos+0x1ac>)
 8007a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a12:	f7f8 fc41 	bl	8000298 <__aeabi_dsub>
 8007a16:	4622      	mov	r2, r4
 8007a18:	462b      	mov	r3, r5
 8007a1a:	f7f8 fdf1 	bl	8000600 <__aeabi_dmul>
 8007a1e:	a353      	add	r3, pc, #332	; (adr r3, 8007b6c <__kernel_cos+0x1b4>)
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	f7f8 fc3a 	bl	800029c <__adddf3>
 8007a28:	4622      	mov	r2, r4
 8007a2a:	462b      	mov	r3, r5
 8007a2c:	f7f8 fde8 	bl	8000600 <__aeabi_dmul>
 8007a30:	a350      	add	r3, pc, #320	; (adr r3, 8007b74 <__kernel_cos+0x1bc>)
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	f7f8 fc2f 	bl	8000298 <__aeabi_dsub>
 8007a3a:	4622      	mov	r2, r4
 8007a3c:	462b      	mov	r3, r5
 8007a3e:	f7f8 fddf 	bl	8000600 <__aeabi_dmul>
 8007a42:	a34e      	add	r3, pc, #312	; (adr r3, 8007b7c <__kernel_cos+0x1c4>)
 8007a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a48:	f7f8 fc28 	bl	800029c <__adddf3>
 8007a4c:	462b      	mov	r3, r5
 8007a4e:	4622      	mov	r2, r4
 8007a50:	f7f8 fdd6 	bl	8000600 <__aeabi_dmul>
 8007a54:	4b3a      	ldr	r3, [pc, #232]	; (8007b40 <__kernel_cos+0x188>)
 8007a56:	429f      	cmp	r7, r3
 8007a58:	4682      	mov	sl, r0
 8007a5a:	468b      	mov	fp, r1
 8007a5c:	dc2c      	bgt.n	8007ab8 <__kernel_cos+0x100>
 8007a5e:	2200      	movs	r2, #0
 8007a60:	4b38      	ldr	r3, [pc, #224]	; (8007b44 <__kernel_cos+0x18c>)
 8007a62:	4620      	mov	r0, r4
 8007a64:	4629      	mov	r1, r5
 8007a66:	f7f8 fdcb 	bl	8000600 <__aeabi_dmul>
 8007a6a:	4652      	mov	r2, sl
 8007a6c:	4606      	mov	r6, r0
 8007a6e:	460f      	mov	r7, r1
 8007a70:	465b      	mov	r3, fp
 8007a72:	4620      	mov	r0, r4
 8007a74:	4629      	mov	r1, r5
 8007a76:	f7f8 fdc3 	bl	8000600 <__aeabi_dmul>
 8007a7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a7e:	4604      	mov	r4, r0
 8007a80:	460d      	mov	r5, r1
 8007a82:	4640      	mov	r0, r8
 8007a84:	4649      	mov	r1, r9
 8007a86:	f7f8 fdbb 	bl	8000600 <__aeabi_dmul>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	4620      	mov	r0, r4
 8007a90:	4629      	mov	r1, r5
 8007a92:	f7f8 fc01 	bl	8000298 <__aeabi_dsub>
 8007a96:	4602      	mov	r2, r0
 8007a98:	460b      	mov	r3, r1
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	4639      	mov	r1, r7
 8007a9e:	f7f8 fbfb 	bl	8000298 <__aeabi_dsub>
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4928      	ldr	r1, [pc, #160]	; (8007b48 <__kernel_cos+0x190>)
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	f7f8 fbf5 	bl	8000298 <__aeabi_dsub>
 8007aae:	ec41 0b10 	vmov	d0, r0, r1
 8007ab2:	b005      	add	sp, #20
 8007ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab8:	4b24      	ldr	r3, [pc, #144]	; (8007b4c <__kernel_cos+0x194>)
 8007aba:	4923      	ldr	r1, [pc, #140]	; (8007b48 <__kernel_cos+0x190>)
 8007abc:	429f      	cmp	r7, r3
 8007abe:	bfd7      	itett	le
 8007ac0:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8007ac4:	4f22      	ldrgt	r7, [pc, #136]	; (8007b50 <__kernel_cos+0x198>)
 8007ac6:	2200      	movle	r2, #0
 8007ac8:	4616      	movle	r6, r2
 8007aca:	bfd4      	ite	le
 8007acc:	461f      	movle	r7, r3
 8007ace:	2600      	movgt	r6, #0
 8007ad0:	4632      	mov	r2, r6
 8007ad2:	463b      	mov	r3, r7
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	f7f8 fbdf 	bl	8000298 <__aeabi_dsub>
 8007ada:	2200      	movs	r2, #0
 8007adc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ae0:	4b18      	ldr	r3, [pc, #96]	; (8007b44 <__kernel_cos+0x18c>)
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	f7f8 fd8b 	bl	8000600 <__aeabi_dmul>
 8007aea:	4632      	mov	r2, r6
 8007aec:	463b      	mov	r3, r7
 8007aee:	f7f8 fbd3 	bl	8000298 <__aeabi_dsub>
 8007af2:	4652      	mov	r2, sl
 8007af4:	4606      	mov	r6, r0
 8007af6:	460f      	mov	r7, r1
 8007af8:	465b      	mov	r3, fp
 8007afa:	4620      	mov	r0, r4
 8007afc:	4629      	mov	r1, r5
 8007afe:	f7f8 fd7f 	bl	8000600 <__aeabi_dmul>
 8007b02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b06:	4604      	mov	r4, r0
 8007b08:	460d      	mov	r5, r1
 8007b0a:	4640      	mov	r0, r8
 8007b0c:	4649      	mov	r1, r9
 8007b0e:	f7f8 fd77 	bl	8000600 <__aeabi_dmul>
 8007b12:	4602      	mov	r2, r0
 8007b14:	460b      	mov	r3, r1
 8007b16:	4620      	mov	r0, r4
 8007b18:	4629      	mov	r1, r5
 8007b1a:	f7f8 fbbd 	bl	8000298 <__aeabi_dsub>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	4630      	mov	r0, r6
 8007b24:	4639      	mov	r1, r7
 8007b26:	f7f8 fbb7 	bl	8000298 <__aeabi_dsub>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b32:	e7ba      	b.n	8007aaa <__kernel_cos+0xf2>
 8007b34:	2000      	movs	r0, #0
 8007b36:	4904      	ldr	r1, [pc, #16]	; (8007b48 <__kernel_cos+0x190>)
 8007b38:	e7b9      	b.n	8007aae <__kernel_cos+0xf6>
 8007b3a:	bf00      	nop
 8007b3c:	f3af 8000 	nop.w
 8007b40:	3fd33332 	.word	0x3fd33332
 8007b44:	3fe00000 	.word	0x3fe00000
 8007b48:	3ff00000 	.word	0x3ff00000
 8007b4c:	3fe90000 	.word	0x3fe90000
 8007b50:	3fd20000 	.word	0x3fd20000
 8007b54:	be8838d4 	.word	0xbe8838d4
 8007b58:	bda8fae9 	.word	0xbda8fae9
 8007b5c:	bdb4b1c4 	.word	0xbdb4b1c4
 8007b60:	3e21ee9e 	.word	0x3e21ee9e
 8007b64:	809c52ad 	.word	0x809c52ad
 8007b68:	3e927e4f 	.word	0x3e927e4f
 8007b6c:	19cb1590 	.word	0x19cb1590
 8007b70:	3efa01a0 	.word	0x3efa01a0
 8007b74:	16c15177 	.word	0x16c15177
 8007b78:	3f56c16c 	.word	0x3f56c16c
 8007b7c:	5555554c 	.word	0x5555554c
 8007b80:	3fa55555 	.word	0x3fa55555
 8007b84:	00000000 	.word	0x00000000

08007b88 <__kernel_rem_pio2>:
 8007b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8c:	ed2d 8b02 	vpush	{d8}
 8007b90:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007b94:	1ed4      	subs	r4, r2, #3
 8007b96:	9306      	str	r3, [sp, #24]
 8007b98:	9102      	str	r1, [sp, #8]
 8007b9a:	4bc3      	ldr	r3, [pc, #780]	; (8007ea8 <__kernel_rem_pio2+0x320>)
 8007b9c:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007b9e:	9009      	str	r0, [sp, #36]	; 0x24
 8007ba0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	9b06      	ldr	r3, [sp, #24]
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	9304      	str	r3, [sp, #16]
 8007bac:	2318      	movs	r3, #24
 8007bae:	fb94 f4f3 	sdiv	r4, r4, r3
 8007bb2:	f06f 0317 	mvn.w	r3, #23
 8007bb6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8007bba:	fb04 3303 	mla	r3, r4, r3, r3
 8007bbe:	eb03 0a02 	add.w	sl, r3, r2
 8007bc2:	9b00      	ldr	r3, [sp, #0]
 8007bc4:	9a04      	ldr	r2, [sp, #16]
 8007bc6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8007e98 <__kernel_rem_pio2+0x310>
 8007bca:	eb03 0802 	add.w	r8, r3, r2
 8007bce:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007bd0:	1aa7      	subs	r7, r4, r2
 8007bd2:	ae20      	add	r6, sp, #128	; 0x80
 8007bd4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007bd8:	2500      	movs	r5, #0
 8007bda:	4545      	cmp	r5, r8
 8007bdc:	dd13      	ble.n	8007c06 <__kernel_rem_pio2+0x7e>
 8007bde:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8007e98 <__kernel_rem_pio2+0x310>
 8007be2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007be6:	2600      	movs	r6, #0
 8007be8:	9b00      	ldr	r3, [sp, #0]
 8007bea:	429e      	cmp	r6, r3
 8007bec:	dc32      	bgt.n	8007c54 <__kernel_rem_pio2+0xcc>
 8007bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf0:	9303      	str	r3, [sp, #12]
 8007bf2:	9b06      	ldr	r3, [sp, #24]
 8007bf4:	199d      	adds	r5, r3, r6
 8007bf6:	ab20      	add	r3, sp, #128	; 0x80
 8007bf8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007bfc:	9308      	str	r3, [sp, #32]
 8007bfe:	ec59 8b18 	vmov	r8, r9, d8
 8007c02:	2700      	movs	r7, #0
 8007c04:	e01f      	b.n	8007c46 <__kernel_rem_pio2+0xbe>
 8007c06:	42ef      	cmn	r7, r5
 8007c08:	d407      	bmi.n	8007c1a <__kernel_rem_pio2+0x92>
 8007c0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007c0e:	f7f8 fc91 	bl	8000534 <__aeabi_i2d>
 8007c12:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007c16:	3501      	adds	r5, #1
 8007c18:	e7df      	b.n	8007bda <__kernel_rem_pio2+0x52>
 8007c1a:	ec51 0b18 	vmov	r0, r1, d8
 8007c1e:	e7f8      	b.n	8007c12 <__kernel_rem_pio2+0x8a>
 8007c20:	9908      	ldr	r1, [sp, #32]
 8007c22:	9d03      	ldr	r5, [sp, #12]
 8007c24:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8007c28:	9108      	str	r1, [sp, #32]
 8007c2a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8007c2e:	9503      	str	r5, [sp, #12]
 8007c30:	f7f8 fce6 	bl	8000600 <__aeabi_dmul>
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	4640      	mov	r0, r8
 8007c3a:	4649      	mov	r1, r9
 8007c3c:	f7f8 fb2e 	bl	800029c <__adddf3>
 8007c40:	3701      	adds	r7, #1
 8007c42:	4680      	mov	r8, r0
 8007c44:	4689      	mov	r9, r1
 8007c46:	9b04      	ldr	r3, [sp, #16]
 8007c48:	429f      	cmp	r7, r3
 8007c4a:	dde9      	ble.n	8007c20 <__kernel_rem_pio2+0x98>
 8007c4c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8007c50:	3601      	adds	r6, #1
 8007c52:	e7c9      	b.n	8007be8 <__kernel_rem_pio2+0x60>
 8007c54:	9b00      	ldr	r3, [sp, #0]
 8007c56:	9f00      	ldr	r7, [sp, #0]
 8007c58:	aa0c      	add	r2, sp, #48	; 0x30
 8007c5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007c5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c60:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007c62:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007c66:	930a      	str	r3, [sp, #40]	; 0x28
 8007c68:	ab98      	add	r3, sp, #608	; 0x260
 8007c6a:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8007c6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c76:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8007c7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c7e:	9308      	str	r3, [sp, #32]
 8007c80:	9a08      	ldr	r2, [sp, #32]
 8007c82:	ab98      	add	r3, sp, #608	; 0x260
 8007c84:	4413      	add	r3, r2
 8007c86:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 8007c8a:	2600      	movs	r6, #0
 8007c8c:	1bbb      	subs	r3, r7, r6
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	dc77      	bgt.n	8007d82 <__kernel_rem_pio2+0x1fa>
 8007c92:	ec49 8b10 	vmov	d0, r8, r9
 8007c96:	4650      	mov	r0, sl
 8007c98:	f000 fc0e 	bl	80084b8 <scalbn>
 8007c9c:	ec55 4b10 	vmov	r4, r5, d0
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007ca6:	ee10 0a10 	vmov	r0, s0
 8007caa:	4629      	mov	r1, r5
 8007cac:	f7f8 fca8 	bl	8000600 <__aeabi_dmul>
 8007cb0:	ec41 0b10 	vmov	d0, r0, r1
 8007cb4:	f000 fb7c 	bl	80083b0 <floor>
 8007cb8:	2200      	movs	r2, #0
 8007cba:	ec51 0b10 	vmov	r0, r1, d0
 8007cbe:	4b7b      	ldr	r3, [pc, #492]	; (8007eac <__kernel_rem_pio2+0x324>)
 8007cc0:	f7f8 fc9e 	bl	8000600 <__aeabi_dmul>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4620      	mov	r0, r4
 8007cca:	4629      	mov	r1, r5
 8007ccc:	f7f8 fae4 	bl	8000298 <__aeabi_dsub>
 8007cd0:	460d      	mov	r5, r1
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	f7f8 ff44 	bl	8000b60 <__aeabi_d2iz>
 8007cd8:	9003      	str	r0, [sp, #12]
 8007cda:	f7f8 fc2b 	bl	8000534 <__aeabi_i2d>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	4629      	mov	r1, r5
 8007ce6:	f7f8 fad7 	bl	8000298 <__aeabi_dsub>
 8007cea:	f1ba 0f00 	cmp.w	sl, #0
 8007cee:	4680      	mov	r8, r0
 8007cf0:	4689      	mov	r9, r1
 8007cf2:	dd6b      	ble.n	8007dcc <__kernel_rem_pio2+0x244>
 8007cf4:	1e7a      	subs	r2, r7, #1
 8007cf6:	ab0c      	add	r3, sp, #48	; 0x30
 8007cf8:	f1ca 0118 	rsb	r1, sl, #24
 8007cfc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007d00:	9c03      	ldr	r4, [sp, #12]
 8007d02:	fa40 f301 	asr.w	r3, r0, r1
 8007d06:	441c      	add	r4, r3
 8007d08:	408b      	lsls	r3, r1
 8007d0a:	1ac0      	subs	r0, r0, r3
 8007d0c:	ab0c      	add	r3, sp, #48	; 0x30
 8007d0e:	9403      	str	r4, [sp, #12]
 8007d10:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007d14:	f1ca 0317 	rsb	r3, sl, #23
 8007d18:	fa40 fb03 	asr.w	fp, r0, r3
 8007d1c:	f1bb 0f00 	cmp.w	fp, #0
 8007d20:	dd62      	ble.n	8007de8 <__kernel_rem_pio2+0x260>
 8007d22:	9b03      	ldr	r3, [sp, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	3301      	adds	r3, #1
 8007d28:	9303      	str	r3, [sp, #12]
 8007d2a:	4614      	mov	r4, r2
 8007d2c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007d30:	4297      	cmp	r7, r2
 8007d32:	f300 8089 	bgt.w	8007e48 <__kernel_rem_pio2+0x2c0>
 8007d36:	f1ba 0f00 	cmp.w	sl, #0
 8007d3a:	dd07      	ble.n	8007d4c <__kernel_rem_pio2+0x1c4>
 8007d3c:	f1ba 0f01 	cmp.w	sl, #1
 8007d40:	f000 8096 	beq.w	8007e70 <__kernel_rem_pio2+0x2e8>
 8007d44:	f1ba 0f02 	cmp.w	sl, #2
 8007d48:	f000 809c 	beq.w	8007e84 <__kernel_rem_pio2+0x2fc>
 8007d4c:	f1bb 0f02 	cmp.w	fp, #2
 8007d50:	d14a      	bne.n	8007de8 <__kernel_rem_pio2+0x260>
 8007d52:	4642      	mov	r2, r8
 8007d54:	464b      	mov	r3, r9
 8007d56:	2000      	movs	r0, #0
 8007d58:	4955      	ldr	r1, [pc, #340]	; (8007eb0 <__kernel_rem_pio2+0x328>)
 8007d5a:	f7f8 fa9d 	bl	8000298 <__aeabi_dsub>
 8007d5e:	4680      	mov	r8, r0
 8007d60:	4689      	mov	r9, r1
 8007d62:	2c00      	cmp	r4, #0
 8007d64:	d040      	beq.n	8007de8 <__kernel_rem_pio2+0x260>
 8007d66:	4650      	mov	r0, sl
 8007d68:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8007ea0 <__kernel_rem_pio2+0x318>
 8007d6c:	f000 fba4 	bl	80084b8 <scalbn>
 8007d70:	4640      	mov	r0, r8
 8007d72:	4649      	mov	r1, r9
 8007d74:	ec53 2b10 	vmov	r2, r3, d0
 8007d78:	f7f8 fa8e 	bl	8000298 <__aeabi_dsub>
 8007d7c:	4680      	mov	r8, r0
 8007d7e:	4689      	mov	r9, r1
 8007d80:	e032      	b.n	8007de8 <__kernel_rem_pio2+0x260>
 8007d82:	2200      	movs	r2, #0
 8007d84:	4b4b      	ldr	r3, [pc, #300]	; (8007eb4 <__kernel_rem_pio2+0x32c>)
 8007d86:	4640      	mov	r0, r8
 8007d88:	4649      	mov	r1, r9
 8007d8a:	f7f8 fc39 	bl	8000600 <__aeabi_dmul>
 8007d8e:	f7f8 fee7 	bl	8000b60 <__aeabi_d2iz>
 8007d92:	f7f8 fbcf 	bl	8000534 <__aeabi_i2d>
 8007d96:	2200      	movs	r2, #0
 8007d98:	4b47      	ldr	r3, [pc, #284]	; (8007eb8 <__kernel_rem_pio2+0x330>)
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	460d      	mov	r5, r1
 8007d9e:	f7f8 fc2f 	bl	8000600 <__aeabi_dmul>
 8007da2:	4602      	mov	r2, r0
 8007da4:	460b      	mov	r3, r1
 8007da6:	4640      	mov	r0, r8
 8007da8:	4649      	mov	r1, r9
 8007daa:	f7f8 fa75 	bl	8000298 <__aeabi_dsub>
 8007dae:	f7f8 fed7 	bl	8000b60 <__aeabi_d2iz>
 8007db2:	ab0c      	add	r3, sp, #48	; 0x30
 8007db4:	4629      	mov	r1, r5
 8007db6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8007dba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f7f8 fa6c 	bl	800029c <__adddf3>
 8007dc4:	3601      	adds	r6, #1
 8007dc6:	4680      	mov	r8, r0
 8007dc8:	4689      	mov	r9, r1
 8007dca:	e75f      	b.n	8007c8c <__kernel_rem_pio2+0x104>
 8007dcc:	d106      	bne.n	8007ddc <__kernel_rem_pio2+0x254>
 8007dce:	1e7b      	subs	r3, r7, #1
 8007dd0:	aa0c      	add	r2, sp, #48	; 0x30
 8007dd2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007dd6:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8007dda:	e79f      	b.n	8007d1c <__kernel_rem_pio2+0x194>
 8007ddc:	2200      	movs	r2, #0
 8007dde:	4b37      	ldr	r3, [pc, #220]	; (8007ebc <__kernel_rem_pio2+0x334>)
 8007de0:	f7f8 fe94 	bl	8000b0c <__aeabi_dcmpge>
 8007de4:	bb68      	cbnz	r0, 8007e42 <__kernel_rem_pio2+0x2ba>
 8007de6:	4683      	mov	fp, r0
 8007de8:	2200      	movs	r2, #0
 8007dea:	2300      	movs	r3, #0
 8007dec:	4640      	mov	r0, r8
 8007dee:	4649      	mov	r1, r9
 8007df0:	f7f8 fe6e 	bl	8000ad0 <__aeabi_dcmpeq>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	f000 80c1 	beq.w	8007f7c <__kernel_rem_pio2+0x3f4>
 8007dfa:	1e7c      	subs	r4, r7, #1
 8007dfc:	4623      	mov	r3, r4
 8007dfe:	2200      	movs	r2, #0
 8007e00:	9900      	ldr	r1, [sp, #0]
 8007e02:	428b      	cmp	r3, r1
 8007e04:	da5c      	bge.n	8007ec0 <__kernel_rem_pio2+0x338>
 8007e06:	2a00      	cmp	r2, #0
 8007e08:	f040 808b 	bne.w	8007f22 <__kernel_rem_pio2+0x39a>
 8007e0c:	2401      	movs	r4, #1
 8007e0e:	f06f 0203 	mvn.w	r2, #3
 8007e12:	fb02 f304 	mul.w	r3, r2, r4
 8007e16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e18:	58cb      	ldr	r3, [r1, r3]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d056      	beq.n	8007ecc <__kernel_rem_pio2+0x344>
 8007e1e:	9b08      	ldr	r3, [sp, #32]
 8007e20:	aa98      	add	r2, sp, #608	; 0x260
 8007e22:	4413      	add	r3, r2
 8007e24:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 8007e28:	9b06      	ldr	r3, [sp, #24]
 8007e2a:	19dd      	adds	r5, r3, r7
 8007e2c:	ab20      	add	r3, sp, #128	; 0x80
 8007e2e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007e32:	19e3      	adds	r3, r4, r7
 8007e34:	1c7e      	adds	r6, r7, #1
 8007e36:	9303      	str	r3, [sp, #12]
 8007e38:	9b03      	ldr	r3, [sp, #12]
 8007e3a:	429e      	cmp	r6, r3
 8007e3c:	dd48      	ble.n	8007ed0 <__kernel_rem_pio2+0x348>
 8007e3e:	461f      	mov	r7, r3
 8007e40:	e712      	b.n	8007c68 <__kernel_rem_pio2+0xe0>
 8007e42:	f04f 0b02 	mov.w	fp, #2
 8007e46:	e76c      	b.n	8007d22 <__kernel_rem_pio2+0x19a>
 8007e48:	ab0c      	add	r3, sp, #48	; 0x30
 8007e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e4e:	b94c      	cbnz	r4, 8007e64 <__kernel_rem_pio2+0x2dc>
 8007e50:	b12b      	cbz	r3, 8007e5e <__kernel_rem_pio2+0x2d6>
 8007e52:	a80c      	add	r0, sp, #48	; 0x30
 8007e54:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007e58:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	3201      	adds	r2, #1
 8007e60:	461c      	mov	r4, r3
 8007e62:	e765      	b.n	8007d30 <__kernel_rem_pio2+0x1a8>
 8007e64:	a80c      	add	r0, sp, #48	; 0x30
 8007e66:	1acb      	subs	r3, r1, r3
 8007e68:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007e6c:	4623      	mov	r3, r4
 8007e6e:	e7f6      	b.n	8007e5e <__kernel_rem_pio2+0x2d6>
 8007e70:	1e7a      	subs	r2, r7, #1
 8007e72:	ab0c      	add	r3, sp, #48	; 0x30
 8007e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e78:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007e7c:	a90c      	add	r1, sp, #48	; 0x30
 8007e7e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007e82:	e763      	b.n	8007d4c <__kernel_rem_pio2+0x1c4>
 8007e84:	1e7a      	subs	r2, r7, #1
 8007e86:	ab0c      	add	r3, sp, #48	; 0x30
 8007e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e8c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007e90:	e7f4      	b.n	8007e7c <__kernel_rem_pio2+0x2f4>
 8007e92:	bf00      	nop
 8007e94:	f3af 8000 	nop.w
	...
 8007ea4:	3ff00000 	.word	0x3ff00000
 8007ea8:	08009698 	.word	0x08009698
 8007eac:	40200000 	.word	0x40200000
 8007eb0:	3ff00000 	.word	0x3ff00000
 8007eb4:	3e700000 	.word	0x3e700000
 8007eb8:	41700000 	.word	0x41700000
 8007ebc:	3fe00000 	.word	0x3fe00000
 8007ec0:	a90c      	add	r1, sp, #48	; 0x30
 8007ec2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	e799      	b.n	8007e00 <__kernel_rem_pio2+0x278>
 8007ecc:	3401      	adds	r4, #1
 8007ece:	e7a0      	b.n	8007e12 <__kernel_rem_pio2+0x28a>
 8007ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ed2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007ed6:	f7f8 fb2d 	bl	8000534 <__aeabi_i2d>
 8007eda:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee0:	9508      	str	r5, [sp, #32]
 8007ee2:	461c      	mov	r4, r3
 8007ee4:	2700      	movs	r7, #0
 8007ee6:	f04f 0800 	mov.w	r8, #0
 8007eea:	f04f 0900 	mov.w	r9, #0
 8007eee:	9b04      	ldr	r3, [sp, #16]
 8007ef0:	429f      	cmp	r7, r3
 8007ef2:	dd03      	ble.n	8007efc <__kernel_rem_pio2+0x374>
 8007ef4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8007ef8:	3601      	adds	r6, #1
 8007efa:	e79d      	b.n	8007e38 <__kernel_rem_pio2+0x2b0>
 8007efc:	9908      	ldr	r1, [sp, #32]
 8007efe:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8007f02:	9108      	str	r1, [sp, #32]
 8007f04:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007f08:	f7f8 fb7a 	bl	8000600 <__aeabi_dmul>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4640      	mov	r0, r8
 8007f12:	4649      	mov	r1, r9
 8007f14:	f7f8 f9c2 	bl	800029c <__adddf3>
 8007f18:	3701      	adds	r7, #1
 8007f1a:	4680      	mov	r8, r0
 8007f1c:	4689      	mov	r9, r1
 8007f1e:	e7e6      	b.n	8007eee <__kernel_rem_pio2+0x366>
 8007f20:	3c01      	subs	r4, #1
 8007f22:	ab0c      	add	r3, sp, #48	; 0x30
 8007f24:	f1aa 0a18 	sub.w	sl, sl, #24
 8007f28:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d0f7      	beq.n	8007f20 <__kernel_rem_pio2+0x398>
 8007f30:	4650      	mov	r0, sl
 8007f32:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8008208 <__kernel_rem_pio2+0x680>
 8007f36:	f000 fabf 	bl	80084b8 <scalbn>
 8007f3a:	00e5      	lsls	r5, r4, #3
 8007f3c:	ab98      	add	r3, sp, #608	; 0x260
 8007f3e:	eb03 0905 	add.w	r9, r3, r5
 8007f42:	ec57 6b10 	vmov	r6, r7, d0
 8007f46:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8007f4a:	46a0      	mov	r8, r4
 8007f4c:	f1b8 0f00 	cmp.w	r8, #0
 8007f50:	da4d      	bge.n	8007fee <__kernel_rem_pio2+0x466>
 8007f52:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8008210 <__kernel_rem_pio2+0x688>
 8007f56:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	9304      	str	r3, [sp, #16]
 8007f5e:	4657      	mov	r7, sl
 8007f60:	9b04      	ldr	r3, [sp, #16]
 8007f62:	ebb4 0903 	subs.w	r9, r4, r3
 8007f66:	d476      	bmi.n	8008056 <__kernel_rem_pio2+0x4ce>
 8007f68:	4bab      	ldr	r3, [pc, #684]	; (8008218 <__kernel_rem_pio2+0x690>)
 8007f6a:	461e      	mov	r6, r3
 8007f6c:	ab70      	add	r3, sp, #448	; 0x1c0
 8007f6e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007f72:	ed8d 8b06 	vstr	d8, [sp, #24]
 8007f76:	f04f 0800 	mov.w	r8, #0
 8007f7a:	e05e      	b.n	800803a <__kernel_rem_pio2+0x4b2>
 8007f7c:	f1ca 0000 	rsb	r0, sl, #0
 8007f80:	ec49 8b10 	vmov	d0, r8, r9
 8007f84:	f000 fa98 	bl	80084b8 <scalbn>
 8007f88:	ec55 4b10 	vmov	r4, r5, d0
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	4ba3      	ldr	r3, [pc, #652]	; (800821c <__kernel_rem_pio2+0x694>)
 8007f90:	ee10 0a10 	vmov	r0, s0
 8007f94:	4629      	mov	r1, r5
 8007f96:	f7f8 fdb9 	bl	8000b0c <__aeabi_dcmpge>
 8007f9a:	b1f8      	cbz	r0, 8007fdc <__kernel_rem_pio2+0x454>
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	4ba0      	ldr	r3, [pc, #640]	; (8008220 <__kernel_rem_pio2+0x698>)
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	f7f8 fb2c 	bl	8000600 <__aeabi_dmul>
 8007fa8:	f7f8 fdda 	bl	8000b60 <__aeabi_d2iz>
 8007fac:	4606      	mov	r6, r0
 8007fae:	f7f8 fac1 	bl	8000534 <__aeabi_i2d>
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	4b99      	ldr	r3, [pc, #612]	; (800821c <__kernel_rem_pio2+0x694>)
 8007fb6:	f7f8 fb23 	bl	8000600 <__aeabi_dmul>
 8007fba:	460b      	mov	r3, r1
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f7f8 f969 	bl	8000298 <__aeabi_dsub>
 8007fc6:	f7f8 fdcb 	bl	8000b60 <__aeabi_d2iz>
 8007fca:	1c7c      	adds	r4, r7, #1
 8007fcc:	ab0c      	add	r3, sp, #48	; 0x30
 8007fce:	f10a 0a18 	add.w	sl, sl, #24
 8007fd2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8007fd6:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8007fda:	e7a9      	b.n	8007f30 <__kernel_rem_pio2+0x3a8>
 8007fdc:	4620      	mov	r0, r4
 8007fde:	4629      	mov	r1, r5
 8007fe0:	f7f8 fdbe 	bl	8000b60 <__aeabi_d2iz>
 8007fe4:	ab0c      	add	r3, sp, #48	; 0x30
 8007fe6:	463c      	mov	r4, r7
 8007fe8:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8007fec:	e7a0      	b.n	8007f30 <__kernel_rem_pio2+0x3a8>
 8007fee:	ab0c      	add	r3, sp, #48	; 0x30
 8007ff0:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007ff4:	f7f8 fa9e 	bl	8000534 <__aeabi_i2d>
 8007ff8:	4632      	mov	r2, r6
 8007ffa:	463b      	mov	r3, r7
 8007ffc:	f7f8 fb00 	bl	8000600 <__aeabi_dmul>
 8008000:	2200      	movs	r2, #0
 8008002:	e969 0102 	strd	r0, r1, [r9, #-8]!
 8008006:	4b86      	ldr	r3, [pc, #536]	; (8008220 <__kernel_rem_pio2+0x698>)
 8008008:	4630      	mov	r0, r6
 800800a:	4639      	mov	r1, r7
 800800c:	f7f8 faf8 	bl	8000600 <__aeabi_dmul>
 8008010:	f108 38ff 	add.w	r8, r8, #4294967295
 8008014:	4606      	mov	r6, r0
 8008016:	460f      	mov	r7, r1
 8008018:	e798      	b.n	8007f4c <__kernel_rem_pio2+0x3c4>
 800801a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800801e:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8008022:	f7f8 faed 	bl	8000600 <__aeabi_dmul>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800802e:	f7f8 f935 	bl	800029c <__adddf3>
 8008032:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008036:	f108 0801 	add.w	r8, r8, #1
 800803a:	9b00      	ldr	r3, [sp, #0]
 800803c:	4598      	cmp	r8, r3
 800803e:	dc02      	bgt.n	8008046 <__kernel_rem_pio2+0x4be>
 8008040:	9b04      	ldr	r3, [sp, #16]
 8008042:	4598      	cmp	r8, r3
 8008044:	dde9      	ble.n	800801a <__kernel_rem_pio2+0x492>
 8008046:	9b04      	ldr	r3, [sp, #16]
 8008048:	ed9d 7b06 	vldr	d7, [sp, #24]
 800804c:	3301      	adds	r3, #1
 800804e:	ecaa 7b02 	vstmia	sl!, {d7}
 8008052:	9304      	str	r3, [sp, #16]
 8008054:	e784      	b.n	8007f60 <__kernel_rem_pio2+0x3d8>
 8008056:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008058:	2b03      	cmp	r3, #3
 800805a:	d85d      	bhi.n	8008118 <__kernel_rem_pio2+0x590>
 800805c:	e8df f003 	tbb	[pc, r3]
 8008060:	0226264b 	.word	0x0226264b
 8008064:	ab98      	add	r3, sp, #608	; 0x260
 8008066:	441d      	add	r5, r3
 8008068:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 800806c:	462e      	mov	r6, r5
 800806e:	46a2      	mov	sl, r4
 8008070:	f1ba 0f00 	cmp.w	sl, #0
 8008074:	dc6e      	bgt.n	8008154 <__kernel_rem_pio2+0x5cc>
 8008076:	462e      	mov	r6, r5
 8008078:	46a2      	mov	sl, r4
 800807a:	f1ba 0f01 	cmp.w	sl, #1
 800807e:	f300 808a 	bgt.w	8008196 <__kernel_rem_pio2+0x60e>
 8008082:	2000      	movs	r0, #0
 8008084:	2100      	movs	r1, #0
 8008086:	2c01      	cmp	r4, #1
 8008088:	f300 80a6 	bgt.w	80081d8 <__kernel_rem_pio2+0x650>
 800808c:	f1bb 0f00 	cmp.w	fp, #0
 8008090:	f040 80a8 	bne.w	80081e4 <__kernel_rem_pio2+0x65c>
 8008094:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8008098:	9c02      	ldr	r4, [sp, #8]
 800809a:	e9c4 2300 	strd	r2, r3, [r4]
 800809e:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 80080a2:	e9c4 0104 	strd	r0, r1, [r4, #16]
 80080a6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80080aa:	e035      	b.n	8008118 <__kernel_rem_pio2+0x590>
 80080ac:	3508      	adds	r5, #8
 80080ae:	ab48      	add	r3, sp, #288	; 0x120
 80080b0:	441d      	add	r5, r3
 80080b2:	4626      	mov	r6, r4
 80080b4:	2000      	movs	r0, #0
 80080b6:	2100      	movs	r1, #0
 80080b8:	2e00      	cmp	r6, #0
 80080ba:	da3c      	bge.n	8008136 <__kernel_rem_pio2+0x5ae>
 80080bc:	f1bb 0f00 	cmp.w	fp, #0
 80080c0:	d03f      	beq.n	8008142 <__kernel_rem_pio2+0x5ba>
 80080c2:	4602      	mov	r2, r0
 80080c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080c8:	9d02      	ldr	r5, [sp, #8]
 80080ca:	e9c5 2300 	strd	r2, r3, [r5]
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80080d6:	f7f8 f8df 	bl	8000298 <__aeabi_dsub>
 80080da:	ae4a      	add	r6, sp, #296	; 0x128
 80080dc:	2501      	movs	r5, #1
 80080de:	42ac      	cmp	r4, r5
 80080e0:	da32      	bge.n	8008148 <__kernel_rem_pio2+0x5c0>
 80080e2:	f1bb 0f00 	cmp.w	fp, #0
 80080e6:	d002      	beq.n	80080ee <__kernel_rem_pio2+0x566>
 80080e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080ec:	4619      	mov	r1, r3
 80080ee:	9b02      	ldr	r3, [sp, #8]
 80080f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80080f4:	e010      	b.n	8008118 <__kernel_rem_pio2+0x590>
 80080f6:	ab98      	add	r3, sp, #608	; 0x260
 80080f8:	441d      	add	r5, r3
 80080fa:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 80080fe:	2000      	movs	r0, #0
 8008100:	2100      	movs	r1, #0
 8008102:	2c00      	cmp	r4, #0
 8008104:	da11      	bge.n	800812a <__kernel_rem_pio2+0x5a2>
 8008106:	f1bb 0f00 	cmp.w	fp, #0
 800810a:	d002      	beq.n	8008112 <__kernel_rem_pio2+0x58a>
 800810c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008110:	4619      	mov	r1, r3
 8008112:	9b02      	ldr	r3, [sp, #8]
 8008114:	e9c3 0100 	strd	r0, r1, [r3]
 8008118:	9b03      	ldr	r3, [sp, #12]
 800811a:	f003 0007 	and.w	r0, r3, #7
 800811e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008122:	ecbd 8b02 	vpop	{d8}
 8008126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800812a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800812e:	f7f8 f8b5 	bl	800029c <__adddf3>
 8008132:	3c01      	subs	r4, #1
 8008134:	e7e5      	b.n	8008102 <__kernel_rem_pio2+0x57a>
 8008136:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800813a:	f7f8 f8af 	bl	800029c <__adddf3>
 800813e:	3e01      	subs	r6, #1
 8008140:	e7ba      	b.n	80080b8 <__kernel_rem_pio2+0x530>
 8008142:	4602      	mov	r2, r0
 8008144:	460b      	mov	r3, r1
 8008146:	e7bf      	b.n	80080c8 <__kernel_rem_pio2+0x540>
 8008148:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800814c:	f7f8 f8a6 	bl	800029c <__adddf3>
 8008150:	3501      	adds	r5, #1
 8008152:	e7c4      	b.n	80080de <__kernel_rem_pio2+0x556>
 8008154:	ed16 7b02 	vldr	d7, [r6, #-8]
 8008158:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 800815c:	ec53 2b17 	vmov	r2, r3, d7
 8008160:	4640      	mov	r0, r8
 8008162:	4649      	mov	r1, r9
 8008164:	ed8d 7b00 	vstr	d7, [sp]
 8008168:	f7f8 f898 	bl	800029c <__adddf3>
 800816c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008170:	4602      	mov	r2, r0
 8008172:	460b      	mov	r3, r1
 8008174:	4640      	mov	r0, r8
 8008176:	4649      	mov	r1, r9
 8008178:	f7f8 f88e 	bl	8000298 <__aeabi_dsub>
 800817c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008180:	f7f8 f88c 	bl	800029c <__adddf3>
 8008184:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008188:	e966 0102 	strd	r0, r1, [r6, #-8]!
 800818c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008190:	ed06 7b02 	vstr	d7, [r6, #-8]
 8008194:	e76c      	b.n	8008070 <__kernel_rem_pio2+0x4e8>
 8008196:	ed16 7b02 	vldr	d7, [r6, #-8]
 800819a:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 800819e:	ec53 2b17 	vmov	r2, r3, d7
 80081a2:	4640      	mov	r0, r8
 80081a4:	4649      	mov	r1, r9
 80081a6:	ed8d 7b00 	vstr	d7, [sp]
 80081aa:	f7f8 f877 	bl	800029c <__adddf3>
 80081ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	4640      	mov	r0, r8
 80081b8:	4649      	mov	r1, r9
 80081ba:	f7f8 f86d 	bl	8000298 <__aeabi_dsub>
 80081be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081c2:	f7f8 f86b 	bl	800029c <__adddf3>
 80081c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80081ca:	e966 0102 	strd	r0, r1, [r6, #-8]!
 80081ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081d2:	ed06 7b02 	vstr	d7, [r6, #-8]
 80081d6:	e750      	b.n	800807a <__kernel_rem_pio2+0x4f2>
 80081d8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80081dc:	f7f8 f85e 	bl	800029c <__adddf3>
 80081e0:	3c01      	subs	r4, #1
 80081e2:	e750      	b.n	8008086 <__kernel_rem_pio2+0x4fe>
 80081e4:	9a02      	ldr	r2, [sp, #8]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	6013      	str	r3, [r2, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6110      	str	r0, [r2, #16]
 80081ee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80081f2:	6053      	str	r3, [r2, #4]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	6093      	str	r3, [r2, #8]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80081fe:	60d3      	str	r3, [r2, #12]
 8008200:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008204:	6153      	str	r3, [r2, #20]
 8008206:	e787      	b.n	8008118 <__kernel_rem_pio2+0x590>
 8008208:	00000000 	.word	0x00000000
 800820c:	3ff00000 	.word	0x3ff00000
	...
 8008218:	08009658 	.word	0x08009658
 800821c:	41700000 	.word	0x41700000
 8008220:	3e700000 	.word	0x3e700000
 8008224:	00000000 	.word	0x00000000

08008228 <__kernel_sin>:
 8008228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822c:	ec55 4b10 	vmov	r4, r5, d0
 8008230:	b085      	sub	sp, #20
 8008232:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008236:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800823a:	ed8d 1b00 	vstr	d1, [sp]
 800823e:	9002      	str	r0, [sp, #8]
 8008240:	da06      	bge.n	8008250 <__kernel_sin+0x28>
 8008242:	ee10 0a10 	vmov	r0, s0
 8008246:	4629      	mov	r1, r5
 8008248:	f7f8 fc8a 	bl	8000b60 <__aeabi_d2iz>
 800824c:	2800      	cmp	r0, #0
 800824e:	d051      	beq.n	80082f4 <__kernel_sin+0xcc>
 8008250:	4622      	mov	r2, r4
 8008252:	462b      	mov	r3, r5
 8008254:	4620      	mov	r0, r4
 8008256:	4629      	mov	r1, r5
 8008258:	f7f8 f9d2 	bl	8000600 <__aeabi_dmul>
 800825c:	4682      	mov	sl, r0
 800825e:	468b      	mov	fp, r1
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
 8008264:	4620      	mov	r0, r4
 8008266:	4629      	mov	r1, r5
 8008268:	f7f8 f9ca 	bl	8000600 <__aeabi_dmul>
 800826c:	a341      	add	r3, pc, #260	; (adr r3, 8008374 <__kernel_sin+0x14c>)
 800826e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008272:	4680      	mov	r8, r0
 8008274:	4689      	mov	r9, r1
 8008276:	4650      	mov	r0, sl
 8008278:	4659      	mov	r1, fp
 800827a:	f7f8 f9c1 	bl	8000600 <__aeabi_dmul>
 800827e:	a33f      	add	r3, pc, #252	; (adr r3, 800837c <__kernel_sin+0x154>)
 8008280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008284:	f7f8 f808 	bl	8000298 <__aeabi_dsub>
 8008288:	4652      	mov	r2, sl
 800828a:	465b      	mov	r3, fp
 800828c:	f7f8 f9b8 	bl	8000600 <__aeabi_dmul>
 8008290:	a33c      	add	r3, pc, #240	; (adr r3, 8008384 <__kernel_sin+0x15c>)
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	f7f8 f801 	bl	800029c <__adddf3>
 800829a:	4652      	mov	r2, sl
 800829c:	465b      	mov	r3, fp
 800829e:	f7f8 f9af 	bl	8000600 <__aeabi_dmul>
 80082a2:	a33a      	add	r3, pc, #232	; (adr r3, 800838c <__kernel_sin+0x164>)
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f7f7 fff6 	bl	8000298 <__aeabi_dsub>
 80082ac:	4652      	mov	r2, sl
 80082ae:	465b      	mov	r3, fp
 80082b0:	f7f8 f9a6 	bl	8000600 <__aeabi_dmul>
 80082b4:	a337      	add	r3, pc, #220	; (adr r3, 8008394 <__kernel_sin+0x16c>)
 80082b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ba:	f7f7 ffef 	bl	800029c <__adddf3>
 80082be:	9b02      	ldr	r3, [sp, #8]
 80082c0:	4606      	mov	r6, r0
 80082c2:	460f      	mov	r7, r1
 80082c4:	b9db      	cbnz	r3, 80082fe <__kernel_sin+0xd6>
 80082c6:	4602      	mov	r2, r0
 80082c8:	460b      	mov	r3, r1
 80082ca:	4650      	mov	r0, sl
 80082cc:	4659      	mov	r1, fp
 80082ce:	f7f8 f997 	bl	8000600 <__aeabi_dmul>
 80082d2:	a325      	add	r3, pc, #148	; (adr r3, 8008368 <__kernel_sin+0x140>)
 80082d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d8:	f7f7 ffde 	bl	8000298 <__aeabi_dsub>
 80082dc:	4642      	mov	r2, r8
 80082de:	464b      	mov	r3, r9
 80082e0:	f7f8 f98e 	bl	8000600 <__aeabi_dmul>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	4620      	mov	r0, r4
 80082ea:	4629      	mov	r1, r5
 80082ec:	f7f7 ffd6 	bl	800029c <__adddf3>
 80082f0:	4604      	mov	r4, r0
 80082f2:	460d      	mov	r5, r1
 80082f4:	ec45 4b10 	vmov	d0, r4, r5
 80082f8:	b005      	add	sp, #20
 80082fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fe:	2200      	movs	r2, #0
 8008300:	4b1b      	ldr	r3, [pc, #108]	; (8008370 <__kernel_sin+0x148>)
 8008302:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008306:	f7f8 f97b 	bl	8000600 <__aeabi_dmul>
 800830a:	4632      	mov	r2, r6
 800830c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008310:	463b      	mov	r3, r7
 8008312:	4640      	mov	r0, r8
 8008314:	4649      	mov	r1, r9
 8008316:	f7f8 f973 	bl	8000600 <__aeabi_dmul>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008322:	f7f7 ffb9 	bl	8000298 <__aeabi_dsub>
 8008326:	4652      	mov	r2, sl
 8008328:	465b      	mov	r3, fp
 800832a:	f7f8 f969 	bl	8000600 <__aeabi_dmul>
 800832e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008332:	f7f7 ffb1 	bl	8000298 <__aeabi_dsub>
 8008336:	a30c      	add	r3, pc, #48	; (adr r3, 8008368 <__kernel_sin+0x140>)
 8008338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833c:	4606      	mov	r6, r0
 800833e:	460f      	mov	r7, r1
 8008340:	4640      	mov	r0, r8
 8008342:	4649      	mov	r1, r9
 8008344:	f7f8 f95c 	bl	8000600 <__aeabi_dmul>
 8008348:	4602      	mov	r2, r0
 800834a:	460b      	mov	r3, r1
 800834c:	4630      	mov	r0, r6
 800834e:	4639      	mov	r1, r7
 8008350:	f7f7 ffa4 	bl	800029c <__adddf3>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	4620      	mov	r0, r4
 800835a:	4629      	mov	r1, r5
 800835c:	f7f7 ff9c 	bl	8000298 <__aeabi_dsub>
 8008360:	e7c6      	b.n	80082f0 <__kernel_sin+0xc8>
 8008362:	bf00      	nop
 8008364:	f3af 8000 	nop.w
 8008368:	55555549 	.word	0x55555549
 800836c:	3fc55555 	.word	0x3fc55555
 8008370:	3fe00000 	.word	0x3fe00000
 8008374:	5acfd57c 	.word	0x5acfd57c
 8008378:	3de5d93a 	.word	0x3de5d93a
 800837c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008380:	3e5ae5e6 	.word	0x3e5ae5e6
 8008384:	57b1fe7d 	.word	0x57b1fe7d
 8008388:	3ec71de3 	.word	0x3ec71de3
 800838c:	19c161d5 	.word	0x19c161d5
 8008390:	3f2a01a0 	.word	0x3f2a01a0
 8008394:	1110f8a6 	.word	0x1110f8a6
 8008398:	3f811111 	.word	0x3f811111

0800839c <fabs>:
 800839c:	ec53 2b10 	vmov	r2, r3, d0
 80083a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083a4:	ec43 2b10 	vmov	d0, r2, r3
 80083a8:	4770      	bx	lr
 80083aa:	0000      	movs	r0, r0
 80083ac:	0000      	movs	r0, r0
	...

080083b0 <floor>:
 80083b0:	ec51 0b10 	vmov	r0, r1, d0
 80083b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083b8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80083bc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80083c0:	2e13      	cmp	r6, #19
 80083c2:	ee10 8a10 	vmov	r8, s0
 80083c6:	460c      	mov	r4, r1
 80083c8:	ee10 5a10 	vmov	r5, s0
 80083cc:	dc35      	bgt.n	800843a <floor+0x8a>
 80083ce:	2e00      	cmp	r6, #0
 80083d0:	da17      	bge.n	8008402 <floor+0x52>
 80083d2:	a335      	add	r3, pc, #212	; (adr r3, 80084a8 <floor+0xf8>)
 80083d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d8:	f7f7 ff60 	bl	800029c <__adddf3>
 80083dc:	2200      	movs	r2, #0
 80083de:	2300      	movs	r3, #0
 80083e0:	f7f8 fb9e 	bl	8000b20 <__aeabi_dcmpgt>
 80083e4:	b150      	cbz	r0, 80083fc <floor+0x4c>
 80083e6:	2c00      	cmp	r4, #0
 80083e8:	da5a      	bge.n	80084a0 <floor+0xf0>
 80083ea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80083ee:	ea53 0308 	orrs.w	r3, r3, r8
 80083f2:	4b2f      	ldr	r3, [pc, #188]	; (80084b0 <floor+0x100>)
 80083f4:	f04f 0500 	mov.w	r5, #0
 80083f8:	bf18      	it	ne
 80083fa:	461c      	movne	r4, r3
 80083fc:	4621      	mov	r1, r4
 80083fe:	4628      	mov	r0, r5
 8008400:	e025      	b.n	800844e <floor+0x9e>
 8008402:	4f2c      	ldr	r7, [pc, #176]	; (80084b4 <floor+0x104>)
 8008404:	4137      	asrs	r7, r6
 8008406:	ea01 0307 	and.w	r3, r1, r7
 800840a:	4303      	orrs	r3, r0
 800840c:	d01f      	beq.n	800844e <floor+0x9e>
 800840e:	a326      	add	r3, pc, #152	; (adr r3, 80084a8 <floor+0xf8>)
 8008410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008414:	f7f7 ff42 	bl	800029c <__adddf3>
 8008418:	2200      	movs	r2, #0
 800841a:	2300      	movs	r3, #0
 800841c:	f7f8 fb80 	bl	8000b20 <__aeabi_dcmpgt>
 8008420:	2800      	cmp	r0, #0
 8008422:	d0eb      	beq.n	80083fc <floor+0x4c>
 8008424:	2c00      	cmp	r4, #0
 8008426:	bfbe      	ittt	lt
 8008428:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800842c:	fa43 f606 	asrlt.w	r6, r3, r6
 8008430:	19a4      	addlt	r4, r4, r6
 8008432:	ea24 0407 	bic.w	r4, r4, r7
 8008436:	2500      	movs	r5, #0
 8008438:	e7e0      	b.n	80083fc <floor+0x4c>
 800843a:	2e33      	cmp	r6, #51	; 0x33
 800843c:	dd0b      	ble.n	8008456 <floor+0xa6>
 800843e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008442:	d104      	bne.n	800844e <floor+0x9e>
 8008444:	ee10 2a10 	vmov	r2, s0
 8008448:	460b      	mov	r3, r1
 800844a:	f7f7 ff27 	bl	800029c <__adddf3>
 800844e:	ec41 0b10 	vmov	d0, r0, r1
 8008452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008456:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800845a:	f04f 33ff 	mov.w	r3, #4294967295
 800845e:	fa23 f707 	lsr.w	r7, r3, r7
 8008462:	4238      	tst	r0, r7
 8008464:	d0f3      	beq.n	800844e <floor+0x9e>
 8008466:	a310      	add	r3, pc, #64	; (adr r3, 80084a8 <floor+0xf8>)
 8008468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846c:	f7f7 ff16 	bl	800029c <__adddf3>
 8008470:	2200      	movs	r2, #0
 8008472:	2300      	movs	r3, #0
 8008474:	f7f8 fb54 	bl	8000b20 <__aeabi_dcmpgt>
 8008478:	2800      	cmp	r0, #0
 800847a:	d0bf      	beq.n	80083fc <floor+0x4c>
 800847c:	2c00      	cmp	r4, #0
 800847e:	da02      	bge.n	8008486 <floor+0xd6>
 8008480:	2e14      	cmp	r6, #20
 8008482:	d103      	bne.n	800848c <floor+0xdc>
 8008484:	3401      	adds	r4, #1
 8008486:	ea25 0507 	bic.w	r5, r5, r7
 800848a:	e7b7      	b.n	80083fc <floor+0x4c>
 800848c:	2301      	movs	r3, #1
 800848e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008492:	fa03 f606 	lsl.w	r6, r3, r6
 8008496:	4435      	add	r5, r6
 8008498:	45a8      	cmp	r8, r5
 800849a:	bf88      	it	hi
 800849c:	18e4      	addhi	r4, r4, r3
 800849e:	e7f2      	b.n	8008486 <floor+0xd6>
 80084a0:	2500      	movs	r5, #0
 80084a2:	462c      	mov	r4, r5
 80084a4:	e7aa      	b.n	80083fc <floor+0x4c>
 80084a6:	bf00      	nop
 80084a8:	8800759c 	.word	0x8800759c
 80084ac:	7e37e43c 	.word	0x7e37e43c
 80084b0:	bff00000 	.word	0xbff00000
 80084b4:	000fffff 	.word	0x000fffff

080084b8 <scalbn>:
 80084b8:	b570      	push	{r4, r5, r6, lr}
 80084ba:	ec55 4b10 	vmov	r4, r5, d0
 80084be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80084c2:	4606      	mov	r6, r0
 80084c4:	462b      	mov	r3, r5
 80084c6:	b9b2      	cbnz	r2, 80084f6 <scalbn+0x3e>
 80084c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80084cc:	4323      	orrs	r3, r4
 80084ce:	d03c      	beq.n	800854a <scalbn+0x92>
 80084d0:	2200      	movs	r2, #0
 80084d2:	4b33      	ldr	r3, [pc, #204]	; (80085a0 <scalbn+0xe8>)
 80084d4:	4629      	mov	r1, r5
 80084d6:	ee10 0a10 	vmov	r0, s0
 80084da:	f7f8 f891 	bl	8000600 <__aeabi_dmul>
 80084de:	4a31      	ldr	r2, [pc, #196]	; (80085a4 <scalbn+0xec>)
 80084e0:	4296      	cmp	r6, r2
 80084e2:	4604      	mov	r4, r0
 80084e4:	460d      	mov	r5, r1
 80084e6:	460b      	mov	r3, r1
 80084e8:	da13      	bge.n	8008512 <scalbn+0x5a>
 80084ea:	a329      	add	r3, pc, #164	; (adr r3, 8008590 <scalbn+0xd8>)
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	f7f8 f886 	bl	8000600 <__aeabi_dmul>
 80084f4:	e00a      	b.n	800850c <scalbn+0x54>
 80084f6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80084fa:	428a      	cmp	r2, r1
 80084fc:	d10c      	bne.n	8008518 <scalbn+0x60>
 80084fe:	ee10 2a10 	vmov	r2, s0
 8008502:	462b      	mov	r3, r5
 8008504:	4620      	mov	r0, r4
 8008506:	4629      	mov	r1, r5
 8008508:	f7f7 fec8 	bl	800029c <__adddf3>
 800850c:	4604      	mov	r4, r0
 800850e:	460d      	mov	r5, r1
 8008510:	e01b      	b.n	800854a <scalbn+0x92>
 8008512:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008516:	3a36      	subs	r2, #54	; 0x36
 8008518:	4432      	add	r2, r6
 800851a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800851e:	428a      	cmp	r2, r1
 8008520:	dd0b      	ble.n	800853a <scalbn+0x82>
 8008522:	ec45 4b11 	vmov	d1, r4, r5
 8008526:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008598 <scalbn+0xe0>
 800852a:	f000 f83f 	bl	80085ac <copysign>
 800852e:	a31a      	add	r3, pc, #104	; (adr r3, 8008598 <scalbn+0xe0>)
 8008530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008534:	ec51 0b10 	vmov	r0, r1, d0
 8008538:	e7da      	b.n	80084f0 <scalbn+0x38>
 800853a:	2a00      	cmp	r2, #0
 800853c:	dd08      	ble.n	8008550 <scalbn+0x98>
 800853e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008542:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008546:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800854a:	ec45 4b10 	vmov	d0, r4, r5
 800854e:	bd70      	pop	{r4, r5, r6, pc}
 8008550:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008554:	da0d      	bge.n	8008572 <scalbn+0xba>
 8008556:	f24c 3350 	movw	r3, #50000	; 0xc350
 800855a:	429e      	cmp	r6, r3
 800855c:	ec45 4b11 	vmov	d1, r4, r5
 8008560:	dce1      	bgt.n	8008526 <scalbn+0x6e>
 8008562:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8008590 <scalbn+0xd8>
 8008566:	f000 f821 	bl	80085ac <copysign>
 800856a:	a309      	add	r3, pc, #36	; (adr r3, 8008590 <scalbn+0xd8>)
 800856c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008570:	e7e0      	b.n	8008534 <scalbn+0x7c>
 8008572:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008576:	3236      	adds	r2, #54	; 0x36
 8008578:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800857c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008580:	4620      	mov	r0, r4
 8008582:	4629      	mov	r1, r5
 8008584:	2200      	movs	r2, #0
 8008586:	4b08      	ldr	r3, [pc, #32]	; (80085a8 <scalbn+0xf0>)
 8008588:	e7b2      	b.n	80084f0 <scalbn+0x38>
 800858a:	bf00      	nop
 800858c:	f3af 8000 	nop.w
 8008590:	c2f8f359 	.word	0xc2f8f359
 8008594:	01a56e1f 	.word	0x01a56e1f
 8008598:	8800759c 	.word	0x8800759c
 800859c:	7e37e43c 	.word	0x7e37e43c
 80085a0:	43500000 	.word	0x43500000
 80085a4:	ffff3cb0 	.word	0xffff3cb0
 80085a8:	3c900000 	.word	0x3c900000

080085ac <copysign>:
 80085ac:	ec53 2b10 	vmov	r2, r3, d0
 80085b0:	ee11 0a90 	vmov	r0, s3
 80085b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80085b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80085bc:	ea41 0300 	orr.w	r3, r1, r0
 80085c0:	ec43 2b10 	vmov	d0, r2, r3
 80085c4:	4770      	bx	lr
	...

080085c8 <_init>:
 80085c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ca:	bf00      	nop
 80085cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ce:	bc08      	pop	{r3}
 80085d0:	469e      	mov	lr, r3
 80085d2:	4770      	bx	lr

080085d4 <_fini>:
 80085d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d6:	bf00      	nop
 80085d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085da:	bc08      	pop	{r3}
 80085dc:	469e      	mov	lr, r3
 80085de:	4770      	bx	lr

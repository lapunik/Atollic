
Cviceni1_UART_Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001240  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080013d8  080013d8  000113d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001480  08001480  00011480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001484  08001484  00011484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08001488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000030  20000068  080014f0  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000098  080014f0  00020098  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000426b  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000b69  00000000  00000000  00024303  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000230  00000000  00000000  00024e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  000250a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000f9d  00000000  00000000  00025268  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000107a  00000000  00000000  00026205  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002727f  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000cfc  00000000  00000000  000272fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080013c0 	.word	0x080013c0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	080013c0 	.word	0x080013c0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	da0b      	bge.n	8000214 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fc:	490d      	ldr	r1, [pc, #52]	; (8000234 <NVIC_SetPriority+0x4c>)
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	f003 030f 	and.w	r3, r3, #15
 8000204:	3b04      	subs	r3, #4
 8000206:	683a      	ldr	r2, [r7, #0]
 8000208:	b2d2      	uxtb	r2, r2
 800020a:	0112      	lsls	r2, r2, #4
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	440b      	add	r3, r1
 8000210:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000212:	e009      	b.n	8000228 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000214:	4908      	ldr	r1, [pc, #32]	; (8000238 <NVIC_SetPriority+0x50>)
 8000216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021a:	683a      	ldr	r2, [r7, #0]
 800021c:	b2d2      	uxtb	r2, r2
 800021e:	0112      	lsls	r2, r2, #4
 8000220:	b2d2      	uxtb	r2, r2
 8000222:	440b      	add	r3, r1
 8000224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	e000e100 	.word	0xe000e100

0800023c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3b01      	subs	r3, #1
 8000248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800024c:	d301      	bcc.n	8000252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800024e:	2301      	movs	r3, #1
 8000250:	e00f      	b.n	8000272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000252:	4a0a      	ldr	r2, [pc, #40]	; (800027c <SysTick_Config+0x40>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3b01      	subs	r3, #1
 8000258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800025a:	210f      	movs	r1, #15
 800025c:	f04f 30ff 	mov.w	r0, #4294967295
 8000260:	f7ff ffc2 	bl	80001e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <SysTick_Config+0x40>)
 8000266:	2200      	movs	r2, #0
 8000268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800026a:	4b04      	ldr	r3, [pc, #16]	; (800027c <SysTick_Config+0x40>)
 800026c:	2207      	movs	r2, #7
 800026e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000270:	2300      	movs	r3, #0
}
 8000272:	4618      	mov	r0, r3
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	e000e010 	.word	0xe000e010

08000280 <SysTick_Handler>:

volatile uint32_t ticks = 0; // promìná která symbolizuje dobìhnutí hodin
// "volatile" znamená že kompilátor tuto promìnou nebude optimalizovat, to je tøeba, protože by jinak mohl kompilátor dojít k chybným závìrùm o fknci nìkterých programových konstrukcí a nesprávnì program optimalizovat

void SysTick_Handler(void) // tato funkce musí mít pøesnì takovýto název, jinak se pøi pøerušení volá defalutnì nastavená
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
ticks++;
 8000284:	4b04      	ldr	r3, [pc, #16]	; (8000298 <SysTick_Handler+0x18>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	3301      	adds	r3, #1
 800028a:	4a03      	ldr	r2, [pc, #12]	; (8000298 <SysTick_Handler+0x18>)
 800028c:	6013      	str	r3, [r2, #0]
}
 800028e:	bf00      	nop
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	20000084 	.word	0x20000084

0800029c <main>:

int main(void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0


	GPIOConfigurePin(JOY_UP,ioPortInputFloat);
 80002a0:	2203      	movs	r2, #3
 80002a2:	2104      	movs	r1, #4
 80002a4:	4841      	ldr	r0, [pc, #260]	; (80003ac <main+0x110>)
 80002a6:	f000 f94b 	bl	8000540 <GPIOConfigurePin>
	GPIOConfigurePin(JOY_DOWN,ioPortInputFloat);
 80002aa:	2203      	movs	r2, #3
 80002ac:	2100      	movs	r1, #0
 80002ae:	4840      	ldr	r0, [pc, #256]	; (80003b0 <main+0x114>)
 80002b0:	f000 f946 	bl	8000540 <GPIOConfigurePin>
	GPIOConfigurePin(JOY_LEFT,ioPortInputFloat);
 80002b4:	2203      	movs	r2, #3
 80002b6:	2101      	movs	r1, #1
 80002b8:	483e      	ldr	r0, [pc, #248]	; (80003b4 <main+0x118>)
 80002ba:	f000 f941 	bl	8000540 <GPIOConfigurePin>
	GPIOConfigurePin(JOY_RIGHT,ioPortInputFloat);
 80002be:	2203      	movs	r2, #3
 80002c0:	2100      	movs	r1, #0
 80002c2:	483c      	ldr	r0, [pc, #240]	; (80003b4 <main+0x118>)
 80002c4:	f000 f93c 	bl	8000540 <GPIOConfigurePin>
	GPIOConfigurePin(JOY_CENTER,ioPortInputFloat);
 80002c8:	2203      	movs	r2, #3
 80002ca:	2105      	movs	r1, #5
 80002cc:	4838      	ldr	r0, [pc, #224]	; (80003b0 <main+0x114>)
 80002ce:	f000 f937 	bl	8000540 <GPIOConfigurePin>

	SystemCoreClockUpdate();
 80002d2:	f000 fbf3 	bl	8000abc <SystemCoreClockUpdate>

	SysTick_Config(SystemCoreClock / 1000); // nastavení èasovaèe pro pøerušení
 80002d6:	4b38      	ldr	r3, [pc, #224]	; (80003b8 <main+0x11c>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a38      	ldr	r2, [pc, #224]	; (80003bc <main+0x120>)
 80002dc:	fba2 2303 	umull	r2, r3, r2, r3
 80002e0:	099b      	lsrs	r3, r3, #6
 80002e2:	4618      	mov	r0, r3
 80002e4:	f7ff ffaa 	bl	800023c <SysTick_Config>

	Usart2Initialization(38400);
 80002e8:	f44f 4016 	mov.w	r0, #38400	; 0x9600
 80002ec:	f000 f89e 	bl	800042c <Usart2Initialization>

    puts("Joystick");
 80002f0:	4833      	ldr	r0, [pc, #204]	; (80003c0 <main+0x124>)
 80002f2:	f000 fc5d 	bl	8000bb0 <puts>

	while (1) {



				if(GPIORead(JOY_UP))
 80002f6:	2104      	movs	r1, #4
 80002f8:	482c      	ldr	r0, [pc, #176]	; (80003ac <main+0x110>)
 80002fa:	f000 fada 	bl	80008b2 <GPIORead>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d00a      	beq.n	800031a <main+0x7e>
				{

					 puts("Up");
 8000304:	482f      	ldr	r0, [pc, #188]	; (80003c4 <main+0x128>)
 8000306:	f000 fc53 	bl	8000bb0 <puts>

					while(GPIORead(JOY_UP));
 800030a:	bf00      	nop
 800030c:	2104      	movs	r1, #4
 800030e:	4827      	ldr	r0, [pc, #156]	; (80003ac <main+0x110>)
 8000310:	f000 facf 	bl	80008b2 <GPIORead>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d1f8      	bne.n	800030c <main+0x70>

				}
				if(GPIORead(JOY_DOWN))
 800031a:	2100      	movs	r1, #0
 800031c:	4824      	ldr	r0, [pc, #144]	; (80003b0 <main+0x114>)
 800031e:	f000 fac8 	bl	80008b2 <GPIORead>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d00a      	beq.n	800033e <main+0xa2>
				{

					 puts("Down");
 8000328:	4827      	ldr	r0, [pc, #156]	; (80003c8 <main+0x12c>)
 800032a:	f000 fc41 	bl	8000bb0 <puts>

					while(GPIORead(JOY_DOWN));
 800032e:	bf00      	nop
 8000330:	2100      	movs	r1, #0
 8000332:	481f      	ldr	r0, [pc, #124]	; (80003b0 <main+0x114>)
 8000334:	f000 fabd 	bl	80008b2 <GPIORead>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d1f8      	bne.n	8000330 <main+0x94>

				}
				if(GPIORead(JOY_LEFT))
 800033e:	2101      	movs	r1, #1
 8000340:	481c      	ldr	r0, [pc, #112]	; (80003b4 <main+0x118>)
 8000342:	f000 fab6 	bl	80008b2 <GPIORead>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d00a      	beq.n	8000362 <main+0xc6>
				{

					 puts("Left");
 800034c:	481f      	ldr	r0, [pc, #124]	; (80003cc <main+0x130>)
 800034e:	f000 fc2f 	bl	8000bb0 <puts>

					while(GPIORead(JOY_LEFT));
 8000352:	bf00      	nop
 8000354:	2101      	movs	r1, #1
 8000356:	4817      	ldr	r0, [pc, #92]	; (80003b4 <main+0x118>)
 8000358:	f000 faab 	bl	80008b2 <GPIORead>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d1f8      	bne.n	8000354 <main+0xb8>

				}
				if(GPIORead(JOY_RIGHT))
 8000362:	2100      	movs	r1, #0
 8000364:	4813      	ldr	r0, [pc, #76]	; (80003b4 <main+0x118>)
 8000366:	f000 faa4 	bl	80008b2 <GPIORead>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d00a      	beq.n	8000386 <main+0xea>
				{

					 puts("Right");
 8000370:	4817      	ldr	r0, [pc, #92]	; (80003d0 <main+0x134>)
 8000372:	f000 fc1d 	bl	8000bb0 <puts>

					while(GPIORead(JOY_RIGHT));
 8000376:	bf00      	nop
 8000378:	2100      	movs	r1, #0
 800037a:	480e      	ldr	r0, [pc, #56]	; (80003b4 <main+0x118>)
 800037c:	f000 fa99 	bl	80008b2 <GPIORead>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d1f8      	bne.n	8000378 <main+0xdc>

				}
				if(GPIORead(JOY_CENTER))
 8000386:	2105      	movs	r1, #5
 8000388:	4809      	ldr	r0, [pc, #36]	; (80003b0 <main+0x114>)
 800038a:	f000 fa92 	bl	80008b2 <GPIORead>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0b0      	beq.n	80002f6 <main+0x5a>
				{

					 puts("Center");
 8000394:	480f      	ldr	r0, [pc, #60]	; (80003d4 <main+0x138>)
 8000396:	f000 fc0b 	bl	8000bb0 <puts>

					while(GPIORead(JOY_CENTER));
 800039a:	bf00      	nop
 800039c:	2105      	movs	r1, #5
 800039e:	4804      	ldr	r0, [pc, #16]	; (80003b0 <main+0x114>)
 80003a0:	f000 fa87 	bl	80008b2 <GPIORead>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d1f8      	bne.n	800039c <main+0x100>
				if(GPIORead(JOY_UP))
 80003aa:	e7a4      	b.n	80002f6 <main+0x5a>
 80003ac:	40020000 	.word	0x40020000
 80003b0:	40020400 	.word	0x40020400
 80003b4:	40020800 	.word	0x40020800
 80003b8:	20000000 	.word	0x20000000
 80003bc:	10624dd3 	.word	0x10624dd3
 80003c0:	080013d8 	.word	0x080013d8
 80003c4:	080013e4 	.word	0x080013e4
 80003c8:	080013e8 	.word	0x080013e8
 80003cc:	080013f0 	.word	0x080013f0
 80003d0:	080013f8 	.word	0x080013f8
 80003d4:	08001400 	.word	0x08001400

080003d8 <Usart2Send>:
 */

#include "nucleo_usart.h"

int Usart2Send(char c) //vstup znak ktery se ma odeslat, navratova hodnota int znak ktery se odesilal
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]

	//Flag TXE je nastaven do jednicky pokud je prazdny datovy registr, tudíž mùžeme zaèíst odesílat data, flag se automaticky nuluje když se datový registr zaplní
	// vlastnì øiká èekej dokud nebude volno, chtìlo by to ochranu protože když tuhle funkci zavolám a usart bude vypnutý, nikdy tento jev nenastane a bude to vlastnì while(true)
	while (!(USART2->SR & USART_SR_TXE)) {
 80003e2:	bf00      	nop
 80003e4:	4b07      	ldr	r3, [pc, #28]	; (8000404 <Usart2Send+0x2c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d0f9      	beq.n	80003e4 <Usart2Send+0xc>
		// TXE nemusim nulovat, dela to sam ze zapisu nove data
	}
	USART2->DR = c; // do datového registru vložím znak který chci odeslat
 80003f0:	4a04      	ldr	r2, [pc, #16]	; (8000404 <Usart2Send+0x2c>)
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	6053      	str	r3, [r2, #4]
	return c;
 80003f6:	79fb      	ldrb	r3, [r7, #7]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr
 8000404:	40004400 	.word	0x40004400

08000408 <Usart2Recived>:
		Usart2Send(*txt); // na konci je ukoncovaci nula(jakože prázdný data)
		txt++;
	}
}

int Usart2Recived(void) {
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
	while (!(USART2->SR & USART_SR_RXNE)) {
 800040c:	bf00      	nop
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <Usart2Recived+0x20>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f003 0320 	and.w	r3, r3, #32
 8000416:	2b00      	cmp	r3, #0
 8000418:	d0f9      	beq.n	800040e <Usart2Recived+0x6>
		// RXNE nemusim nulovat, dela to sam když data vyètu, když je nevyètu, nulovat se nebude
	}
	return USART2->DR;
 800041a:	4b03      	ldr	r3, [pc, #12]	; (8000428 <Usart2Recived+0x20>)
 800041c:	685b      	ldr	r3, [r3, #4]
}
 800041e:	4618      	mov	r0, r3
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	40004400 	.word	0x40004400

0800042c <Usart2Initialization>:
bool IsUsart2Recived(void) {
	return (USART2->SR & USART_SR_RXNE) != 0; // testování jestli jsou nìjaká data k pøeètení
}


void Usart2Initialization(int baudSpeed){ // baud zatim nefunkcni
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]

	if (!(RCC->APB1ENR & RCC_APB1ENR_USART2EN)) // neni povolen USART2
 8000434:	4b29      	ldr	r3, [pc, #164]	; (80004dc <Usart2Initialization+0xb0>)
 8000436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800043c:	2b00      	cmp	r3, #0
 800043e:	d111      	bne.n	8000464 <Usart2Initialization+0x38>
	{
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000440:	4a26      	ldr	r2, [pc, #152]	; (80004dc <Usart2Initialization+0xb0>)
 8000442:	4b26      	ldr	r3, [pc, #152]	; (80004dc <Usart2Initialization+0xb0>)
 8000444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800044a:	6413      	str	r3, [r2, #64]	; 0x40
		RCC->APB1RSTR |= RCC_APB1RSTR_USART2RST;
 800044c:	4a23      	ldr	r2, [pc, #140]	; (80004dc <Usart2Initialization+0xb0>)
 800044e:	4b23      	ldr	r3, [pc, #140]	; (80004dc <Usart2Initialization+0xb0>)
 8000450:	6a1b      	ldr	r3, [r3, #32]
 8000452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000456:	6213      	str	r3, [r2, #32]
		RCC->APB1RSTR &= ~RCC_APB1RSTR_USART2RST;
 8000458:	4a20      	ldr	r2, [pc, #128]	; (80004dc <Usart2Initialization+0xb0>)
 800045a:	4b20      	ldr	r3, [pc, #128]	; (80004dc <Usart2Initialization+0xb0>)
 800045c:	6a1b      	ldr	r3, [r3, #32]
 800045e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000462:	6213      	str	r3, [r2, #32]
	}

	// v nucleo schematu lze najit ze USART TX a USART RX (ètení z procesoru, zápis do nìj) je na pinech PA2 a PA3
	GPIOConfigurePin(GPIOA, 2, ioPortAlternatrPushPull); // vysílání procesoru
 8000464:	2206      	movs	r2, #6
 8000466:	2102      	movs	r1, #2
 8000468:	481d      	ldr	r0, [pc, #116]	; (80004e0 <Usart2Initialization+0xb4>)
 800046a:	f000 f869 	bl	8000540 <GPIOConfigurePin>
	GPIOConfigureAlternativFunction(GPIOA, 2, 7); // z DS kap. 4 table 9 je vidìt že pro PA2 resp. 3 je USART2 nastaven na alternativní funkci 7
 800046e:	2207      	movs	r2, #7
 8000470:	2102      	movs	r1, #2
 8000472:	481b      	ldr	r0, [pc, #108]	; (80004e0 <Usart2Initialization+0xb4>)
 8000474:	f000 f9e2 	bl	800083c <GPIOConfigureAlternativFunction>
	GPIOConfigurePin(GPIOA, 3, ioPortAlternatrPushPull); // pøíjem procesoru, pro pøíjem vede cesta jinudy takže nezáleží jestli push pull nebo openDrain
 8000478:	2206      	movs	r2, #6
 800047a:	2103      	movs	r1, #3
 800047c:	4818      	ldr	r0, [pc, #96]	; (80004e0 <Usart2Initialization+0xb4>)
 800047e:	f000 f85f 	bl	8000540 <GPIOConfigurePin>
	GPIOConfigureAlternativFunction(GPIOA, 3, 7);
 8000482:	2207      	movs	r2, #7
 8000484:	2103      	movs	r1, #3
 8000486:	4816      	ldr	r0, [pc, #88]	; (80004e0 <Usart2Initialization+0xb4>)
 8000488:	f000 f9d8 	bl	800083c <GPIOConfigureAlternativFunction>
// do teï jsme nastavovali GPIO na USART, ale teï musíme nastavit samotnou periferii USART

	USART2->CR1 = USART_CR1_RE | USART_CR1_TE; // Do konfiguraèního registru jedna "zapnu" recived(pøijmání) a transmit (vysílání)
 800048c:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <Usart2Initialization+0xb8>)
 800048e:	220c      	movs	r2, #12
 8000490:	60da      	str	r2, [r3, #12]
	USART2->CR2 = 0; // nic nenastavujeme zatím
 8000492:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <Usart2Initialization+0xb8>)
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
	USART2->CR3 = 0; // nic nenastavujeme zatím
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <Usart2Initialization+0xb8>)
 800049a:	2200      	movs	r2, #0
 800049c:	615a      	str	r2, [r3, #20]

	USART2->BRR = 0x1A1; // v podstatì dìliè který nastavuje rychlost komunikace (pro komunikaèní rychlost 38400 pøi 16MHz je 0x1A1)
 800049e:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <Usart2Initialization+0xb8>)
 80004a0:	f240 12a1 	movw	r2, #417	; 0x1a1
 80004a4:	609a      	str	r2, [r3, #8]

	USART2->CR1 |= USART_CR1_UE; // nakonec povoluji usart
 80004a6:	4a0f      	ldr	r2, [pc, #60]	; (80004e4 <Usart2Initialization+0xb8>)
 80004a8:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <Usart2Initialization+0xb8>)
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004b0:	60d3      	str	r3, [r2, #12]

	setvbuf(stdout,NULL,_IONBF,0); // datový proud, nepoviný parametr, typ(nebufrovat), délka v tomto pøípadì nesmyslný argument, takže nula
 80004b2:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <Usart2Initialization+0xbc>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	6898      	ldr	r0, [r3, #8]
 80004b8:	2300      	movs	r3, #0
 80004ba:	2202      	movs	r2, #2
 80004bc:	2100      	movs	r1, #0
 80004be:	f000 fbc7 	bl	8000c50 <setvbuf>
	setvbuf(stdin,NULL,_IONBF,0); // používám pro vstupní i výstupní (printf a podobnì všechno používá stdint/stdout)
 80004c2:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <Usart2Initialization+0xbc>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	6858      	ldr	r0, [r3, #4]
 80004c8:	2300      	movs	r3, #0
 80004ca:	2202      	movs	r2, #2
 80004cc:	2100      	movs	r1, #0
 80004ce:	f000 fbbf 	bl	8000c50 <setvbuf>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40023800 	.word	0x40023800
 80004e0:	40020000 	.word	0x40020000
 80004e4:	40004400 	.word	0x40004400
 80004e8:	20000004 	.word	0x20000004

080004ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000524 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80004f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80004f2:	e003      	b.n	80004fc <LoopCopyDataInit>

080004f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80004f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80004f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80004fa:	3104      	adds	r1, #4

080004fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80004fc:	480b      	ldr	r0, [pc, #44]	; (800052c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000500:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000502:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000504:	d3f6      	bcc.n	80004f4 <CopyDataInit>
  ldr  r2, =_sbss
 8000506:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000508:	e002      	b.n	8000510 <LoopFillZerobss>

0800050a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800050a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800050c:	f842 3b04 	str.w	r3, [r2], #4

08000510 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000512:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000514:	d3f9      	bcc.n	800050a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000516:	f000 fa9b 	bl	8000a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800051a:	f000 fb75 	bl	8000c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800051e:	f7ff febd 	bl	800029c <main>
  bx  lr    
 8000522:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000524:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000528:	08001488 	.word	0x08001488
  ldr  r0, =_sdata
 800052c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000530:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8000534:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8000538:	20000098 	.word	0x20000098

0800053c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800053c:	e7fe      	b.n	800053c <ADC_IRQHandler>
	...

08000540 <GPIOConfigurePin>:
 *      Author: Lapunik
 */
#include "stm_core.h"

bool GPIOConfigurePin(GPIO_TypeDef *gpio,uint32_t bitNumber, ioPortMode mode) // konfigurace GPIO do pøedpøipravených stavù
{
 8000540:	b480      	push	{r7}
 8000542:	b087      	sub	sp, #28
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	4613      	mov	r3, r2
 800054c:	71fb      	strb	r3, [r7, #7]

	uint32_t enableMask = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
	uint32_t resetMask = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]

	switch((uint32_t)gpio) // je potøeba zapnout hodiny podle toho který gpio chceme vyuzivat => ulozime bity pro reset a pro zapnuti do masek a pote masku aplikujeme
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	4a99      	ldr	r2, [pc, #612]	; (80007c0 <GPIOConfigurePin+0x280>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d01d      	beq.n	800059a <GPIOConfigurePin+0x5a>
 800055e:	4a98      	ldr	r2, [pc, #608]	; (80007c0 <GPIOConfigurePin+0x280>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d806      	bhi.n	8000572 <GPIOConfigurePin+0x32>
 8000564:	4a97      	ldr	r2, [pc, #604]	; (80007c4 <GPIOConfigurePin+0x284>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d00d      	beq.n	8000586 <GPIOConfigurePin+0x46>
 800056a:	4a97      	ldr	r2, [pc, #604]	; (80007c8 <GPIOConfigurePin+0x288>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d00f      	beq.n	8000590 <GPIOConfigurePin+0x50>
 8000570:	e027      	b.n	80005c2 <GPIOConfigurePin+0x82>
 8000572:	4a96      	ldr	r2, [pc, #600]	; (80007cc <GPIOConfigurePin+0x28c>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d01a      	beq.n	80005ae <GPIOConfigurePin+0x6e>
 8000578:	4a95      	ldr	r2, [pc, #596]	; (80007d0 <GPIOConfigurePin+0x290>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d01c      	beq.n	80005b8 <GPIOConfigurePin+0x78>
 800057e:	4a95      	ldr	r2, [pc, #596]	; (80007d4 <GPIOConfigurePin+0x294>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d00f      	beq.n	80005a4 <GPIOConfigurePin+0x64>
 8000584:	e01d      	b.n	80005c2 <GPIOConfigurePin+0x82>
	{
	case (uint32_t)GPIOA: // GPIOA je definovana konstanta ve formátu "ukazatel", proto msím pøetypovat na celoèíselnou hodnotu
        enableMask = RCC_AHB1ENR_GPIOAEN;
 8000586:	2301      	movs	r3, #1
 8000588:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOARST;
 800058a:	2301      	movs	r3, #1
 800058c:	613b      	str	r3, [r7, #16]
	break;
 800058e:	e018      	b.n	80005c2 <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOB:
        enableMask = RCC_AHB1ENR_GPIOBEN;
 8000590:	2302      	movs	r3, #2
 8000592:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOBRST;
 8000594:	2302      	movs	r3, #2
 8000596:	613b      	str	r3, [r7, #16]
	break;
 8000598:	e013      	b.n	80005c2 <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOC:
        enableMask = RCC_AHB1ENR_GPIOCEN;
 800059a:	2304      	movs	r3, #4
 800059c:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOCRST;
 800059e:	2304      	movs	r3, #4
 80005a0:	613b      	str	r3, [r7, #16]
	break;
 80005a2:	e00e      	b.n	80005c2 <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOD:
        enableMask = RCC_AHB1ENR_GPIODEN;
 80005a4:	2308      	movs	r3, #8
 80005a6:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIODRST;
 80005a8:	2308      	movs	r3, #8
 80005aa:	613b      	str	r3, [r7, #16]
	break;
 80005ac:	e009      	b.n	80005c2 <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOE:
        enableMask = RCC_AHB1ENR_GPIOEEN;
 80005ae:	2310      	movs	r3, #16
 80005b0:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOERST;
 80005b2:	2310      	movs	r3, #16
 80005b4:	613b      	str	r3, [r7, #16]
	break;
 80005b6:	e004      	b.n	80005c2 <GPIOConfigurePin+0x82>
        enableMask = RCC_AHB1ENR_GPIOGEN;
        resetMask = RCC_AHB1RSTR_GPIOGRST;
	break;
#endif
	case (uint32_t)GPIOH:
        enableMask = RCC_AHB1ENR_GPIOHEN;
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOHRST;
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	613b      	str	r3, [r7, #16]
	break;
 80005c0:	bf00      	nop

	}

	if((resetMask == 0)||(enableMask == 0)) // pokud se do masek neuložila žádná hodnota, ukonèi konfiguraci a vrat zpravu false o neúspìchu
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <GPIOConfigurePin+0x8e>
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d101      	bne.n	80005d2 <GPIOConfigurePin+0x92>
	{
		return false;
 80005ce:	2300      	movs	r3, #0
 80005d0:	e12d      	b.n	800082e <GPIOConfigurePin+0x2ee>
	}
	else
	{
		  if(!(RCC -> AHB1ENR & enableMask)) // jestliže nejsou masky prázdné, použi je pro nastavení hodin
 80005d2:	4b81      	ldr	r3, [pc, #516]	; (80007d8 <GPIOConfigurePin+0x298>)
 80005d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	4013      	ands	r3, r2
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d112      	bne.n	8000604 <GPIOConfigurePin+0xc4>
		  {
		    RCC->AHB1ENR |= enableMask;
 80005de:	497e      	ldr	r1, [pc, #504]	; (80007d8 <GPIOConfigurePin+0x298>)
 80005e0:	4b7d      	ldr	r3, [pc, #500]	; (80007d8 <GPIOConfigurePin+0x298>)
 80005e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	4313      	orrs	r3, r2
 80005e8:	630b      	str	r3, [r1, #48]	; 0x30
		    RCC->AHB1RSTR |= resetMask;
 80005ea:	497b      	ldr	r1, [pc, #492]	; (80007d8 <GPIOConfigurePin+0x298>)
 80005ec:	4b7a      	ldr	r3, [pc, #488]	; (80007d8 <GPIOConfigurePin+0x298>)
 80005ee:	691a      	ldr	r2, [r3, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	4313      	orrs	r3, r2
 80005f4:	610b      	str	r3, [r1, #16]
		    RCC->AHB1RSTR &= ~resetMask;
 80005f6:	4978      	ldr	r1, [pc, #480]	; (80007d8 <GPIOConfigurePin+0x298>)
 80005f8:	4b77      	ldr	r3, [pc, #476]	; (80007d8 <GPIOConfigurePin+0x298>)
 80005fa:	691a      	ldr	r2, [r3, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	43db      	mvns	r3, r3
 8000600:	4013      	ands	r3, r2
 8000602:	610b      	str	r3, [r1, #16]
		  }
	}

gpio -> MODER &= ~(0x03 << (bitNumber*2)); // vynulovani zdvojených bitu pøed nastavováním (kdyby nìkde byla kombinace 10 a já tam ORoval 01 tak vysledna kombinace je 11 misto 01)...u registru kde se nastavuje pouze jeden bit toho nehrozí
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	68ba      	ldr	r2, [r7, #8]
 800060a:	0052      	lsls	r2, r2, #1
 800060c:	2103      	movs	r1, #3
 800060e:	fa01 f202 	lsl.w	r2, r1, r2
 8000612:	43d2      	mvns	r2, r2
 8000614:	401a      	ands	r2, r3
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	601a      	str	r2, [r3, #0]
gpio -> PUPDR &= ~(0x03 << (bitNumber*2));
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	0052      	lsls	r2, r2, #1
 8000622:	2103      	movs	r1, #3
 8000624:	fa01 f202 	lsl.w	r2, r1, r2
 8000628:	43d2      	mvns	r2, r2
 800062a:	401a      	ands	r2, r3
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	60da      	str	r2, [r3, #12]
gpio -> OSPEEDR &= ~(0x03 << (bitNumber*2));
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	68ba      	ldr	r2, [r7, #8]
 8000636:	0052      	lsls	r2, r2, #1
 8000638:	2103      	movs	r1, #3
 800063a:	fa01 f202 	lsl.w	r2, r1, r2
 800063e:	43d2      	mvns	r2, r2
 8000640:	401a      	ands	r2, r3
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	609a      	str	r2, [r3, #8]


switch(mode)
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b07      	cmp	r3, #7
 800064a:	f200 80ef 	bhi.w	800082c <GPIOConfigurePin+0x2ec>
 800064e:	a201      	add	r2, pc, #4	; (adr r2, 8000654 <GPIOConfigurePin+0x114>)
 8000650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000654:	08000675 	.word	0x08000675
 8000658:	080006c7 	.word	0x080006c7
 800065c:	08000717 	.word	0x08000717
 8000660:	0800072d 	.word	0x0800072d
 8000664:	08000743 	.word	0x08000743
 8000668:	08000759 	.word	0x08000759
 800066c:	0800076f 	.word	0x0800076f
 8000670:	080007dd 	.word	0x080007dd
{
case ioPortOutputPushPull:

	gpio->MODER |= 0x01<<(2*bitNumber); // output
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	0052      	lsls	r2, r2, #1
 800067c:	2101      	movs	r1, #1
 800067e:	fa01 f202 	lsl.w	r2, r1, r2
 8000682:	431a      	orrs	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	601a      	str	r2, [r3, #0]
	gpio->OTYPER &= ~(0x01<<bitNumber); // push-pull
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	2101      	movs	r1, #1
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	fa01 f202 	lsl.w	r2, r1, r2
 8000694:	43d2      	mvns	r2, r2
 8000696:	401a      	ands	r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	68ba      	ldr	r2, [r7, #8]
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	2103      	movs	r1, #3
 80006a6:	fa01 f202 	lsl.w	r2, r1, r2
 80006aa:	431a      	orrs	r2, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	2103      	movs	r1, #3
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	fa01 f202 	lsl.w	r2, r1, r2
 80006bc:	43d2      	mvns	r2, r2
 80006be:	401a      	ands	r2, r3
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	60da      	str	r2, [r3, #12]
    break;
 80006c4:	e0b2      	b.n	800082c <GPIOConfigurePin+0x2ec>

case ioPortOutputOpenDrain:

	gpio->MODER |= 0x01<<(2*bitNumber); // output
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	0052      	lsls	r2, r2, #1
 80006ce:	2101      	movs	r1, #1
 80006d0:	fa01 f202 	lsl.w	r2, r1, r2
 80006d4:	431a      	orrs	r2, r3
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	601a      	str	r2, [r3, #0]
	gpio->OTYPER |= (0x01<<bitNumber); // open drain
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	2101      	movs	r1, #1
 80006e0:	68ba      	ldr	r2, [r7, #8]
 80006e2:	fa01 f202 	lsl.w	r2, r1, r2
 80006e6:	431a      	orrs	r2, r3
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	68ba      	ldr	r2, [r7, #8]
 80006f2:	0052      	lsls	r2, r2, #1
 80006f4:	2103      	movs	r1, #3
 80006f6:	fa01 f202 	lsl.w	r2, r1, r2
 80006fa:	431a      	orrs	r2, r3
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	2103      	movs	r1, #3
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	fa01 f202 	lsl.w	r2, r1, r2
 800070c:	43d2      	mvns	r2, r2
 800070e:	401a      	ands	r2, r3
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	60da      	str	r2, [r3, #12]
    break;
 8000714:	e08a      	b.n	800082c <GPIOConfigurePin+0x2ec>

case ioPortAnalog:

	gpio->MODER |= 0x03<<(2*bitNumber); // analog
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	68ba      	ldr	r2, [r7, #8]
 800071c:	0052      	lsls	r2, r2, #1
 800071e:	2103      	movs	r1, #3
 8000720:	fa01 f202 	lsl.w	r2, r1, r2
 8000724:	431a      	orrs	r2, r3
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	601a      	str	r2, [r3, #0]
    break;
 800072a:	e07f      	b.n	800082c <GPIOConfigurePin+0x2ec>

case ioPortInputFloat:

	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	2103      	movs	r1, #3
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	fa01 f202 	lsl.w	r2, r1, r2
 8000738:	43d2      	mvns	r2, r2
 800073a:	401a      	ands	r2, r3
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	60da      	str	r2, [r3, #12]
    break;
 8000740:	e074      	b.n	800082c <GPIOConfigurePin+0x2ec>

case ioPortInputPullUp:

	gpio->PUPDR |= ~(0x01<<bitNumber); // pull up
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	68db      	ldr	r3, [r3, #12]
 8000746:	2101      	movs	r1, #1
 8000748:	68ba      	ldr	r2, [r7, #8]
 800074a:	fa01 f202 	lsl.w	r2, r1, r2
 800074e:	43d2      	mvns	r2, r2
 8000750:	431a      	orrs	r2, r3
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	60da      	str	r2, [r3, #12]
    break;
 8000756:	e069      	b.n	800082c <GPIOConfigurePin+0x2ec>

case ioPortInputPullDown:

	gpio->PUPDR |= ~(0x02<<bitNumber); // pull down
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	2102      	movs	r1, #2
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	fa01 f202 	lsl.w	r2, r1, r2
 8000764:	43d2      	mvns	r2, r2
 8000766:	431a      	orrs	r2, r3
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	60da      	str	r2, [r3, #12]
    break;
 800076c:	e05e      	b.n	800082c <GPIOConfigurePin+0x2ec>

case ioPortAlternatrPushPull:

	gpio->MODER |= 0x02<<(2*bitNumber); // alternate function
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	0052      	lsls	r2, r2, #1
 8000776:	2102      	movs	r1, #2
 8000778:	fa01 f202 	lsl.w	r2, r1, r2
 800077c:	431a      	orrs	r2, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	601a      	str	r2, [r3, #0]
	gpio->OTYPER &= ~(0x01<<bitNumber); // push pull
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	2101      	movs	r1, #1
 8000788:	68ba      	ldr	r2, [r7, #8]
 800078a:	fa01 f202 	lsl.w	r2, r1, r2
 800078e:	43d2      	mvns	r2, r2
 8000790:	401a      	ands	r2, r3
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	68ba      	ldr	r2, [r7, #8]
 800079c:	0052      	lsls	r2, r2, #1
 800079e:	2103      	movs	r1, #3
 80007a0:	fa01 f202 	lsl.w	r2, r1, r2
 80007a4:	431a      	orrs	r2, r3
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	2103      	movs	r1, #3
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	fa01 f202 	lsl.w	r2, r1, r2
 80007b6:	43d2      	mvns	r2, r2
 80007b8:	401a      	ands	r2, r3
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	60da      	str	r2, [r3, #12]
    break;
 80007be:	e035      	b.n	800082c <GPIOConfigurePin+0x2ec>
 80007c0:	40020800 	.word	0x40020800
 80007c4:	40020000 	.word	0x40020000
 80007c8:	40020400 	.word	0x40020400
 80007cc:	40021000 	.word	0x40021000
 80007d0:	40021c00 	.word	0x40021c00
 80007d4:	40020c00 	.word	0x40020c00
 80007d8:	40023800 	.word	0x40023800

case ioPortAlternatrOpenDrain:

	gpio->MODER |= 0x02<<(2*bitNumber); // alternate function
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	0052      	lsls	r2, r2, #1
 80007e4:	2102      	movs	r1, #2
 80007e6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ea:	431a      	orrs	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	601a      	str	r2, [r3, #0]
	gpio->OTYPER |= (0x01<<bitNumber); // open drain
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	2101      	movs	r1, #1
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	fa01 f202 	lsl.w	r2, r1, r2
 80007fc:	431a      	orrs	r2, r3
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	0052      	lsls	r2, r2, #1
 800080a:	2103      	movs	r1, #3
 800080c:	fa01 f202 	lsl.w	r2, r1, r2
 8000810:	431a      	orrs	r2, r3
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	68db      	ldr	r3, [r3, #12]
 800081a:	2103      	movs	r1, #3
 800081c:	68ba      	ldr	r2, [r7, #8]
 800081e:	fa01 f202 	lsl.w	r2, r1, r2
 8000822:	43d2      	mvns	r2, r2
 8000824:	401a      	ands	r2, r3
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	60da      	str	r2, [r3, #12]
    break;
 800082a:	bf00      	nop


}
    return true;
 800082c:	2301      	movs	r3, #1
}
 800082e:	4618      	mov	r0, r3
 8000830:	371c      	adds	r7, #28
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop

0800083c <GPIOConfigureAlternativFunction>:

bool GPIOConfigureAlternativFunction(GPIO_TypeDef *gpio,uint32_t bitNumber, uint32_t afValue) // konfigurace GPIO do alternativní funkce
{
 800083c:	b480      	push	{r7}
 800083e:	b087      	sub	sp, #28
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
	// alternativni funkce se nastavuje pomoci registrù AFR,(to øíká která alternativní funkce je pøipojena), registry jsou dva(AFRL,AFRH) protože potøebujeme 64bit (je tam šestnáct alternativních kanálù na každej vstup a výstup(to zanemná 4 bity na jeden kanál))
	// v hlavièkových souborech neni AFRL a AFRH ale je tam dvouprvkove uint 32 bitove pole (AFR[0] = AFRL,AFR[1] = AFRH)
	uint8_t afr = (bitNumber < 8) ? 0 : 1 ;
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	2b07      	cmp	r3, #7
 800084c:	bf8c      	ite	hi
 800084e:	2301      	movhi	r3, #1
 8000850:	2300      	movls	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	75fb      	strb	r3, [r7, #23]

    gpio->AFR[afr] &= ~(0x0f << (4 * (bitNumber & 0x07))); // vynulujeme 4 bity naseho kanalu, pro jistotu maskuju bit number
 8000856:	7dfa      	ldrb	r2, [r7, #23]
 8000858:	7df9      	ldrb	r1, [r7, #23]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	3108      	adds	r1, #8
 800085e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000862:	68b9      	ldr	r1, [r7, #8]
 8000864:	f001 0107 	and.w	r1, r1, #7
 8000868:	0089      	lsls	r1, r1, #2
 800086a:	200f      	movs	r0, #15
 800086c:	fa00 f101 	lsl.w	r1, r0, r1
 8000870:	43c9      	mvns	r1, r1
 8000872:	4019      	ands	r1, r3
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	3208      	adds	r2, #8
 8000878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    gpio->AFR[afr] |= ((afValue & 0x0f) << (4 * (bitNumber & 0x07))); // nastavim pozadovanou hodnotu alternativni funkce, prom jistotu, kdyby byla afValue vetsi než 4 bity(nemìla by být) si maskujeme jenom dané 4 bity které chceme používat
 800087c:	7dfa      	ldrb	r2, [r7, #23]
 800087e:	7df9      	ldrb	r1, [r7, #23]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	3108      	adds	r1, #8
 8000884:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f003 000f 	and.w	r0, r3, #15
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	f003 0307 	and.w	r3, r3, #7
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	fa00 f303 	lsl.w	r3, r0, r3
 800089a:	4319      	orrs	r1, r3
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	3208      	adds	r2, #8
 80008a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return true;
 80008a4:	2301      	movs	r3, #1
  //  gpio->AFR[(bitNumber < 8) ? 0 : 1] &= ~(0x0f << (4 * (bitNumber & 0x07))); // vynuluj AF bity
  //  gpio->AFR[(bitNumber < 8) ? 0 : 1] |= ((afValue & 0x0f) << (4 * (bitNumber & 0x07))); // nastav AF bity



}
 80008a6:	4618      	mov	r0, r3
 80008a8:	371c      	adds	r7, #28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <GPIORead>:
{
gpio -> ODR ^= (1<<bitNumber); // prostì jen zmìò hobnotu v ODR pro pøíslušný bit
}

bool GPIORead(GPIO_TypeDef *gpio, uint32_t bitNumber) // funkce pro zjištìní hodnoty na výstupu ODR pro bit na zadaném místì
{
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
 80008ba:	6039      	str	r1, [r7, #0]
	if((gpio -> MODER & (0x03<<(bitNumber*2))) == 0x00) // jestliže je pin nastaven jako vstup
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	683a      	ldr	r2, [r7, #0]
 80008c2:	0052      	lsls	r2, r2, #1
 80008c4:	2103      	movs	r1, #3
 80008c6:	fa01 f202 	lsl.w	r2, r1, r2
 80008ca:	4013      	ands	r3, r2
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d10c      	bne.n	80008ea <GPIORead+0x38>
	{
		 return ((gpio -> IDR) & (1<<bitNumber)); // AND ODR s maskou vrátí 0 (false) pokud zkoumany bit je nula, a pokud neni nula a je to jakekoliv jine cislo, nezalezi na to jake, vrati (true)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	2101      	movs	r1, #1
 80008d6:	683a      	ldr	r2, [r7, #0]
 80008d8:	fa01 f202 	lsl.w	r2, r1, r2
 80008dc:	4013      	ands	r3, r2
 80008de:	2b00      	cmp	r3, #0
 80008e0:	bf14      	ite	ne
 80008e2:	2301      	movne	r3, #1
 80008e4:	2300      	moveq	r3, #0
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	e01c      	b.n	8000924 <GPIORead+0x72>

	}else if ((gpio -> MODER & (0x03<<(bitNumber*2))) == (0x01<<(bitNumber*2))) // pokud ne, tak je na prislusnem bitNumber kombinace 01
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	683a      	ldr	r2, [r7, #0]
 80008f0:	0052      	lsls	r2, r2, #1
 80008f2:	2103      	movs	r1, #3
 80008f4:	fa01 f202 	lsl.w	r2, r1, r2
 80008f8:	4013      	ands	r3, r2
 80008fa:	683a      	ldr	r2, [r7, #0]
 80008fc:	0052      	lsls	r2, r2, #1
 80008fe:	2101      	movs	r1, #1
 8000900:	fa01 f202 	lsl.w	r2, r1, r2
 8000904:	4293      	cmp	r3, r2
 8000906:	d10c      	bne.n	8000922 <GPIORead+0x70>
	{
		 return ((gpio -> ODR) & (1<<bitNumber)); // AND ODR s maskou vrátí 0 (false) pokud zkoumany bit je nula, a pokud neni nula a je to jakekoliv jine cislo, nezalezi na to jake, vrati (true)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	695b      	ldr	r3, [r3, #20]
 800090c:	2101      	movs	r1, #1
 800090e:	683a      	ldr	r2, [r7, #0]
 8000910:	fa01 f202 	lsl.w	r2, r1, r2
 8000914:	4013      	ands	r3, r2
 8000916:	2b00      	cmp	r3, #0
 8000918:	bf14      	ite	ne
 800091a:	2301      	movne	r3, #1
 800091c:	2300      	moveq	r3, #0
 800091e:	b2db      	uxtb	r3, r3
 8000920:	e000      	b.n	8000924 <GPIORead+0x72>
	}else
	{
		return false; // je potøeba dodìlat!!!!! pro analog a alternativvní funkce nebude fungovat!!!!!!!!
 8000922:	2300      	movs	r3, #0
	}

}
 8000924:	4618      	mov	r0, r3
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <_sbrk>:
	while (1) {}		/* Make sure we hang here */
}


void * _sbrk(int32_t incr)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <_sbrk+0x38>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d102      	bne.n	8000946 <_sbrk+0x16>
		heap_end = & end;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <_sbrk+0x38>)
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <_sbrk+0x3c>)
 8000944:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <_sbrk+0x38>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <_sbrk+0x38>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4413      	add	r3, r2
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <_sbrk+0x38>)
 8000956:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8000958:	68fb      	ldr	r3, [r7, #12]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000088 	.word	0x20000088
 800096c:	20000098 	.word	0x20000098

08000970 <_close>:

int _close(int32_t file)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <_close+0x20>)
 800097a:	2258      	movs	r2, #88	; 0x58
 800097c:	601a      	str	r2, [r3, #0]
	return -1;
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000982:	4618      	mov	r0, r3
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000094 	.word	0x20000094

08000994 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <_fstat+0x20>)
 80009a0:	2258      	movs	r2, #88	; 0x58
 80009a2:	601a      	str	r2, [r3, #0]
	return -1;
 80009a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	20000094 	.word	0x20000094

080009b8 <_lseek>:
	errno = ENOSYS;
	return 0;
}

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <_lseek+0x24>)
 80009c6:	2258      	movs	r2, #88	; 0x58
 80009c8:	601a      	str	r2, [r3, #0]
	return -1;
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000094 	.word	0x20000094

080009e0 <_write>:
// pomocna deklarace, asi to ten kompilátor pochopí že už je nìkde mám vytvoøený a nevytvoøí si je sám a když je pak najde v main, tak je používá tam odsud, nebo nevím
int Usart2Send(char c);
int Usart2Recived(void);

int _write(int32_t file, uint8_t *ptr, int32_t len)
{ // prvni parametr, jestli se jedná stdin, stdout a podobnì.. druhý parametr je ukazatel na data které se mají vysílat a tøetí parametr je délka dat, kolik se jich má vysílat (respektive u write pøijmout)
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]


	for(int i = 0;i<len;i++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	e009      	b.n	8000a06 <_write+0x26>
	{
		Usart2Send(ptr[i]);
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	4413      	add	r3, r2
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fcec 	bl	80003d8 <Usart2Send>
	for(int i = 0;i<len;i++)
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	3301      	adds	r3, #1
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	697a      	ldr	r2, [r7, #20]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	dbf1      	blt.n	80009f2 <_write+0x12>
	}

	errno = 0; // priznak ze neni chbya chyby
 8000a0e:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <_write+0x40>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]

	return len; // vratim kolik jsem jich odvisilal
 8000a14:	687b      	ldr	r3, [r7, #4]

//	errno = ENOSYS; // ENOSYS je chybový pøíznak že funkce není implementována... priznak bez chyby je nula
//	return -1;

}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000094 	.word	0x20000094

08000a24 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]

	*ptr = Usart2Recived();
 8000a30:	f7ff fcea 	bl	8000408 <Usart2Recived>
 8000a34:	4603      	mov	r3, r0
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	701a      	strb	r2, [r3, #0]

    errno = 0;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <_read+0x28>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]

	return 1; // budu vracet pouze jeden znak, pokud budu chtit vic, zavolam funkci nekolikrat (protože Usar2Read je blokující, takže aby zbyteènì neblokovala než pøijdou všechny znaky)
 8000a42:	2301      	movs	r3, #1


//	errno = ENOSYS;
//	return -1;
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000094 	.word	0x20000094

08000a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a54:	4a16      	ldr	r2, [pc, #88]	; (8000ab0 <SystemInit+0x60>)
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <SystemInit+0x60>)
 8000a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a64:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <SystemInit+0x64>)
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <SystemInit+0x64>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <SystemInit+0x64>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a76:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <SystemInit+0x64>)
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <SystemInit+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a84:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <SystemInit+0x64>)
 8000a88:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <SystemInit+0x68>)
 8000a8a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a8c:	4a09      	ldr	r2, [pc, #36]	; (8000ab4 <SystemInit+0x64>)
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <SystemInit+0x64>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <SystemInit+0x64>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a9e:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <SystemInit+0x60>)
 8000aa0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aa4:	609a      	str	r2, [r3, #8]
#endif
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	24003010 	.word	0x24003010

08000abc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b087      	sub	sp, #28
 8000ac0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	2302      	movs	r3, #2
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000ad6:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <SystemCoreClockUpdate+0xe0>)
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	f003 030c 	and.w	r3, r3, #12
 8000ade:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	d007      	beq.n	8000af6 <SystemCoreClockUpdate+0x3a>
 8000ae6:	2b08      	cmp	r3, #8
 8000ae8:	d009      	beq.n	8000afe <SystemCoreClockUpdate+0x42>
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d13d      	bne.n	8000b6a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000aee:	4b2c      	ldr	r3, [pc, #176]	; (8000ba0 <SystemCoreClockUpdate+0xe4>)
 8000af0:	4a2c      	ldr	r2, [pc, #176]	; (8000ba4 <SystemCoreClockUpdate+0xe8>)
 8000af2:	601a      	str	r2, [r3, #0]
      break;
 8000af4:	e03d      	b.n	8000b72 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000af6:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <SystemCoreClockUpdate+0xe4>)
 8000af8:	4a2b      	ldr	r2, [pc, #172]	; (8000ba8 <SystemCoreClockUpdate+0xec>)
 8000afa:	601a      	str	r2, [r3, #0]
      break;
 8000afc:	e039      	b.n	8000b72 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000afe:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <SystemCoreClockUpdate+0xe0>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	0d9b      	lsrs	r3, r3, #22
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b0a:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <SystemCoreClockUpdate+0xe0>)
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b12:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d00c      	beq.n	8000b34 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000b1a:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <SystemCoreClockUpdate+0xec>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b22:	4a1e      	ldr	r2, [pc, #120]	; (8000b9c <SystemCoreClockUpdate+0xe0>)
 8000b24:	6852      	ldr	r2, [r2, #4]
 8000b26:	0992      	lsrs	r2, r2, #6
 8000b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b2c:	fb02 f303 	mul.w	r3, r2, r3
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e00b      	b.n	8000b4c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000b34:	4a1b      	ldr	r2, [pc, #108]	; (8000ba4 <SystemCoreClockUpdate+0xe8>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3c:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <SystemCoreClockUpdate+0xe0>)
 8000b3e:	6852      	ldr	r2, [r2, #4]
 8000b40:	0992      	lsrs	r2, r2, #6
 8000b42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b46:	fb02 f303 	mul.w	r3, r2, r3
 8000b4a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000b4c:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <SystemCoreClockUpdate+0xe0>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	0c1b      	lsrs	r3, r3, #16
 8000b52:	f003 0303 	and.w	r3, r3, #3
 8000b56:	3301      	adds	r3, #1
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b64:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <SystemCoreClockUpdate+0xe4>)
 8000b66:	6013      	str	r3, [r2, #0]
      break;
 8000b68:	e003      	b.n	8000b72 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <SystemCoreClockUpdate+0xe4>)
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ba4 <SystemCoreClockUpdate+0xe8>)
 8000b6e:	601a      	str	r2, [r3, #0]
      break;
 8000b70:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <SystemCoreClockUpdate+0xe0>)
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	091b      	lsrs	r3, r3, #4
 8000b78:	f003 030f 	and.w	r3, r3, #15
 8000b7c:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <SystemCoreClockUpdate+0xf0>)
 8000b7e:	5cd3      	ldrb	r3, [r2, r3]
 8000b80:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <SystemCoreClockUpdate+0xe4>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	fa22 f303 	lsr.w	r3, r2, r3
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <SystemCoreClockUpdate+0xe4>)
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	371c      	adds	r7, #28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	00f42400 	.word	0x00f42400
 8000ba8:	017d7840 	.word	0x017d7840
 8000bac:	0800140c 	.word	0x0800140c

08000bb0 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff fb0d 	bl	80001d8 <strlen>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	6879      	ldr	r1, [r7, #4]
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff ff08 	bl	80009e0 <_write>
 8000bd0:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	490b      	ldr	r1, [pc, #44]	; (8000c04 <puts+0x54>)
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f7ff ff02 	bl	80009e0 <_write>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4413      	add	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d102      	bne.n	8000bf4 <puts+0x44>
	{
		res = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	e002      	b.n	8000bfa <puts+0x4a>
	}
	else
	{
		res = EOF;
 8000bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf8:	617b      	str	r3, [r7, #20]
	}

	return res;
 8000bfa:	697b      	ldr	r3, [r7, #20]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	08001408 	.word	0x08001408

08000c08 <__libc_init_array>:
 8000c08:	b570      	push	{r4, r5, r6, lr}
 8000c0a:	4e0d      	ldr	r6, [pc, #52]	; (8000c40 <__libc_init_array+0x38>)
 8000c0c:	4c0d      	ldr	r4, [pc, #52]	; (8000c44 <__libc_init_array+0x3c>)
 8000c0e:	1ba4      	subs	r4, r4, r6
 8000c10:	10a4      	asrs	r4, r4, #2
 8000c12:	2500      	movs	r5, #0
 8000c14:	42a5      	cmp	r5, r4
 8000c16:	d109      	bne.n	8000c2c <__libc_init_array+0x24>
 8000c18:	4e0b      	ldr	r6, [pc, #44]	; (8000c48 <__libc_init_array+0x40>)
 8000c1a:	4c0c      	ldr	r4, [pc, #48]	; (8000c4c <__libc_init_array+0x44>)
 8000c1c:	f000 fbd0 	bl	80013c0 <_init>
 8000c20:	1ba4      	subs	r4, r4, r6
 8000c22:	10a4      	asrs	r4, r4, #2
 8000c24:	2500      	movs	r5, #0
 8000c26:	42a5      	cmp	r5, r4
 8000c28:	d105      	bne.n	8000c36 <__libc_init_array+0x2e>
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
 8000c2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c30:	4798      	blx	r3
 8000c32:	3501      	adds	r5, #1
 8000c34:	e7ee      	b.n	8000c14 <__libc_init_array+0xc>
 8000c36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c3a:	4798      	blx	r3
 8000c3c:	3501      	adds	r5, #1
 8000c3e:	e7f2      	b.n	8000c26 <__libc_init_array+0x1e>
 8000c40:	08001480 	.word	0x08001480
 8000c44:	08001480 	.word	0x08001480
 8000c48:	08001480 	.word	0x08001480
 8000c4c:	08001484 	.word	0x08001484

08000c50 <setvbuf>:
 8000c50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000c54:	461d      	mov	r5, r3
 8000c56:	4b51      	ldr	r3, [pc, #324]	; (8000d9c <setvbuf+0x14c>)
 8000c58:	681e      	ldr	r6, [r3, #0]
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	460f      	mov	r7, r1
 8000c5e:	4690      	mov	r8, r2
 8000c60:	b126      	cbz	r6, 8000c6c <setvbuf+0x1c>
 8000c62:	69b3      	ldr	r3, [r6, #24]
 8000c64:	b913      	cbnz	r3, 8000c6c <setvbuf+0x1c>
 8000c66:	4630      	mov	r0, r6
 8000c68:	f000 f992 	bl	8000f90 <__sinit>
 8000c6c:	4b4c      	ldr	r3, [pc, #304]	; (8000da0 <setvbuf+0x150>)
 8000c6e:	429c      	cmp	r4, r3
 8000c70:	d152      	bne.n	8000d18 <setvbuf+0xc8>
 8000c72:	6874      	ldr	r4, [r6, #4]
 8000c74:	f1b8 0f02 	cmp.w	r8, #2
 8000c78:	d006      	beq.n	8000c88 <setvbuf+0x38>
 8000c7a:	f1b8 0f01 	cmp.w	r8, #1
 8000c7e:	f200 8089 	bhi.w	8000d94 <setvbuf+0x144>
 8000c82:	2d00      	cmp	r5, #0
 8000c84:	f2c0 8086 	blt.w	8000d94 <setvbuf+0x144>
 8000c88:	4621      	mov	r1, r4
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	f000 f916 	bl	8000ebc <_fflush_r>
 8000c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c92:	b141      	cbz	r1, 8000ca6 <setvbuf+0x56>
 8000c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	d002      	beq.n	8000ca2 <setvbuf+0x52>
 8000c9c:	4630      	mov	r0, r6
 8000c9e:	f000 fa35 	bl	800110c <_free_r>
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	6363      	str	r3, [r4, #52]	; 0x34
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61a3      	str	r3, [r4, #24]
 8000caa:	6063      	str	r3, [r4, #4]
 8000cac:	89a3      	ldrh	r3, [r4, #12]
 8000cae:	061b      	lsls	r3, r3, #24
 8000cb0:	d503      	bpl.n	8000cba <setvbuf+0x6a>
 8000cb2:	6921      	ldr	r1, [r4, #16]
 8000cb4:	4630      	mov	r0, r6
 8000cb6:	f000 fa29 	bl	800110c <_free_r>
 8000cba:	89a3      	ldrh	r3, [r4, #12]
 8000cbc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8000cc0:	f023 0303 	bic.w	r3, r3, #3
 8000cc4:	f1b8 0f02 	cmp.w	r8, #2
 8000cc8:	81a3      	strh	r3, [r4, #12]
 8000cca:	d05d      	beq.n	8000d88 <setvbuf+0x138>
 8000ccc:	ab01      	add	r3, sp, #4
 8000cce:	466a      	mov	r2, sp
 8000cd0:	4621      	mov	r1, r4
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	f000 f9e6 	bl	80010a4 <__swhatbuf_r>
 8000cd8:	89a3      	ldrh	r3, [r4, #12]
 8000cda:	4318      	orrs	r0, r3
 8000cdc:	81a0      	strh	r0, [r4, #12]
 8000cde:	bb2d      	cbnz	r5, 8000d2c <setvbuf+0xdc>
 8000ce0:	9d00      	ldr	r5, [sp, #0]
 8000ce2:	4628      	mov	r0, r5
 8000ce4:	f000 fa02 	bl	80010ec <malloc>
 8000ce8:	4607      	mov	r7, r0
 8000cea:	2800      	cmp	r0, #0
 8000cec:	d14e      	bne.n	8000d8c <setvbuf+0x13c>
 8000cee:	f8dd 9000 	ldr.w	r9, [sp]
 8000cf2:	45a9      	cmp	r9, r5
 8000cf4:	d13c      	bne.n	8000d70 <setvbuf+0x120>
 8000cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfa:	89a3      	ldrh	r3, [r4, #12]
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	81a3      	strh	r3, [r4, #12]
 8000d02:	2300      	movs	r3, #0
 8000d04:	60a3      	str	r3, [r4, #8]
 8000d06:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000d0a:	6023      	str	r3, [r4, #0]
 8000d0c:	6123      	str	r3, [r4, #16]
 8000d0e:	2301      	movs	r3, #1
 8000d10:	6163      	str	r3, [r4, #20]
 8000d12:	b003      	add	sp, #12
 8000d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d18:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <setvbuf+0x154>)
 8000d1a:	429c      	cmp	r4, r3
 8000d1c:	d101      	bne.n	8000d22 <setvbuf+0xd2>
 8000d1e:	68b4      	ldr	r4, [r6, #8]
 8000d20:	e7a8      	b.n	8000c74 <setvbuf+0x24>
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <setvbuf+0x158>)
 8000d24:	429c      	cmp	r4, r3
 8000d26:	bf08      	it	eq
 8000d28:	68f4      	ldreq	r4, [r6, #12]
 8000d2a:	e7a3      	b.n	8000c74 <setvbuf+0x24>
 8000d2c:	2f00      	cmp	r7, #0
 8000d2e:	d0d8      	beq.n	8000ce2 <setvbuf+0x92>
 8000d30:	69b3      	ldr	r3, [r6, #24]
 8000d32:	b913      	cbnz	r3, 8000d3a <setvbuf+0xea>
 8000d34:	4630      	mov	r0, r6
 8000d36:	f000 f92b 	bl	8000f90 <__sinit>
 8000d3a:	f1b8 0f01 	cmp.w	r8, #1
 8000d3e:	bf08      	it	eq
 8000d40:	89a3      	ldrheq	r3, [r4, #12]
 8000d42:	6027      	str	r7, [r4, #0]
 8000d44:	bf04      	itt	eq
 8000d46:	f043 0301 	orreq.w	r3, r3, #1
 8000d4a:	81a3      	strheq	r3, [r4, #12]
 8000d4c:	89a3      	ldrh	r3, [r4, #12]
 8000d4e:	6127      	str	r7, [r4, #16]
 8000d50:	f013 0008 	ands.w	r0, r3, #8
 8000d54:	6165      	str	r5, [r4, #20]
 8000d56:	d01b      	beq.n	8000d90 <setvbuf+0x140>
 8000d58:	f013 0001 	ands.w	r0, r3, #1
 8000d5c:	bf18      	it	ne
 8000d5e:	426d      	negne	r5, r5
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	bf1d      	ittte	ne
 8000d66:	60a3      	strne	r3, [r4, #8]
 8000d68:	61a5      	strne	r5, [r4, #24]
 8000d6a:	4618      	movne	r0, r3
 8000d6c:	60a5      	streq	r5, [r4, #8]
 8000d6e:	e7d0      	b.n	8000d12 <setvbuf+0xc2>
 8000d70:	4648      	mov	r0, r9
 8000d72:	f000 f9bb 	bl	80010ec <malloc>
 8000d76:	4607      	mov	r7, r0
 8000d78:	2800      	cmp	r0, #0
 8000d7a:	d0bc      	beq.n	8000cf6 <setvbuf+0xa6>
 8000d7c:	89a3      	ldrh	r3, [r4, #12]
 8000d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d82:	81a3      	strh	r3, [r4, #12]
 8000d84:	464d      	mov	r5, r9
 8000d86:	e7d3      	b.n	8000d30 <setvbuf+0xe0>
 8000d88:	2000      	movs	r0, #0
 8000d8a:	e7b6      	b.n	8000cfa <setvbuf+0xaa>
 8000d8c:	46a9      	mov	r9, r5
 8000d8e:	e7f5      	b.n	8000d7c <setvbuf+0x12c>
 8000d90:	60a0      	str	r0, [r4, #8]
 8000d92:	e7be      	b.n	8000d12 <setvbuf+0xc2>
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	e7bb      	b.n	8000d12 <setvbuf+0xc2>
 8000d9a:	bf00      	nop
 8000d9c:	20000004 	.word	0x20000004
 8000da0:	08001440 	.word	0x08001440
 8000da4:	08001460 	.word	0x08001460
 8000da8:	08001420 	.word	0x08001420

08000dac <__sflush_r>:
 8000dac:	898a      	ldrh	r2, [r1, #12]
 8000dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000db2:	4605      	mov	r5, r0
 8000db4:	0710      	lsls	r0, r2, #28
 8000db6:	460c      	mov	r4, r1
 8000db8:	d45a      	bmi.n	8000e70 <__sflush_r+0xc4>
 8000dba:	684b      	ldr	r3, [r1, #4]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	dc05      	bgt.n	8000dcc <__sflush_r+0x20>
 8000dc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	dc02      	bgt.n	8000dcc <__sflush_r+0x20>
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d0f9      	beq.n	8000dc6 <__sflush_r+0x1a>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000dd8:	682f      	ldr	r7, [r5, #0]
 8000dda:	602b      	str	r3, [r5, #0]
 8000ddc:	d033      	beq.n	8000e46 <__sflush_r+0x9a>
 8000dde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000de0:	89a3      	ldrh	r3, [r4, #12]
 8000de2:	075a      	lsls	r2, r3, #29
 8000de4:	d505      	bpl.n	8000df2 <__sflush_r+0x46>
 8000de6:	6863      	ldr	r3, [r4, #4]
 8000de8:	1ac0      	subs	r0, r0, r3
 8000dea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000dec:	b10b      	cbz	r3, 8000df2 <__sflush_r+0x46>
 8000dee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000df0:	1ac0      	subs	r0, r0, r3
 8000df2:	2300      	movs	r3, #0
 8000df4:	4602      	mov	r2, r0
 8000df6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000df8:	6a21      	ldr	r1, [r4, #32]
 8000dfa:	4628      	mov	r0, r5
 8000dfc:	47b0      	blx	r6
 8000dfe:	1c43      	adds	r3, r0, #1
 8000e00:	89a3      	ldrh	r3, [r4, #12]
 8000e02:	d106      	bne.n	8000e12 <__sflush_r+0x66>
 8000e04:	6829      	ldr	r1, [r5, #0]
 8000e06:	291d      	cmp	r1, #29
 8000e08:	d84b      	bhi.n	8000ea2 <__sflush_r+0xf6>
 8000e0a:	4a2b      	ldr	r2, [pc, #172]	; (8000eb8 <__sflush_r+0x10c>)
 8000e0c:	40ca      	lsrs	r2, r1
 8000e0e:	07d6      	lsls	r6, r2, #31
 8000e10:	d547      	bpl.n	8000ea2 <__sflush_r+0xf6>
 8000e12:	2200      	movs	r2, #0
 8000e14:	6062      	str	r2, [r4, #4]
 8000e16:	04d9      	lsls	r1, r3, #19
 8000e18:	6922      	ldr	r2, [r4, #16]
 8000e1a:	6022      	str	r2, [r4, #0]
 8000e1c:	d504      	bpl.n	8000e28 <__sflush_r+0x7c>
 8000e1e:	1c42      	adds	r2, r0, #1
 8000e20:	d101      	bne.n	8000e26 <__sflush_r+0x7a>
 8000e22:	682b      	ldr	r3, [r5, #0]
 8000e24:	b903      	cbnz	r3, 8000e28 <__sflush_r+0x7c>
 8000e26:	6560      	str	r0, [r4, #84]	; 0x54
 8000e28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e2a:	602f      	str	r7, [r5, #0]
 8000e2c:	2900      	cmp	r1, #0
 8000e2e:	d0ca      	beq.n	8000dc6 <__sflush_r+0x1a>
 8000e30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e34:	4299      	cmp	r1, r3
 8000e36:	d002      	beq.n	8000e3e <__sflush_r+0x92>
 8000e38:	4628      	mov	r0, r5
 8000e3a:	f000 f967 	bl	800110c <_free_r>
 8000e3e:	2000      	movs	r0, #0
 8000e40:	6360      	str	r0, [r4, #52]	; 0x34
 8000e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e46:	6a21      	ldr	r1, [r4, #32]
 8000e48:	2301      	movs	r3, #1
 8000e4a:	4628      	mov	r0, r5
 8000e4c:	47b0      	blx	r6
 8000e4e:	1c41      	adds	r1, r0, #1
 8000e50:	d1c6      	bne.n	8000de0 <__sflush_r+0x34>
 8000e52:	682b      	ldr	r3, [r5, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0c3      	beq.n	8000de0 <__sflush_r+0x34>
 8000e58:	2b1d      	cmp	r3, #29
 8000e5a:	d001      	beq.n	8000e60 <__sflush_r+0xb4>
 8000e5c:	2b16      	cmp	r3, #22
 8000e5e:	d101      	bne.n	8000e64 <__sflush_r+0xb8>
 8000e60:	602f      	str	r7, [r5, #0]
 8000e62:	e7b0      	b.n	8000dc6 <__sflush_r+0x1a>
 8000e64:	89a3      	ldrh	r3, [r4, #12]
 8000e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e6a:	81a3      	strh	r3, [r4, #12]
 8000e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e70:	690f      	ldr	r7, [r1, #16]
 8000e72:	2f00      	cmp	r7, #0
 8000e74:	d0a7      	beq.n	8000dc6 <__sflush_r+0x1a>
 8000e76:	0793      	lsls	r3, r2, #30
 8000e78:	680e      	ldr	r6, [r1, #0]
 8000e7a:	bf08      	it	eq
 8000e7c:	694b      	ldreq	r3, [r1, #20]
 8000e7e:	600f      	str	r7, [r1, #0]
 8000e80:	bf18      	it	ne
 8000e82:	2300      	movne	r3, #0
 8000e84:	eba6 0807 	sub.w	r8, r6, r7
 8000e88:	608b      	str	r3, [r1, #8]
 8000e8a:	f1b8 0f00 	cmp.w	r8, #0
 8000e8e:	dd9a      	ble.n	8000dc6 <__sflush_r+0x1a>
 8000e90:	4643      	mov	r3, r8
 8000e92:	463a      	mov	r2, r7
 8000e94:	6a21      	ldr	r1, [r4, #32]
 8000e96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000e98:	4628      	mov	r0, r5
 8000e9a:	47b0      	blx	r6
 8000e9c:	2800      	cmp	r0, #0
 8000e9e:	dc07      	bgt.n	8000eb0 <__sflush_r+0x104>
 8000ea0:	89a3      	ldrh	r3, [r4, #12]
 8000ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea6:	81a3      	strh	r3, [r4, #12]
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000eb0:	4407      	add	r7, r0
 8000eb2:	eba8 0800 	sub.w	r8, r8, r0
 8000eb6:	e7e8      	b.n	8000e8a <__sflush_r+0xde>
 8000eb8:	20400001 	.word	0x20400001

08000ebc <_fflush_r>:
 8000ebc:	b538      	push	{r3, r4, r5, lr}
 8000ebe:	690b      	ldr	r3, [r1, #16]
 8000ec0:	4605      	mov	r5, r0
 8000ec2:	460c      	mov	r4, r1
 8000ec4:	b1db      	cbz	r3, 8000efe <_fflush_r+0x42>
 8000ec6:	b118      	cbz	r0, 8000ed0 <_fflush_r+0x14>
 8000ec8:	6983      	ldr	r3, [r0, #24]
 8000eca:	b90b      	cbnz	r3, 8000ed0 <_fflush_r+0x14>
 8000ecc:	f000 f860 	bl	8000f90 <__sinit>
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <_fflush_r+0x48>)
 8000ed2:	429c      	cmp	r4, r3
 8000ed4:	d109      	bne.n	8000eea <_fflush_r+0x2e>
 8000ed6:	686c      	ldr	r4, [r5, #4]
 8000ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000edc:	b17b      	cbz	r3, 8000efe <_fflush_r+0x42>
 8000ede:	4621      	mov	r1, r4
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ee6:	f7ff bf61 	b.w	8000dac <__sflush_r>
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <_fflush_r+0x4c>)
 8000eec:	429c      	cmp	r4, r3
 8000eee:	d101      	bne.n	8000ef4 <_fflush_r+0x38>
 8000ef0:	68ac      	ldr	r4, [r5, #8]
 8000ef2:	e7f1      	b.n	8000ed8 <_fflush_r+0x1c>
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <_fflush_r+0x50>)
 8000ef6:	429c      	cmp	r4, r3
 8000ef8:	bf08      	it	eq
 8000efa:	68ec      	ldreq	r4, [r5, #12]
 8000efc:	e7ec      	b.n	8000ed8 <_fflush_r+0x1c>
 8000efe:	2000      	movs	r0, #0
 8000f00:	bd38      	pop	{r3, r4, r5, pc}
 8000f02:	bf00      	nop
 8000f04:	08001440 	.word	0x08001440
 8000f08:	08001460 	.word	0x08001460
 8000f0c:	08001420 	.word	0x08001420

08000f10 <_cleanup_r>:
 8000f10:	4901      	ldr	r1, [pc, #4]	; (8000f18 <_cleanup_r+0x8>)
 8000f12:	f000 b8a9 	b.w	8001068 <_fwalk_reent>
 8000f16:	bf00      	nop
 8000f18:	08000ebd 	.word	0x08000ebd

08000f1c <std.isra.0>:
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	b510      	push	{r4, lr}
 8000f20:	4604      	mov	r4, r0
 8000f22:	6003      	str	r3, [r0, #0]
 8000f24:	6043      	str	r3, [r0, #4]
 8000f26:	6083      	str	r3, [r0, #8]
 8000f28:	8181      	strh	r1, [r0, #12]
 8000f2a:	6643      	str	r3, [r0, #100]	; 0x64
 8000f2c:	81c2      	strh	r2, [r0, #14]
 8000f2e:	6103      	str	r3, [r0, #16]
 8000f30:	6143      	str	r3, [r0, #20]
 8000f32:	6183      	str	r3, [r0, #24]
 8000f34:	4619      	mov	r1, r3
 8000f36:	2208      	movs	r2, #8
 8000f38:	305c      	adds	r0, #92	; 0x5c
 8000f3a:	f000 f8df 	bl	80010fc <memset>
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <std.isra.0+0x38>)
 8000f40:	6263      	str	r3, [r4, #36]	; 0x24
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <std.isra.0+0x3c>)
 8000f44:	62a3      	str	r3, [r4, #40]	; 0x28
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <std.isra.0+0x40>)
 8000f48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000f4a:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <std.isra.0+0x44>)
 8000f4c:	6224      	str	r4, [r4, #32]
 8000f4e:	6323      	str	r3, [r4, #48]	; 0x30
 8000f50:	bd10      	pop	{r4, pc}
 8000f52:	bf00      	nop
 8000f54:	08001285 	.word	0x08001285
 8000f58:	080012a7 	.word	0x080012a7
 8000f5c:	080012df 	.word	0x080012df
 8000f60:	08001303 	.word	0x08001303

08000f64 <__sfmoreglue>:
 8000f64:	b570      	push	{r4, r5, r6, lr}
 8000f66:	1e4a      	subs	r2, r1, #1
 8000f68:	2568      	movs	r5, #104	; 0x68
 8000f6a:	4355      	muls	r5, r2
 8000f6c:	460e      	mov	r6, r1
 8000f6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000f72:	f000 f919 	bl	80011a8 <_malloc_r>
 8000f76:	4604      	mov	r4, r0
 8000f78:	b140      	cbz	r0, 8000f8c <__sfmoreglue+0x28>
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	e880 0042 	stmia.w	r0, {r1, r6}
 8000f80:	300c      	adds	r0, #12
 8000f82:	60a0      	str	r0, [r4, #8]
 8000f84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000f88:	f000 f8b8 	bl	80010fc <memset>
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	bd70      	pop	{r4, r5, r6, pc}

08000f90 <__sinit>:
 8000f90:	6983      	ldr	r3, [r0, #24]
 8000f92:	b510      	push	{r4, lr}
 8000f94:	4604      	mov	r4, r0
 8000f96:	bb33      	cbnz	r3, 8000fe6 <__sinit+0x56>
 8000f98:	6483      	str	r3, [r0, #72]	; 0x48
 8000f9a:	64c3      	str	r3, [r0, #76]	; 0x4c
 8000f9c:	6503      	str	r3, [r0, #80]	; 0x50
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <__sinit+0x58>)
 8000fa0:	4a12      	ldr	r2, [pc, #72]	; (8000fec <__sinit+0x5c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6282      	str	r2, [r0, #40]	; 0x28
 8000fa6:	4298      	cmp	r0, r3
 8000fa8:	bf04      	itt	eq
 8000faa:	2301      	moveq	r3, #1
 8000fac:	6183      	streq	r3, [r0, #24]
 8000fae:	f000 f81f 	bl	8000ff0 <__sfp>
 8000fb2:	6060      	str	r0, [r4, #4]
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	f000 f81b 	bl	8000ff0 <__sfp>
 8000fba:	60a0      	str	r0, [r4, #8]
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	f000 f817 	bl	8000ff0 <__sfp>
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60e0      	str	r0, [r4, #12]
 8000fc6:	2104      	movs	r1, #4
 8000fc8:	6860      	ldr	r0, [r4, #4]
 8000fca:	f7ff ffa7 	bl	8000f1c <std.isra.0>
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2109      	movs	r1, #9
 8000fd2:	68a0      	ldr	r0, [r4, #8]
 8000fd4:	f7ff ffa2 	bl	8000f1c <std.isra.0>
 8000fd8:	2202      	movs	r2, #2
 8000fda:	2112      	movs	r1, #18
 8000fdc:	68e0      	ldr	r0, [r4, #12]
 8000fde:	f7ff ff9d 	bl	8000f1c <std.isra.0>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61a3      	str	r3, [r4, #24]
 8000fe6:	bd10      	pop	{r4, pc}
 8000fe8:	0800141c 	.word	0x0800141c
 8000fec:	08000f11 	.word	0x08000f11

08000ff0 <__sfp>:
 8000ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <__sfp+0x74>)
 8000ff4:	681e      	ldr	r6, [r3, #0]
 8000ff6:	69b3      	ldr	r3, [r6, #24]
 8000ff8:	4607      	mov	r7, r0
 8000ffa:	b913      	cbnz	r3, 8001002 <__sfp+0x12>
 8000ffc:	4630      	mov	r0, r6
 8000ffe:	f7ff ffc7 	bl	8000f90 <__sinit>
 8001002:	3648      	adds	r6, #72	; 0x48
 8001004:	68b4      	ldr	r4, [r6, #8]
 8001006:	6873      	ldr	r3, [r6, #4]
 8001008:	3b01      	subs	r3, #1
 800100a:	d503      	bpl.n	8001014 <__sfp+0x24>
 800100c:	6833      	ldr	r3, [r6, #0]
 800100e:	b133      	cbz	r3, 800101e <__sfp+0x2e>
 8001010:	6836      	ldr	r6, [r6, #0]
 8001012:	e7f7      	b.n	8001004 <__sfp+0x14>
 8001014:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001018:	b16d      	cbz	r5, 8001036 <__sfp+0x46>
 800101a:	3468      	adds	r4, #104	; 0x68
 800101c:	e7f4      	b.n	8001008 <__sfp+0x18>
 800101e:	2104      	movs	r1, #4
 8001020:	4638      	mov	r0, r7
 8001022:	f7ff ff9f 	bl	8000f64 <__sfmoreglue>
 8001026:	6030      	str	r0, [r6, #0]
 8001028:	2800      	cmp	r0, #0
 800102a:	d1f1      	bne.n	8001010 <__sfp+0x20>
 800102c:	230c      	movs	r3, #12
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	4604      	mov	r4, r0
 8001032:	4620      	mov	r0, r4
 8001034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800103a:	81e3      	strh	r3, [r4, #14]
 800103c:	2301      	movs	r3, #1
 800103e:	81a3      	strh	r3, [r4, #12]
 8001040:	6665      	str	r5, [r4, #100]	; 0x64
 8001042:	6025      	str	r5, [r4, #0]
 8001044:	60a5      	str	r5, [r4, #8]
 8001046:	6065      	str	r5, [r4, #4]
 8001048:	6125      	str	r5, [r4, #16]
 800104a:	6165      	str	r5, [r4, #20]
 800104c:	61a5      	str	r5, [r4, #24]
 800104e:	2208      	movs	r2, #8
 8001050:	4629      	mov	r1, r5
 8001052:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001056:	f000 f851 	bl	80010fc <memset>
 800105a:	6365      	str	r5, [r4, #52]	; 0x34
 800105c:	63a5      	str	r5, [r4, #56]	; 0x38
 800105e:	64a5      	str	r5, [r4, #72]	; 0x48
 8001060:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001062:	e7e6      	b.n	8001032 <__sfp+0x42>
 8001064:	0800141c 	.word	0x0800141c

08001068 <_fwalk_reent>:
 8001068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800106c:	4680      	mov	r8, r0
 800106e:	4689      	mov	r9, r1
 8001070:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001074:	2600      	movs	r6, #0
 8001076:	b914      	cbnz	r4, 800107e <_fwalk_reent+0x16>
 8001078:	4630      	mov	r0, r6
 800107a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800107e:	68a5      	ldr	r5, [r4, #8]
 8001080:	6867      	ldr	r7, [r4, #4]
 8001082:	3f01      	subs	r7, #1
 8001084:	d501      	bpl.n	800108a <_fwalk_reent+0x22>
 8001086:	6824      	ldr	r4, [r4, #0]
 8001088:	e7f5      	b.n	8001076 <_fwalk_reent+0xe>
 800108a:	89ab      	ldrh	r3, [r5, #12]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d907      	bls.n	80010a0 <_fwalk_reent+0x38>
 8001090:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001094:	3301      	adds	r3, #1
 8001096:	d003      	beq.n	80010a0 <_fwalk_reent+0x38>
 8001098:	4629      	mov	r1, r5
 800109a:	4640      	mov	r0, r8
 800109c:	47c8      	blx	r9
 800109e:	4306      	orrs	r6, r0
 80010a0:	3568      	adds	r5, #104	; 0x68
 80010a2:	e7ee      	b.n	8001082 <_fwalk_reent+0x1a>

080010a4 <__swhatbuf_r>:
 80010a4:	b570      	push	{r4, r5, r6, lr}
 80010a6:	460e      	mov	r6, r1
 80010a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010ac:	2900      	cmp	r1, #0
 80010ae:	b090      	sub	sp, #64	; 0x40
 80010b0:	4614      	mov	r4, r2
 80010b2:	461d      	mov	r5, r3
 80010b4:	da07      	bge.n	80010c6 <__swhatbuf_r+0x22>
 80010b6:	2300      	movs	r3, #0
 80010b8:	602b      	str	r3, [r5, #0]
 80010ba:	89b3      	ldrh	r3, [r6, #12]
 80010bc:	061a      	lsls	r2, r3, #24
 80010be:	d410      	bmi.n	80010e2 <__swhatbuf_r+0x3e>
 80010c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c4:	e00e      	b.n	80010e4 <__swhatbuf_r+0x40>
 80010c6:	aa01      	add	r2, sp, #4
 80010c8:	f000 f942 	bl	8001350 <_fstat_r>
 80010cc:	2800      	cmp	r0, #0
 80010ce:	dbf2      	blt.n	80010b6 <__swhatbuf_r+0x12>
 80010d0:	9a02      	ldr	r2, [sp, #8]
 80010d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80010d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80010da:	425a      	negs	r2, r3
 80010dc:	415a      	adcs	r2, r3
 80010de:	602a      	str	r2, [r5, #0]
 80010e0:	e7ee      	b.n	80010c0 <__swhatbuf_r+0x1c>
 80010e2:	2340      	movs	r3, #64	; 0x40
 80010e4:	2000      	movs	r0, #0
 80010e6:	6023      	str	r3, [r4, #0]
 80010e8:	b010      	add	sp, #64	; 0x40
 80010ea:	bd70      	pop	{r4, r5, r6, pc}

080010ec <malloc>:
 80010ec:	4b02      	ldr	r3, [pc, #8]	; (80010f8 <malloc+0xc>)
 80010ee:	4601      	mov	r1, r0
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	f000 b859 	b.w	80011a8 <_malloc_r>
 80010f6:	bf00      	nop
 80010f8:	20000004 	.word	0x20000004

080010fc <memset>:
 80010fc:	4402      	add	r2, r0
 80010fe:	4603      	mov	r3, r0
 8001100:	4293      	cmp	r3, r2
 8001102:	d100      	bne.n	8001106 <memset+0xa>
 8001104:	4770      	bx	lr
 8001106:	f803 1b01 	strb.w	r1, [r3], #1
 800110a:	e7f9      	b.n	8001100 <memset+0x4>

0800110c <_free_r>:
 800110c:	b538      	push	{r3, r4, r5, lr}
 800110e:	4605      	mov	r5, r0
 8001110:	2900      	cmp	r1, #0
 8001112:	d045      	beq.n	80011a0 <_free_r+0x94>
 8001114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001118:	1f0c      	subs	r4, r1, #4
 800111a:	2b00      	cmp	r3, #0
 800111c:	bfb8      	it	lt
 800111e:	18e4      	addlt	r4, r4, r3
 8001120:	f000 f93a 	bl	8001398 <__malloc_lock>
 8001124:	4a1f      	ldr	r2, [pc, #124]	; (80011a4 <_free_r+0x98>)
 8001126:	6813      	ldr	r3, [r2, #0]
 8001128:	4610      	mov	r0, r2
 800112a:	b933      	cbnz	r3, 800113a <_free_r+0x2e>
 800112c:	6063      	str	r3, [r4, #4]
 800112e:	6014      	str	r4, [r2, #0]
 8001130:	4628      	mov	r0, r5
 8001132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001136:	f000 b930 	b.w	800139a <__malloc_unlock>
 800113a:	42a3      	cmp	r3, r4
 800113c:	d90c      	bls.n	8001158 <_free_r+0x4c>
 800113e:	6821      	ldr	r1, [r4, #0]
 8001140:	1862      	adds	r2, r4, r1
 8001142:	4293      	cmp	r3, r2
 8001144:	bf04      	itt	eq
 8001146:	681a      	ldreq	r2, [r3, #0]
 8001148:	685b      	ldreq	r3, [r3, #4]
 800114a:	6063      	str	r3, [r4, #4]
 800114c:	bf04      	itt	eq
 800114e:	1852      	addeq	r2, r2, r1
 8001150:	6022      	streq	r2, [r4, #0]
 8001152:	6004      	str	r4, [r0, #0]
 8001154:	e7ec      	b.n	8001130 <_free_r+0x24>
 8001156:	4613      	mov	r3, r2
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	b10a      	cbz	r2, 8001160 <_free_r+0x54>
 800115c:	42a2      	cmp	r2, r4
 800115e:	d9fa      	bls.n	8001156 <_free_r+0x4a>
 8001160:	6819      	ldr	r1, [r3, #0]
 8001162:	1858      	adds	r0, r3, r1
 8001164:	42a0      	cmp	r0, r4
 8001166:	d10b      	bne.n	8001180 <_free_r+0x74>
 8001168:	6820      	ldr	r0, [r4, #0]
 800116a:	4401      	add	r1, r0
 800116c:	1858      	adds	r0, r3, r1
 800116e:	4282      	cmp	r2, r0
 8001170:	6019      	str	r1, [r3, #0]
 8001172:	d1dd      	bne.n	8001130 <_free_r+0x24>
 8001174:	6810      	ldr	r0, [r2, #0]
 8001176:	6852      	ldr	r2, [r2, #4]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	4401      	add	r1, r0
 800117c:	6019      	str	r1, [r3, #0]
 800117e:	e7d7      	b.n	8001130 <_free_r+0x24>
 8001180:	d902      	bls.n	8001188 <_free_r+0x7c>
 8001182:	230c      	movs	r3, #12
 8001184:	602b      	str	r3, [r5, #0]
 8001186:	e7d3      	b.n	8001130 <_free_r+0x24>
 8001188:	6820      	ldr	r0, [r4, #0]
 800118a:	1821      	adds	r1, r4, r0
 800118c:	428a      	cmp	r2, r1
 800118e:	bf04      	itt	eq
 8001190:	6811      	ldreq	r1, [r2, #0]
 8001192:	6852      	ldreq	r2, [r2, #4]
 8001194:	6062      	str	r2, [r4, #4]
 8001196:	bf04      	itt	eq
 8001198:	1809      	addeq	r1, r1, r0
 800119a:	6021      	streq	r1, [r4, #0]
 800119c:	605c      	str	r4, [r3, #4]
 800119e:	e7c7      	b.n	8001130 <_free_r+0x24>
 80011a0:	bd38      	pop	{r3, r4, r5, pc}
 80011a2:	bf00      	nop
 80011a4:	2000008c 	.word	0x2000008c

080011a8 <_malloc_r>:
 80011a8:	b570      	push	{r4, r5, r6, lr}
 80011aa:	1ccd      	adds	r5, r1, #3
 80011ac:	f025 0503 	bic.w	r5, r5, #3
 80011b0:	3508      	adds	r5, #8
 80011b2:	2d0c      	cmp	r5, #12
 80011b4:	bf38      	it	cc
 80011b6:	250c      	movcc	r5, #12
 80011b8:	2d00      	cmp	r5, #0
 80011ba:	4606      	mov	r6, r0
 80011bc:	db01      	blt.n	80011c2 <_malloc_r+0x1a>
 80011be:	42a9      	cmp	r1, r5
 80011c0:	d903      	bls.n	80011ca <_malloc_r+0x22>
 80011c2:	230c      	movs	r3, #12
 80011c4:	6033      	str	r3, [r6, #0]
 80011c6:	2000      	movs	r0, #0
 80011c8:	bd70      	pop	{r4, r5, r6, pc}
 80011ca:	f000 f8e5 	bl	8001398 <__malloc_lock>
 80011ce:	4a23      	ldr	r2, [pc, #140]	; (800125c <_malloc_r+0xb4>)
 80011d0:	6814      	ldr	r4, [r2, #0]
 80011d2:	4621      	mov	r1, r4
 80011d4:	b991      	cbnz	r1, 80011fc <_malloc_r+0x54>
 80011d6:	4c22      	ldr	r4, [pc, #136]	; (8001260 <_malloc_r+0xb8>)
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	b91b      	cbnz	r3, 80011e4 <_malloc_r+0x3c>
 80011dc:	4630      	mov	r0, r6
 80011de:	f000 f841 	bl	8001264 <_sbrk_r>
 80011e2:	6020      	str	r0, [r4, #0]
 80011e4:	4629      	mov	r1, r5
 80011e6:	4630      	mov	r0, r6
 80011e8:	f000 f83c 	bl	8001264 <_sbrk_r>
 80011ec:	1c43      	adds	r3, r0, #1
 80011ee:	d126      	bne.n	800123e <_malloc_r+0x96>
 80011f0:	230c      	movs	r3, #12
 80011f2:	6033      	str	r3, [r6, #0]
 80011f4:	4630      	mov	r0, r6
 80011f6:	f000 f8d0 	bl	800139a <__malloc_unlock>
 80011fa:	e7e4      	b.n	80011c6 <_malloc_r+0x1e>
 80011fc:	680b      	ldr	r3, [r1, #0]
 80011fe:	1b5b      	subs	r3, r3, r5
 8001200:	d41a      	bmi.n	8001238 <_malloc_r+0x90>
 8001202:	2b0b      	cmp	r3, #11
 8001204:	d90f      	bls.n	8001226 <_malloc_r+0x7e>
 8001206:	600b      	str	r3, [r1, #0]
 8001208:	50cd      	str	r5, [r1, r3]
 800120a:	18cc      	adds	r4, r1, r3
 800120c:	4630      	mov	r0, r6
 800120e:	f000 f8c4 	bl	800139a <__malloc_unlock>
 8001212:	f104 000b 	add.w	r0, r4, #11
 8001216:	1d23      	adds	r3, r4, #4
 8001218:	f020 0007 	bic.w	r0, r0, #7
 800121c:	1ac3      	subs	r3, r0, r3
 800121e:	d01b      	beq.n	8001258 <_malloc_r+0xb0>
 8001220:	425a      	negs	r2, r3
 8001222:	50e2      	str	r2, [r4, r3]
 8001224:	bd70      	pop	{r4, r5, r6, pc}
 8001226:	428c      	cmp	r4, r1
 8001228:	bf0d      	iteet	eq
 800122a:	6863      	ldreq	r3, [r4, #4]
 800122c:	684b      	ldrne	r3, [r1, #4]
 800122e:	6063      	strne	r3, [r4, #4]
 8001230:	6013      	streq	r3, [r2, #0]
 8001232:	bf18      	it	ne
 8001234:	460c      	movne	r4, r1
 8001236:	e7e9      	b.n	800120c <_malloc_r+0x64>
 8001238:	460c      	mov	r4, r1
 800123a:	6849      	ldr	r1, [r1, #4]
 800123c:	e7ca      	b.n	80011d4 <_malloc_r+0x2c>
 800123e:	1cc4      	adds	r4, r0, #3
 8001240:	f024 0403 	bic.w	r4, r4, #3
 8001244:	42a0      	cmp	r0, r4
 8001246:	d005      	beq.n	8001254 <_malloc_r+0xac>
 8001248:	1a21      	subs	r1, r4, r0
 800124a:	4630      	mov	r0, r6
 800124c:	f000 f80a 	bl	8001264 <_sbrk_r>
 8001250:	3001      	adds	r0, #1
 8001252:	d0cd      	beq.n	80011f0 <_malloc_r+0x48>
 8001254:	6025      	str	r5, [r4, #0]
 8001256:	e7d9      	b.n	800120c <_malloc_r+0x64>
 8001258:	bd70      	pop	{r4, r5, r6, pc}
 800125a:	bf00      	nop
 800125c:	2000008c 	.word	0x2000008c
 8001260:	20000090 	.word	0x20000090

08001264 <_sbrk_r>:
 8001264:	b538      	push	{r3, r4, r5, lr}
 8001266:	4c06      	ldr	r4, [pc, #24]	; (8001280 <_sbrk_r+0x1c>)
 8001268:	2300      	movs	r3, #0
 800126a:	4605      	mov	r5, r0
 800126c:	4608      	mov	r0, r1
 800126e:	6023      	str	r3, [r4, #0]
 8001270:	f7ff fb5e 	bl	8000930 <_sbrk>
 8001274:	1c43      	adds	r3, r0, #1
 8001276:	d102      	bne.n	800127e <_sbrk_r+0x1a>
 8001278:	6823      	ldr	r3, [r4, #0]
 800127a:	b103      	cbz	r3, 800127e <_sbrk_r+0x1a>
 800127c:	602b      	str	r3, [r5, #0]
 800127e:	bd38      	pop	{r3, r4, r5, pc}
 8001280:	20000094 	.word	0x20000094

08001284 <__sread>:
 8001284:	b510      	push	{r4, lr}
 8001286:	460c      	mov	r4, r1
 8001288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800128c:	f000 f886 	bl	800139c <_read_r>
 8001290:	2800      	cmp	r0, #0
 8001292:	bfab      	itete	ge
 8001294:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001296:	89a3      	ldrhlt	r3, [r4, #12]
 8001298:	181b      	addge	r3, r3, r0
 800129a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800129e:	bfac      	ite	ge
 80012a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80012a2:	81a3      	strhlt	r3, [r4, #12]
 80012a4:	bd10      	pop	{r4, pc}

080012a6 <__swrite>:
 80012a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012aa:	461f      	mov	r7, r3
 80012ac:	898b      	ldrh	r3, [r1, #12]
 80012ae:	05db      	lsls	r3, r3, #23
 80012b0:	4605      	mov	r5, r0
 80012b2:	460c      	mov	r4, r1
 80012b4:	4616      	mov	r6, r2
 80012b6:	d505      	bpl.n	80012c4 <__swrite+0x1e>
 80012b8:	2302      	movs	r3, #2
 80012ba:	2200      	movs	r2, #0
 80012bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012c0:	f000 f858 	bl	8001374 <_lseek_r>
 80012c4:	89a3      	ldrh	r3, [r4, #12]
 80012c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012ce:	81a3      	strh	r3, [r4, #12]
 80012d0:	4632      	mov	r2, r6
 80012d2:	463b      	mov	r3, r7
 80012d4:	4628      	mov	r0, r5
 80012d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012da:	f000 b817 	b.w	800130c <_write_r>

080012de <__sseek>:
 80012de:	b510      	push	{r4, lr}
 80012e0:	460c      	mov	r4, r1
 80012e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012e6:	f000 f845 	bl	8001374 <_lseek_r>
 80012ea:	1c43      	adds	r3, r0, #1
 80012ec:	89a3      	ldrh	r3, [r4, #12]
 80012ee:	bf15      	itete	ne
 80012f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80012f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80012f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80012fa:	81a3      	strheq	r3, [r4, #12]
 80012fc:	bf18      	it	ne
 80012fe:	81a3      	strhne	r3, [r4, #12]
 8001300:	bd10      	pop	{r4, pc}

08001302 <__sclose>:
 8001302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001306:	f000 b813 	b.w	8001330 <_close_r>
	...

0800130c <_write_r>:
 800130c:	b538      	push	{r3, r4, r5, lr}
 800130e:	4c07      	ldr	r4, [pc, #28]	; (800132c <_write_r+0x20>)
 8001310:	4605      	mov	r5, r0
 8001312:	4608      	mov	r0, r1
 8001314:	4611      	mov	r1, r2
 8001316:	2200      	movs	r2, #0
 8001318:	6022      	str	r2, [r4, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	f7ff fb60 	bl	80009e0 <_write>
 8001320:	1c43      	adds	r3, r0, #1
 8001322:	d102      	bne.n	800132a <_write_r+0x1e>
 8001324:	6823      	ldr	r3, [r4, #0]
 8001326:	b103      	cbz	r3, 800132a <_write_r+0x1e>
 8001328:	602b      	str	r3, [r5, #0]
 800132a:	bd38      	pop	{r3, r4, r5, pc}
 800132c:	20000094 	.word	0x20000094

08001330 <_close_r>:
 8001330:	b538      	push	{r3, r4, r5, lr}
 8001332:	4c06      	ldr	r4, [pc, #24]	; (800134c <_close_r+0x1c>)
 8001334:	2300      	movs	r3, #0
 8001336:	4605      	mov	r5, r0
 8001338:	4608      	mov	r0, r1
 800133a:	6023      	str	r3, [r4, #0]
 800133c:	f7ff fb18 	bl	8000970 <_close>
 8001340:	1c43      	adds	r3, r0, #1
 8001342:	d102      	bne.n	800134a <_close_r+0x1a>
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	b103      	cbz	r3, 800134a <_close_r+0x1a>
 8001348:	602b      	str	r3, [r5, #0]
 800134a:	bd38      	pop	{r3, r4, r5, pc}
 800134c:	20000094 	.word	0x20000094

08001350 <_fstat_r>:
 8001350:	b538      	push	{r3, r4, r5, lr}
 8001352:	4c07      	ldr	r4, [pc, #28]	; (8001370 <_fstat_r+0x20>)
 8001354:	2300      	movs	r3, #0
 8001356:	4605      	mov	r5, r0
 8001358:	4608      	mov	r0, r1
 800135a:	4611      	mov	r1, r2
 800135c:	6023      	str	r3, [r4, #0]
 800135e:	f7ff fb19 	bl	8000994 <_fstat>
 8001362:	1c43      	adds	r3, r0, #1
 8001364:	d102      	bne.n	800136c <_fstat_r+0x1c>
 8001366:	6823      	ldr	r3, [r4, #0]
 8001368:	b103      	cbz	r3, 800136c <_fstat_r+0x1c>
 800136a:	602b      	str	r3, [r5, #0]
 800136c:	bd38      	pop	{r3, r4, r5, pc}
 800136e:	bf00      	nop
 8001370:	20000094 	.word	0x20000094

08001374 <_lseek_r>:
 8001374:	b538      	push	{r3, r4, r5, lr}
 8001376:	4c07      	ldr	r4, [pc, #28]	; (8001394 <_lseek_r+0x20>)
 8001378:	4605      	mov	r5, r0
 800137a:	4608      	mov	r0, r1
 800137c:	4611      	mov	r1, r2
 800137e:	2200      	movs	r2, #0
 8001380:	6022      	str	r2, [r4, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	f7ff fb18 	bl	80009b8 <_lseek>
 8001388:	1c43      	adds	r3, r0, #1
 800138a:	d102      	bne.n	8001392 <_lseek_r+0x1e>
 800138c:	6823      	ldr	r3, [r4, #0]
 800138e:	b103      	cbz	r3, 8001392 <_lseek_r+0x1e>
 8001390:	602b      	str	r3, [r5, #0]
 8001392:	bd38      	pop	{r3, r4, r5, pc}
 8001394:	20000094 	.word	0x20000094

08001398 <__malloc_lock>:
 8001398:	4770      	bx	lr

0800139a <__malloc_unlock>:
 800139a:	4770      	bx	lr

0800139c <_read_r>:
 800139c:	b538      	push	{r3, r4, r5, lr}
 800139e:	4c07      	ldr	r4, [pc, #28]	; (80013bc <_read_r+0x20>)
 80013a0:	4605      	mov	r5, r0
 80013a2:	4608      	mov	r0, r1
 80013a4:	4611      	mov	r1, r2
 80013a6:	2200      	movs	r2, #0
 80013a8:	6022      	str	r2, [r4, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	f7ff fb3a 	bl	8000a24 <_read>
 80013b0:	1c43      	adds	r3, r0, #1
 80013b2:	d102      	bne.n	80013ba <_read_r+0x1e>
 80013b4:	6823      	ldr	r3, [r4, #0]
 80013b6:	b103      	cbz	r3, 80013ba <_read_r+0x1e>
 80013b8:	602b      	str	r3, [r5, #0]
 80013ba:	bd38      	pop	{r3, r4, r5, pc}
 80013bc:	20000094 	.word	0x20000094

080013c0 <_init>:
 80013c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c2:	bf00      	nop
 80013c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013c6:	bc08      	pop	{r3}
 80013c8:	469e      	mov	lr, r3
 80013ca:	4770      	bx	lr

080013cc <_fini>:
 80013cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ce:	bf00      	nop
 80013d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013d2:	bc08      	pop	{r3}
 80013d4:	469e      	mov	lr, r3
 80013d6:	4770      	bx	lr

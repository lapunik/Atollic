
Cviceni7_AD_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a50  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08001be8  08001be8  00011be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001c88  08001c88  00011c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001c8c  08001c8c  00011c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08001c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000078  20000068  08001cf8  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200000e0  08001cf8  000200e0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   000049eb  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000c47  00000000  00000000  00024a83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000268  00000000  00000000  000256d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00025938  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000110f  00000000  00000000  00025b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000012a5  00000000  00000000  00026c47  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00027eec  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000e08  00000000  00000000  00027f68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001bd0 	.word	0x08001bd0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	08001bd0 	.word	0x08001bd0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80001f2:	4909      	ldr	r1, [pc, #36]	; (8000218 <NVIC_EnableIRQ+0x30>)
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	095b      	lsrs	r3, r3, #5
 80001fa:	79fa      	ldrb	r2, [r7, #7]
 80001fc:	f002 021f 	and.w	r2, r2, #31
 8000200:	2001      	movs	r0, #1
 8000202:	fa00 f202 	lsl.w	r2, r0, r2
 8000206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800020a:	bf00      	nop
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	e000e100 	.word	0xe000e100

0800021c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	6039      	str	r1, [r7, #0]
 8000226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022c:	2b00      	cmp	r3, #0
 800022e:	da0b      	bge.n	8000248 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000230:	490d      	ldr	r1, [pc, #52]	; (8000268 <NVIC_SetPriority+0x4c>)
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	f003 030f 	and.w	r3, r3, #15
 8000238:	3b04      	subs	r3, #4
 800023a:	683a      	ldr	r2, [r7, #0]
 800023c:	b2d2      	uxtb	r2, r2
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000246:	e009      	b.n	800025c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	4908      	ldr	r1, [pc, #32]	; (800026c <NVIC_SetPriority+0x50>)
 800024a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024e:	683a      	ldr	r2, [r7, #0]
 8000250:	b2d2      	uxtb	r2, r2
 8000252:	0112      	lsls	r2, r2, #4
 8000254:	b2d2      	uxtb	r2, r2
 8000256:	440b      	add	r3, r1
 8000258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr
 8000268:	e000ed00 	.word	0xe000ed00
 800026c:	e000e100 	.word	0xe000e100

08000270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3b01      	subs	r3, #1
 800027c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000280:	d301      	bcc.n	8000286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000282:	2301      	movs	r3, #1
 8000284:	e00f      	b.n	80002a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000286:	4a0a      	ldr	r2, [pc, #40]	; (80002b0 <SysTick_Config+0x40>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	3b01      	subs	r3, #1
 800028c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800028e:	210f      	movs	r1, #15
 8000290:	f04f 30ff 	mov.w	r0, #4294967295
 8000294:	f7ff ffc2 	bl	800021c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <SysTick_Config+0x40>)
 800029a:	2200      	movs	r2, #0
 800029c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029e:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <SysTick_Config+0x40>)
 80002a0:	2207      	movs	r2, #7
 80002a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80002a4:	2300      	movs	r3, #0
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	e000e010 	.word	0xe000e010

080002b4 <SysTick_Handler>:

uint32_t arrayAD[ARRAY_SIZE];
uint32_t prumer_arrayAD = 0;
uint8_t position = 0;

void SysTick_Handler(void) {
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
	ticks++;
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <SysTick_Handler+0x18>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	3301      	adds	r3, #1
 80002be:	4a03      	ldr	r2, [pc, #12]	; (80002cc <SysTick_Handler+0x18>)
 80002c0:	6013      	str	r3, [r2, #0]
}
 80002c2:	bf00      	nop
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	20000084 	.word	0x20000084

080002d0 <ADC_IRQHandler>:

void ADC_IRQHandler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
    ADC1 -> SR &= ~ADC_SR_JEOC; // shodím pøíznak JEOC
 80002d6:	4a22      	ldr	r2, [pc, #136]	; (8000360 <ADC_IRQHandler+0x90>)
 80002d8:	4b21      	ldr	r3, [pc, #132]	; (8000360 <ADC_IRQHandler+0x90>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f023 0304 	bic.w	r3, r3, #4
 80002e0:	6013      	str	r3, [r2, #0]

	arrayAD[position] = ADC1->JDR1;
 80002e2:	4b20      	ldr	r3, [pc, #128]	; (8000364 <ADC_IRQHandler+0x94>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	4619      	mov	r1, r3
 80002e8:	4b1d      	ldr	r3, [pc, #116]	; (8000360 <ADC_IRQHandler+0x90>)
 80002ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002ec:	4a1e      	ldr	r2, [pc, #120]	; (8000368 <ADC_IRQHandler+0x98>)
 80002ee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	position++;
 80002f2:	4b1c      	ldr	r3, [pc, #112]	; (8000364 <ADC_IRQHandler+0x94>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	3301      	adds	r3, #1
 80002f8:	b2da      	uxtb	r2, r3
 80002fa:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <ADC_IRQHandler+0x94>)
 80002fc:	701a      	strb	r2, [r3, #0]
	arrayAD[position] = ADC1->JDR2;
 80002fe:	4b19      	ldr	r3, [pc, #100]	; (8000364 <ADC_IRQHandler+0x94>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	4619      	mov	r1, r3
 8000304:	4b16      	ldr	r3, [pc, #88]	; (8000360 <ADC_IRQHandler+0x90>)
 8000306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000308:	4a17      	ldr	r2, [pc, #92]	; (8000368 <ADC_IRQHandler+0x98>)
 800030a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	position++;
 800030e:	4b15      	ldr	r3, [pc, #84]	; (8000364 <ADC_IRQHandler+0x94>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	3301      	adds	r3, #1
 8000314:	b2da      	uxtb	r2, r3
 8000316:	4b13      	ldr	r3, [pc, #76]	; (8000364 <ADC_IRQHandler+0x94>)
 8000318:	701a      	strb	r2, [r3, #0]

	if(position>ARRAY_SIZE-1)
 800031a:	4b12      	ldr	r3, [pc, #72]	; (8000364 <ADC_IRQHandler+0x94>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b0f      	cmp	r3, #15
 8000320:	d902      	bls.n	8000328 <ADC_IRQHandler+0x58>
	{
		position = 0;
 8000322:	4b10      	ldr	r3, [pc, #64]	; (8000364 <ADC_IRQHandler+0x94>)
 8000324:	2200      	movs	r2, #0
 8000326:	701a      	strb	r2, [r3, #0]
	}

	uint32_t soucet = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	607b      	str	r3, [r7, #4]

	for(int i = 0;i<ARRAY_SIZE;i++)
 800032c:	2300      	movs	r3, #0
 800032e:	603b      	str	r3, [r7, #0]
 8000330:	e009      	b.n	8000346 <ADC_IRQHandler+0x76>
	{

       soucet += arrayAD[i];
 8000332:	4a0d      	ldr	r2, [pc, #52]	; (8000368 <ADC_IRQHandler+0x98>)
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	4413      	add	r3, r2
 800033e:	607b      	str	r3, [r7, #4]
	for(int i = 0;i<ARRAY_SIZE;i++)
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	3301      	adds	r3, #1
 8000344:	603b      	str	r3, [r7, #0]
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	2b0f      	cmp	r3, #15
 800034a:	ddf2      	ble.n	8000332 <ADC_IRQHandler+0x62>

	}

	prumer_arrayAD = soucet/ARRAY_SIZE;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	091b      	lsrs	r3, r3, #4
 8000350:	4a06      	ldr	r2, [pc, #24]	; (800036c <ADC_IRQHandler+0x9c>)
 8000352:	6013      	str	r3, [r2, #0]

}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	40012000 	.word	0x40012000
 8000364:	2000008c 	.word	0x2000008c
 8000368:	2000009c 	.word	0x2000009c
 800036c:	20000088 	.word	0x20000088

08000370 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF; // shození pøíznaku TIM3
 8000374:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000378:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800037c:	691b      	ldr	r3, [r3, #16]
 800037e:	f023 0301 	bic.w	r3, r3, #1
 8000382:	6113      	str	r3, [r2, #16]

	ADC1->CR2 |= ADC_CR2_JSWSTART;// sputìní pøevodu
 8000384:	4a05      	ldr	r2, [pc, #20]	; (800039c <TIM2_IRQHandler+0x2c>)
 8000386:	4b05      	ldr	r3, [pc, #20]	; (800039c <TIM2_IRQHandler+0x2c>)
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800038e:	6093      	str	r3, [r2, #8]
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	40012000 	.word	0x40012000

080003a0 <main>:
int main(void) {
 80003a0:	b590      	push	{r4, r7, lr}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0

	SystemCoreClockUpdate();
 80003a6:	f000 fdd1 	bl	8000f4c <SystemCoreClockUpdate>

	SetClock100MHz(clockSourceHSE);
 80003aa:	2001      	movs	r0, #1
 80003ac:	f000 fbe0 	bl	8000b70 <SetClock100MHz>
	SysTick_Config(100000000 / 1000);
 80003b0:	485d      	ldr	r0, [pc, #372]	; (8000528 <main+0x188>)
 80003b2:	f7ff ff5d 	bl	8000270 <SysTick_Config>
	Usart2Initialization(38400);
 80003b6:	f44f 4016 	mov.w	r0, #38400	; 0x9600
 80003ba:	f000 f8f3 	bl	80005a4 <Usart2Initialization>

	NVIC_EnableIRQ(ADC_IRQn); // povolím handler od ADC
 80003be:	2012      	movs	r0, #18
 80003c0:	f7ff ff12 	bl	80001e8 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(TIM2_IRQn); // povolím handler od TIM2
 80003c4:	201c      	movs	r0, #28
 80003c6:	f7ff ff0f 	bl	80001e8 <NVIC_EnableIRQ>

	///////////////// TIM2 ///////////////////////////////////////////////////////////////////////////////
	if (!(RCC->APB1ENR & RCC_APB1ENR_TIM2EN))
 80003ca:	4b58      	ldr	r3, [pc, #352]	; (800052c <main+0x18c>)
 80003cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d111      	bne.n	80003fa <main+0x5a>
	{
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80003d6:	4a55      	ldr	r2, [pc, #340]	; (800052c <main+0x18c>)
 80003d8:	4b54      	ldr	r3, [pc, #336]	; (800052c <main+0x18c>)
 80003da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6413      	str	r3, [r2, #64]	; 0x40
		RCC->APB1RSTR |= RCC_APB1RSTR_TIM2RST;
 80003e2:	4a52      	ldr	r2, [pc, #328]	; (800052c <main+0x18c>)
 80003e4:	4b51      	ldr	r3, [pc, #324]	; (800052c <main+0x18c>)
 80003e6:	6a1b      	ldr	r3, [r3, #32]
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6213      	str	r3, [r2, #32]
		RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM2RST;
 80003ee:	4a4f      	ldr	r2, [pc, #316]	; (800052c <main+0x18c>)
 80003f0:	4b4e      	ldr	r3, [pc, #312]	; (800052c <main+0x18c>)
 80003f2:	6a1b      	ldr	r3, [r3, #32]
 80003f4:	f023 0301 	bic.w	r3, r3, #1
 80003f8:	6213      	str	r3, [r2, #32]
	}

	TIM2->CR1 = TIM_CR1_DIR; // DIR = 1 = dekrementace
 80003fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003fe:	2210      	movs	r2, #16
 8000400:	601a      	str	r2, [r3, #0]
	TIM2->CNT &= ~ TIM_CNT_CNT; // pro jistotu nulovani CNT
 8000402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800040a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800040c:	0c1b      	lsrs	r3, r3, #16
 800040e:	041b      	lsls	r3, r3, #16
 8000410:	6253      	str	r3, [r2, #36]	; 0x24
	TIM2->PSC = GetBusClock(timersClockAPB1)/ 1000000-1; // 1us
 8000412:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000416:	2003      	movs	r0, #3
 8000418:	f000 fb2a 	bl	8000a70 <GetBusClock>
 800041c:	4602      	mov	r2, r0
 800041e:	4b44      	ldr	r3, [pc, #272]	; (8000530 <main+0x190>)
 8000420:	fba3 2302 	umull	r2, r3, r3, r2
 8000424:	0c9b      	lsrs	r3, r3, #18
 8000426:	3b01      	subs	r3, #1
 8000428:	62a3      	str	r3, [r4, #40]	; 0x28
	TIM2->ARR = 1000 - 1; // 1ms
 800042a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800042e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000432:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->DIER = TIM_DIER_UIE; // Nastavení generování pøeruení ven, smìr do jádra (jednièka)
 8000434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000438:	2201      	movs	r2, #1
 800043a:	60da      	str	r2, [r3, #12]
	TIM2->CR1 |= TIM_CR1_CEN;
 800043c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000440:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f043 0301 	orr.w	r3, r3, #1
 800044a:	6013      	str	r3, [r2, #0]

	///////////////// TIM2 ///////////////////////////////////////////////////////////////////////////////
	///////////////// AD /////////////////////////////////////////////////////////////////////////////////
	GPIOConfigurePin(POT_LEFT, ioPortAnalog);
 800044c:	2202      	movs	r2, #2
 800044e:	2100      	movs	r1, #0
 8000450:	4838      	ldr	r0, [pc, #224]	; (8000534 <main+0x194>)
 8000452:	f000 f953 	bl	80006fc <GPIOConfigurePin>
	GPIOConfigurePin(POT_RIGHT, ioPortAnalog);
 8000456:	2202      	movs	r2, #2
 8000458:	2101      	movs	r1, #1
 800045a:	4836      	ldr	r0, [pc, #216]	; (8000534 <main+0x194>)
 800045c:	f000 f94e 	bl	80006fc <GPIOConfigurePin>

	if (!(RCC->APB2ENR & RCC_APB2ENR_ADC1EN)) {
 8000460:	4b32      	ldr	r3, [pc, #200]	; (800052c <main+0x18c>)
 8000462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000468:	2b00      	cmp	r3, #0
 800046a:	d111      	bne.n	8000490 <main+0xf0>
		RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800046c:	4a2f      	ldr	r2, [pc, #188]	; (800052c <main+0x18c>)
 800046e:	4b2f      	ldr	r3, [pc, #188]	; (800052c <main+0x18c>)
 8000470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000476:	6453      	str	r3, [r2, #68]	; 0x44
		RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST; // ADCRST je reset bit pro vechny ADC
 8000478:	4a2c      	ldr	r2, [pc, #176]	; (800052c <main+0x18c>)
 800047a:	4b2c      	ldr	r3, [pc, #176]	; (800052c <main+0x18c>)
 800047c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800047e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000482:	6253      	str	r3, [r2, #36]	; 0x24
		RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST; //
 8000484:	4a29      	ldr	r2, [pc, #164]	; (800052c <main+0x18c>)
 8000486:	4b29      	ldr	r3, [pc, #164]	; (800052c <main+0x18c>)
 8000488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800048a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800048e:	6253      	str	r3, [r2, #36]	; 0x24
	}

	ADC1->CR1 = 0 | ADC_CR1_SCAN; // povolení práce s SQR kanály
 8000490:	4b29      	ldr	r3, [pc, #164]	; (8000538 <main+0x198>)
 8000492:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000496:	605a      	str	r2, [r3, #4]
	ADC1->CR1 |= ADC_CR1_JEOCIE;
 8000498:	4a27      	ldr	r2, [pc, #156]	; (8000538 <main+0x198>)
 800049a:	4b27      	ldr	r3, [pc, #156]	; (8000538 <main+0x198>)
 800049c:	685b      	ldr	r3, [r3, #4]
 800049e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004a2:	6053      	str	r3, [r2, #4]
	ADC1->CR2 = 0; // ALIGN = 0 (zarovnání vpravo)
 80004a4:	4b24      	ldr	r3, [pc, #144]	; (8000538 <main+0x198>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
	ADC1->SMPR1 = 0; // urèení doby pøevodu, chceme pouze pro kanál 0 take SMPR2
 80004aa:	4b23      	ldr	r3, [pc, #140]	; (8000538 <main+0x198>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	60da      	str	r2, [r3, #12]
	ADC1->SMPR2 = ADC_SMPR2_SMP0_1; // 010, pro kanál nula = 28 cyklu
 80004b0:	4b21      	ldr	r3, [pc, #132]	; (8000538 <main+0x198>)
 80004b2:	2202      	movs	r2, #2
 80004b4:	611a      	str	r2, [r3, #16]
	// Regular:
	//ADC1->SQR1 = 0; // L = 0000 = 1 konverze
	//ADC1->SQR2 = 0;
	//ADC1->SQR3 = 0; // SQ1 = 00000 = AD kanal 0
    */
	ADC1->JSQR |= ADC_JSQR_JL_0; // dvì konverze
 80004b6:	4a20      	ldr	r2, [pc, #128]	; (8000538 <main+0x198>)
 80004b8:	4b1f      	ldr	r3, [pc, #124]	; (8000538 <main+0x198>)
 80004ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004c0:	6393      	str	r3, [r2, #56]	; 0x38

	ADC1->JSQR &= ~ADC_JSQR_JSQ4; // kanál 0 (musi byt JSQ4 nula)
 80004c2:	4a1d      	ldr	r2, [pc, #116]	; (8000538 <main+0x198>)
 80004c4:	4b1c      	ldr	r3, [pc, #112]	; (8000538 <main+0x198>)
 80004c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004c8:	f423 2378 	bic.w	r3, r3, #1015808	; 0xf8000
 80004cc:	6393      	str	r3, [r2, #56]	; 0x38
	ADC1->JSQR &= ~ADC_JSQR_JSQ3;
 80004ce:	4a1a      	ldr	r2, [pc, #104]	; (8000538 <main+0x198>)
 80004d0:	4b19      	ldr	r3, [pc, #100]	; (8000538 <main+0x198>)
 80004d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80004d8:	6393      	str	r3, [r2, #56]	; 0x38
	ADC1->JSQR |= ADC_JSQR_JSQ3_0; // kanál 1 (musi byt JSQ3 jedna)
 80004da:	4a17      	ldr	r2, [pc, #92]	; (8000538 <main+0x198>)
 80004dc:	4b16      	ldr	r3, [pc, #88]	; (8000538 <main+0x198>)
 80004de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e4:	6393      	str	r3, [r2, #56]	; 0x38


    ADC->CCR |= ADC_CCR_ADCPRE_0; // TSVREFE = 0 (neni teplotní sensor, neni interní reference), ADCPRE = 1 (APB2 / 4)
 80004e6:	4a15      	ldr	r2, [pc, #84]	; (800053c <main+0x19c>)
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <main+0x19c>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004f0:	6053      	str	r3, [r2, #4]
	// CCR spoleèný pro vechny, proto nemá èíslo
	ADC1->CR2 |= ADC_CR2_ADON; // zapnuti AD
 80004f2:	4a11      	ldr	r2, [pc, #68]	; (8000538 <main+0x198>)
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <main+0x198>)
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6093      	str	r3, [r2, #8]
	///////////////// AD /////////////////////////////////////////////////////////////////////////////////

	uint32_t tm = 20;
 80004fe:	2314      	movs	r3, #20
 8000500:	607b      	str	r3, [r7, #4]
	//uint16_t w2 = 0;


	// JEOC SE NESHAZUJE SÁM !!!
    */
	puts("Zacatek aplikace\n");
 8000502:	480f      	ldr	r0, [pc, #60]	; (8000540 <main+0x1a0>)
 8000504:	f000 ff5c 	bl	80013c0 <puts>

	while (1) {

		if (ticks >= tm) {
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <main+0x1a4>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	429a      	cmp	r2, r3
 8000510:	d3fa      	bcc.n	8000508 <main+0x168>
			tm = ticks + 20;
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <main+0x1a4>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	3314      	adds	r3, #20
 8000518:	607b      	str	r3, [r7, #4]

			// ADC1->CR2 |= ADC_CR2_JSWSTART;// sputìní pøevodu, dokud jsem nemìl pøeruení TIm2, bylo potøeba tady, teï u je pase
			//printf("AD kanal 0 (JDR1): %d     AD kanal 1 (JDR2): %d\n", w1, w2);
			 */

			printf("Prumer pole: %d\n", (int)prumer_arrayAD);
 800051a:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <main+0x1a8>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4619      	mov	r1, r3
 8000520:	480a      	ldr	r0, [pc, #40]	; (800054c <main+0x1ac>)
 8000522:	f000 ff03 	bl	800132c <iprintf>
		if (ticks >= tm) {
 8000526:	e7ef      	b.n	8000508 <main+0x168>
 8000528:	000186a0 	.word	0x000186a0
 800052c:	40023800 	.word	0x40023800
 8000530:	431bde83 	.word	0x431bde83
 8000534:	40020000 	.word	0x40020000
 8000538:	40012000 	.word	0x40012000
 800053c:	40012300 	.word	0x40012300
 8000540:	08001be8 	.word	0x08001be8
 8000544:	20000084 	.word	0x20000084
 8000548:	20000088 	.word	0x20000088
 800054c:	08001bfc 	.word	0x08001bfc

08000550 <Usart2Send>:
 */

#include "nucleo_usart.h"

int Usart2Send(char c) //vstup znak ktery se ma odeslat, navratova hodnota int znak ktery se odesilal
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]

	//Flag TXE je nastaven do jednicky pokud je prazdny datovy registr, tudí mùeme zaèíst odesílat data, flag se automaticky nuluje kdy se datový registr zaplní
	// vlastnì øiká èekej dokud nebude volno, chtìlo by to ochranu protoe kdy tuhle funkci zavolám a usart bude vypnutý, nikdy tento jev nenastane a bude to vlastnì while(true)
	while (!(USART2->SR & USART_SR_TXE)) {
 800055a:	bf00      	nop
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <Usart2Send+0x2c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0f9      	beq.n	800055c <Usart2Send+0xc>
		// TXE nemusim nulovat, dela to sam ze zapisu nove data
	}
	USART2->DR = c; // do datového registru vloím znak který chci odeslat
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <Usart2Send+0x2c>)
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	6053      	str	r3, [r2, #4]
	return c;
 800056e:	79fb      	ldrb	r3, [r7, #7]
}
 8000570:	4618      	mov	r0, r3
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40004400 	.word	0x40004400

08000580 <Usart2Recived>:
		Usart2Send(*txt); // na konci je ukoncovaci nula(jakoe prázdný data)
		txt++;
	}
}

int Usart2Recived(void) {
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
	while (!(USART2->SR & USART_SR_RXNE)) {
 8000584:	bf00      	nop
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <Usart2Recived+0x20>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f003 0320 	and.w	r3, r3, #32
 800058e:	2b00      	cmp	r3, #0
 8000590:	d0f9      	beq.n	8000586 <Usart2Recived+0x6>
		// RXNE nemusim nulovat, dela to sam kdy data vyètu, kdy je nevyètu, nulovat se nebude
	}
	return USART2->DR;
 8000592:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <Usart2Recived+0x20>)
 8000594:	685b      	ldr	r3, [r3, #4]
}
 8000596:	4618      	mov	r0, r3
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	40004400 	.word	0x40004400

080005a4 <Usart2Initialization>:
bool IsUsart2Recived(void) {
	return (USART2->SR & USART_SR_RXNE) != 0; // testování jestli jsou nìjaká data k pøeètení
}


void Usart2Initialization(int baudRate){ // baud zatim nefunkcni
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

	if (!(RCC->APB1ENR & RCC_APB1ENR_USART2EN)) // neni povolen USART2
 80005ac:	4b3a      	ldr	r3, [pc, #232]	; (8000698 <Usart2Initialization+0xf4>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d111      	bne.n	80005dc <Usart2Initialization+0x38>
	{
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80005b8:	4a37      	ldr	r2, [pc, #220]	; (8000698 <Usart2Initialization+0xf4>)
 80005ba:	4b37      	ldr	r3, [pc, #220]	; (8000698 <Usart2Initialization+0xf4>)
 80005bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
		RCC->APB1RSTR |= RCC_APB1RSTR_USART2RST;
 80005c4:	4a34      	ldr	r2, [pc, #208]	; (8000698 <Usart2Initialization+0xf4>)
 80005c6:	4b34      	ldr	r3, [pc, #208]	; (8000698 <Usart2Initialization+0xf4>)
 80005c8:	6a1b      	ldr	r3, [r3, #32]
 80005ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ce:	6213      	str	r3, [r2, #32]
		RCC->APB1RSTR &= ~RCC_APB1RSTR_USART2RST;
 80005d0:	4a31      	ldr	r2, [pc, #196]	; (8000698 <Usart2Initialization+0xf4>)
 80005d2:	4b31      	ldr	r3, [pc, #196]	; (8000698 <Usart2Initialization+0xf4>)
 80005d4:	6a1b      	ldr	r3, [r3, #32]
 80005d6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80005da:	6213      	str	r3, [r2, #32]
	}

	// v nucleo schematu lze najit ze USART TX a USART RX (ètení z procesoru, zápis do nìj) je na pinech PA2 a PA3
	GPIOConfigurePin(GPIOA, 2, ioPortAlternatrPushPull); // vysílání procesoru
 80005dc:	2206      	movs	r2, #6
 80005de:	2102      	movs	r1, #2
 80005e0:	482e      	ldr	r0, [pc, #184]	; (800069c <Usart2Initialization+0xf8>)
 80005e2:	f000 f88b 	bl	80006fc <GPIOConfigurePin>
	GPIOConfigureAlternativFunction(GPIOA, 2, 7); // z DS kap. 4 table 9 je vidìt e pro PA2 resp. 3 je USART2 nastaven na alternativní funkci 7
 80005e6:	2207      	movs	r2, #7
 80005e8:	2102      	movs	r1, #2
 80005ea:	482c      	ldr	r0, [pc, #176]	; (800069c <Usart2Initialization+0xf8>)
 80005ec:	f000 fa04 	bl	80009f8 <GPIOConfigureAlternativFunction>
	GPIOConfigurePin(GPIOA, 3, ioPortAlternatrPushPull); // pøíjem procesoru, pro pøíjem vede cesta jinudy take nezáleí jestli push pull nebo openDrain
 80005f0:	2206      	movs	r2, #6
 80005f2:	2103      	movs	r1, #3
 80005f4:	4829      	ldr	r0, [pc, #164]	; (800069c <Usart2Initialization+0xf8>)
 80005f6:	f000 f881 	bl	80006fc <GPIOConfigurePin>
	GPIOConfigureAlternativFunction(GPIOA, 3, 7);
 80005fa:	2207      	movs	r2, #7
 80005fc:	2103      	movs	r1, #3
 80005fe:	4827      	ldr	r0, [pc, #156]	; (800069c <Usart2Initialization+0xf8>)
 8000600:	f000 f9fa 	bl	80009f8 <GPIOConfigureAlternativFunction>
// do teï jsme nastavovali GPIO na USART, ale teï musíme nastavit samotnou periferii USART

	USART2->CR1 = USART_CR1_RE | USART_CR1_TE; // Do konfiguraèního registru jedna "zapnu" recived(pøijmání) a transmit (vysílání)
 8000604:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <Usart2Initialization+0xfc>)
 8000606:	220c      	movs	r2, #12
 8000608:	60da      	str	r2, [r3, #12]
	USART2->CR2 = 0; // nic nenastavujeme zatím
 800060a:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <Usart2Initialization+0xfc>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
	USART2->CR3 = 0; // nic nenastavujeme zatím
 8000610:	4b23      	ldr	r3, [pc, #140]	; (80006a0 <Usart2Initialization+0xfc>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]

	uint sampling = (USART2->CR1 & USART_CR1_OVER8) ? 8 : 16;
 8000616:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <Usart2Initialization+0xfc>)
 8000618:	68db      	ldr	r3, [r3, #12]
 800061a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <Usart2Initialization+0x82>
 8000622:	2308      	movs	r3, #8
 8000624:	e000      	b.n	8000628 <Usart2Initialization+0x84>
 8000626:	2310      	movs	r3, #16
 8000628:	61fb      	str	r3, [r7, #28]
	uint32_t apb1, mant, tmp, frac;
	apb1 = GetBusClock(busClockAPB1);
 800062a:	2001      	movs	r0, #1
 800062c:	f000 fa20 	bl	8000a70 <GetBusClock>
 8000630:	61b8      	str	r0, [r7, #24]
	mant = apb1 * 16 / (sampling * baudRate); // v setinach
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	011a      	lsls	r2, r3, #4
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	69f9      	ldr	r1, [r7, #28]
 800063a:	fb01 f303 	mul.w	r3, r1, r3
 800063e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000642:	617b      	str	r3, [r7, #20]
	tmp = mant / 16;
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	091b      	lsrs	r3, r3, #4
 8000648:	613b      	str	r3, [r7, #16]
	frac = mant -(tmp * 16); // zbyvajici cast 0-99 nutno prevest na 0-15
 800064a:	693b      	ldr	r3, [r7, #16]
 800064c:	011b      	lsls	r3, r3, #4
 800064e:	697a      	ldr	r2, [r7, #20]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	60fb      	str	r3, [r7, #12]
	//frac = ((((frac * sampling) + 50) / 100)); // +50 kvùli zaokrouhlovani oøezem intu
	USART2->BRR = (tmp << 4) | (frac & 0x0f); // mantisa vyssich 12b, zlomek dolni 4b, celkem 16b
 8000654:	4912      	ldr	r1, [pc, #72]	; (80006a0 <Usart2Initialization+0xfc>)
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	011a      	lsls	r2, r3, #4
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	f003 030f 	and.w	r3, r3, #15
 8000660:	4313      	orrs	r3, r2
 8000662:	608b      	str	r3, [r1, #8]

	USART2->CR1 |= USART_CR1_UE; // nakonec povoluji usart
 8000664:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <Usart2Initialization+0xfc>)
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <Usart2Initialization+0xfc>)
 8000668:	68db      	ldr	r3, [r3, #12]
 800066a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800066e:	60d3      	str	r3, [r2, #12]


	setvbuf(stdout,NULL,_IONBF,0); // datový proud, nepoviný parametr, typ(nebufrovat), délka v tomto pøípadì nesmyslný argument, take nula
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <Usart2Initialization+0x100>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	6898      	ldr	r0, [r3, #8]
 8000676:	2300      	movs	r3, #0
 8000678:	2202      	movs	r2, #2
 800067a:	2100      	movs	r1, #0
 800067c:	f000 fef0 	bl	8001460 <setvbuf>
	setvbuf(stdin,NULL,_IONBF,0); // pouívám pro vstupní i výstupní (printf a podobnì vechno pouívá stdint/stdout)
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <Usart2Initialization+0x100>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	6858      	ldr	r0, [r3, #4]
 8000686:	2300      	movs	r3, #0
 8000688:	2202      	movs	r2, #2
 800068a:	2100      	movs	r1, #0
 800068c:	f000 fee8 	bl	8001460 <setvbuf>
}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40020000 	.word	0x40020000
 80006a0:	40004400 	.word	0x40004400
 80006a4:	20000004 	.word	0x20000004

080006a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80006a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80006ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80006ae:	e003      	b.n	80006b8 <LoopCopyDataInit>

080006b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80006b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80006b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80006b6:	3104      	adds	r1, #4

080006b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80006b8:	480b      	ldr	r0, [pc, #44]	; (80006e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80006bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80006be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80006c0:	d3f6      	bcc.n	80006b0 <CopyDataInit>
  ldr  r2, =_sbss
 80006c2:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80006c4:	e002      	b.n	80006cc <LoopFillZerobss>

080006c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80006c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80006c8:	f842 3b04 	str.w	r3, [r2], #4

080006cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80006ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80006d0:	d3f9      	bcc.n	80006c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006d2:	f000 fc05 	bl	8000ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006d6:	f000 fe9f 	bl	8001418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006da:	f7ff fe61 	bl	80003a0 <main>
  bx  lr    
 80006de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80006e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80006e4:	08001c90 	.word	0x08001c90
  ldr  r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80006ec:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 80006f0:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 80006f4:	200000e0 	.word	0x200000e0

080006f8 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006f8:	e7fe      	b.n	80006f8 <BusFault_Handler>
	...

080006fc <GPIOConfigurePin>:
 *      Author: Lapunik
 */
#include "stm_core.h"

bool GPIOConfigurePin(GPIO_TypeDef *gpio,uint32_t bitNumber, ioPortMode mode) // konfigurace GPIO do pøedpøipravených stavù
{
 80006fc:	b480      	push	{r7}
 80006fe:	b087      	sub	sp, #28
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	4613      	mov	r3, r2
 8000708:	71fb      	strb	r3, [r7, #7]

	uint32_t enableMask = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
	uint32_t resetMask = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]

	switch((uint32_t)gpio) // je potøeba zapnout hodiny podle toho který gpio chceme vyuzivat => ulozime bity pro reset a pro zapnuti do masek a pote masku aplikujeme
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	4a99      	ldr	r2, [pc, #612]	; (800097c <GPIOConfigurePin+0x280>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d01d      	beq.n	8000756 <GPIOConfigurePin+0x5a>
 800071a:	4a98      	ldr	r2, [pc, #608]	; (800097c <GPIOConfigurePin+0x280>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d806      	bhi.n	800072e <GPIOConfigurePin+0x32>
 8000720:	4a97      	ldr	r2, [pc, #604]	; (8000980 <GPIOConfigurePin+0x284>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d00d      	beq.n	8000742 <GPIOConfigurePin+0x46>
 8000726:	4a97      	ldr	r2, [pc, #604]	; (8000984 <GPIOConfigurePin+0x288>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d00f      	beq.n	800074c <GPIOConfigurePin+0x50>
 800072c:	e027      	b.n	800077e <GPIOConfigurePin+0x82>
 800072e:	4a96      	ldr	r2, [pc, #600]	; (8000988 <GPIOConfigurePin+0x28c>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d01a      	beq.n	800076a <GPIOConfigurePin+0x6e>
 8000734:	4a95      	ldr	r2, [pc, #596]	; (800098c <GPIOConfigurePin+0x290>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d01c      	beq.n	8000774 <GPIOConfigurePin+0x78>
 800073a:	4a95      	ldr	r2, [pc, #596]	; (8000990 <GPIOConfigurePin+0x294>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d00f      	beq.n	8000760 <GPIOConfigurePin+0x64>
 8000740:	e01d      	b.n	800077e <GPIOConfigurePin+0x82>
	{
	case (uint32_t)GPIOA: // GPIOA je definovana konstanta ve formátu "ukazatel", proto msím pøetypovat na celoèíselnou hodnotu
        enableMask = RCC_AHB1ENR_GPIOAEN;
 8000742:	2301      	movs	r3, #1
 8000744:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOARST;
 8000746:	2301      	movs	r3, #1
 8000748:	613b      	str	r3, [r7, #16]
	break;
 800074a:	e018      	b.n	800077e <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOB:
        enableMask = RCC_AHB1ENR_GPIOBEN;
 800074c:	2302      	movs	r3, #2
 800074e:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOBRST;
 8000750:	2302      	movs	r3, #2
 8000752:	613b      	str	r3, [r7, #16]
	break;
 8000754:	e013      	b.n	800077e <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOC:
        enableMask = RCC_AHB1ENR_GPIOCEN;
 8000756:	2304      	movs	r3, #4
 8000758:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOCRST;
 800075a:	2304      	movs	r3, #4
 800075c:	613b      	str	r3, [r7, #16]
	break;
 800075e:	e00e      	b.n	800077e <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOD:
        enableMask = RCC_AHB1ENR_GPIODEN;
 8000760:	2308      	movs	r3, #8
 8000762:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIODRST;
 8000764:	2308      	movs	r3, #8
 8000766:	613b      	str	r3, [r7, #16]
	break;
 8000768:	e009      	b.n	800077e <GPIOConfigurePin+0x82>

	case (uint32_t)GPIOE:
        enableMask = RCC_AHB1ENR_GPIOEEN;
 800076a:	2310      	movs	r3, #16
 800076c:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOERST;
 800076e:	2310      	movs	r3, #16
 8000770:	613b      	str	r3, [r7, #16]
	break;
 8000772:	e004      	b.n	800077e <GPIOConfigurePin+0x82>
        enableMask = RCC_AHB1ENR_GPIOGEN;
        resetMask = RCC_AHB1RSTR_GPIOGRST;
	break;
#endif
	case (uint32_t)GPIOH:
        enableMask = RCC_AHB1ENR_GPIOHEN;
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	617b      	str	r3, [r7, #20]
        resetMask = RCC_AHB1RSTR_GPIOHRST;
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	613b      	str	r3, [r7, #16]
	break;
 800077c:	bf00      	nop

	}

	if((resetMask == 0)||(enableMask == 0)) // pokud se do masek neuloila ádná hodnota, ukonèi konfiguraci a vrat zpravu false o neúspìchu
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <GPIOConfigurePin+0x8e>
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d101      	bne.n	800078e <GPIOConfigurePin+0x92>
	{
		return false;
 800078a:	2300      	movs	r3, #0
 800078c:	e12d      	b.n	80009ea <GPIOConfigurePin+0x2ee>
	}
	else
	{
		  if(!(RCC -> AHB1ENR & enableMask)) // jestlie nejsou masky prázdné, poui je pro nastavení hodin
 800078e:	4b81      	ldr	r3, [pc, #516]	; (8000994 <GPIOConfigurePin+0x298>)
 8000790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	4013      	ands	r3, r2
 8000796:	2b00      	cmp	r3, #0
 8000798:	d112      	bne.n	80007c0 <GPIOConfigurePin+0xc4>
		  {
		    RCC->AHB1ENR |= enableMask;
 800079a:	497e      	ldr	r1, [pc, #504]	; (8000994 <GPIOConfigurePin+0x298>)
 800079c:	4b7d      	ldr	r3, [pc, #500]	; (8000994 <GPIOConfigurePin+0x298>)
 800079e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	630b      	str	r3, [r1, #48]	; 0x30
		    RCC->AHB1RSTR |= resetMask;
 80007a6:	497b      	ldr	r1, [pc, #492]	; (8000994 <GPIOConfigurePin+0x298>)
 80007a8:	4b7a      	ldr	r3, [pc, #488]	; (8000994 <GPIOConfigurePin+0x298>)
 80007aa:	691a      	ldr	r2, [r3, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	610b      	str	r3, [r1, #16]
		    RCC->AHB1RSTR &= ~resetMask;
 80007b2:	4978      	ldr	r1, [pc, #480]	; (8000994 <GPIOConfigurePin+0x298>)
 80007b4:	4b77      	ldr	r3, [pc, #476]	; (8000994 <GPIOConfigurePin+0x298>)
 80007b6:	691a      	ldr	r2, [r3, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	43db      	mvns	r3, r3
 80007bc:	4013      	ands	r3, r2
 80007be:	610b      	str	r3, [r1, #16]
		  }
	}

gpio -> MODER &= ~(0x03 << (bitNumber*2)); // vynulovani zdvojených bitu pøed nastavováním (kdyby nìkde byla kombinace 10 a já tam ORoval 01 tak vysledna kombinace je 11 misto 01)...u registru kde se nastavuje pouze jeden bit toho nehrozí
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	68ba      	ldr	r2, [r7, #8]
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	2103      	movs	r1, #3
 80007ca:	fa01 f202 	lsl.w	r2, r1, r2
 80007ce:	43d2      	mvns	r2, r2
 80007d0:	401a      	ands	r2, r3
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	601a      	str	r2, [r3, #0]
gpio -> PUPDR &= ~(0x03 << (bitNumber*2));
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	68db      	ldr	r3, [r3, #12]
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	0052      	lsls	r2, r2, #1
 80007de:	2103      	movs	r1, #3
 80007e0:	fa01 f202 	lsl.w	r2, r1, r2
 80007e4:	43d2      	mvns	r2, r2
 80007e6:	401a      	ands	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	60da      	str	r2, [r3, #12]
gpio -> OSPEEDR &= ~(0x03 << (bitNumber*2));
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	2103      	movs	r1, #3
 80007f6:	fa01 f202 	lsl.w	r2, r1, r2
 80007fa:	43d2      	mvns	r2, r2
 80007fc:	401a      	ands	r2, r3
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	609a      	str	r2, [r3, #8]


switch(mode)
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b07      	cmp	r3, #7
 8000806:	f200 80ef 	bhi.w	80009e8 <GPIOConfigurePin+0x2ec>
 800080a:	a201      	add	r2, pc, #4	; (adr r2, 8000810 <GPIOConfigurePin+0x114>)
 800080c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000810:	08000831 	.word	0x08000831
 8000814:	08000883 	.word	0x08000883
 8000818:	080008d3 	.word	0x080008d3
 800081c:	080008e9 	.word	0x080008e9
 8000820:	080008ff 	.word	0x080008ff
 8000824:	08000915 	.word	0x08000915
 8000828:	0800092b 	.word	0x0800092b
 800082c:	08000999 	.word	0x08000999
{
case ioPortOutputPushPull:

	gpio->MODER |= 0x01<<(2*bitNumber); // output
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	68ba      	ldr	r2, [r7, #8]
 8000836:	0052      	lsls	r2, r2, #1
 8000838:	2101      	movs	r1, #1
 800083a:	fa01 f202 	lsl.w	r2, r1, r2
 800083e:	431a      	orrs	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	601a      	str	r2, [r3, #0]
	gpio->OTYPER &= ~(0x01<<bitNumber); // push-pull
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	2101      	movs	r1, #1
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	fa01 f202 	lsl.w	r2, r1, r2
 8000850:	43d2      	mvns	r2, r2
 8000852:	401a      	ands	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	68ba      	ldr	r2, [r7, #8]
 800085e:	0052      	lsls	r2, r2, #1
 8000860:	2103      	movs	r1, #3
 8000862:	fa01 f202 	lsl.w	r2, r1, r2
 8000866:	431a      	orrs	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	2103      	movs	r1, #3
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	fa01 f202 	lsl.w	r2, r1, r2
 8000878:	43d2      	mvns	r2, r2
 800087a:	401a      	ands	r2, r3
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	60da      	str	r2, [r3, #12]
    break;
 8000880:	e0b2      	b.n	80009e8 <GPIOConfigurePin+0x2ec>

case ioPortOutputOpenDrain:

	gpio->MODER |= 0x01<<(2*bitNumber); // output
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	0052      	lsls	r2, r2, #1
 800088a:	2101      	movs	r1, #1
 800088c:	fa01 f202 	lsl.w	r2, r1, r2
 8000890:	431a      	orrs	r2, r3
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	601a      	str	r2, [r3, #0]
	gpio->OTYPER |= (0x01<<bitNumber); // open drain
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	2101      	movs	r1, #1
 800089c:	68ba      	ldr	r2, [r7, #8]
 800089e:	fa01 f202 	lsl.w	r2, r1, r2
 80008a2:	431a      	orrs	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	68ba      	ldr	r2, [r7, #8]
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	2103      	movs	r1, #3
 80008b2:	fa01 f202 	lsl.w	r2, r1, r2
 80008b6:	431a      	orrs	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	2103      	movs	r1, #3
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	fa01 f202 	lsl.w	r2, r1, r2
 80008c8:	43d2      	mvns	r2, r2
 80008ca:	401a      	ands	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	60da      	str	r2, [r3, #12]
    break;
 80008d0:	e08a      	b.n	80009e8 <GPIOConfigurePin+0x2ec>

case ioPortAnalog:

	gpio->MODER |= 0x03<<(2*bitNumber); // analog
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	0052      	lsls	r2, r2, #1
 80008da:	2103      	movs	r1, #3
 80008dc:	fa01 f202 	lsl.w	r2, r1, r2
 80008e0:	431a      	orrs	r2, r3
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	601a      	str	r2, [r3, #0]
    break;
 80008e6:	e07f      	b.n	80009e8 <GPIOConfigurePin+0x2ec>

case ioPortInputFloat:

	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	2103      	movs	r1, #3
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	fa01 f202 	lsl.w	r2, r1, r2
 80008f4:	43d2      	mvns	r2, r2
 80008f6:	401a      	ands	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	60da      	str	r2, [r3, #12]
    break;
 80008fc:	e074      	b.n	80009e8 <GPIOConfigurePin+0x2ec>

case ioPortInputPullUp:

	gpio->PUPDR |= ~(0x01<<bitNumber); // pull up
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	2101      	movs	r1, #1
 8000904:	68ba      	ldr	r2, [r7, #8]
 8000906:	fa01 f202 	lsl.w	r2, r1, r2
 800090a:	43d2      	mvns	r2, r2
 800090c:	431a      	orrs	r2, r3
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	60da      	str	r2, [r3, #12]
    break;
 8000912:	e069      	b.n	80009e8 <GPIOConfigurePin+0x2ec>

case ioPortInputPullDown:

	gpio->PUPDR |= ~(0x02<<bitNumber); // pull down
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	2102      	movs	r1, #2
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	fa01 f202 	lsl.w	r2, r1, r2
 8000920:	43d2      	mvns	r2, r2
 8000922:	431a      	orrs	r2, r3
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	60da      	str	r2, [r3, #12]
    break;
 8000928:	e05e      	b.n	80009e8 <GPIOConfigurePin+0x2ec>

case ioPortAlternatrPushPull:

	gpio->MODER |= 0x02<<(2*bitNumber); // alternate function
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	0052      	lsls	r2, r2, #1
 8000932:	2102      	movs	r1, #2
 8000934:	fa01 f202 	lsl.w	r2, r1, r2
 8000938:	431a      	orrs	r2, r3
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	601a      	str	r2, [r3, #0]
	gpio->OTYPER &= ~(0x01<<bitNumber); // push pull
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	2101      	movs	r1, #1
 8000944:	68ba      	ldr	r2, [r7, #8]
 8000946:	fa01 f202 	lsl.w	r2, r1, r2
 800094a:	43d2      	mvns	r2, r2
 800094c:	401a      	ands	r2, r3
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	0052      	lsls	r2, r2, #1
 800095a:	2103      	movs	r1, #3
 800095c:	fa01 f202 	lsl.w	r2, r1, r2
 8000960:	431a      	orrs	r2, r3
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	2103      	movs	r1, #3
 800096c:	68ba      	ldr	r2, [r7, #8]
 800096e:	fa01 f202 	lsl.w	r2, r1, r2
 8000972:	43d2      	mvns	r2, r2
 8000974:	401a      	ands	r2, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	60da      	str	r2, [r3, #12]
    break;
 800097a:	e035      	b.n	80009e8 <GPIOConfigurePin+0x2ec>
 800097c:	40020800 	.word	0x40020800
 8000980:	40020000 	.word	0x40020000
 8000984:	40020400 	.word	0x40020400
 8000988:	40021000 	.word	0x40021000
 800098c:	40021c00 	.word	0x40021c00
 8000990:	40020c00 	.word	0x40020c00
 8000994:	40023800 	.word	0x40023800

case ioPortAlternatrOpenDrain:

	gpio->MODER |= 0x02<<(2*bitNumber); // alternate function
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	68ba      	ldr	r2, [r7, #8]
 800099e:	0052      	lsls	r2, r2, #1
 80009a0:	2102      	movs	r1, #2
 80009a2:	fa01 f202 	lsl.w	r2, r1, r2
 80009a6:	431a      	orrs	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	601a      	str	r2, [r3, #0]
	gpio->OTYPER |= (0x01<<bitNumber); // open drain
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	2101      	movs	r1, #1
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	fa01 f202 	lsl.w	r2, r1, r2
 80009b8:	431a      	orrs	r2, r3
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	605a      	str	r2, [r3, #4]
	gpio->OSPEEDR |= 0x03<<(2*bitNumber); // height speed
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	0052      	lsls	r2, r2, #1
 80009c6:	2103      	movs	r1, #3
 80009c8:	fa01 f202 	lsl.w	r2, r1, r2
 80009cc:	431a      	orrs	r2, r3
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	609a      	str	r2, [r3, #8]
	gpio->PUPDR &= ~(0x03<<bitNumber); // no pull up, no pull down
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	2103      	movs	r1, #3
 80009d8:	68ba      	ldr	r2, [r7, #8]
 80009da:	fa01 f202 	lsl.w	r2, r1, r2
 80009de:	43d2      	mvns	r2, r2
 80009e0:	401a      	ands	r2, r3
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	60da      	str	r2, [r3, #12]
    break;
 80009e6:	bf00      	nop


}
    return true;
 80009e8:	2301      	movs	r3, #1
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	371c      	adds	r7, #28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <GPIOConfigureAlternativFunction>:

bool GPIOConfigureAlternativFunction(GPIO_TypeDef *gpio,uint32_t bitNumber, uint32_t afValue) // konfigurace GPIO do alternativní funkce
{
 80009f8:	b480      	push	{r7}
 80009fa:	b087      	sub	sp, #28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
	// alternativni funkce se nastavuje pomoci registrù AFR,(to øíká která alternativní funkce je pøipojena), registry jsou dva(AFRL,AFRH) protoe potøebujeme 64bit (je tam estnáct alternativních kanálù na kadej vstup a výstup(to zanemná 4 bity na jeden kanál))
	// v hlavièkových souborech neni AFRL a AFRH ale je tam dvouprvkove uint 32 bitove pole (AFR[0] = AFRL,AFR[1] = AFRH)
	uint8_t afr = (bitNumber < 8) ? 0 : 1 ;
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	2b07      	cmp	r3, #7
 8000a08:	bf8c      	ite	hi
 8000a0a:	2301      	movhi	r3, #1
 8000a0c:	2300      	movls	r3, #0
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	75fb      	strb	r3, [r7, #23]

    gpio->AFR[afr] &= ~(0x0f << (4 * (bitNumber & 0x07))); // vynulujeme 4 bity naseho kanalu, pro jistotu maskuju bit number
 8000a12:	7dfa      	ldrb	r2, [r7, #23]
 8000a14:	7df9      	ldrb	r1, [r7, #23]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3108      	adds	r1, #8
 8000a1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000a1e:	68b9      	ldr	r1, [r7, #8]
 8000a20:	f001 0107 	and.w	r1, r1, #7
 8000a24:	0089      	lsls	r1, r1, #2
 8000a26:	200f      	movs	r0, #15
 8000a28:	fa00 f101 	lsl.w	r1, r0, r1
 8000a2c:	43c9      	mvns	r1, r1
 8000a2e:	4019      	ands	r1, r3
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	3208      	adds	r2, #8
 8000a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    gpio->AFR[afr] |= ((afValue & 0x0f) << (4 * (bitNumber & 0x07))); // nastavim pozadovanou hodnotu alternativni funkce, prom jistotu, kdyby byla afValue vetsi ne 4 bity(nemìla by být) si maskujeme jenom dané 4 bity které chceme pouívat
 8000a38:	7dfa      	ldrb	r2, [r7, #23]
 8000a3a:	7df9      	ldrb	r1, [r7, #23]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	3108      	adds	r1, #8
 8000a40:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f003 000f 	and.w	r0, r3, #15
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	f003 0307 	and.w	r3, r3, #7
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	fa00 f303 	lsl.w	r3, r0, r3
 8000a56:	4319      	orrs	r1, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3208      	adds	r2, #8
 8000a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return true;
 8000a60:	2301      	movs	r3, #1
  //  gpio->AFR[(bitNumber < 8) ? 0 : 1] &= ~(0x0f << (4 * (bitNumber & 0x07))); // vynuluj AF bity
  //  gpio->AFR[(bitNumber < 8) ? 0 : 1] |= ((afValue & 0x0f) << (4 * (bitNumber & 0x07))); // nastav AF bity



}
 8000a62:	4618      	mov	r0, r3
 8000a64:	371c      	adds	r7, #28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
	...

08000a70 <GetBusClock>:

  return timerClock;
}

uint32_t GetBusClock(eBusClocks clk)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  uint32_t bitval = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
  uint32_t divider = 1;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	60fb      	str	r3, [r7, #12]

#if defined(STM32F411xE)  // | defined ...
  switch(clk)
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2b04      	cmp	r3, #4
 8000a86:	d852      	bhi.n	8000b2e <GetBusClock+0xbe>
 8000a88:	a201      	add	r2, pc, #4	; (adr r2, 8000a90 <GetBusClock+0x20>)
 8000a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a8e:	bf00      	nop
 8000a90:	08000aa5 	.word	0x08000aa5
 8000a94:	08000ad3 	.word	0x08000ad3
 8000a98:	08000b01 	.word	0x08000b01
 8000a9c:	08000ad3 	.word	0x08000ad3
 8000aa0:	08000b01 	.word	0x08000b01
  {
    case busClockAHB:
      bitval = (RCC->CFGR & (0x0f << 4)) >> 4;   // HPRE [7:4] to lower 4 bits
 8000aa4:	4b30      	ldr	r3, [pc, #192]	; (8000b68 <GetBusClock+0xf8>)
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	091b      	lsrs	r3, r3, #4
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	60bb      	str	r3, [r7, #8]
      if (bitval & 0x8)           // 1xxx
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d008      	beq.n	8000acc <GetBusClock+0x5c>
        divider = 1 << ((bitval & 0x07) + 1);   // 0 = /2, 1 = /4
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	f003 0307 	and.w	r3, r3, #7
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	60fb      	str	r3, [r7, #12]
      else
        divider = 1;              // 0xxx = not divided
      break;
 8000aca:	e032      	b.n	8000b32 <GetBusClock+0xc2>
        divider = 1;              // 0xxx = not divided
 8000acc:	2301      	movs	r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
      break;
 8000ad0:	e02f      	b.n	8000b32 <GetBusClock+0xc2>
    case busClockAPB1:
    case timersClockAPB1:         // x2
      bitval = (RCC->CFGR & (0x07 << 10)) >> 10; // PPRE1 [12:10] to lower 3 bits
 8000ad2:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <GetBusClock+0xf8>)
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	0a9b      	lsrs	r3, r3, #10
 8000ad8:	f003 0307 	and.w	r3, r3, #7
 8000adc:	60bb      	str	r3, [r7, #8]
      if (bitval & 0x4)           // 1xx
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d008      	beq.n	8000afa <GetBusClock+0x8a>
        divider = 1 << ((bitval & 0x03) + 1);   // 0 = /2, 1 = /4
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	f003 0303 	and.w	r3, r3, #3
 8000aee:	3301      	adds	r3, #1
 8000af0:	2201      	movs	r2, #1
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	60fb      	str	r3, [r7, #12]
      else
        divider = 1;              // 0xx = not divided

      break;
 8000af8:	e01b      	b.n	8000b32 <GetBusClock+0xc2>
        divider = 1;              // 0xx = not divided
 8000afa:	2301      	movs	r3, #1
 8000afc:	60fb      	str	r3, [r7, #12]
      break;
 8000afe:	e018      	b.n	8000b32 <GetBusClock+0xc2>
    case busClockAPB2:
    case timersClockAPB2:         // the same
      bitval = (RCC->CFGR >> 13) & 0x07; // PPRE2 [15:13] to lower 3 bits
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <GetBusClock+0xf8>)
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	0b5b      	lsrs	r3, r3, #13
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60bb      	str	r3, [r7, #8]
      if (bitval & 0x4)           // 1xx
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d008      	beq.n	8000b28 <GetBusClock+0xb8>
        divider = 1 << ((bitval & 0x03) + 1);   // 0 = /2, 1 = /4
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	f003 0303 	and.w	r3, r3, #3
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	2201      	movs	r2, #1
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	60fb      	str	r3, [r7, #12]
      else
        divider = 1;              // 0xx = not divided
      break;
 8000b26:	e004      	b.n	8000b32 <GetBusClock+0xc2>
        divider = 1;              // 0xx = not divided
 8000b28:	2301      	movs	r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
      break;
 8000b2c:	e001      	b.n	8000b32 <GetBusClock+0xc2>
    default:
      return 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e016      	b.n	8000b60 <GetBusClock+0xf0>
  }

  SystemCoreClockUpdate();      // pro jistotu si nastav SystemCoreClock
 8000b32:	f000 fa0b 	bl	8000f4c <SystemCoreClockUpdate>

  if (((clk == timersClockAPB1) || (clk == timersClockAPB1)) && (divider > 1))
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	d002      	beq.n	8000b42 <GetBusClock+0xd2>
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2b03      	cmp	r3, #3
 8000b40:	d109      	bne.n	8000b56 <GetBusClock+0xe6>
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d906      	bls.n	8000b56 <GetBusClock+0xe6>
    return SystemCoreClock / divider * 2;
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <GetBusClock+0xfc>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	e004      	b.n	8000b60 <GetBusClock+0xf0>
  else
    return SystemCoreClock / divider;
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <GetBusClock+0xfc>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	fbb2 f3f3 	udiv	r3, r2, r3
#else
#error Valid controller not set
#endif
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	20000000 	.word	0x20000000

08000b70 <SetClock100MHz>:

bool SetClock100MHz(eClockSources clkSrc)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]

#if HSE_VALUE != 8000000
#error HSE_VALUE must be set to 8M = ext. clock from ST/Link on Nucleo
#endif

  if (clkSrc == clockSourceHSE)
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d11f      	bne.n	8000bc0 <SetClock100MHz+0x50>
  {
    if (!(RCC->CR & RCC_CR_HSEON))      // HSE not running ?
 8000b80:	4b8c      	ldr	r3, [pc, #560]	; (8000db4 <SetClock100MHz+0x244>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d119      	bne.n	8000bc0 <SetClock100MHz+0x50>
    {
      RCC->CR |= RCC_CR_HSEON;          // enable
 8000b8c:	4a89      	ldr	r2, [pc, #548]	; (8000db4 <SetClock100MHz+0x244>)
 8000b8e:	4b89      	ldr	r3, [pc, #548]	; (8000db4 <SetClock100MHz+0x244>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b96:	6013      	str	r3, [r2, #0]

      t = 200;
 8000b98:	23c8      	movs	r3, #200	; 0xc8
 8000b9a:	60fb      	str	r3, [r7, #12]
      while(!(RCC->CR & RCC_CR_HSEON) && t)   // wait to ON
 8000b9c:	e002      	b.n	8000ba4 <SetClock100MHz+0x34>
        t--;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
      while(!(RCC->CR & RCC_CR_HSEON) && t)   // wait to ON
 8000ba4:	4b83      	ldr	r3, [pc, #524]	; (8000db4 <SetClock100MHz+0x244>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d102      	bne.n	8000bb6 <SetClock100MHz+0x46>
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1f3      	bne.n	8000b9e <SetClock100MHz+0x2e>
      if (!t)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d101      	bne.n	8000bc0 <SetClock100MHz+0x50>
        return false;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e0f3      	b.n	8000da8 <SetClock100MHz+0x238>
    }
  }

  if (!(RCC->CR & RCC_CR_HSION))      // HSI not running ?
 8000bc0:	4b7c      	ldr	r3, [pc, #496]	; (8000db4 <SetClock100MHz+0x244>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d119      	bne.n	8000c00 <SetClock100MHz+0x90>
  {
    RCC->CR |= RCC_CR_HSION;          // enable
 8000bcc:	4a79      	ldr	r2, [pc, #484]	; (8000db4 <SetClock100MHz+0x244>)
 8000bce:	4b79      	ldr	r3, [pc, #484]	; (8000db4 <SetClock100MHz+0x244>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	6013      	str	r3, [r2, #0]

    t = 100;
 8000bd8:	2364      	movs	r3, #100	; 0x64
 8000bda:	60fb      	str	r3, [r7, #12]
    while(!(RCC->CR & RCC_CR_HSION) && t)   // wait to ON
 8000bdc:	e002      	b.n	8000be4 <SetClock100MHz+0x74>
      t--;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
    while(!(RCC->CR & RCC_CR_HSION) && t)   // wait to ON
 8000be4:	4b73      	ldr	r3, [pc, #460]	; (8000db4 <SetClock100MHz+0x244>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <SetClock100MHz+0x86>
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1f3      	bne.n	8000bde <SetClock100MHz+0x6e>
    if (!t)
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d101      	bne.n	8000c00 <SetClock100MHz+0x90>
      return false;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	e0d3      	b.n	8000da8 <SetClock100MHz+0x238>
  }

  if (RCC->CR & RCC_CR_PLLON)         // bezi ?
 8000c00:	4b6c      	ldr	r3, [pc, #432]	; (8000db4 <SetClock100MHz+0x244>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d005      	beq.n	8000c18 <SetClock100MHz+0xa8>
  {
    RCC->CR &= ~RCC_CR_PLLON;         // stop it
 8000c0c:	4a69      	ldr	r2, [pc, #420]	; (8000db4 <SetClock100MHz+0x244>)
 8000c0e:	4b69      	ldr	r3, [pc, #420]	; (8000db4 <SetClock100MHz+0x244>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c16:	6013      	str	r3, [r2, #0]
  }

  RCC->CFGR &= ~(RCC_CFGR_SW);  // SW = 00 - HSI as source
 8000c18:	4a66      	ldr	r2, [pc, #408]	; (8000db4 <SetClock100MHz+0x244>)
 8000c1a:	4b66      	ldr	r3, [pc, #408]	; (8000db4 <SetClock100MHz+0x244>)
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f023 0303 	bic.w	r3, r3, #3
 8000c22:	6093      	str	r3, [r2, #8]

  RCC->CFGR = 0;       // RESET state, all off
 8000c24:	4b63      	ldr	r3, [pc, #396]	; (8000db4 <SetClock100MHz+0x244>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]

  RCC->CFGR |= 0
 8000c2a:	4a62      	ldr	r2, [pc, #392]	; (8000db4 <SetClock100MHz+0x244>)
 8000c2c:	4b61      	ldr	r3, [pc, #388]	; (8000db4 <SetClock100MHz+0x244>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c34:	6093      	str	r3, [r2, #8]
      | 0 << 13        // PPRE2 [15:13] = 0xx = not divided
      | 4 << 10        // PPRE1 [12:10] = 100 = /2 (max. 50MHz)
      | 0 << 4         // HPRE  [7:4] = 0xxx = not divided
      ;

  if (clkSrc == clockSourceHSI)
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d129      	bne.n	8000c90 <SetClock100MHz+0x120>
  {
    RCC->PLLCFGR &= ~(1 << 22);   // PLLSRC [22] = 0 = HSI as source
 8000c3c:	4a5d      	ldr	r2, [pc, #372]	; (8000db4 <SetClock100MHz+0x244>)
 8000c3e:	4b5d      	ldr	r3, [pc, #372]	; (8000db4 <SetClock100MHz+0x244>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000c46:	6053      	str	r3, [r2, #4]

    RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;
 8000c48:	4a5a      	ldr	r2, [pc, #360]	; (8000db4 <SetClock100MHz+0x244>)
 8000c4a:	4b5a      	ldr	r3, [pc, #360]	; (8000db4 <SetClock100MHz+0x244>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c52:	6053      	str	r3, [r2, #4]
    RCC->PLLCFGR |= 8 << 0;       // PLLM [5:0] = odpovida deleni
 8000c54:	4a57      	ldr	r2, [pc, #348]	; (8000db4 <SetClock100MHz+0x244>)
 8000c56:	4b57      	ldr	r3, [pc, #348]	; (8000db4 <SetClock100MHz+0x244>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f043 0308 	orr.w	r3, r3, #8
 8000c5e:	6053      	str	r3, [r2, #4]
    RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;
 8000c60:	4a54      	ldr	r2, [pc, #336]	; (8000db4 <SetClock100MHz+0x244>)
 8000c62:	4b54      	ldr	r3, [pc, #336]	; (8000db4 <SetClock100MHz+0x244>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c6e:	6053      	str	r3, [r2, #4]
    RCC->PLLCFGR |= 100 << 6;     // PLLN [14:6] = odpovida deleni
 8000c70:	4a50      	ldr	r2, [pc, #320]	; (8000db4 <SetClock100MHz+0x244>)
 8000c72:	4b50      	ldr	r3, [pc, #320]	; (8000db4 <SetClock100MHz+0x244>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8000c7a:	6053      	str	r3, [r2, #4]
    RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;
 8000c7c:	4a4d      	ldr	r2, [pc, #308]	; (8000db4 <SetClock100MHz+0x244>)
 8000c7e:	4b4d      	ldr	r3, [pc, #308]	; (8000db4 <SetClock100MHz+0x244>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000c86:	6053      	str	r3, [r2, #4]
    RCC->PLLCFGR |= 0 << 16;      // PLLP [17:16] = 00 = /2
 8000c88:	4a4a      	ldr	r2, [pc, #296]	; (8000db4 <SetClock100MHz+0x244>)
 8000c8a:	4b4a      	ldr	r3, [pc, #296]	; (8000db4 <SetClock100MHz+0x244>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	6053      	str	r3, [r2, #4]
  }

  if (clkSrc == clockSourceHSE)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d12f      	bne.n	8000cf6 <SetClock100MHz+0x186>
  {
    RCC->PLLCFGR &= ~(1 << 22);   // PLLSRC [22] = 0 = HSI as source
 8000c96:	4a47      	ldr	r2, [pc, #284]	; (8000db4 <SetClock100MHz+0x244>)
 8000c98:	4b46      	ldr	r3, [pc, #280]	; (8000db4 <SetClock100MHz+0x244>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000ca0:	6053      	str	r3, [r2, #4]
    RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;
 8000ca2:	4a44      	ldr	r2, [pc, #272]	; (8000db4 <SetClock100MHz+0x244>)
 8000ca4:	4b43      	ldr	r3, [pc, #268]	; (8000db4 <SetClock100MHz+0x244>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cac:	6053      	str	r3, [r2, #4]

    RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;
 8000cae:	4a41      	ldr	r2, [pc, #260]	; (8000db4 <SetClock100MHz+0x244>)
 8000cb0:	4b40      	ldr	r3, [pc, #256]	; (8000db4 <SetClock100MHz+0x244>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000cb8:	6053      	str	r3, [r2, #4]
    RCC->PLLCFGR |= 4 << 0;       // PLLM [5:0] = odpovida deleni
 8000cba:	4a3e      	ldr	r2, [pc, #248]	; (8000db4 <SetClock100MHz+0x244>)
 8000cbc:	4b3d      	ldr	r3, [pc, #244]	; (8000db4 <SetClock100MHz+0x244>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f043 0304 	orr.w	r3, r3, #4
 8000cc4:	6053      	str	r3, [r2, #4]
    RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;
 8000cc6:	4a3b      	ldr	r2, [pc, #236]	; (8000db4 <SetClock100MHz+0x244>)
 8000cc8:	4b3a      	ldr	r3, [pc, #232]	; (8000db4 <SetClock100MHz+0x244>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cd4:	6053      	str	r3, [r2, #4]
    RCC->PLLCFGR |= 100 << 6;     // PLLN [14:6] = odpovida deleni
 8000cd6:	4a37      	ldr	r2, [pc, #220]	; (8000db4 <SetClock100MHz+0x244>)
 8000cd8:	4b36      	ldr	r3, [pc, #216]	; (8000db4 <SetClock100MHz+0x244>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8000ce0:	6053      	str	r3, [r2, #4]
    RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;
 8000ce2:	4a34      	ldr	r2, [pc, #208]	; (8000db4 <SetClock100MHz+0x244>)
 8000ce4:	4b33      	ldr	r3, [pc, #204]	; (8000db4 <SetClock100MHz+0x244>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000cec:	6053      	str	r3, [r2, #4]
    RCC->PLLCFGR |= 0 << 16;      // PLLP [17:16] = 00 = /2
 8000cee:	4a31      	ldr	r2, [pc, #196]	; (8000db4 <SetClock100MHz+0x244>)
 8000cf0:	4b30      	ldr	r3, [pc, #192]	; (8000db4 <SetClock100MHz+0x244>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	6053      	str	r3, [r2, #4]
  }

  RCC->CR |= RCC_CR_PLLON;          // enable
 8000cf6:	4a2f      	ldr	r2, [pc, #188]	; (8000db4 <SetClock100MHz+0x244>)
 8000cf8:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <SetClock100MHz+0x244>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d00:	6013      	str	r3, [r2, #0]

  t = 100;
 8000d02:	2364      	movs	r3, #100	; 0x64
 8000d04:	60fb      	str	r3, [r7, #12]
  while(!(RCC->CR & RCC_CR_PLLON) && t)   // wait to ON
 8000d06:	e002      	b.n	8000d0e <SetClock100MHz+0x19e>
    t--;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
  while(!(RCC->CR & RCC_CR_PLLON) && t)   // wait to ON
 8000d0e:	4b29      	ldr	r3, [pc, #164]	; (8000db4 <SetClock100MHz+0x244>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d102      	bne.n	8000d20 <SetClock100MHz+0x1b0>
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1f3      	bne.n	8000d08 <SetClock100MHz+0x198>
  if (!t)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d101      	bne.n	8000d2a <SetClock100MHz+0x1ba>
    return false;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e03e      	b.n	8000da8 <SetClock100MHz+0x238>

  // Nastavení waitState... pokud dám rychlejí frekvenci ne zvládá flashka vydávat

  // RM - 3.4 Read interface
  FLASH->ACR &= ~(0x0f << 0);     // LATENCY [3:0] = 0000
 8000d2a:	4a23      	ldr	r2, [pc, #140]	; (8000db8 <SetClock100MHz+0x248>)
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <SetClock100MHz+0x248>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f023 030f 	bic.w	r3, r3, #15
 8000d34:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= (2 << 0);         // 3 WS
 8000d36:	4a20      	ldr	r2, [pc, #128]	; (8000db8 <SetClock100MHz+0x248>)
 8000d38:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <SetClock100MHz+0x248>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6013      	str	r3, [r2, #0]

  FLASH->ACR |= FLASH_ACR_ICEN;
 8000d42:	4a1d      	ldr	r2, [pc, #116]	; (8000db8 <SetClock100MHz+0x248>)
 8000d44:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <SetClock100MHz+0x248>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4c:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_ACR_DCEN;
 8000d4e:	4a1a      	ldr	r2, [pc, #104]	; (8000db8 <SetClock100MHz+0x248>)
 8000d50:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <SetClock100MHz+0x248>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d58:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_ACR_PRFTEN;
 8000d5a:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <SetClock100MHz+0x248>)
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <SetClock100MHz+0x248>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d64:	6013      	str	r3, [r2, #0]

  PWR->CR |= PWR_CR_VOS_0 | PWR_CR_VOS_1;   // scale mode 1 - req. for 100MHz
 8000d66:	4a15      	ldr	r2, [pc, #84]	; (8000dbc <SetClock100MHz+0x24c>)
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <SetClock100MHz+0x24c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d70:	6013      	str	r3, [r2, #0]

  RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000d72:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <SetClock100MHz+0x244>)
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <SetClock100MHz+0x244>)
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6093      	str	r3, [r2, #8]
  t = 100;
 8000d7e:	2364      	movs	r3, #100	; 0x64
 8000d80:	60fb      	str	r3, [r7, #12]
  while(!((RCC->CFGR & 0x0c) == RCC_CFGR_SWS_PLL) && t)   // wait to verify SWS
 8000d82:	e002      	b.n	8000d8a <SetClock100MHz+0x21a>
    t--;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	60fb      	str	r3, [r7, #12]
  while(!((RCC->CFGR & 0x0c) == RCC_CFGR_SWS_PLL) && t)   // wait to verify SWS
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <SetClock100MHz+0x244>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f003 030c 	and.w	r3, r3, #12
 8000d92:	2b08      	cmp	r3, #8
 8000d94:	d002      	beq.n	8000d9c <SetClock100MHz+0x22c>
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1f3      	bne.n	8000d84 <SetClock100MHz+0x214>
  if (!t)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <SetClock100MHz+0x236>
    return false;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e000      	b.n	8000da8 <SetClock100MHz+0x238>

  return true;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40023c00 	.word	0x40023c00
 8000dbc:	40007000 	.word	0x40007000

08000dc0 <_sbrk>:
	while (1) {}		/* Make sure we hang here */
}


void * _sbrk(int32_t incr)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <_sbrk+0x38>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x16>
		heap_end = & end;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <_sbrk+0x38>)
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <_sbrk+0x3c>)
 8000dd4:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <_sbrk+0x38>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <_sbrk+0x38>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <_sbrk+0x38>)
 8000de6:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8000de8:	68fb      	ldr	r3, [r7, #12]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000090 	.word	0x20000090
 8000dfc:	200000e0 	.word	0x200000e0

08000e00 <_close>:

int _close(int32_t file)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <_close+0x20>)
 8000e0a:	2258      	movs	r2, #88	; 0x58
 8000e0c:	601a      	str	r2, [r3, #0]
	return -1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200000dc 	.word	0x200000dc

08000e24 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <_fstat+0x20>)
 8000e30:	2258      	movs	r2, #88	; 0x58
 8000e32:	601a      	str	r2, [r3, #0]
	return -1;
 8000e34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	200000dc 	.word	0x200000dc

08000e48 <_lseek>:
	errno = ENOSYS;
	return 0;
}

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <_lseek+0x24>)
 8000e56:	2258      	movs	r2, #88	; 0x58
 8000e58:	601a      	str	r2, [r3, #0]
	return -1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	200000dc 	.word	0x200000dc

08000e70 <_write>:
// pomocna deklarace, asi to ten kompilátor pochopí e u je nìkde mám vytvoøený a nevytvoøí si je sám a kdy je pak najde v main, tak je pouívá tam odsud, nebo nevím
int Usart2Send(char c);
int Usart2Recived(void);

int _write(int32_t file, uint8_t *ptr, int32_t len)
{ // prvni parametr, jestli se jedná stdin, stdout a podobnì.. druhý parametr je ukazatel na data které se mají vysílat a tøetí parametr je délka dat, kolik se jich má vysílat (respektive u write pøijmout)
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]


	for(int i = 0;i<len;i++)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	e009      	b.n	8000e96 <_write+0x26>
	{
		Usart2Send(ptr[i]);
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	68ba      	ldr	r2, [r7, #8]
 8000e86:	4413      	add	r3, r2
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fb60 	bl	8000550 <Usart2Send>
	for(int i = 0;i<len;i++)
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	3301      	adds	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	dbf1      	blt.n	8000e82 <_write+0x12>
	}

	errno = 0; // priznak ze neni chbya chyby
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <_write+0x40>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]

	return len; // vratim kolik jsem jich odvisilal
 8000ea4:	687b      	ldr	r3, [r7, #4]

//	errno = ENOSYS; // ENOSYS je chybový pøíznak e funkce není implementována... priznak bez chyby je nula
//	return -1;

}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200000dc 	.word	0x200000dc

08000eb4 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]

	*ptr = Usart2Recived();
 8000ec0:	f7ff fb5e 	bl	8000580 <Usart2Recived>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	701a      	strb	r2, [r3, #0]

    errno = 0;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <_read+0x28>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]

	return 1; // budu vracet pouze jeden znak, pokud budu chtit vic, zavolam funkci nekolikrat (protoe Usar2Read je blokující, take aby zbyteènì neblokovala ne pøijdou vechny znaky)
 8000ed2:	2301      	movs	r3, #1


//	errno = ENOSYS;
//	return -1;
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200000dc 	.word	0x200000dc

08000ee0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee4:	4a16      	ldr	r2, [pc, #88]	; (8000f40 <SystemInit+0x60>)
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <SystemInit+0x60>)
 8000ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ef4:	4a13      	ldr	r2, [pc, #76]	; (8000f44 <SystemInit+0x64>)
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <SystemInit+0x64>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f00:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <SystemInit+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f06:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <SystemInit+0x64>)
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <SystemInit+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f14:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <SystemInit+0x64>)
 8000f18:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <SystemInit+0x68>)
 8000f1a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f1c:	4a09      	ldr	r2, [pc, #36]	; (8000f44 <SystemInit+0x64>)
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <SystemInit+0x64>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <SystemInit+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <SystemInit+0x60>)
 8000f30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f34:	609a      	str	r2, [r3, #8]
#endif
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00
 8000f44:	40023800 	.word	0x40023800
 8000f48:	24003010 	.word	0x24003010

08000f4c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	2302      	movs	r3, #2
 8000f64:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000f66:	4b31      	ldr	r3, [pc, #196]	; (800102c <SystemCoreClockUpdate+0xe0>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 030c 	and.w	r3, r3, #12
 8000f6e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	d007      	beq.n	8000f86 <SystemCoreClockUpdate+0x3a>
 8000f76:	2b08      	cmp	r3, #8
 8000f78:	d009      	beq.n	8000f8e <SystemCoreClockUpdate+0x42>
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d13d      	bne.n	8000ffa <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000f7e:	4b2c      	ldr	r3, [pc, #176]	; (8001030 <SystemCoreClockUpdate+0xe4>)
 8000f80:	4a2c      	ldr	r2, [pc, #176]	; (8001034 <SystemCoreClockUpdate+0xe8>)
 8000f82:	601a      	str	r2, [r3, #0]
      break;
 8000f84:	e03d      	b.n	8001002 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000f86:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <SystemCoreClockUpdate+0xe4>)
 8000f88:	4a2b      	ldr	r2, [pc, #172]	; (8001038 <SystemCoreClockUpdate+0xec>)
 8000f8a:	601a      	str	r2, [r3, #0]
      break;
 8000f8c:	e039      	b.n	8001002 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000f8e:	4b27      	ldr	r3, [pc, #156]	; (800102c <SystemCoreClockUpdate+0xe0>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	0d9b      	lsrs	r3, r3, #22
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f9a:	4b24      	ldr	r3, [pc, #144]	; (800102c <SystemCoreClockUpdate+0xe0>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fa2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00c      	beq.n	8000fc4 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000faa:	4a23      	ldr	r2, [pc, #140]	; (8001038 <SystemCoreClockUpdate+0xec>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	4a1e      	ldr	r2, [pc, #120]	; (800102c <SystemCoreClockUpdate+0xe0>)
 8000fb4:	6852      	ldr	r2, [r2, #4]
 8000fb6:	0992      	lsrs	r2, r2, #6
 8000fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000fbc:	fb02 f303 	mul.w	r3, r2, r3
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	e00b      	b.n	8000fdc <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <SystemCoreClockUpdate+0xe8>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fcc:	4a17      	ldr	r2, [pc, #92]	; (800102c <SystemCoreClockUpdate+0xe0>)
 8000fce:	6852      	ldr	r2, [r2, #4]
 8000fd0:	0992      	lsrs	r2, r2, #6
 8000fd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000fd6:	fb02 f303 	mul.w	r3, r2, r3
 8000fda:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <SystemCoreClockUpdate+0xe0>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	0c1b      	lsrs	r3, r3, #16
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff4:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <SystemCoreClockUpdate+0xe4>)
 8000ff6:	6013      	str	r3, [r2, #0]
      break;
 8000ff8:	e003      	b.n	8001002 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <SystemCoreClockUpdate+0xe4>)
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <SystemCoreClockUpdate+0xe8>)
 8000ffe:	601a      	str	r2, [r3, #0]
      break;
 8001000:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <SystemCoreClockUpdate+0xe0>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	091b      	lsrs	r3, r3, #4
 8001008:	f003 030f 	and.w	r3, r3, #15
 800100c:	4a0b      	ldr	r2, [pc, #44]	; (800103c <SystemCoreClockUpdate+0xf0>)
 800100e:	5cd3      	ldrb	r3, [r2, r3]
 8001010:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <SystemCoreClockUpdate+0xe4>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	fa22 f303 	lsr.w	r3, r2, r3
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <SystemCoreClockUpdate+0xe4>)
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	371c      	adds	r7, #28
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40023800 	.word	0x40023800
 8001030:	20000000 	.word	0x20000000
 8001034:	00f42400 	.word	0x00f42400
 8001038:	007a1200 	.word	0x007a1200
 800103c:	08001c14 	.word	0x08001c14

08001040 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8001040:	b480      	push	{r7}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
	int div = 1;
 800104c:	2301      	movs	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8001050:	e004      	b.n	800105c <ts_itoa+0x1c>
		div *= base;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	fb02 f303 	mul.w	r3, r2, r3
 800105a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	fbb2 f2f3 	udiv	r2, r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	429a      	cmp	r2, r3
 8001068:	d2f3      	bcs.n	8001052 <ts_itoa+0x12>

	while (div != 0)
 800106a:	e029      	b.n	80010c0 <ts_itoa+0x80>
	{
		int num = d/div;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	fbb2 f3f3 	udiv	r3, r2, r3
 8001074:	613b      	str	r3, [r7, #16]
		d = d%div;
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	fbb3 f1f2 	udiv	r1, r3, r2
 800107e:	fb02 f201 	mul.w	r2, r2, r1
 8001082:	1a9b      	subs	r3, r3, r2
 8001084:	60bb      	str	r3, [r7, #8]
		div /= base;
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	fb92 f3f3 	sdiv	r3, r2, r3
 800108e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	2b09      	cmp	r3, #9
 8001094:	dd0a      	ble.n	80010ac <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	1c59      	adds	r1, r3, #1
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	6011      	str	r1, [r2, #0]
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	3237      	adds	r2, #55	; 0x37
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	701a      	strb	r2, [r3, #0]
 80010aa:	e009      	b.n	80010c0 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	1c59      	adds	r1, r3, #1
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	6011      	str	r1, [r2, #0]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	3230      	adds	r2, #48	; 0x30
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1d2      	bne.n	800106c <ts_itoa+0x2c>
	}
}
 80010c6:	bf00      	nop
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b088      	sub	sp, #32
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80010e2:	e07d      	b.n	80011e0 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b25      	cmp	r3, #37	; 0x25
 80010ea:	d171      	bne.n	80011d0 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	3301      	adds	r3, #1
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b64      	cmp	r3, #100	; 0x64
 80010f8:	d01e      	beq.n	8001138 <ts_formatstring+0x66>
 80010fa:	2b64      	cmp	r3, #100	; 0x64
 80010fc:	dc06      	bgt.n	800110c <ts_formatstring+0x3a>
 80010fe:	2b58      	cmp	r3, #88	; 0x58
 8001100:	d050      	beq.n	80011a4 <ts_formatstring+0xd2>
 8001102:	2b63      	cmp	r3, #99	; 0x63
 8001104:	d00e      	beq.n	8001124 <ts_formatstring+0x52>
 8001106:	2b25      	cmp	r3, #37	; 0x25
 8001108:	d058      	beq.n	80011bc <ts_formatstring+0xea>
 800110a:	e05d      	b.n	80011c8 <ts_formatstring+0xf6>
 800110c:	2b73      	cmp	r3, #115	; 0x73
 800110e:	d02b      	beq.n	8001168 <ts_formatstring+0x96>
 8001110:	2b73      	cmp	r3, #115	; 0x73
 8001112:	dc02      	bgt.n	800111a <ts_formatstring+0x48>
 8001114:	2b69      	cmp	r3, #105	; 0x69
 8001116:	d00f      	beq.n	8001138 <ts_formatstring+0x66>
 8001118:	e056      	b.n	80011c8 <ts_formatstring+0xf6>
 800111a:	2b75      	cmp	r3, #117	; 0x75
 800111c:	d037      	beq.n	800118e <ts_formatstring+0xbc>
 800111e:	2b78      	cmp	r3, #120	; 0x78
 8001120:	d040      	beq.n	80011a4 <ts_formatstring+0xd2>
 8001122:	e051      	b.n	80011c8 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	60fa      	str	r2, [r7, #12]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	1d11      	adds	r1, r2, #4
 800112e:	6079      	str	r1, [r7, #4]
 8001130:	6812      	ldr	r2, [r2, #0]
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	701a      	strb	r2, [r3, #0]
				break;
 8001136:	e047      	b.n	80011c8 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	1d1a      	adds	r2, r3, #4
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	2b00      	cmp	r3, #0
 8001146:	da07      	bge.n	8001158 <ts_formatstring+0x86>
					{
						val *= -1;
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	425b      	negs	r3, r3
 800114c:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	60fa      	str	r2, [r7, #12]
 8001154:	222d      	movs	r2, #45	; 0x2d
 8001156:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8001158:	69f9      	ldr	r1, [r7, #28]
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	220a      	movs	r2, #10
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff6d 	bl	8001040 <ts_itoa>
				}
				break;
 8001166:	e02f      	b.n	80011c8 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	1d1a      	adds	r2, r3, #4
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8001172:	e007      	b.n	8001184 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	60fa      	str	r2, [r7, #12]
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	1c51      	adds	r1, r2, #1
 800117e:	61b9      	str	r1, [r7, #24]
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1f3      	bne.n	8001174 <ts_formatstring+0xa2>
					}
				}
				break;
 800118c:	e01c      	b.n	80011c8 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	1d1a      	adds	r2, r3, #4
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	6819      	ldr	r1, [r3, #0]
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	220a      	movs	r2, #10
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff4f 	bl	8001040 <ts_itoa>
				break;
 80011a2:	e011      	b.n	80011c8 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	1d1a      	adds	r2, r3, #4
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	2210      	movs	r2, #16
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff43 	bl	8001040 <ts_itoa>
				break;
 80011ba:	e005      	b.n	80011c8 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	1c5a      	adds	r2, r3, #1
 80011c0:	60fa      	str	r2, [r7, #12]
 80011c2:	2225      	movs	r2, #37	; 0x25
 80011c4:	701a      	strb	r2, [r3, #0]
				  break;
 80011c6:	bf00      	nop
			}
			fmt++;
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	3301      	adds	r3, #1
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	e007      	b.n	80011e0 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	60fa      	str	r2, [r7, #12]
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	1c51      	adds	r1, r2, #1
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	7812      	ldrb	r2, [r2, #0]
 80011de:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f47f af7d 	bne.w	80010e4 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	461a      	mov	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	1ad3      	subs	r3, r2, r3
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
	int length = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 800120e:	e081      	b.n	8001314 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b25      	cmp	r3, #37	; 0x25
 8001216:	d177      	bne.n	8001308 <ts_formatlength+0x108>
		{
			++fmt;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3301      	adds	r3, #1
 800121c:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	3b58      	subs	r3, #88	; 0x58
 8001224:	2b20      	cmp	r3, #32
 8001226:	d86a      	bhi.n	80012fe <ts_formatlength+0xfe>
 8001228:	a201      	add	r2, pc, #4	; (adr r2, 8001230 <ts_formatlength+0x30>)
 800122a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122e:	bf00      	nop
 8001230:	080012f1 	.word	0x080012f1
 8001234:	080012ff 	.word	0x080012ff
 8001238:	080012ff 	.word	0x080012ff
 800123c:	080012ff 	.word	0x080012ff
 8001240:	080012ff 	.word	0x080012ff
 8001244:	080012ff 	.word	0x080012ff
 8001248:	080012ff 	.word	0x080012ff
 800124c:	080012ff 	.word	0x080012ff
 8001250:	080012ff 	.word	0x080012ff
 8001254:	080012ff 	.word	0x080012ff
 8001258:	080012ff 	.word	0x080012ff
 800125c:	080012b5 	.word	0x080012b5
 8001260:	080012c3 	.word	0x080012c3
 8001264:	080012ff 	.word	0x080012ff
 8001268:	080012ff 	.word	0x080012ff
 800126c:	080012ff 	.word	0x080012ff
 8001270:	080012ff 	.word	0x080012ff
 8001274:	080012c3 	.word	0x080012c3
 8001278:	080012ff 	.word	0x080012ff
 800127c:	080012ff 	.word	0x080012ff
 8001280:	080012ff 	.word	0x080012ff
 8001284:	080012ff 	.word	0x080012ff
 8001288:	080012ff 	.word	0x080012ff
 800128c:	080012ff 	.word	0x080012ff
 8001290:	080012ff 	.word	0x080012ff
 8001294:	080012ff 	.word	0x080012ff
 8001298:	080012ff 	.word	0x080012ff
 800129c:	080012d1 	.word	0x080012d1
 80012a0:	080012ff 	.word	0x080012ff
 80012a4:	080012c3 	.word	0x080012c3
 80012a8:	080012ff 	.word	0x080012ff
 80012ac:	080012ff 	.word	0x080012ff
 80012b0:	080012f1 	.word	0x080012f1
			{
			  case 'c':
		  		  va_arg(va, int);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	3304      	adds	r3, #4
 80012b8:	603b      	str	r3, [r7, #0]
				  ++length;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	3301      	adds	r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
				  break;
 80012c0:	e025      	b.n	800130e <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	330b      	adds	r3, #11
 80012c6:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	3304      	adds	r3, #4
 80012cc:	603b      	str	r3, [r7, #0]
				  break;
 80012ce:	e01e      	b.n	800130e <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	1d1a      	adds	r2, r3, #4
 80012d4:	603a      	str	r2, [r7, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80012da:	e002      	b.n	80012e2 <ts_formatlength+0xe2>
			  			  ++length;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3301      	adds	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	60ba      	str	r2, [r7, #8]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f6      	bne.n	80012dc <ts_formatlength+0xdc>
			  	  }
				  break;
 80012ee:	e00e      	b.n	800130e <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3308      	adds	r3, #8
 80012f4:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	3304      	adds	r3, #4
 80012fa:	603b      	str	r3, [r7, #0]
				  break;
 80012fc:	e007      	b.n	800130e <ts_formatlength+0x10e>
			  default:
				  ++length;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	3301      	adds	r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
				  break;
 8001304:	bf00      	nop
 8001306:	e002      	b.n	800130e <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3301      	adds	r3, #1
 800130c:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3301      	adds	r3, #1
 8001312:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	f47f af79 	bne.w	8001210 <ts_formatlength+0x10>
	}
	return length;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 800132c:	b40f      	push	{r0, r1, r2, r3}
 800132e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
	int length = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 800133a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800133e:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8001340:	6839      	ldr	r1, [r7, #0]
 8001342:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001344:	f7ff ff5c 	bl	8001200 <ts_formatlength>
 8001348:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 800134a:	466b      	mov	r3, sp
 800134c:	461e      	mov	r6, r3
		char buf[length];
 800134e:	68f9      	ldr	r1, [r7, #12]
 8001350:	1e4b      	subs	r3, r1, #1
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	460b      	mov	r3, r1
 8001356:	461a      	mov	r2, r3
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8001360:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8001364:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8001368:	460b      	mov	r3, r1
 800136a:	461a      	mov	r2, r3
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	00dd      	lsls	r5, r3, #3
 8001372:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001376:	00d4      	lsls	r4, r2, #3
 8001378:	460b      	mov	r3, r1
 800137a:	3307      	adds	r3, #7
 800137c:	08db      	lsrs	r3, r3, #3
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	ebad 0d03 	sub.w	sp, sp, r3
 8001384:	466b      	mov	r3, sp
 8001386:	3300      	adds	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 800138a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800138e:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fe9b 	bl	80010d2 <ts_formatstring>
 800139c:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	4619      	mov	r1, r3
 80013a4:	2001      	movs	r0, #1
 80013a6:	f7ff fd63 	bl	8000e70 <_write>
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ba:	b004      	add	sp, #16
 80013bc:	4770      	bx	lr
	...

080013c0 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7fe ff05 	bl	80001d8 <strlen>
 80013ce:	4603      	mov	r3, r0
 80013d0:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	2001      	movs	r0, #1
 80013dc:	f7ff fd48 	bl	8000e70 <_write>
 80013e0:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 80013e2:	2201      	movs	r2, #1
 80013e4:	490b      	ldr	r1, [pc, #44]	; (8001414 <puts+0x54>)
 80013e6:	2001      	movs	r0, #1
 80013e8:	f7ff fd42 	bl	8000e70 <_write>
 80013ec:	4602      	mov	r2, r0
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4413      	add	r3, r2
 80013f2:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d102      	bne.n	8001404 <puts+0x44>
	{
		res = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	e002      	b.n	800140a <puts+0x4a>
	}
	else
	{
		res = EOF;
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
 8001408:	617b      	str	r3, [r7, #20]
	}

	return res;
 800140a:	697b      	ldr	r3, [r7, #20]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	08001c10 	.word	0x08001c10

08001418 <__libc_init_array>:
 8001418:	b570      	push	{r4, r5, r6, lr}
 800141a:	4e0d      	ldr	r6, [pc, #52]	; (8001450 <__libc_init_array+0x38>)
 800141c:	4c0d      	ldr	r4, [pc, #52]	; (8001454 <__libc_init_array+0x3c>)
 800141e:	1ba4      	subs	r4, r4, r6
 8001420:	10a4      	asrs	r4, r4, #2
 8001422:	2500      	movs	r5, #0
 8001424:	42a5      	cmp	r5, r4
 8001426:	d109      	bne.n	800143c <__libc_init_array+0x24>
 8001428:	4e0b      	ldr	r6, [pc, #44]	; (8001458 <__libc_init_array+0x40>)
 800142a:	4c0c      	ldr	r4, [pc, #48]	; (800145c <__libc_init_array+0x44>)
 800142c:	f000 fbd0 	bl	8001bd0 <_init>
 8001430:	1ba4      	subs	r4, r4, r6
 8001432:	10a4      	asrs	r4, r4, #2
 8001434:	2500      	movs	r5, #0
 8001436:	42a5      	cmp	r5, r4
 8001438:	d105      	bne.n	8001446 <__libc_init_array+0x2e>
 800143a:	bd70      	pop	{r4, r5, r6, pc}
 800143c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001440:	4798      	blx	r3
 8001442:	3501      	adds	r5, #1
 8001444:	e7ee      	b.n	8001424 <__libc_init_array+0xc>
 8001446:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800144a:	4798      	blx	r3
 800144c:	3501      	adds	r5, #1
 800144e:	e7f2      	b.n	8001436 <__libc_init_array+0x1e>
 8001450:	08001c88 	.word	0x08001c88
 8001454:	08001c88 	.word	0x08001c88
 8001458:	08001c88 	.word	0x08001c88
 800145c:	08001c8c 	.word	0x08001c8c

08001460 <setvbuf>:
 8001460:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001464:	461d      	mov	r5, r3
 8001466:	4b51      	ldr	r3, [pc, #324]	; (80015ac <setvbuf+0x14c>)
 8001468:	681e      	ldr	r6, [r3, #0]
 800146a:	4604      	mov	r4, r0
 800146c:	460f      	mov	r7, r1
 800146e:	4690      	mov	r8, r2
 8001470:	b126      	cbz	r6, 800147c <setvbuf+0x1c>
 8001472:	69b3      	ldr	r3, [r6, #24]
 8001474:	b913      	cbnz	r3, 800147c <setvbuf+0x1c>
 8001476:	4630      	mov	r0, r6
 8001478:	f000 f992 	bl	80017a0 <__sinit>
 800147c:	4b4c      	ldr	r3, [pc, #304]	; (80015b0 <setvbuf+0x150>)
 800147e:	429c      	cmp	r4, r3
 8001480:	d152      	bne.n	8001528 <setvbuf+0xc8>
 8001482:	6874      	ldr	r4, [r6, #4]
 8001484:	f1b8 0f02 	cmp.w	r8, #2
 8001488:	d006      	beq.n	8001498 <setvbuf+0x38>
 800148a:	f1b8 0f01 	cmp.w	r8, #1
 800148e:	f200 8089 	bhi.w	80015a4 <setvbuf+0x144>
 8001492:	2d00      	cmp	r5, #0
 8001494:	f2c0 8086 	blt.w	80015a4 <setvbuf+0x144>
 8001498:	4621      	mov	r1, r4
 800149a:	4630      	mov	r0, r6
 800149c:	f000 f916 	bl	80016cc <_fflush_r>
 80014a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014a2:	b141      	cbz	r1, 80014b6 <setvbuf+0x56>
 80014a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014a8:	4299      	cmp	r1, r3
 80014aa:	d002      	beq.n	80014b2 <setvbuf+0x52>
 80014ac:	4630      	mov	r0, r6
 80014ae:	f000 fa35 	bl	800191c <_free_r>
 80014b2:	2300      	movs	r3, #0
 80014b4:	6363      	str	r3, [r4, #52]	; 0x34
 80014b6:	2300      	movs	r3, #0
 80014b8:	61a3      	str	r3, [r4, #24]
 80014ba:	6063      	str	r3, [r4, #4]
 80014bc:	89a3      	ldrh	r3, [r4, #12]
 80014be:	061b      	lsls	r3, r3, #24
 80014c0:	d503      	bpl.n	80014ca <setvbuf+0x6a>
 80014c2:	6921      	ldr	r1, [r4, #16]
 80014c4:	4630      	mov	r0, r6
 80014c6:	f000 fa29 	bl	800191c <_free_r>
 80014ca:	89a3      	ldrh	r3, [r4, #12]
 80014cc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80014d0:	f023 0303 	bic.w	r3, r3, #3
 80014d4:	f1b8 0f02 	cmp.w	r8, #2
 80014d8:	81a3      	strh	r3, [r4, #12]
 80014da:	d05d      	beq.n	8001598 <setvbuf+0x138>
 80014dc:	ab01      	add	r3, sp, #4
 80014de:	466a      	mov	r2, sp
 80014e0:	4621      	mov	r1, r4
 80014e2:	4630      	mov	r0, r6
 80014e4:	f000 f9e6 	bl	80018b4 <__swhatbuf_r>
 80014e8:	89a3      	ldrh	r3, [r4, #12]
 80014ea:	4318      	orrs	r0, r3
 80014ec:	81a0      	strh	r0, [r4, #12]
 80014ee:	bb2d      	cbnz	r5, 800153c <setvbuf+0xdc>
 80014f0:	9d00      	ldr	r5, [sp, #0]
 80014f2:	4628      	mov	r0, r5
 80014f4:	f000 fa02 	bl	80018fc <malloc>
 80014f8:	4607      	mov	r7, r0
 80014fa:	2800      	cmp	r0, #0
 80014fc:	d14e      	bne.n	800159c <setvbuf+0x13c>
 80014fe:	f8dd 9000 	ldr.w	r9, [sp]
 8001502:	45a9      	cmp	r9, r5
 8001504:	d13c      	bne.n	8001580 <setvbuf+0x120>
 8001506:	f04f 30ff 	mov.w	r0, #4294967295
 800150a:	89a3      	ldrh	r3, [r4, #12]
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	81a3      	strh	r3, [r4, #12]
 8001512:	2300      	movs	r3, #0
 8001514:	60a3      	str	r3, [r4, #8]
 8001516:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800151a:	6023      	str	r3, [r4, #0]
 800151c:	6123      	str	r3, [r4, #16]
 800151e:	2301      	movs	r3, #1
 8001520:	6163      	str	r3, [r4, #20]
 8001522:	b003      	add	sp, #12
 8001524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001528:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <setvbuf+0x154>)
 800152a:	429c      	cmp	r4, r3
 800152c:	d101      	bne.n	8001532 <setvbuf+0xd2>
 800152e:	68b4      	ldr	r4, [r6, #8]
 8001530:	e7a8      	b.n	8001484 <setvbuf+0x24>
 8001532:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <setvbuf+0x158>)
 8001534:	429c      	cmp	r4, r3
 8001536:	bf08      	it	eq
 8001538:	68f4      	ldreq	r4, [r6, #12]
 800153a:	e7a3      	b.n	8001484 <setvbuf+0x24>
 800153c:	2f00      	cmp	r7, #0
 800153e:	d0d8      	beq.n	80014f2 <setvbuf+0x92>
 8001540:	69b3      	ldr	r3, [r6, #24]
 8001542:	b913      	cbnz	r3, 800154a <setvbuf+0xea>
 8001544:	4630      	mov	r0, r6
 8001546:	f000 f92b 	bl	80017a0 <__sinit>
 800154a:	f1b8 0f01 	cmp.w	r8, #1
 800154e:	bf08      	it	eq
 8001550:	89a3      	ldrheq	r3, [r4, #12]
 8001552:	6027      	str	r7, [r4, #0]
 8001554:	bf04      	itt	eq
 8001556:	f043 0301 	orreq.w	r3, r3, #1
 800155a:	81a3      	strheq	r3, [r4, #12]
 800155c:	89a3      	ldrh	r3, [r4, #12]
 800155e:	6127      	str	r7, [r4, #16]
 8001560:	f013 0008 	ands.w	r0, r3, #8
 8001564:	6165      	str	r5, [r4, #20]
 8001566:	d01b      	beq.n	80015a0 <setvbuf+0x140>
 8001568:	f013 0001 	ands.w	r0, r3, #1
 800156c:	bf18      	it	ne
 800156e:	426d      	negne	r5, r5
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	bf1d      	ittte	ne
 8001576:	60a3      	strne	r3, [r4, #8]
 8001578:	61a5      	strne	r5, [r4, #24]
 800157a:	4618      	movne	r0, r3
 800157c:	60a5      	streq	r5, [r4, #8]
 800157e:	e7d0      	b.n	8001522 <setvbuf+0xc2>
 8001580:	4648      	mov	r0, r9
 8001582:	f000 f9bb 	bl	80018fc <malloc>
 8001586:	4607      	mov	r7, r0
 8001588:	2800      	cmp	r0, #0
 800158a:	d0bc      	beq.n	8001506 <setvbuf+0xa6>
 800158c:	89a3      	ldrh	r3, [r4, #12]
 800158e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001592:	81a3      	strh	r3, [r4, #12]
 8001594:	464d      	mov	r5, r9
 8001596:	e7d3      	b.n	8001540 <setvbuf+0xe0>
 8001598:	2000      	movs	r0, #0
 800159a:	e7b6      	b.n	800150a <setvbuf+0xaa>
 800159c:	46a9      	mov	r9, r5
 800159e:	e7f5      	b.n	800158c <setvbuf+0x12c>
 80015a0:	60a0      	str	r0, [r4, #8]
 80015a2:	e7be      	b.n	8001522 <setvbuf+0xc2>
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	e7bb      	b.n	8001522 <setvbuf+0xc2>
 80015aa:	bf00      	nop
 80015ac:	20000004 	.word	0x20000004
 80015b0:	08001c48 	.word	0x08001c48
 80015b4:	08001c68 	.word	0x08001c68
 80015b8:	08001c28 	.word	0x08001c28

080015bc <__sflush_r>:
 80015bc:	898a      	ldrh	r2, [r1, #12]
 80015be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015c2:	4605      	mov	r5, r0
 80015c4:	0710      	lsls	r0, r2, #28
 80015c6:	460c      	mov	r4, r1
 80015c8:	d45a      	bmi.n	8001680 <__sflush_r+0xc4>
 80015ca:	684b      	ldr	r3, [r1, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	dc05      	bgt.n	80015dc <__sflush_r+0x20>
 80015d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	dc02      	bgt.n	80015dc <__sflush_r+0x20>
 80015d6:	2000      	movs	r0, #0
 80015d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015de:	2e00      	cmp	r6, #0
 80015e0:	d0f9      	beq.n	80015d6 <__sflush_r+0x1a>
 80015e2:	2300      	movs	r3, #0
 80015e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80015e8:	682f      	ldr	r7, [r5, #0]
 80015ea:	602b      	str	r3, [r5, #0]
 80015ec:	d033      	beq.n	8001656 <__sflush_r+0x9a>
 80015ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80015f0:	89a3      	ldrh	r3, [r4, #12]
 80015f2:	075a      	lsls	r2, r3, #29
 80015f4:	d505      	bpl.n	8001602 <__sflush_r+0x46>
 80015f6:	6863      	ldr	r3, [r4, #4]
 80015f8:	1ac0      	subs	r0, r0, r3
 80015fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80015fc:	b10b      	cbz	r3, 8001602 <__sflush_r+0x46>
 80015fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001600:	1ac0      	subs	r0, r0, r3
 8001602:	2300      	movs	r3, #0
 8001604:	4602      	mov	r2, r0
 8001606:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001608:	6a21      	ldr	r1, [r4, #32]
 800160a:	4628      	mov	r0, r5
 800160c:	47b0      	blx	r6
 800160e:	1c43      	adds	r3, r0, #1
 8001610:	89a3      	ldrh	r3, [r4, #12]
 8001612:	d106      	bne.n	8001622 <__sflush_r+0x66>
 8001614:	6829      	ldr	r1, [r5, #0]
 8001616:	291d      	cmp	r1, #29
 8001618:	d84b      	bhi.n	80016b2 <__sflush_r+0xf6>
 800161a:	4a2b      	ldr	r2, [pc, #172]	; (80016c8 <__sflush_r+0x10c>)
 800161c:	40ca      	lsrs	r2, r1
 800161e:	07d6      	lsls	r6, r2, #31
 8001620:	d547      	bpl.n	80016b2 <__sflush_r+0xf6>
 8001622:	2200      	movs	r2, #0
 8001624:	6062      	str	r2, [r4, #4]
 8001626:	04d9      	lsls	r1, r3, #19
 8001628:	6922      	ldr	r2, [r4, #16]
 800162a:	6022      	str	r2, [r4, #0]
 800162c:	d504      	bpl.n	8001638 <__sflush_r+0x7c>
 800162e:	1c42      	adds	r2, r0, #1
 8001630:	d101      	bne.n	8001636 <__sflush_r+0x7a>
 8001632:	682b      	ldr	r3, [r5, #0]
 8001634:	b903      	cbnz	r3, 8001638 <__sflush_r+0x7c>
 8001636:	6560      	str	r0, [r4, #84]	; 0x54
 8001638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800163a:	602f      	str	r7, [r5, #0]
 800163c:	2900      	cmp	r1, #0
 800163e:	d0ca      	beq.n	80015d6 <__sflush_r+0x1a>
 8001640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001644:	4299      	cmp	r1, r3
 8001646:	d002      	beq.n	800164e <__sflush_r+0x92>
 8001648:	4628      	mov	r0, r5
 800164a:	f000 f967 	bl	800191c <_free_r>
 800164e:	2000      	movs	r0, #0
 8001650:	6360      	str	r0, [r4, #52]	; 0x34
 8001652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001656:	6a21      	ldr	r1, [r4, #32]
 8001658:	2301      	movs	r3, #1
 800165a:	4628      	mov	r0, r5
 800165c:	47b0      	blx	r6
 800165e:	1c41      	adds	r1, r0, #1
 8001660:	d1c6      	bne.n	80015f0 <__sflush_r+0x34>
 8001662:	682b      	ldr	r3, [r5, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0c3      	beq.n	80015f0 <__sflush_r+0x34>
 8001668:	2b1d      	cmp	r3, #29
 800166a:	d001      	beq.n	8001670 <__sflush_r+0xb4>
 800166c:	2b16      	cmp	r3, #22
 800166e:	d101      	bne.n	8001674 <__sflush_r+0xb8>
 8001670:	602f      	str	r7, [r5, #0]
 8001672:	e7b0      	b.n	80015d6 <__sflush_r+0x1a>
 8001674:	89a3      	ldrh	r3, [r4, #12]
 8001676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800167a:	81a3      	strh	r3, [r4, #12]
 800167c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001680:	690f      	ldr	r7, [r1, #16]
 8001682:	2f00      	cmp	r7, #0
 8001684:	d0a7      	beq.n	80015d6 <__sflush_r+0x1a>
 8001686:	0793      	lsls	r3, r2, #30
 8001688:	680e      	ldr	r6, [r1, #0]
 800168a:	bf08      	it	eq
 800168c:	694b      	ldreq	r3, [r1, #20]
 800168e:	600f      	str	r7, [r1, #0]
 8001690:	bf18      	it	ne
 8001692:	2300      	movne	r3, #0
 8001694:	eba6 0807 	sub.w	r8, r6, r7
 8001698:	608b      	str	r3, [r1, #8]
 800169a:	f1b8 0f00 	cmp.w	r8, #0
 800169e:	dd9a      	ble.n	80015d6 <__sflush_r+0x1a>
 80016a0:	4643      	mov	r3, r8
 80016a2:	463a      	mov	r2, r7
 80016a4:	6a21      	ldr	r1, [r4, #32]
 80016a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80016a8:	4628      	mov	r0, r5
 80016aa:	47b0      	blx	r6
 80016ac:	2800      	cmp	r0, #0
 80016ae:	dc07      	bgt.n	80016c0 <__sflush_r+0x104>
 80016b0:	89a3      	ldrh	r3, [r4, #12]
 80016b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016b6:	81a3      	strh	r3, [r4, #12]
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016c0:	4407      	add	r7, r0
 80016c2:	eba8 0800 	sub.w	r8, r8, r0
 80016c6:	e7e8      	b.n	800169a <__sflush_r+0xde>
 80016c8:	20400001 	.word	0x20400001

080016cc <_fflush_r>:
 80016cc:	b538      	push	{r3, r4, r5, lr}
 80016ce:	690b      	ldr	r3, [r1, #16]
 80016d0:	4605      	mov	r5, r0
 80016d2:	460c      	mov	r4, r1
 80016d4:	b1db      	cbz	r3, 800170e <_fflush_r+0x42>
 80016d6:	b118      	cbz	r0, 80016e0 <_fflush_r+0x14>
 80016d8:	6983      	ldr	r3, [r0, #24]
 80016da:	b90b      	cbnz	r3, 80016e0 <_fflush_r+0x14>
 80016dc:	f000 f860 	bl	80017a0 <__sinit>
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <_fflush_r+0x48>)
 80016e2:	429c      	cmp	r4, r3
 80016e4:	d109      	bne.n	80016fa <_fflush_r+0x2e>
 80016e6:	686c      	ldr	r4, [r5, #4]
 80016e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016ec:	b17b      	cbz	r3, 800170e <_fflush_r+0x42>
 80016ee:	4621      	mov	r1, r4
 80016f0:	4628      	mov	r0, r5
 80016f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016f6:	f7ff bf61 	b.w	80015bc <__sflush_r>
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <_fflush_r+0x4c>)
 80016fc:	429c      	cmp	r4, r3
 80016fe:	d101      	bne.n	8001704 <_fflush_r+0x38>
 8001700:	68ac      	ldr	r4, [r5, #8]
 8001702:	e7f1      	b.n	80016e8 <_fflush_r+0x1c>
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <_fflush_r+0x50>)
 8001706:	429c      	cmp	r4, r3
 8001708:	bf08      	it	eq
 800170a:	68ec      	ldreq	r4, [r5, #12]
 800170c:	e7ec      	b.n	80016e8 <_fflush_r+0x1c>
 800170e:	2000      	movs	r0, #0
 8001710:	bd38      	pop	{r3, r4, r5, pc}
 8001712:	bf00      	nop
 8001714:	08001c48 	.word	0x08001c48
 8001718:	08001c68 	.word	0x08001c68
 800171c:	08001c28 	.word	0x08001c28

08001720 <_cleanup_r>:
 8001720:	4901      	ldr	r1, [pc, #4]	; (8001728 <_cleanup_r+0x8>)
 8001722:	f000 b8a9 	b.w	8001878 <_fwalk_reent>
 8001726:	bf00      	nop
 8001728:	080016cd 	.word	0x080016cd

0800172c <std.isra.0>:
 800172c:	2300      	movs	r3, #0
 800172e:	b510      	push	{r4, lr}
 8001730:	4604      	mov	r4, r0
 8001732:	6003      	str	r3, [r0, #0]
 8001734:	6043      	str	r3, [r0, #4]
 8001736:	6083      	str	r3, [r0, #8]
 8001738:	8181      	strh	r1, [r0, #12]
 800173a:	6643      	str	r3, [r0, #100]	; 0x64
 800173c:	81c2      	strh	r2, [r0, #14]
 800173e:	6103      	str	r3, [r0, #16]
 8001740:	6143      	str	r3, [r0, #20]
 8001742:	6183      	str	r3, [r0, #24]
 8001744:	4619      	mov	r1, r3
 8001746:	2208      	movs	r2, #8
 8001748:	305c      	adds	r0, #92	; 0x5c
 800174a:	f000 f8df 	bl	800190c <memset>
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <std.isra.0+0x38>)
 8001750:	6263      	str	r3, [r4, #36]	; 0x24
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <std.isra.0+0x3c>)
 8001754:	62a3      	str	r3, [r4, #40]	; 0x28
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <std.isra.0+0x40>)
 8001758:	62e3      	str	r3, [r4, #44]	; 0x2c
 800175a:	4b05      	ldr	r3, [pc, #20]	; (8001770 <std.isra.0+0x44>)
 800175c:	6224      	str	r4, [r4, #32]
 800175e:	6323      	str	r3, [r4, #48]	; 0x30
 8001760:	bd10      	pop	{r4, pc}
 8001762:	bf00      	nop
 8001764:	08001a95 	.word	0x08001a95
 8001768:	08001ab7 	.word	0x08001ab7
 800176c:	08001aef 	.word	0x08001aef
 8001770:	08001b13 	.word	0x08001b13

08001774 <__sfmoreglue>:
 8001774:	b570      	push	{r4, r5, r6, lr}
 8001776:	1e4a      	subs	r2, r1, #1
 8001778:	2568      	movs	r5, #104	; 0x68
 800177a:	4355      	muls	r5, r2
 800177c:	460e      	mov	r6, r1
 800177e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001782:	f000 f919 	bl	80019b8 <_malloc_r>
 8001786:	4604      	mov	r4, r0
 8001788:	b140      	cbz	r0, 800179c <__sfmoreglue+0x28>
 800178a:	2100      	movs	r1, #0
 800178c:	e880 0042 	stmia.w	r0, {r1, r6}
 8001790:	300c      	adds	r0, #12
 8001792:	60a0      	str	r0, [r4, #8]
 8001794:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001798:	f000 f8b8 	bl	800190c <memset>
 800179c:	4620      	mov	r0, r4
 800179e:	bd70      	pop	{r4, r5, r6, pc}

080017a0 <__sinit>:
 80017a0:	6983      	ldr	r3, [r0, #24]
 80017a2:	b510      	push	{r4, lr}
 80017a4:	4604      	mov	r4, r0
 80017a6:	bb33      	cbnz	r3, 80017f6 <__sinit+0x56>
 80017a8:	6483      	str	r3, [r0, #72]	; 0x48
 80017aa:	64c3      	str	r3, [r0, #76]	; 0x4c
 80017ac:	6503      	str	r3, [r0, #80]	; 0x50
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <__sinit+0x58>)
 80017b0:	4a12      	ldr	r2, [pc, #72]	; (80017fc <__sinit+0x5c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6282      	str	r2, [r0, #40]	; 0x28
 80017b6:	4298      	cmp	r0, r3
 80017b8:	bf04      	itt	eq
 80017ba:	2301      	moveq	r3, #1
 80017bc:	6183      	streq	r3, [r0, #24]
 80017be:	f000 f81f 	bl	8001800 <__sfp>
 80017c2:	6060      	str	r0, [r4, #4]
 80017c4:	4620      	mov	r0, r4
 80017c6:	f000 f81b 	bl	8001800 <__sfp>
 80017ca:	60a0      	str	r0, [r4, #8]
 80017cc:	4620      	mov	r0, r4
 80017ce:	f000 f817 	bl	8001800 <__sfp>
 80017d2:	2200      	movs	r2, #0
 80017d4:	60e0      	str	r0, [r4, #12]
 80017d6:	2104      	movs	r1, #4
 80017d8:	6860      	ldr	r0, [r4, #4]
 80017da:	f7ff ffa7 	bl	800172c <std.isra.0>
 80017de:	2201      	movs	r2, #1
 80017e0:	2109      	movs	r1, #9
 80017e2:	68a0      	ldr	r0, [r4, #8]
 80017e4:	f7ff ffa2 	bl	800172c <std.isra.0>
 80017e8:	2202      	movs	r2, #2
 80017ea:	2112      	movs	r1, #18
 80017ec:	68e0      	ldr	r0, [r4, #12]
 80017ee:	f7ff ff9d 	bl	800172c <std.isra.0>
 80017f2:	2301      	movs	r3, #1
 80017f4:	61a3      	str	r3, [r4, #24]
 80017f6:	bd10      	pop	{r4, pc}
 80017f8:	08001c24 	.word	0x08001c24
 80017fc:	08001721 	.word	0x08001721

08001800 <__sfp>:
 8001800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001802:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <__sfp+0x74>)
 8001804:	681e      	ldr	r6, [r3, #0]
 8001806:	69b3      	ldr	r3, [r6, #24]
 8001808:	4607      	mov	r7, r0
 800180a:	b913      	cbnz	r3, 8001812 <__sfp+0x12>
 800180c:	4630      	mov	r0, r6
 800180e:	f7ff ffc7 	bl	80017a0 <__sinit>
 8001812:	3648      	adds	r6, #72	; 0x48
 8001814:	68b4      	ldr	r4, [r6, #8]
 8001816:	6873      	ldr	r3, [r6, #4]
 8001818:	3b01      	subs	r3, #1
 800181a:	d503      	bpl.n	8001824 <__sfp+0x24>
 800181c:	6833      	ldr	r3, [r6, #0]
 800181e:	b133      	cbz	r3, 800182e <__sfp+0x2e>
 8001820:	6836      	ldr	r6, [r6, #0]
 8001822:	e7f7      	b.n	8001814 <__sfp+0x14>
 8001824:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001828:	b16d      	cbz	r5, 8001846 <__sfp+0x46>
 800182a:	3468      	adds	r4, #104	; 0x68
 800182c:	e7f4      	b.n	8001818 <__sfp+0x18>
 800182e:	2104      	movs	r1, #4
 8001830:	4638      	mov	r0, r7
 8001832:	f7ff ff9f 	bl	8001774 <__sfmoreglue>
 8001836:	6030      	str	r0, [r6, #0]
 8001838:	2800      	cmp	r0, #0
 800183a:	d1f1      	bne.n	8001820 <__sfp+0x20>
 800183c:	230c      	movs	r3, #12
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	4604      	mov	r4, r0
 8001842:	4620      	mov	r0, r4
 8001844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001846:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800184a:	81e3      	strh	r3, [r4, #14]
 800184c:	2301      	movs	r3, #1
 800184e:	81a3      	strh	r3, [r4, #12]
 8001850:	6665      	str	r5, [r4, #100]	; 0x64
 8001852:	6025      	str	r5, [r4, #0]
 8001854:	60a5      	str	r5, [r4, #8]
 8001856:	6065      	str	r5, [r4, #4]
 8001858:	6125      	str	r5, [r4, #16]
 800185a:	6165      	str	r5, [r4, #20]
 800185c:	61a5      	str	r5, [r4, #24]
 800185e:	2208      	movs	r2, #8
 8001860:	4629      	mov	r1, r5
 8001862:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001866:	f000 f851 	bl	800190c <memset>
 800186a:	6365      	str	r5, [r4, #52]	; 0x34
 800186c:	63a5      	str	r5, [r4, #56]	; 0x38
 800186e:	64a5      	str	r5, [r4, #72]	; 0x48
 8001870:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001872:	e7e6      	b.n	8001842 <__sfp+0x42>
 8001874:	08001c24 	.word	0x08001c24

08001878 <_fwalk_reent>:
 8001878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800187c:	4680      	mov	r8, r0
 800187e:	4689      	mov	r9, r1
 8001880:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001884:	2600      	movs	r6, #0
 8001886:	b914      	cbnz	r4, 800188e <_fwalk_reent+0x16>
 8001888:	4630      	mov	r0, r6
 800188a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800188e:	68a5      	ldr	r5, [r4, #8]
 8001890:	6867      	ldr	r7, [r4, #4]
 8001892:	3f01      	subs	r7, #1
 8001894:	d501      	bpl.n	800189a <_fwalk_reent+0x22>
 8001896:	6824      	ldr	r4, [r4, #0]
 8001898:	e7f5      	b.n	8001886 <_fwalk_reent+0xe>
 800189a:	89ab      	ldrh	r3, [r5, #12]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d907      	bls.n	80018b0 <_fwalk_reent+0x38>
 80018a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80018a4:	3301      	adds	r3, #1
 80018a6:	d003      	beq.n	80018b0 <_fwalk_reent+0x38>
 80018a8:	4629      	mov	r1, r5
 80018aa:	4640      	mov	r0, r8
 80018ac:	47c8      	blx	r9
 80018ae:	4306      	orrs	r6, r0
 80018b0:	3568      	adds	r5, #104	; 0x68
 80018b2:	e7ee      	b.n	8001892 <_fwalk_reent+0x1a>

080018b4 <__swhatbuf_r>:
 80018b4:	b570      	push	{r4, r5, r6, lr}
 80018b6:	460e      	mov	r6, r1
 80018b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018bc:	2900      	cmp	r1, #0
 80018be:	b090      	sub	sp, #64	; 0x40
 80018c0:	4614      	mov	r4, r2
 80018c2:	461d      	mov	r5, r3
 80018c4:	da07      	bge.n	80018d6 <__swhatbuf_r+0x22>
 80018c6:	2300      	movs	r3, #0
 80018c8:	602b      	str	r3, [r5, #0]
 80018ca:	89b3      	ldrh	r3, [r6, #12]
 80018cc:	061a      	lsls	r2, r3, #24
 80018ce:	d410      	bmi.n	80018f2 <__swhatbuf_r+0x3e>
 80018d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018d4:	e00e      	b.n	80018f4 <__swhatbuf_r+0x40>
 80018d6:	aa01      	add	r2, sp, #4
 80018d8:	f000 f942 	bl	8001b60 <_fstat_r>
 80018dc:	2800      	cmp	r0, #0
 80018de:	dbf2      	blt.n	80018c6 <__swhatbuf_r+0x12>
 80018e0:	9a02      	ldr	r2, [sp, #8]
 80018e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80018e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80018ea:	425a      	negs	r2, r3
 80018ec:	415a      	adcs	r2, r3
 80018ee:	602a      	str	r2, [r5, #0]
 80018f0:	e7ee      	b.n	80018d0 <__swhatbuf_r+0x1c>
 80018f2:	2340      	movs	r3, #64	; 0x40
 80018f4:	2000      	movs	r0, #0
 80018f6:	6023      	str	r3, [r4, #0]
 80018f8:	b010      	add	sp, #64	; 0x40
 80018fa:	bd70      	pop	{r4, r5, r6, pc}

080018fc <malloc>:
 80018fc:	4b02      	ldr	r3, [pc, #8]	; (8001908 <malloc+0xc>)
 80018fe:	4601      	mov	r1, r0
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	f000 b859 	b.w	80019b8 <_malloc_r>
 8001906:	bf00      	nop
 8001908:	20000004 	.word	0x20000004

0800190c <memset>:
 800190c:	4402      	add	r2, r0
 800190e:	4603      	mov	r3, r0
 8001910:	4293      	cmp	r3, r2
 8001912:	d100      	bne.n	8001916 <memset+0xa>
 8001914:	4770      	bx	lr
 8001916:	f803 1b01 	strb.w	r1, [r3], #1
 800191a:	e7f9      	b.n	8001910 <memset+0x4>

0800191c <_free_r>:
 800191c:	b538      	push	{r3, r4, r5, lr}
 800191e:	4605      	mov	r5, r0
 8001920:	2900      	cmp	r1, #0
 8001922:	d045      	beq.n	80019b0 <_free_r+0x94>
 8001924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001928:	1f0c      	subs	r4, r1, #4
 800192a:	2b00      	cmp	r3, #0
 800192c:	bfb8      	it	lt
 800192e:	18e4      	addlt	r4, r4, r3
 8001930:	f000 f93a 	bl	8001ba8 <__malloc_lock>
 8001934:	4a1f      	ldr	r2, [pc, #124]	; (80019b4 <_free_r+0x98>)
 8001936:	6813      	ldr	r3, [r2, #0]
 8001938:	4610      	mov	r0, r2
 800193a:	b933      	cbnz	r3, 800194a <_free_r+0x2e>
 800193c:	6063      	str	r3, [r4, #4]
 800193e:	6014      	str	r4, [r2, #0]
 8001940:	4628      	mov	r0, r5
 8001942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001946:	f000 b930 	b.w	8001baa <__malloc_unlock>
 800194a:	42a3      	cmp	r3, r4
 800194c:	d90c      	bls.n	8001968 <_free_r+0x4c>
 800194e:	6821      	ldr	r1, [r4, #0]
 8001950:	1862      	adds	r2, r4, r1
 8001952:	4293      	cmp	r3, r2
 8001954:	bf04      	itt	eq
 8001956:	681a      	ldreq	r2, [r3, #0]
 8001958:	685b      	ldreq	r3, [r3, #4]
 800195a:	6063      	str	r3, [r4, #4]
 800195c:	bf04      	itt	eq
 800195e:	1852      	addeq	r2, r2, r1
 8001960:	6022      	streq	r2, [r4, #0]
 8001962:	6004      	str	r4, [r0, #0]
 8001964:	e7ec      	b.n	8001940 <_free_r+0x24>
 8001966:	4613      	mov	r3, r2
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	b10a      	cbz	r2, 8001970 <_free_r+0x54>
 800196c:	42a2      	cmp	r2, r4
 800196e:	d9fa      	bls.n	8001966 <_free_r+0x4a>
 8001970:	6819      	ldr	r1, [r3, #0]
 8001972:	1858      	adds	r0, r3, r1
 8001974:	42a0      	cmp	r0, r4
 8001976:	d10b      	bne.n	8001990 <_free_r+0x74>
 8001978:	6820      	ldr	r0, [r4, #0]
 800197a:	4401      	add	r1, r0
 800197c:	1858      	adds	r0, r3, r1
 800197e:	4282      	cmp	r2, r0
 8001980:	6019      	str	r1, [r3, #0]
 8001982:	d1dd      	bne.n	8001940 <_free_r+0x24>
 8001984:	6810      	ldr	r0, [r2, #0]
 8001986:	6852      	ldr	r2, [r2, #4]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	4401      	add	r1, r0
 800198c:	6019      	str	r1, [r3, #0]
 800198e:	e7d7      	b.n	8001940 <_free_r+0x24>
 8001990:	d902      	bls.n	8001998 <_free_r+0x7c>
 8001992:	230c      	movs	r3, #12
 8001994:	602b      	str	r3, [r5, #0]
 8001996:	e7d3      	b.n	8001940 <_free_r+0x24>
 8001998:	6820      	ldr	r0, [r4, #0]
 800199a:	1821      	adds	r1, r4, r0
 800199c:	428a      	cmp	r2, r1
 800199e:	bf04      	itt	eq
 80019a0:	6811      	ldreq	r1, [r2, #0]
 80019a2:	6852      	ldreq	r2, [r2, #4]
 80019a4:	6062      	str	r2, [r4, #4]
 80019a6:	bf04      	itt	eq
 80019a8:	1809      	addeq	r1, r1, r0
 80019aa:	6021      	streq	r1, [r4, #0]
 80019ac:	605c      	str	r4, [r3, #4]
 80019ae:	e7c7      	b.n	8001940 <_free_r+0x24>
 80019b0:	bd38      	pop	{r3, r4, r5, pc}
 80019b2:	bf00      	nop
 80019b4:	20000094 	.word	0x20000094

080019b8 <_malloc_r>:
 80019b8:	b570      	push	{r4, r5, r6, lr}
 80019ba:	1ccd      	adds	r5, r1, #3
 80019bc:	f025 0503 	bic.w	r5, r5, #3
 80019c0:	3508      	adds	r5, #8
 80019c2:	2d0c      	cmp	r5, #12
 80019c4:	bf38      	it	cc
 80019c6:	250c      	movcc	r5, #12
 80019c8:	2d00      	cmp	r5, #0
 80019ca:	4606      	mov	r6, r0
 80019cc:	db01      	blt.n	80019d2 <_malloc_r+0x1a>
 80019ce:	42a9      	cmp	r1, r5
 80019d0:	d903      	bls.n	80019da <_malloc_r+0x22>
 80019d2:	230c      	movs	r3, #12
 80019d4:	6033      	str	r3, [r6, #0]
 80019d6:	2000      	movs	r0, #0
 80019d8:	bd70      	pop	{r4, r5, r6, pc}
 80019da:	f000 f8e5 	bl	8001ba8 <__malloc_lock>
 80019de:	4a23      	ldr	r2, [pc, #140]	; (8001a6c <_malloc_r+0xb4>)
 80019e0:	6814      	ldr	r4, [r2, #0]
 80019e2:	4621      	mov	r1, r4
 80019e4:	b991      	cbnz	r1, 8001a0c <_malloc_r+0x54>
 80019e6:	4c22      	ldr	r4, [pc, #136]	; (8001a70 <_malloc_r+0xb8>)
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	b91b      	cbnz	r3, 80019f4 <_malloc_r+0x3c>
 80019ec:	4630      	mov	r0, r6
 80019ee:	f000 f841 	bl	8001a74 <_sbrk_r>
 80019f2:	6020      	str	r0, [r4, #0]
 80019f4:	4629      	mov	r1, r5
 80019f6:	4630      	mov	r0, r6
 80019f8:	f000 f83c 	bl	8001a74 <_sbrk_r>
 80019fc:	1c43      	adds	r3, r0, #1
 80019fe:	d126      	bne.n	8001a4e <_malloc_r+0x96>
 8001a00:	230c      	movs	r3, #12
 8001a02:	6033      	str	r3, [r6, #0]
 8001a04:	4630      	mov	r0, r6
 8001a06:	f000 f8d0 	bl	8001baa <__malloc_unlock>
 8001a0a:	e7e4      	b.n	80019d6 <_malloc_r+0x1e>
 8001a0c:	680b      	ldr	r3, [r1, #0]
 8001a0e:	1b5b      	subs	r3, r3, r5
 8001a10:	d41a      	bmi.n	8001a48 <_malloc_r+0x90>
 8001a12:	2b0b      	cmp	r3, #11
 8001a14:	d90f      	bls.n	8001a36 <_malloc_r+0x7e>
 8001a16:	600b      	str	r3, [r1, #0]
 8001a18:	50cd      	str	r5, [r1, r3]
 8001a1a:	18cc      	adds	r4, r1, r3
 8001a1c:	4630      	mov	r0, r6
 8001a1e:	f000 f8c4 	bl	8001baa <__malloc_unlock>
 8001a22:	f104 000b 	add.w	r0, r4, #11
 8001a26:	1d23      	adds	r3, r4, #4
 8001a28:	f020 0007 	bic.w	r0, r0, #7
 8001a2c:	1ac3      	subs	r3, r0, r3
 8001a2e:	d01b      	beq.n	8001a68 <_malloc_r+0xb0>
 8001a30:	425a      	negs	r2, r3
 8001a32:	50e2      	str	r2, [r4, r3]
 8001a34:	bd70      	pop	{r4, r5, r6, pc}
 8001a36:	428c      	cmp	r4, r1
 8001a38:	bf0d      	iteet	eq
 8001a3a:	6863      	ldreq	r3, [r4, #4]
 8001a3c:	684b      	ldrne	r3, [r1, #4]
 8001a3e:	6063      	strne	r3, [r4, #4]
 8001a40:	6013      	streq	r3, [r2, #0]
 8001a42:	bf18      	it	ne
 8001a44:	460c      	movne	r4, r1
 8001a46:	e7e9      	b.n	8001a1c <_malloc_r+0x64>
 8001a48:	460c      	mov	r4, r1
 8001a4a:	6849      	ldr	r1, [r1, #4]
 8001a4c:	e7ca      	b.n	80019e4 <_malloc_r+0x2c>
 8001a4e:	1cc4      	adds	r4, r0, #3
 8001a50:	f024 0403 	bic.w	r4, r4, #3
 8001a54:	42a0      	cmp	r0, r4
 8001a56:	d005      	beq.n	8001a64 <_malloc_r+0xac>
 8001a58:	1a21      	subs	r1, r4, r0
 8001a5a:	4630      	mov	r0, r6
 8001a5c:	f000 f80a 	bl	8001a74 <_sbrk_r>
 8001a60:	3001      	adds	r0, #1
 8001a62:	d0cd      	beq.n	8001a00 <_malloc_r+0x48>
 8001a64:	6025      	str	r5, [r4, #0]
 8001a66:	e7d9      	b.n	8001a1c <_malloc_r+0x64>
 8001a68:	bd70      	pop	{r4, r5, r6, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000094 	.word	0x20000094
 8001a70:	20000098 	.word	0x20000098

08001a74 <_sbrk_r>:
 8001a74:	b538      	push	{r3, r4, r5, lr}
 8001a76:	4c06      	ldr	r4, [pc, #24]	; (8001a90 <_sbrk_r+0x1c>)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	4605      	mov	r5, r0
 8001a7c:	4608      	mov	r0, r1
 8001a7e:	6023      	str	r3, [r4, #0]
 8001a80:	f7ff f99e 	bl	8000dc0 <_sbrk>
 8001a84:	1c43      	adds	r3, r0, #1
 8001a86:	d102      	bne.n	8001a8e <_sbrk_r+0x1a>
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	b103      	cbz	r3, 8001a8e <_sbrk_r+0x1a>
 8001a8c:	602b      	str	r3, [r5, #0]
 8001a8e:	bd38      	pop	{r3, r4, r5, pc}
 8001a90:	200000dc 	.word	0x200000dc

08001a94 <__sread>:
 8001a94:	b510      	push	{r4, lr}
 8001a96:	460c      	mov	r4, r1
 8001a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a9c:	f000 f886 	bl	8001bac <_read_r>
 8001aa0:	2800      	cmp	r0, #0
 8001aa2:	bfab      	itete	ge
 8001aa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001aa6:	89a3      	ldrhlt	r3, [r4, #12]
 8001aa8:	181b      	addge	r3, r3, r0
 8001aaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001aae:	bfac      	ite	ge
 8001ab0:	6563      	strge	r3, [r4, #84]	; 0x54
 8001ab2:	81a3      	strhlt	r3, [r4, #12]
 8001ab4:	bd10      	pop	{r4, pc}

08001ab6 <__swrite>:
 8001ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aba:	461f      	mov	r7, r3
 8001abc:	898b      	ldrh	r3, [r1, #12]
 8001abe:	05db      	lsls	r3, r3, #23
 8001ac0:	4605      	mov	r5, r0
 8001ac2:	460c      	mov	r4, r1
 8001ac4:	4616      	mov	r6, r2
 8001ac6:	d505      	bpl.n	8001ad4 <__swrite+0x1e>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	2200      	movs	r2, #0
 8001acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ad0:	f000 f858 	bl	8001b84 <_lseek_r>
 8001ad4:	89a3      	ldrh	r3, [r4, #12]
 8001ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ade:	81a3      	strh	r3, [r4, #12]
 8001ae0:	4632      	mov	r2, r6
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	4628      	mov	r0, r5
 8001ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001aea:	f000 b817 	b.w	8001b1c <_write_r>

08001aee <__sseek>:
 8001aee:	b510      	push	{r4, lr}
 8001af0:	460c      	mov	r4, r1
 8001af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001af6:	f000 f845 	bl	8001b84 <_lseek_r>
 8001afa:	1c43      	adds	r3, r0, #1
 8001afc:	89a3      	ldrh	r3, [r4, #12]
 8001afe:	bf15      	itete	ne
 8001b00:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b0a:	81a3      	strheq	r3, [r4, #12]
 8001b0c:	bf18      	it	ne
 8001b0e:	81a3      	strhne	r3, [r4, #12]
 8001b10:	bd10      	pop	{r4, pc}

08001b12 <__sclose>:
 8001b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b16:	f000 b813 	b.w	8001b40 <_close_r>
	...

08001b1c <_write_r>:
 8001b1c:	b538      	push	{r3, r4, r5, lr}
 8001b1e:	4c07      	ldr	r4, [pc, #28]	; (8001b3c <_write_r+0x20>)
 8001b20:	4605      	mov	r5, r0
 8001b22:	4608      	mov	r0, r1
 8001b24:	4611      	mov	r1, r2
 8001b26:	2200      	movs	r2, #0
 8001b28:	6022      	str	r2, [r4, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f7ff f9a0 	bl	8000e70 <_write>
 8001b30:	1c43      	adds	r3, r0, #1
 8001b32:	d102      	bne.n	8001b3a <_write_r+0x1e>
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	b103      	cbz	r3, 8001b3a <_write_r+0x1e>
 8001b38:	602b      	str	r3, [r5, #0]
 8001b3a:	bd38      	pop	{r3, r4, r5, pc}
 8001b3c:	200000dc 	.word	0x200000dc

08001b40 <_close_r>:
 8001b40:	b538      	push	{r3, r4, r5, lr}
 8001b42:	4c06      	ldr	r4, [pc, #24]	; (8001b5c <_close_r+0x1c>)
 8001b44:	2300      	movs	r3, #0
 8001b46:	4605      	mov	r5, r0
 8001b48:	4608      	mov	r0, r1
 8001b4a:	6023      	str	r3, [r4, #0]
 8001b4c:	f7ff f958 	bl	8000e00 <_close>
 8001b50:	1c43      	adds	r3, r0, #1
 8001b52:	d102      	bne.n	8001b5a <_close_r+0x1a>
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	b103      	cbz	r3, 8001b5a <_close_r+0x1a>
 8001b58:	602b      	str	r3, [r5, #0]
 8001b5a:	bd38      	pop	{r3, r4, r5, pc}
 8001b5c:	200000dc 	.word	0x200000dc

08001b60 <_fstat_r>:
 8001b60:	b538      	push	{r3, r4, r5, lr}
 8001b62:	4c07      	ldr	r4, [pc, #28]	; (8001b80 <_fstat_r+0x20>)
 8001b64:	2300      	movs	r3, #0
 8001b66:	4605      	mov	r5, r0
 8001b68:	4608      	mov	r0, r1
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	6023      	str	r3, [r4, #0]
 8001b6e:	f7ff f959 	bl	8000e24 <_fstat>
 8001b72:	1c43      	adds	r3, r0, #1
 8001b74:	d102      	bne.n	8001b7c <_fstat_r+0x1c>
 8001b76:	6823      	ldr	r3, [r4, #0]
 8001b78:	b103      	cbz	r3, 8001b7c <_fstat_r+0x1c>
 8001b7a:	602b      	str	r3, [r5, #0]
 8001b7c:	bd38      	pop	{r3, r4, r5, pc}
 8001b7e:	bf00      	nop
 8001b80:	200000dc 	.word	0x200000dc

08001b84 <_lseek_r>:
 8001b84:	b538      	push	{r3, r4, r5, lr}
 8001b86:	4c07      	ldr	r4, [pc, #28]	; (8001ba4 <_lseek_r+0x20>)
 8001b88:	4605      	mov	r5, r0
 8001b8a:	4608      	mov	r0, r1
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	2200      	movs	r2, #0
 8001b90:	6022      	str	r2, [r4, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	f7ff f958 	bl	8000e48 <_lseek>
 8001b98:	1c43      	adds	r3, r0, #1
 8001b9a:	d102      	bne.n	8001ba2 <_lseek_r+0x1e>
 8001b9c:	6823      	ldr	r3, [r4, #0]
 8001b9e:	b103      	cbz	r3, 8001ba2 <_lseek_r+0x1e>
 8001ba0:	602b      	str	r3, [r5, #0]
 8001ba2:	bd38      	pop	{r3, r4, r5, pc}
 8001ba4:	200000dc 	.word	0x200000dc

08001ba8 <__malloc_lock>:
 8001ba8:	4770      	bx	lr

08001baa <__malloc_unlock>:
 8001baa:	4770      	bx	lr

08001bac <_read_r>:
 8001bac:	b538      	push	{r3, r4, r5, lr}
 8001bae:	4c07      	ldr	r4, [pc, #28]	; (8001bcc <_read_r+0x20>)
 8001bb0:	4605      	mov	r5, r0
 8001bb2:	4608      	mov	r0, r1
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	6022      	str	r2, [r4, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f7ff f97a 	bl	8000eb4 <_read>
 8001bc0:	1c43      	adds	r3, r0, #1
 8001bc2:	d102      	bne.n	8001bca <_read_r+0x1e>
 8001bc4:	6823      	ldr	r3, [r4, #0]
 8001bc6:	b103      	cbz	r3, 8001bca <_read_r+0x1e>
 8001bc8:	602b      	str	r3, [r5, #0]
 8001bca:	bd38      	pop	{r3, r4, r5, pc}
 8001bcc:	200000dc 	.word	0x200000dc

08001bd0 <_init>:
 8001bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd2:	bf00      	nop
 8001bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bd6:	bc08      	pop	{r3}
 8001bd8:	469e      	mov	lr, r3
 8001bda:	4770      	bx	lr

08001bdc <_fini>:
 8001bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bde:	bf00      	nop
 8001be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001be2:	bc08      	pop	{r3}
 8001be4:	469e      	mov	lr, r3
 8001be6:	4770      	bx	lr

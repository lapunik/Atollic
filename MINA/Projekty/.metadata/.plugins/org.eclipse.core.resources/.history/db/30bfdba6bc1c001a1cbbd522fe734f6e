/* Includes */
#include "nucleo_core.h"
#include "nucleo_uart.h"
#include "systick_ms.h"
#include "oled_1305.h"
#include "disp_hilevel.h"
#include <stdbool.h>
#include <stdlib.h>
#include <stdio.h>
#include "picture.h"
#if (HSE_VALUE != 8000000)
#error HSE_VALUE must be set to 8MHz - parameters of project (or system_stm32f4xx.c) !!
#endif

/**
 **===========================================================================
 **
 **  Abstract: main program
ik **
 **===========================================================================
 */

bool snih[snih_width][snih_height];
bool strom[strom_width][strom_height];
bool darek_velky[darek_velky_width][darek_velky_height];
bool darek_maly[darek_maly_width][darek_maly_height];

bool PictureInit(char *array_from,bool *array_to[], int width, int height)
{
    uint32_t slovo = 0;
    uint32_t bit = 0;

    // pøevedení HEX matice o 2048 prvcích (každý obsahuje 8bitù -> 16 384 hodnot) do BOOL matice 32*512 (16 384 true nebo false)
    for(int y = 0; y < height ; y++)
    {
        for(int x = 0 ; x < width ; x++)
        {

            array_to[x][y] = ((array_from[slovo] & (0x01 << bit)) == 0)?false:true;

            bit++;
            if(bit == 8)
            {
                bit = 0;
                slovo++;
            }

        }
    }

    return true;

}

bool DrawPicture(bool *array[],int x0, int y0, int width, int height,int posunX, int posunY, bool transparent)
{

    // okno pro vykreslení
    for(int y = 0; y < height ; y++)
    {
        for(int x = 0 ; x < width ; x++)
        {

            if((array[x][y])||(!transparent)) // pokud je co kreslit nebo pokud chci kreslit i "bílou", tak kresli
            {
                DISP_FillRect(x0+x+posunX,y0+y+posunY,1,1,array[x][y]);
            }



        }
    }

    return true;

}

void TIM2_IRQHandler()
{
    TIM2->SR &= ~TIM_SR_UIF; // shození pøíznaku (u SysTick není potøeba)

}

void print(int *arr[], int m, int n)
{
    int i, j;
    for (i = 0; i < m; i++){
        for (j = 0; j < n; j++)
        {

            char c = (char)((arr[i][j])-48);
            //char c = (char)((*((arr+i*n) + j))-48);
DISP_WriteChar(c);
        }
    }
}


int main(void)
{

    // ----- SYSTEM CLOCK --------------------------------------------------------------------------------------

    SystemClock_100MHz();
    SystemCoreClockUpdate();
    InitSystickDefault();

    // ----- SYSTEM CLOCK --------------------------------------------------------------------------------------
    // ----- SYSTEM GPIO ---------------------------------------------------------------------------------------

    Nucleo_SetPinGPIO(GPIOA, 0, input_pullup);
    Nucleo_SetPinGPIO(GPIOA,5, output);

    // ----- SYSTEM CLOCK --------------------------------------------------------------------------------------
    // ----- TIM2 ----------------------------------------------------------------------------------------------

    NVIC_EnableIRQ(TIM2_IRQn);

    // Povolení hodin sbìrnici:
    if(!(RCC->APB1ENR & RCC_APB1ENR_TIM2EN)) // APB1/APB2/AHB1/ Datasheet str. 15 je schéma co je ke které sbìrnici pøipojeno
    {
        RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
        RCC->APB1RSTR |= RCC_APB1RSTR_TIM2RST;
        RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM2RST;
    }

    // Nastavení timeru:
    TIM2->CR1 = TIM_CR1_DIR; // Dekrementace
    TIM2->CNT &= ~TIM_CNT_CNT; // Nulování counteru
    TIM2->DIER = TIM_DIER_UIE; // Nastavení generování pøerušení

    TIM2->PSC = (GetBusClock(timersClockAPB1)/ 1000000)-1;         // PSC: 1   [us]    =>      1     [MHz]
    TIM2->ARR = (1000 * 1000) - 1;                                 // ARR: 1   [s]     =>      1     [Hz]

    TIM2->CR1 |= TIM_CR1_CEN;

    // ----- TIM2 ----------------------------------------------------------------------------------------------
    // ----- OLED ----------------------------------------------------------------------------------------------
    OLED_Init();
    WaitMs(50);
    DISP_Clear();
    DISP_GotoXY(0, 0);
    DISP_SetFont(font_atari_8x8);

    // ----- OLED ----------------------------------------------------------------------------------------------


    PictureInit(darek_maly_byte,(bool**)darek_maly,darek_maly_width,darek_maly_height);
    PictureInit(darek_velky_byte,(bool**)darek_velky,darek_velky_width,darek_velky_height);
    PictureInit(snih_byte,(bool**)snih,snih_width,snih_height);
    PictureInit(strom_byte,(bool**)strom,strom_width,strom_height);

    DISP_Clear();

    //DrawPicture((bool**)snih,0,0,128,32,0,0,false);

    bool arr[][3] = {{1,2,3},{4,5,6},{7,8,9}};
    int m = 3;
    int n = 3;
    print((int **)arr, m, n);


    while (1)
    {



    }
}
